
AVR32 Template.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007650  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80009800  80009800  00009c00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       0000068c  80009a00  80009a00  00009e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  8000a08c  8000a08c  0000a48c  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         000005d0  00000008  8000a090  0000a808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000006f0  000005d8  000005d8  00000000  2**2
                  ALLOC
  9 .heap         0000e338  00000cc8  00000cc8  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  0000add8  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000e00  00000000  00000000  0000ae08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00001cf7  00000000  00000000  0000bc08  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0002c09e  00000000  00000000  0000d8ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00005c08  00000000  00000000  0003999d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00012d88  00000000  00000000  0003f5a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002420  00000000  00000000  00052330  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000886a  00000000  00000000  00054750  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000a609  00000000  00000000  0005cfba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 0104b597  00000000  00000000  000675c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 21 .debug_ranges 000013e0  00000000  00000000  010b2b5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf f1 28 	sub	pc,pc,-3800

Disassembly of section .text:

80002004 <board_init>:
#endif



void board_init (void)
{
80002004:	d4 01       	pushm	lr
    gpio_configure_pin (LED0_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002006:	30 3b       	mov	r11,3
80002008:	32 3c       	mov	r12,35
8000200a:	c2 3c       	rcall	80002050 <gpio_configure_pin>
8000200c:	30 3b       	mov	r11,3
    gpio_configure_pin (LED1_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000200e:	34 9c       	mov	r12,73
80002010:	c2 0c       	rcall	80002050 <gpio_configure_pin>
80002012:	30 3b       	mov	r11,3
80002014:	32 2c       	mov	r12,34
    gpio_configure_pin (LED2_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002016:	c1 dc       	rcall	80002050 <gpio_configure_pin>
80002018:	30 3b       	mov	r11,3
8000201a:	32 6c       	mov	r12,38
8000201c:	c1 ac       	rcall	80002050 <gpio_configure_pin>
    gpio_configure_pin (LED3_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000201e:	30 4b       	mov	r11,4
80002020:	32 1c       	mov	r12,33
80002022:	c1 7c       	rcall	80002050 <gpio_configure_pin>
80002024:	d8 02       	popm	pc

    gpio_configure_pin (GPIO_PUSH_BUTTON_0, (GPIO_DIR_INPUT | GPIO_PULL_UP));
80002026:	d7 03       	nop

80002028 <flashc_set_bus_freq>:
}


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
  if(cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ)
80002028:	e0 68 50 ff 	mov	r8,20735
8000202c:	ea 18 02 25 	orh	r8,0x225
80002030:	10 3c       	cp.w	r12,r8
80002032:	e0 88 00 07 	brls	80002040 <flashc_set_bus_freq+0x18>
}


void flashc_set_wait_state(unsigned int wait_state)
{
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80002036:	fe 68 14 00 	mov	r8,-125952
  u_avr32_flashc_fcr.FCR.fws = wait_state;
8000203a:	30 1a       	mov	r10,1
}


void flashc_set_wait_state(unsigned int wait_state)
{
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
8000203c:	70 09       	ld.w	r9,r8[0x0]
8000203e:	c0 58       	rjmp	80002048 <flashc_set_bus_freq+0x20>
80002040:	fe 68 14 00 	mov	r8,-125952
  u_avr32_flashc_fcr.FCR.fws = wait_state;
80002044:	30 0a       	mov	r10,0
}


void flashc_set_wait_state(unsigned int wait_state)
{
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80002046:	70 09       	ld.w	r9,r8[0x0]
  u_avr32_flashc_fcr.FCR.fws = wait_state;
80002048:	f3 da d0 c1 	bfins	r9,r10,0x6,0x1
  AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
8000204c:	91 09       	st.w	r8[0x0],r9
8000204e:	5e fc       	retal	r12

80002050 <gpio_configure_pin>:

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{  
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];  
80002050:	f8 08 16 05 	lsr	r8,r12,0x5
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif    
    if (flags & GPIO_PULL_UP)
80002054:	16 9a       	mov	r10,r11

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{  
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];  
80002056:	a9 68       	lsl	r8,0x8
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif    
    if (flags & GPIO_PULL_UP)
80002058:	e2 1a 00 04 	andl	r10,0x4,COH

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{  
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];  
8000205c:	e0 28 f0 00 	sub	r8,61440
80002060:	f3 dc c0 05 	bfextu	r9,r12,0x0,0x5
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif    
    if (flags & GPIO_PULL_UP)
80002064:	58 0a       	cp.w	r10,0
80002066:	c0 70       	breq	80002074 <gpio_configure_pin+0x24>
            gpio_port->puers = 1 << (pin & 0x1F);
80002068:	30 1a       	mov	r10,1
8000206a:	f4 09 09 49 	lsl	r9,r10,r9
8000206e:	f1 49 00 74 	st.w	r8[116],r9
80002072:	c0 68       	rjmp	8000207e <gpio_configure_pin+0x2e>
    else
            gpio_port->puerc = 1 << (pin & 0x1F);
80002074:	30 1a       	mov	r10,1
80002076:	f4 09 09 49 	lsl	r9,r10,r9
8000207a:	f1 49 00 78 	st.w	r8[120],r9
            else
                    gpio_port->odcr1c = 1 << (pin & 0x1F);
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
8000207e:	ed bb 00 07 	bld	r11,0x7
80002082:	c2 21       	brne	800020c6 <gpio_configure_pin+0x76>
            if (flags & GPIO_BOTHEDGES)
80002084:	16 99       	mov	r9,r11
80002086:	e2 19 01 80 	andl	r9,0x180,COH
8000208a:	c0 70       	breq	80002098 <gpio_configure_pin+0x48>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
8000208c:	30 19       	mov	r9,1
8000208e:	f2 0c 09 49 	lsl	r9,r9,r12
80002092:	f1 49 00 a8 	st.w	r8[168],r9
80002096:	c0 a8       	rjmp	800020aa <gpio_configure_pin+0x5a>
                   gpio_port->imr1c = 1 << (pin & 0x1F);
            }
            else if (flags & GPIO_RISING)
80002098:	16 99       	mov	r9,r11
8000209a:	e2 19 02 80 	andl	r9,0x280,COH
8000209e:	c0 90       	breq	800020b0 <gpio_configure_pin+0x60>
            {
                   gpio_port->imr0s = 1 << (pin & 0x1F);
800020a0:	30 19       	mov	r9,1
800020a2:	f2 0c 09 49 	lsl	r9,r9,r12
800020a6:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
800020aa:	f1 49 00 b8 	st.w	r8[184],r9
800020ae:	c0 c8       	rjmp	800020c6 <gpio_configure_pin+0x76>
            }
            else if (flags & GPIO_FALLING)
800020b0:	16 99       	mov	r9,r11
800020b2:	e2 19 03 80 	andl	r9,0x380,COH
800020b6:	c0 80       	breq	800020c6 <gpio_configure_pin+0x76>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
800020b8:	30 19       	mov	r9,1
800020ba:	f2 0c 09 49 	lsl	r9,r9,r12
800020be:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = 1 << (pin & 0x1F);
800020c2:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
800020c6:	ed bb 00 00 	bld	r11,0x0
800020ca:	c1 81       	brne	800020fa <gpio_configure_pin+0xaa>
            if (flags & GPIO_INIT_HIGH)
800020cc:	e2 1b 00 02 	andl	r11,0x2,COH
800020d0:	f3 dc c0 05 	bfextu	r9,r12,0x0,0x5
800020d4:	58 0b       	cp.w	r11,0
800020d6:	c0 70       	breq	800020e4 <gpio_configure_pin+0x94>
                    gpio_port->ovrs = 1 << (pin & 0x1F);
800020d8:	30 1a       	mov	r10,1
800020da:	f4 09 09 49 	lsl	r9,r10,r9
800020de:	f1 49 00 54 	st.w	r8[84],r9
800020e2:	c0 68       	rjmp	800020ee <gpio_configure_pin+0x9e>
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
800020e4:	30 1a       	mov	r10,1
800020e6:	f4 09 09 49 	lsl	r9,r10,r9
800020ea:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = 1 << (pin & 0x1F);
800020ee:	30 19       	mov	r9,1
800020f0:	f2 0c 09 49 	lsl	r9,r9,r12
800020f4:	f1 49 00 44 	st.w	r8[68],r9
800020f8:	c0 68       	rjmp	80002104 <gpio_configure_pin+0xb4>
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
800020fa:	30 19       	mov	r9,1
800020fc:	f2 0c 09 49 	lsl	r9,r9,r12
80002100:	f1 49 00 48 	st.w	r8[72],r9
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
80002104:	30 19       	mov	r9,1
80002106:	f2 0c 09 4c 	lsl	r12,r9,r12
8000210a:	91 1c       	st.w	r8[0x4],r12
}
8000210c:	5e fc       	retal	r12

8000210e <gpio_set_pin_high>:
}

void gpio_set_pin_high(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
8000210e:	30 18       	mov	r8,1
80002110:	f0 0c 09 48 	lsl	r8,r8,r12
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
}

void gpio_set_pin_high(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002114:	a5 9c       	lsr	r12,0x5
80002116:	a9 6c       	lsl	r12,0x8
80002118:	e0 2c f0 00 	sub	r12,61440
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
8000211c:	f9 48 00 54 	st.w	r12[84],r8
}
80002120:	5e fc       	retal	r12

80002122 <gpio_set_pin_low>:


void gpio_set_pin_low(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80002122:	30 18       	mov	r8,1
80002124:	f0 0c 09 48 	lsl	r8,r8,r12
}


void gpio_set_pin_low(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002128:	a5 9c       	lsr	r12,0x5
8000212a:	a9 6c       	lsl	r12,0x8
8000212c:	e0 2c f0 00 	sub	r12,61440
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80002130:	f9 48 00 58 	st.w	r12[88],r8
}
80002134:	5e fc       	retal	r12

80002136 <gpio_get_pin_interrupt_flag>:
}


int gpio_get_pin_interrupt_flag(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002136:	f8 08 16 05 	lsr	r8,r12,0x5
8000213a:	a9 68       	lsl	r8,0x8
8000213c:	e0 28 f0 00 	sub	r8,61440
  return (gpio_port->ifr >> (pin & 0x1F)) & 1;
80002140:	f0 f8 00 d0 	ld.w	r8,r8[208]
80002144:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
80002148:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
8000214c:	5e fc       	retal	r12

8000214e <gpio_clear_pin_interrupt_flag>:
  gpio_port->ifrc = 1 << (pin & 0x1F);

  // Restore interrupt enable register.
  gpio_port->ier = gpio_ier;
#else
  gpio_port->ifrc = 1 << (pin & 0x1F);
8000214e:	30 18       	mov	r8,1
80002150:	f0 0c 09 48 	lsl	r8,r8,r12
}


void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002154:	a5 9c       	lsr	r12,0x5
80002156:	a9 6c       	lsl	r12,0x8
80002158:	e0 2c f0 00 	sub	r12,61440
  gpio_port->ifrc = 1 << (pin & 0x1F);

  // Restore interrupt enable register.
  gpio_port->ier = gpio_ier;
#else
  gpio_port->ifrc = 1 << (pin & 0x1F);
8000215c:	f9 48 00 d8 	st.w	r12[216],r8
#endif
}
80002160:	5e fc       	retal	r12

80002162 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80002162:	c0 08       	rjmp	80002162 <_unhandled_interrupt>

80002164 <INTC_register_interrupt>:
  // Determine the group of the IRQ.
  unsigned int int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

  // Store in _int_line_handler_table_x the pointer to the interrupt handler, so
  // that _get_interrupt_handler can retrieve it when the interrupt is vectored.
  _int_handler_table[int_grp]._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP] = handler;
80002164:	f3 db c0 05 	bfextu	r9,r11,0x0,0x5
80002168:	48 98       	lddpc	r8,8000218c <INTC_register_interrupt+0x28>


void INTC_register_interrupt(__int_handler handler, unsigned int irq, unsigned int int_level)
{
  // Determine the group of the IRQ.
  unsigned int int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
8000216a:	a5 9b       	lsr	r11,0x5

  // Store in _int_line_handler_table_x the pointer to the interrupt handler, so
  // that _get_interrupt_handler can retrieve it when the interrupt is vectored.
  _int_handler_table[int_grp]._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP] = handler;
8000216c:	f0 0b 00 38 	add	r8,r8,r11<<0x3
80002170:	70 18       	ld.w	r8,r8[0x4]
80002172:	f0 09 09 2c 	st.w	r8[r9<<0x2],r12
  // Program the corresponding IPRX register to set the interrupt priority level
  // and the interrupt vector offset that will be fetched by the core interrupt
  // system.
  // NOTE: The _intx functions are intermediate assembly functions between the
  // core interrupt system and the user interrupt handler.
  AVR32_INTC.ipr[int_grp] = ipr_val[int_level & (AVR32_INTC_IPR_INTLEVEL_MASK >> AVR32_INTC_IPR_INTLEVEL_OFFSET)];
80002176:	fe c8 88 3a 	sub	r8,pc,-30662
8000217a:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
8000217e:	f0 0a 03 29 	ld.w	r9,r8[r10<<0x2]
80002182:	fe 78 08 00 	mov	r8,-63488
80002186:	f0 0b 09 29 	st.w	r8[r11<<0x2],r9
}
8000218a:	5e fc       	retal	r12
8000218c:	80 00       	ld.sh	r0,r0[0x0]
8000218e:	9a 00       	ld.sh	r0,sp[0x0]

80002190 <INTC_init_interrupts>:
80002190:	d4 21       	pushm	r4-r7,lr
80002192:	fe c8 89 92 	sub	r8,pc,-30318
}

//! Init EVBA address. This sequence might also be done in the utils/startup/startup_uc3.S file.
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int)&_evba );
80002196:	e3 b8 00 01 	mtsr	0x4,r8
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
8000219a:	fe c8 88 5e 	sub	r8,pc,-30626
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
8000219e:	48 d9       	lddpc	r9,800021d0 <INTC_init_interrupts+0x40>
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
800021a0:	70 0e       	ld.w	lr,r8[0x0]
800021a2:	fe cc 00 40 	sub	r12,pc,64
800021a6:	30 08       	mov	r8,0
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
800021a8:	fe 7b 08 00 	mov	r11,-63488
800021ac:	c0 e8       	rjmp	800021c8 <INTC_init_interrupts+0x38>

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
800021ae:	72 16       	ld.w	r6,r9[0x4]
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
800021b0:	ec 0a 00 26 	add	r6,r6,r10<<0x2

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
800021b4:	2f fa       	sub	r10,-1
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
800021b6:	8d 0c       	st.w	r6[0x0],r12
800021b8:	0e 3a       	cp.w	r10,r7
  unsigned int int_grp, int_req;

  INTC_init_evba();

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
800021ba:	cf a3       	brcs	800021ae <INTC_init_interrupts+0x1e>
800021bc:	f6 08 09 2e 	st.w	r11[r8<<0x2],lr
800021c0:	2f 89       	sub	r9,-8
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
800021c2:	2f f8       	sub	r8,-1
800021c4:	59 e8       	cp.w	r8,30
800021c6:	c0 40       	breq	800021ce <INTC_init_interrupts+0x3e>
800021c8:	72 07       	ld.w	r7,r9[0x0]
800021ca:	30 0a       	mov	r10,0
800021cc:	cf 6b       	rjmp	800021b8 <INTC_init_interrupts+0x28>
800021ce:	d8 22       	popm	r4-r7,pc
800021d0:	80 00       	ld.sh	r0,r0[0x0]
800021d2:	9a 00       	ld.sh	r0,sp[0x0]

800021d4 <_get_interrupt_handler>:
800021d4:	e0 68 00 83 	mov	r8,131
800021d8:	fe 79 08 00 	mov	r9,-63488
__int_handler _get_interrupt_handler(unsigned int int_level)
{
  // ICR3 is mapped first, ICR0 last.
  // Code in exception.S puts int_level in R12 which is used by AVR32-GCC to
  // pass a single argument to a function.
  unsigned int int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
800021dc:	f0 0c 01 0c 	sub	r12,r8,r12
800021e0:	f2 0c 03 28 	ld.w	r8,r9[r12<<0x2]
  unsigned int int_req = AVR32_INTC.irr[int_grp];
800021e4:	f0 ca ff c0 	sub	r10,r8,-64
800021e8:	f2 0a 03 2c 	ld.w	r12,r9[r10<<0x2]
  // exception.S will provide the interrupt handler with a clean interrupt stack
  // frame, with nothing more pushed onto the stack. The interrupt handler must
  // manage the `rete' instruction, what can be done thanks to pure assembly,
  // inline assembly or the `__attribute__((__interrupt__))' C function
  // attribute.
  return (int_req) ? _int_handler_table[int_grp]._int_line_handler_table[32 - clz(int_req) - 1] : NULL;
800021ec:	58 0c       	cp.w	r12,0
800021ee:	5e 0c       	reteq	r12
800021f0:	48 69       	lddpc	r9,80002208 <_get_interrupt_handler+0x34>
800021f2:	f8 0c 12 00 	clz	r12,r12
800021f6:	f2 08 00 38 	add	r8,r9,r8<<0x3
800021fa:	f8 0c 11 1f 	rsub	r12,r12,31
800021fe:	70 18       	ld.w	r8,r8[0x4]
80002200:	f0 0c 03 2c 	ld.w	r12,r8[r12<<0x2]
}
80002204:	5e fc       	retal	r12
80002206:	d7 03       	nop
80002208:	80 00       	ld.sh	r0,r0[0x0]
8000220a:	9a 00       	ld.sh	r0,sp[0x0]

8000220c <udd_include_vbus_monitoring>:


bool udd_include_vbus_monitoring(void)
{
	return true;
}
8000220c:	5e ff       	retal	1

8000220e <udd_is_high_speed>:
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
#else
	return false;
#endif
}
8000220e:	5e fd       	retal	0

80002210 <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address();
80002210:	fe 68 00 00 	mov	r8,-131072
80002214:	70 09       	ld.w	r9,r8[0x0]
80002216:	a7 d9       	cbr	r9,0x7
80002218:	91 09       	st.w	r8[0x0],r9
	udd_configure_address(address);
8000221a:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
8000221e:	70 09       	ld.w	r9,r8[0x0]
80002220:	e0 19 ff 80 	andl	r9,0xff80
80002224:	f9 e9 10 09 	or	r9,r12,r9
80002228:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
8000222a:	70 09       	ld.w	r9,r8[0x0]
8000222c:	a7 b9       	sbr	r9,0x7
8000222e:	91 09       	st.w	r8[0x0],r9
}
80002230:	5e fc       	retal	r12

80002232 <udd_getaddress>:


uint8_t udd_getaddress(void)
{
	return udd_get_configured_address();
80002232:	fe 68 00 00 	mov	r8,-131072
80002236:	70 0c       	ld.w	r12,r8[0x0]
}
80002238:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
8000223c:	5e fc       	retal	r12

8000223e <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
8000223e:	fe 68 00 00 	mov	r8,-131072
80002242:	70 8c       	ld.w	r12,r8[0x20]
}
80002244:	f9 dc c0 6b 	bfextu	r12,r12,0x3,0xb
80002248:	5e fc       	retal	r12

8000224a <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
	return udd_micro_frame_number();
8000224a:	fe 68 00 00 	mov	r8,-131072
8000224e:	70 8c       	ld.w	r12,r8[0x20]
}
80002250:	f9 dc c0 0e 	bfextu	r12,r12,0x0,0xe
80002254:	5e fc       	retal	r12
80002256:	d7 03       	nop

80002258 <udd_set_setup_payload>:
}


void udd_set_setup_payload( uint8_t *payload,	uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
80002258:	48 28       	lddpc	r8,80002260 <udd_set_setup_payload+0x8>
	udd_g_ctrlreq.payload_size = payload_size;
8000225a:	b0 6b       	st.h	r8[0xc],r11
}


void udd_set_setup_payload( uint8_t *payload,	uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
8000225c:	91 2c       	st.w	r8[0x8],r12
	udd_g_ctrlreq.payload_size = payload_size;
}
8000225e:	5e fc       	retal	r12
80002260:	00 00       	add	r0,r0
80002262:	0c 98       	mov	r8,r6

80002264 <udd_ep_is_halted>:
}


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
80002264:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
80002268:	a3 6c       	lsl	r12,0x2
8000226a:	e0 3c fe 40 	sub	r12,130624
8000226e:	78 0c       	ld.w	r12,r12[0x0]
}
80002270:	f9 dc c2 61 	bfextu	r12,r12,0x13,0x1
80002274:	5e fc       	retal	r12
80002276:	d7 03       	nop

80002278 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
80002278:	d4 21       	pushm	r4-r7,lr
	udd_ep_job_t *ptr_job;
	uint8_t index = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < index)
8000227a:	30 39       	mov	r9,3


bool udd_ep_set_halt(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job;
	uint8_t index = ep & USB_EP_ADDR_MASK;
8000227c:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4

	if (USB_DEVICE_MAX_EP < index)
80002280:	f2 08 18 00 	cp.b	r8,r9
80002284:	e0 8b 00 35 	brhi	800022ee <udd_ep_set_halt+0x76>
		return false;

	ptr_job = &udd_ep_job[index - 1];
80002288:	f0 cb 00 01 	sub	r11,r8,1
8000228c:	49 99       	lddpc	r9,800022f0 <udd_ep_set_halt+0x78>
8000228e:	a5 6b       	lsl	r11,0x4
80002290:	f2 0b 00 0b 	add	r11,r9,r11
	if (ptr_job->busy == true) {
80002294:	76 0c       	ld.w	r12,r11[0x0]
80002296:	58 0c       	cp.w	r12,0
80002298:	c2 b5       	brlt	800022ee <udd_ep_set_halt+0x76>
		return false;	// Job on going, stall impossible
	}
	
	if (0 != udd_nb_busy_bank(index)) {
8000229a:	fe 6e 01 30 	mov	lr,-130768
8000229e:	f0 0a 15 02 	lsl	r10,r8,0x2
800022a2:	f4 0e 00 09 	add	r9,r10,lr
800022a6:	72 0e       	ld.w	lr,r9[0x0]
800022a8:	fe 67 01 f0 	mov	r7,-130576
800022ac:	fd de c1 82 	bfextu	lr,lr,0xc,0x2
800022b0:	f4 07 00 09 	add	r9,r10,r7
800022b4:	58 0e       	cp.w	lr,0
800022b6:	c0 f0       	breq	800022d4 <udd_ep_set_halt+0x5c>
		// Wait end of transfer on USB line before stall endpoint
		// Flag a stall requested
		ptr_job->stall_requested = true;
800022b8:	18 9a       	mov	r10,r12
800022ba:	30 1c       	mov	r12,1
800022bc:	f5 dc d3 81 	bfins	r10,r12,0x1c,0x1
800022c0:	97 0a       	st.w	r11[0x0],r10
		udd_enable_bank_interrupt(index);
800022c2:	e0 6a 10 00 	mov	r10,4096
800022c6:	93 0a       	st.w	r9[0x0],r10
		udd_enable_endpoint_interrupt(index);
800022c8:	f4 08 09 48 	lsl	r8,r10,r8
800022cc:	fe 69 00 00 	mov	r9,-131072
800022d0:	93 68       	st.w	r9[0x18],r8
800022d2:	d8 22       	popm	r4-r7,pc
	} else {
		// Stall endpoint
		udd_disable_endpoint_bank_autoswitch(index);
800022d4:	e0 3a ff 00 	sub	r10,130816
800022d8:	74 08       	ld.w	r8,r10[0x0]
800022da:	a9 d8       	cbr	r8,0x9
800022dc:	95 08       	st.w	r10[0x0],r8
		udd_enable_stall_handshake(index);
800022de:	e8 68 00 00 	mov	r8,524288
800022e2:	93 08       	st.w	r9[0x0],r8
		udd_reset_data_toggle(index);
800022e4:	30 1c       	mov	r12,1
800022e6:	e4 68 00 00 	mov	r8,262144
800022ea:	93 08       	st.w	r9[0x0],r8
800022ec:	d8 22       	popm	r4-r7,pc
800022ee:	d8 2a       	popm	r4-r7,pc,r12=0
800022f0:	00 00       	add	r0,r0
800022f2:	06 e8       	st.h	--r3,r8

800022f4 <udd_ep_clear_halt>:
	return true;
}


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
800022f4:	d4 01       	pushm	lr
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
800022f6:	30 38       	mov	r8,3

bool udd_ep_clear_halt(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
800022f8:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep)
800022fc:	f0 0c 18 00 	cp.b	r12,r8
80002300:	e0 88 00 03 	brls	80002306 <udd_ep_clear_halt+0x12>
80002304:	d8 0a       	popm	pc,r12=0
		return false;
	ptr_job = &udd_ep_job[ep - 1];

	if (Is_udd_endpoint_stall_requested(ep)	// Endpoint stalled
80002306:	fe 6a 01 c0 	mov	r10,-130624
8000230a:	f8 09 15 02 	lsl	r9,r12,0x2
8000230e:	f2 0a 00 08 	add	r8,r9,r10
80002312:	70 0a       	ld.w	r10,r8[0x0]
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
		return false;
	ptr_job = &udd_ep_job[ep - 1];
80002314:	20 1c       	sub	r12,1
80002316:	49 58       	lddpc	r8,80002368 <udd_ep_clear_halt+0x74>
80002318:	a5 6c       	lsl	r12,0x4

	if (Is_udd_endpoint_stall_requested(ep)	// Endpoint stalled
8000231a:	e6 1a 00 08 	andh	r10,0x8,COH
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
		return false;
	ptr_job = &udd_ep_job[ep - 1];
8000231e:	18 08       	add	r8,r12

	if (Is_udd_endpoint_stall_requested(ep)	// Endpoint stalled
80002320:	58 0a       	cp.w	r10,0
80002322:	c0 51       	brne	8000232c <udd_ep_clear_halt+0x38>
			|| ptr_job->stall_requested) {	// Endpoint stall is requested
80002324:	70 0a       	ld.w	r10,r8[0x0]
80002326:	ed ba 00 1c 	bld	r10,0x1c
8000232a:	c1 d1       	brne	80002364 <udd_ep_clear_halt+0x70>
		// Remove request to stall
		ptr_job->stall_requested = false;
8000232c:	70 0b       	ld.w	r11,r8[0x0]
		// Remove stall
		udd_disable_stall_handshake(ep);
8000232e:	fe 6c 02 20 	mov	r12,-130528
	ptr_job = &udd_ep_job[ep - 1];

	if (Is_udd_endpoint_stall_requested(ep)	// Endpoint stalled
			|| ptr_job->stall_requested) {	// Endpoint stall is requested
		// Remove request to stall
		ptr_job->stall_requested = false;
80002332:	30 0a       	mov	r10,0
80002334:	f7 da d3 81 	bfins	r11,r10,0x1c,0x1
80002338:	91 0b       	st.w	r8[0x0],r11
		// Remove stall
		udd_disable_stall_handshake(ep);
8000233a:	f2 0c 00 0b 	add	r11,r9,r12
8000233e:	e8 6c 00 00 	mov	r12,524288
80002342:	97 0c       	st.w	r11[0x0],r12
		udd_enable_endpoint_bank_autoswitch(ep);	
80002344:	fe 6c 01 00 	mov	r12,-130816
80002348:	f2 0c 00 0b 	add	r11,r9,r12
8000234c:	76 09       	ld.w	r9,r11[0x0]
8000234e:	a9 b9       	sbr	r9,0x9
80002350:	97 09       	st.w	r11[0x0],r9
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
80002352:	70 09       	ld.w	r9,r8[0x0]
80002354:	58 09       	cp.w	r9,0
80002356:	c0 74       	brge	80002364 <udd_ep_clear_halt+0x70>
			ptr_job->busy = false;
80002358:	f3 da d3 e1 	bfins	r9,r10,0x1f,0x1
8000235c:	91 09       	st.w	r8[0x0],r9
			ptr_job->call_nohalt();
8000235e:	70 38       	ld.w	r8,r8[0xc]
80002360:	5d 18       	icall	r8
80002362:	da 0a       	popm	pc,r12=1
80002364:	da 0a       	popm	pc,r12=1
80002366:	d7 03       	nop
80002368:	00 00       	add	r0,r0
8000236a:	06 e8       	st.h	--r3,r8

8000236c <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort)
{
8000236c:	d4 01       	pushm	lr
8000236e:	18 99       	mov	r9,r12
80002370:	16 9c       	mov	r12,r11
	if (ptr_job->busy == false)
80002372:	72 08       	ld.w	r8,r9[0x0]
80002374:	58 08       	cp.w	r8,0
80002376:	c0 a4       	brge	8000238a <udd_ep_finish_job+0x1e>
		return;	// No on-going job
	ptr_job->busy = false;
80002378:	30 0a       	mov	r10,0
8000237a:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000237e:	93 08       	st.w	r9[0x0],r8
	if (NULL == ptr_job->call_trans)
80002380:	72 38       	ld.w	r8,r9[0xc]
80002382:	58 08       	cp.w	r8,0
80002384:	c0 30       	breq	8000238a <udd_ep_finish_job+0x1e>
		return;	// No callback linked to job
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
80002386:	72 2b       	ld.w	r11,r9[0x8]
80002388:	5d 18       	icall	r8
8000238a:	d8 02       	popm	pc

8000238c <udd_ep_free>:
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
8000238c:	d4 01       	pushm	lr
	udd_disable_endpoint(ep & USB_EP_ADDR_MASK);
8000238e:	fe 69 00 00 	mov	r9,-131072
80002392:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
80002396:	30 1b       	mov	r11,1
80002398:	72 7c       	ld.w	r12,r9[0x1c]
8000239a:	f6 08 09 4a 	lsl	r10,r11,r8
8000239e:	5c da       	com	r10
800023a0:	18 6a       	and	r10,r12
800023a2:	93 7a       	st.w	r9[0x1c],r10

static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;
	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true);
800023a4:	f0 c9 00 01 	sub	r9,r8,1
800023a8:	a5 69       	lsl	r9,0x4


void udd_ep_free(udd_ep_id_t ep)
{
	udd_disable_endpoint(ep & USB_EP_ADDR_MASK);
	udd_unallocate_memory(ep & USB_EP_ADDR_MASK);
800023aa:	a3 68       	lsl	r8,0x2

static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;
	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true);
800023ac:	48 5c       	lddpc	r12,800023c0 <udd_ep_free+0x34>


void udd_ep_free(udd_ep_id_t ep)
{
	udd_disable_endpoint(ep & USB_EP_ADDR_MASK);
	udd_unallocate_memory(ep & USB_EP_ADDR_MASK);
800023ae:	e0 38 ff 00 	sub	r8,130816

static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;
	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true);
800023b2:	12 0c       	add	r12,r9


void udd_ep_free(udd_ep_id_t ep)
{
	udd_disable_endpoint(ep & USB_EP_ADDR_MASK);
	udd_unallocate_memory(ep & USB_EP_ADDR_MASK);
800023b4:	70 09       	ld.w	r9,r8[0x0]
800023b6:	a1 d9       	cbr	r9,0x1
800023b8:	91 09       	st.w	r8[0x0],r9

static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;
	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true);
800023ba:	cd 9f       	rcall	8000236c <udd_ep_finish_job>
800023bc:	d8 02       	popm	pc
void udd_ep_free(udd_ep_id_t ep)
{
	udd_disable_endpoint(ep & USB_EP_ADDR_MASK);
	udd_unallocate_memory(ep & USB_EP_ADDR_MASK);
	udd_ep_abort_job(ep);
}
800023be:	d7 03       	nop
800023c0:	00 00       	add	r0,r0
800023c2:	06 e8       	st.h	--r3,r8

800023c4 <udd_ep_run>:
800023c4:	d4 31       	pushm	r0-r7,lr
800023c6:	20 1d       	sub	sp,4
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	b_dir_in = (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN));
	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
800023c8:	30 3e       	mov	lr,3
	uint32_t udd_dma_ctrl = 0;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	b_dir_in = (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN));
	ep &= USB_EP_ADDR_MASK;
800023ca:	ef dc c0 04 	bfextu	r7,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep)
800023ce:	0e 96       	mov	r6,r7
800023d0:	fc 07 18 00 	cp.b	r7,lr
800023d4:	e0 8b 00 8c 	brhi	800024ec <udd_ep_run+0x128>
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
800023d8:	fe 63 00 00 	mov	r3,-131072
800023dc:	66 7e       	ld.w	lr,r3[0x1c]
800023de:	30 16       	mov	r6,1
800023e0:	ec 07 09 45 	lsl	r5,r6,r7
800023e4:	eb ee 00 0e 	and	lr,r5,lr
800023e8:	e0 80 00 82 	breq	800024ec <udd_ep_run+0x128>
			|| Is_udd_endpoint_stall_requested(ep)
800023ec:	ee 0e 15 02 	lsl	lr,r7,0x2
800023f0:	50 0e       	stdsp	sp[0x0],lr
800023f2:	e0 3e fe 40 	sub	lr,130624
800023f6:	7c 0e       	ld.w	lr,lr[0x0]
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
800023f8:	e6 1e 00 08 	andh	lr,0x8,COH
800023fc:	c7 81       	brne	800024ec <udd_ep_run+0x128>
	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
800023fe:	ee c2 00 01 	sub	r2,r7,1
80002402:	4b d5       	lddpc	r5,800024f4 <udd_ep_run+0x130>
80002404:	e4 0e 15 04 	lsl	lr,r2,0x4
80002408:	ea 0e 00 0e 	add	lr,r5,lr

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested)
8000240c:	7c 04       	ld.w	r4,lr[0x0]
8000240e:	e6 14 10 00 	andh	r4,0x1000,COH
80002412:	c6 d1       	brne	800024ec <udd_ep_run+0x128>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002414:	e1 b1 00 00 	mfsr	r1,0x0
	cpu_irq_disable();
80002418:	d3 03       	ssrf	0x10
		return false;	// Endpoint is halted

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
8000241a:	7c 00       	ld.w	r0,lr[0x0]
8000241c:	00 95       	mov	r5,r0
8000241e:	e6 15 80 00 	andh	r5,0x8000,COH
80002422:	c0 50       	breq	8000242c <udd_ep_run+0x68>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002424:	e3 b1 00 00 	mtsr	0x0,r1
#endif
	barrier();
80002428:	08 9c       	mov	r12,r4
		cpu_irq_restore(flags);
		return false;	// Job already on going
8000242a:	c6 28       	rjmp	800024ee <udd_ep_run+0x12a>
	}
	ptr_job->busy = true;
8000242c:	e1 d6 d3 e1 	bfins	r0,r6,0x1f,0x1
	bool b_dir_in;
	uint32_t udd_dma_ctrl = 0;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	b_dir_in = (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN));
80002430:	f9 dc c0 e8 	bfextu	r12,r12,0x7,0x8
	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false;	// Job already on going
	}
	ptr_job->busy = true;
80002434:	9d 00       	st.w	lr[0x0],r0
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002436:	e3 b1 00 00 	mtsr	0x0,r1
	cpu_irq_restore(flags);
	ptr_job->buf = buf;
	ptr_job->call_trans = callback;
8000243a:	9d 38       	st.w	lr[0xc],r8
		cpu_irq_restore(flags);
		return false;	// Job already on going
	}
	ptr_job->busy = true;
	cpu_irq_restore(flags);
	ptr_job->buf = buf;
8000243c:	9d 1a       	st.w	lr[0x4],r10
	ptr_job->call_trans = callback;
	ptr_job->b_raise_dma = false;
8000243e:	7c 08       	ld.w	r8,lr[0x0]
80002440:	f1 d5 d3 a1 	bfins	r8,r5,0x1d,0x1
80002444:	9d 08       	st.w	lr[0x0],r8

	// The USBB supports a maximum transfer size of 64KB
	if (0x10000 <= buf_size) {
80002446:	e0 49 ff ff 	cp.w	r9,65535
8000244a:	e0 88 00 07 	brls	80002458 <udd_ep_run+0x94>
		// Transfer size = 64KB
		ptr_job->buf_size = 0x10000;
8000244e:	e0 78 00 00 	mov	r8,65536
80002452:	0a 99       	mov	r9,r5
80002454:	9d 28       	st.w	lr[0x8],r8
80002456:	c2 b8       	rjmp	800024ac <udd_ep_run+0xe8>
		buf_size = 0;
	} else {
		ptr_job->buf_size = buf_size;
80002458:	9d 29       	st.w	lr[0x8],r9
		if (b_dir_in) {
8000245a:	58 0c       	cp.w	r12,0
8000245c:	c2 80       	breq	800024ac <udd_ep_run+0xe8>
			if (buf_size==0) {
8000245e:	58 09       	cp.w	r9,0
80002460:	c1 21       	brne	80002484 <udd_ep_run+0xc0>
				// The USB DMA can't send a empty buffer
				// thus we raise the DMA interrupt end of transfert 
				// to execute ZLP process
				ptr_job->b_raise_dma = true;
				ptr_job->b_send_zlp = true;
80002462:	bd b8       	sbr	r8,0x1d
80002464:	f1 d6 d3 c1 	bfins	r8,r6,0x1e,0x1
80002468:	9d 08       	st.w	lr[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000246a:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
8000246e:	d3 03       	ssrf	0x10
				flags = cpu_irq_save();
				udd_enable_endpoint_dma_interrupt(ep);
80002470:	fc 19 02 00 	movh	r9,0x200
80002474:	f2 02 09 42 	lsl	r2,r9,r2
80002478:	87 62       	st.w	r3[0x18],r2
				udd_raise_endpoint_dma_interrupt(ep);
8000247a:	87 32       	st.w	r3[0xc],r2
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000247c:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
80002480:	0c 9c       	mov	r12,r6
				cpu_irq_restore(flags);
				return true;
80002482:	c3 68       	rjmp	800024ee <udd_ep_run+0x12a>
			}
			if (0 != buf_size % udd_get_endpoint_size(ep)) {
80002484:	40 04       	lddsp	r4,sp[0x0]
80002486:	e0 34 ff 00 	sub	r4,130816
8000248a:	68 04       	ld.w	r4,r4[0x0]
8000248c:	30 83       	mov	r3,8
8000248e:	e9 d4 c0 83 	bfextu	r4,r4,0x4,0x3
80002492:	e6 04 09 44 	lsl	r4,r3,r4
80002496:	20 14       	sub	r4,1
80002498:	12 64       	and	r4,r9
8000249a:	c0 60       	breq	800024a6 <udd_ep_run+0xe2>
				// Force short packet option to send a shortpacket on IN,
				// else the DMA transfer is accepted and interrupt DMA valid but nothing is sent.
				b_shortpacket = true;
				ptr_job->b_send_zlp = false;
8000249c:	f1 d5 d3 c1 	bfins	r8,r5,0x1e,0x1
800024a0:	0c 9b       	mov	r11,r6
800024a2:	9d 08       	st.w	lr[0x0],r8
800024a4:	c0 48       	rjmp	800024ac <udd_ep_run+0xe8>
			}else{
				ptr_job->b_send_zlp = b_shortpacket;
800024a6:	f1 db d3 c1 	bfins	r8,r11,0x1e,0x1
800024aa:	9d 08       	st.w	lr[0x0],r8
			}
		}
	}

	// Start USB DMA to fill or read fifo of the selected endpoint
	udd_endpoint_dma_set_addr(ep, (U32) buf);
800024ac:	ee 08 15 04 	lsl	r8,r7,0x4
800024b0:	e0 38 fd 00 	sub	r8,130304
800024b4:	91 1a       	st.w	r8[0x4],r10
	if (b_shortpacket) {
800024b6:	58 0b       	cp.w	r11,0
800024b8:	c0 60       	breq	800024c4 <udd_ep_run+0x100>
		if (b_dir_in) {
800024ba:	58 0c       	cp.w	r12,0
800024bc:	f9 bb 01 08 	movne	r11,8
800024c0:	f9 bb 00 14 	moveq	r11,20
		} else {
			udd_dma_ctrl = AVR32_USBB_UDDMA1_CONTROL_EOT_IRQ_EN_MASK
					| AVR32_USBB_UDDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
		}
	}
	udd_dma_ctrl |= (buf_size <<
800024c4:	b1 69       	lsl	r9,0x10
800024c6:	e8 19 00 21 	orl	r9,0x21
			AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
			& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
	udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
800024ca:	16 49       	or	r9,r11
			AVR32_USBB_UDDMA1_CONTROL_CH_EN_MASK;
	udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
800024cc:	91 29       	st.w	r8[0x8],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800024ce:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800024d2:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_endpoint_dma_interrupt(ep);
800024d4:	fc 19 02 00 	movh	r9,0x200
800024d8:	20 17       	sub	r7,1
800024da:	f2 07 09 47 	lsl	r7,r9,r7
800024de:	fe 69 00 00 	mov	r9,-131072
800024e2:	93 67       	st.w	r9[0x18],r7
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800024e4:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
800024e8:	30 1c       	mov	r12,1
	cpu_irq_restore(flags);

	return true;
800024ea:	c0 28       	rjmp	800024ee <udd_ep_run+0x12a>
800024ec:	30 0c       	mov	r12,0
}
800024ee:	2f fd       	sub	sp,-4
800024f0:	d8 32       	popm	r0-r7,pc
800024f2:	d7 03       	nop
800024f4:	00 00       	add	r0,r0
800024f6:	06 e8       	st.h	--r3,r8

800024f8 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 * 
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
800024f8:	49 08       	lddpc	r8,80002538 <udd_sleep_mode+0x40>
	if (!b_idle && udd_b_idle) {
800024fa:	58 0c       	cp.w	r12,0
800024fc:	c0 c1       	brne	80002514 <udd_sleep_mode+0x1c>
800024fe:	11 89       	ld.ub	r9,r8[0x0]
80002500:	f8 09 18 00 	cp.b	r9,r12
80002504:	c1 60       	breq	80002530 <udd_sleep_mode+0x38>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002506:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
8000250a:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
8000250c:	48 c8       	lddpc	r8,8000253c <udd_sleep_mode+0x44>
8000250e:	11 9a       	ld.ub	r10,r8[0x1]
80002510:	2f fa       	sub	r10,-1
80002512:	c0 c8       	rjmp	8000252a <udd_sleep_mode+0x32>
		sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
80002514:	11 89       	ld.ub	r9,r8[0x0]
80002516:	30 08       	mov	r8,0
80002518:	f0 09 18 00 	cp.b	r9,r8
8000251c:	c0 a1       	brne	80002530 <udd_sleep_mode+0x38>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000251e:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002522:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
80002524:	48 68       	lddpc	r8,8000253c <udd_sleep_mode+0x44>
80002526:	11 9a       	ld.ub	r10,r8[0x1]
80002528:	20 1a       	sub	r10,1
8000252a:	b0 9a       	st.b	r8[0x1],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000252c:	e3 b9 00 00 	mtsr	0x0,r9
		sleepmgr_unlock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
80002530:	48 28       	lddpc	r8,80002538 <udd_sleep_mode+0x40>
80002532:	b0 8c       	st.b	r8[0x0],r12
}
80002534:	5e fc       	retal	r12
80002536:	d7 03       	nop
80002538:	00 00       	add	r0,r0
8000253a:	07 18       	ld.sh	r8,r3++
8000253c:	00 00       	add	r0,r0
8000253e:	0c b0       	st.h	r6++,r0

80002540 <udd_detach>:
	cpu_irq_restore(flags);
}


void udd_detach(void)
{
80002540:	d4 01       	pushm	lr
	otg_unfreeze_clock();
80002542:	fe 68 00 00 	mov	r8,-131072
80002546:	f0 f9 08 00 	ld.w	r9,r8[2048]
8000254a:	af c9       	cbr	r9,0xe
8000254c:	f1 49 08 00 	st.w	r8[2048],r9
	// Detach device from the bus
	udd_detach_device();
80002550:	70 09       	ld.w	r9,r8[0x0]
80002552:	a9 a9       	sbr	r9,0x8
	udd_sleep_mode(false);
80002554:	30 0c       	mov	r12,0

void udd_detach(void)
{
	otg_unfreeze_clock();
	// Detach device from the bus
	udd_detach_device();
80002556:	91 09       	st.w	r8[0x0],r9
	udd_sleep_mode(false);
80002558:	cd 0f       	rcall	800024f8 <udd_sleep_mode>
8000255a:	d8 02       	popm	pc

8000255c <udd_ctrl_init>:
}
8000255c:	e1 b8 00 00 	mfsr	r8,0x0
80002560:	d3 03       	ssrf	0x10
80002562:	30 1a       	mov	r10,1
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI), 
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI 
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
80002564:	fe 69 02 20 	mov	r9,-130528
80002568:	93 0a       	st.w	r9[0x0],r10
8000256a:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);
	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);

	udd_g_ctrlreq.callback = NULL;
8000256e:	48 79       	lddpc	r9,80002588 <udd_ctrl_init+0x2c>
80002570:	30 08       	mov	r8,0
	udd_g_ctrlreq.over_under_run = NULL;
	udd_g_ctrlreq.payload_size = 0;
80002572:	b2 68       	st.h	r9[0xc],r8
	udd_disable_in_send_interrupt(0);
	cpu_irq_restore(flags);
	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);

	udd_g_ctrlreq.callback = NULL;
80002574:	93 48       	st.w	r9[0x10],r8
	udd_g_ctrlreq.over_under_run = NULL;
80002576:	93 58       	st.w	r9[0x14],r8
	// But the interrupt must be disabled to don't generate interrupt TXINI 
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
	cpu_irq_restore(flags);
	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
80002578:	fe 69 01 60 	mov	r9,-130720
8000257c:	30 2a       	mov	r10,2
8000257e:	93 0a       	st.w	r9[0x0],r10

	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;
	udd_g_ctrlreq.payload_size = 0;
	udd_ep_control_state = UDD_EPCTRL_SETUP;
80002580:	48 39       	lddpc	r9,8000258c <udd_ctrl_init+0x30>
80002582:	93 08       	st.w	r9[0x0],r8
}
80002584:	5e fc       	retal	r12
80002586:	d7 03       	nop
80002588:	00 00       	add	r0,r0
8000258a:	0c 98       	mov	r8,r6
8000258c:	00 00       	add	r0,r0
8000258e:	07 1c       	ld.sh	r12,r3++

80002590 <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
80002590:	d4 31       	pushm	r0-r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002592:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002596:	d3 03       	ssrf	0x10
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
	udd_disable_in_send_interrupt(0);
80002598:	30 1a       	mov	r10,1
8000259a:	fe 69 02 20 	mov	r9,-130528
8000259e:	93 0a       	st.w	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800025a0:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
800025a4:	4b a9       	lddpc	r9,8000268c <udd_ctrl_in_sent+0xfc>
800025a6:	4b b6       	lddpc	r6,80002690 <udd_ctrl_in_sent+0x100>
800025a8:	72 08       	ld.w	r8,r9[0x0]
800025aa:	58 38       	cp.w	r8,3
800025ac:	c0 71       	brne	800025ba <udd_ctrl_in_sent+0x2a>


static void udd_ctrl_endofrequest(void)
{
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
800025ae:	6c 48       	ld.w	r8,r6[0x10]
800025b0:	58 08       	cp.w	r8,0
800025b2:	c0 20       	breq	800025b6 <udd_ctrl_in_sent+0x26>
		udd_g_ctrlreq.callback();
800025b4:	5d 18       	icall	r8

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
		// Reinitializes control endpoint management
		udd_ctrl_init();
800025b6:	cd 3f       	rcall	8000255c <udd_ctrl_init>
800025b8:	d8 32       	popm	r0-r7,pc
		return;
800025ba:	8c 68       	ld.sh	r8,r6[0xc]
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
800025bc:	4b 64       	lddpc	r4,80002694 <udd_ctrl_in_sent+0x104>
800025be:	88 07       	ld.sh	r7,r4[0x0]
800025c0:	f0 07 01 07 	sub	r7,r8,r7
800025c4:	5c 87       	casts.h	r7
800025c6:	c2 f1       	brne	80002624 <udd_ctrl_in_sent+0x94>
	if (0 == nb_remain) {
800025c8:	4b 43       	lddpc	r3,80002698 <udd_ctrl_in_sent+0x108>
		// All content of current buffer payload are sent
		if (!udd_ctrl_payload_need_in_zlp) {
800025ca:	07 8b       	ld.ub	r11,r3[0x0]
800025cc:	ee 0b 18 00 	cp.b	r11,r7
800025d0:	c0 e1       	brne	800025ec <udd_ctrl_in_sent+0x5c>
800025d2:	30 48       	mov	r8,4

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
800025d4:	93 08       	st.w	r9[0x0],r8
800025d6:	e1 b9 00 00 	mfsr	r9,0x0

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800025da:	d3 03       	ssrf	0x10
	cpu_irq_disable();
800025dc:	31 08       	mov	r8,16
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
800025de:	fe 6a 01 60 	mov	r10,-130720
800025e2:	95 08       	st.w	r10[0x0],r8
800025e4:	fe 6a 01 f0 	mov	r10,-130576
	udd_enable_nak_in_interrupt(0);
800025e8:	95 08       	st.w	r10[0x0],r8
800025ea:	c4 e8       	rjmp	80002686 <udd_ctrl_in_sent+0xf6>
800025ec:	5c 78       	castu.h	r8
			// It is the end of data phase, because the last data packet is a short packet
			// then generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		if ((udd_g_ctrlreq.req.wLength > (udd_ctrl_prev_payload_nb_trans
800025ee:	4a c5       	lddpc	r5,8000269c <udd_ctrl_in_sent+0x10c>
800025f0:	8c b9       	ld.uh	r9,r6[0x6]
800025f2:	8a 8a       	ld.uh	r10,r5[0x0]
800025f4:	14 08       	add	r8,r10
800025f6:	10 39       	cp.w	r9,r8
800025f8:	e0 89 00 07 	brgt	80002606 <udd_ctrl_in_sent+0x76>
800025fc:	6c 5c       	ld.w	r12,r6[0x14]
								+
								udd_g_ctrlreq.
								payload_size))
				|| (!udd_g_ctrlreq.over_under_run)
800025fe:	58 0c       	cp.w	r12,0
			// It is the end of data phase, because the last data packet is a short packet
			// then generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		if ((udd_g_ctrlreq.req.wLength > (udd_ctrl_prev_payload_nb_trans
80002600:	c0 30       	breq	80002606 <udd_ctrl_in_sent+0x76>
80002602:	5d 1c       	icall	r12
80002604:	c0 51       	brne	8000260e <udd_ctrl_in_sent+0x7e>
80002606:	30 09       	mov	r9,0
								udd_g_ctrlreq.
								payload_size))
				|| (!udd_g_ctrlreq.over_under_run)
				|| (!udd_g_ctrlreq.over_under_run())) {
			// Underrun or data packet complette than send zlp on IN (note don't change DataToggle)
			udd_ctrl_payload_need_in_zlp = false;
80002608:	4a 48       	lddpc	r8,80002698 <udd_ctrl_in_sent+0x108>
8000260a:	b0 89       	st.b	r8[0x0],r9
8000260c:	c1 18       	rjmp	8000262e <udd_ctrl_in_sent+0x9e>
8000260e:	88 09       	ld.sh	r9,r4[0x0]
			// nb_remain==0 allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			// Update number of total data sending by previous playlaod buffer
			udd_ctrl_prev_payload_nb_trans +=
80002610:	8a 08       	ld.sh	r8,r5[0x0]
80002612:	f2 08 00 08 	add	r8,r9,r8
80002616:	a8 07       	st.h	r4[0x0],r7
					udd_ctrl_payload_nb_trans;
			// Update maangement of current playoad transfer
			udd_ctrl_payload_nb_trans = 0;
80002618:	aa 08       	st.h	r5[0x0],r8
			udd_ctrl_payload_need_in_zlp = false;
			// nb_remain==0 allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			// Update number of total data sending by previous playlaod buffer
			udd_ctrl_prev_payload_nb_trans +=
8000261a:	8c 67       	ld.sh	r7,r6[0xc]
					udd_ctrl_payload_nb_trans;
			// Update maangement of current playoad transfer
			udd_ctrl_payload_nb_trans = 0;
			nb_remain = udd_g_ctrlreq.payload_size;
8000261c:	f1 d7 c0 06 	bfextu	r8,r7,0x0,0x6
			// Compute if an IN ZLP must be send after IN data
			udd_ctrl_payload_need_in_zlp =
80002620:	5f 08       	sreq	r8
80002622:	a6 88       	st.b	r3[0x0],r8
80002624:	34 08       	mov	r8,64
							USB_DEVICE_EP_CTRL_SIZE)
					== 0);
		}
	}
	// Continue transfer and send next data
	if (nb_remain > USB_DEVICE_EP_CTRL_SIZE) {
80002626:	ee 08 19 00 	cp.h	r8,r7
8000262a:	f9 b7 03 40 	movlo	r7,64
8000262e:	49 98       	lddpc	r8,80002690 <udd_ctrl_in_sent+0x100>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80002630:	70 2b       	ld.w	r11,r8[0x8]
80002632:	49 98       	lddpc	r8,80002694 <udd_ctrl_in_sent+0x104>
80002634:	90 0a       	ld.sh	r10,r8[0x0]
80002636:	e1 b9 00 00 	mfsr	r9,0x0

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000263a:	d3 03       	ssrf	0x10
	cpu_irq_disable();
8000263c:	fe 68 01 30 	mov	r8,-130768
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write 
	// and if no OUT ZLP is recevied the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
80002640:	70 08       	ld.w	r8,r8[0x0]
80002642:	ed b8 00 01 	bld	r8,0x1
80002646:	c0 70       	breq	80002654 <udd_ctrl_in_sent+0xc4>
80002648:	5c 7a       	castu.h	r10
	if (nb_remain > USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
8000264a:	fc 18 e0 00 	movh	r8,0xe000
8000264e:	f6 0a 00 0a 	add	r10,r11,r10
80002652:	c0 98       	rjmp	80002664 <udd_ctrl_in_sent+0xd4>
80002654:	e3 b9 00 00 	mtsr	0x0,r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002658:	30 49       	mov	r9,4
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
8000265a:	48 d8       	lddpc	r8,8000268c <udd_ctrl_in_sent+0xfc>
8000265c:	91 09       	st.w	r8[0x0],r9
8000265e:	d8 32       	popm	r0-r7,pc
		return;	// Exit of IN DATA phase
80002660:	15 3b       	ld.ub	r11,r10++
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
80002662:	10 cb       	st.b	r8++,r11
80002664:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return;	// Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
80002668:	ee 0b 19 00 	cp.h	r11,r7
8000266c:	cf a3       	brcs	80002660 <udd_ctrl_in_sent+0xd0>
8000266e:	30 1a       	mov	r10,1
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_remain;

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
80002670:	fe 68 01 60 	mov	r8,-130720
80002674:	91 0a       	st.w	r8[0x0],r10
80002676:	fe 6b 01 f0 	mov	r11,-130576
	udd_enable_in_send_interrupt(0);
8000267a:	48 78       	lddpc	r8,80002694 <udd_ctrl_in_sent+0x104>
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_remain;
8000267c:	97 0a       	st.w	r11[0x0],r10

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
	udd_enable_in_send_interrupt(0);
8000267e:	90 0a       	ld.sh	r10,r8[0x0]
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_remain;
80002680:	f4 07 00 07 	add	r7,r10,r7
80002684:	b0 07       	st.h	r8[0x0],r7
80002686:	e3 b9 00 00 	mtsr	0x0,r9
8000268a:	d8 32       	popm	r0-r7,pc
#endif
	barrier();
8000268c:	00 00       	add	r0,r0
8000268e:	07 1c       	ld.sh	r12,r3++
80002690:	00 00       	add	r0,r0
80002692:	0c 98       	mov	r8,r6
80002694:	00 00       	add	r0,r0
80002696:	07 1a       	ld.sh	r10,r3++
80002698:	00 00       	add	r0,r0
8000269a:	07 20       	ld.uh	r0,r3++
8000269c:	00 00       	add	r0,r0
8000269e:	06 e4       	st.h	--r3,r4

800026a0 <udd_ep_alloc>:
800026a0:	d4 21       	pushm	r4-r7,lr
800026a2:	30 39       	mov	r9,3
800026a4:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
	uint8_t bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;

	if (ep > USB_DEVICE_MAX_EP)
800026a8:	f2 08 18 00 	cp.b	r8,r9
800026ac:	e0 8b 00 88 	brhi	800027bc <udd_ep_alloc+0x11c>
		return false;
	if (Is_udd_endpoint_enabled(ep))
800026b0:	fe 69 00 00 	mov	r9,-131072
800026b4:	72 76       	ld.w	r6,r9[0x1c]
800026b6:	30 17       	mov	r7,1
800026b8:	ee 08 09 4e 	lsl	lr,r7,r8
800026bc:	fd e6 00 06 	and	r6,lr,r6
800026c0:	c7 e1       	brne	800027bc <udd_ep_alloc+0x11c>
		return false;

	// Bank choise
	switch(bmAttributes&USB_EP_TYPE_MASK) {
800026c2:	f3 db c0 02 	bfextu	r9,r11,0x0,0x2
800026c6:	0e 39       	cp.w	r9,r7
800026c8:	c7 a5       	brlt	800027bc <udd_ep_alloc+0x11c>
800026ca:	58 29       	cp.w	r9,2
800026cc:	e0 8a 00 05 	brle	800026d6 <udd_ep_alloc+0x36>
800026d0:	58 39       	cp.w	r9,3
800026d2:	c7 51       	brne	800027bc <udd_ep_alloc+0x11c>
800026d4:	c0 28       	rjmp	800026d8 <udd_ep_alloc+0x38>
800026d6:	0e 96       	mov	r6,r7
	Assert(MaxEndpointSize < 1024);
	Assert((MaxEndpointSize == 1023) || !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);
		   
	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
800026d8:	5c 7a       	castu.h	r10
800026da:	f9 dc c0 e1 	bfextu	r12,r12,0x7,0x1
800026de:	ab 7b       	lsl	r11,0xb
800026e0:	a3 66       	lsl	r6,0x2
800026e2:	e2 1b 18 00 	andl	r11,0x1800,COH
800026e6:	e2 16 00 0c 	andl	r6,0xc,COH
800026ea:	f7 ec 10 8b 	or	r11,r11,r12<<0x8
800026ee:	f0 09 15 02 	lsl	r9,r8,0x2
800026f2:	30 8c       	mov	r12,8
800026f4:	e0 39 ff 00 	sub	r9,130816
800026f8:	f4 0c 0c 4c 	max	r12,r10,r12
800026fc:	72 07       	ld.w	r7,r9[0x0]
800026fe:	e0 6a 04 00 	mov	r10,1024
80002702:	e0 17 e6 83 	andl	r7,0xe683
80002706:	f8 0a 0d 4c 	min	r12,r12,r10
8000270a:	a1 7c       	lsl	r12,0x1
8000270c:	20 1c       	sub	r12,1
8000270e:	f8 0c 12 00 	clz	r12,r12
80002712:	f8 0c 11 1c 	rsub	r12,r12,28
80002716:	f7 ec 10 4b 	or	r11,r11,r12<<0x4
8000271a:	0c 4b       	or	r11,r6
8000271c:	e2 1b 19 7c 	andl	r11,0x197c,COH
80002720:	f7 e7 10 07 	or	r7,r11,r7
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
80002724:	5c 8e       	casts.h	lr
	Assert(MaxEndpointSize < 1024);
	Assert((MaxEndpointSize == 1023) || !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);
		   
	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
80002726:	93 07       	st.w	r9[0x0],r7
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
80002728:	fe 6a 01 0c 	mov	r10,-130804
8000272c:	30 39       	mov	r9,3

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
		if (Is_udd_endpoint_enabled(i)) {
8000272e:	fe 6b 00 00 	mov	r11,-131072
80002732:	30 17       	mov	r7,1
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
80002734:	c1 58       	rjmp	8000275e <udd_ep_alloc+0xbe>
		if (Is_udd_endpoint_enabled(i)) {
80002736:	76 76       	ld.w	r6,r11[0x1c]
80002738:	ee 09 09 4c 	lsl	r12,r7,r9
			ep_allocated |= 1 << i;
			udd_disable_endpoint(i);
8000273c:	f8 05 11 ff 	rsub	r5,r12,-1
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
		if (Is_udd_endpoint_enabled(i)) {
80002740:	f9 e6 00 06 	and	r6,r12,r6
80002744:	c0 b0       	breq	8000275a <udd_ep_alloc+0xba>
			ep_allocated |= 1 << i;
			udd_disable_endpoint(i);
80002746:	76 76       	ld.w	r6,r11[0x1c]
80002748:	eb e6 00 06 	and	r6,r5,r6
8000274c:	97 76       	st.w	r11[0x1c],r6
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
		if (Is_udd_endpoint_enabled(i)) {
			ep_allocated |= 1 << i;
8000274e:	f9 ee 10 0e 	or	lr,r12,lr
			udd_disable_endpoint(i);
			udd_unallocate_memory(i);
80002752:	74 0c       	ld.w	r12,r10[0x0]
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
		if (Is_udd_endpoint_enabled(i)) {
			ep_allocated |= 1 << i;
80002754:	5c 8e       	casts.h	lr
			udd_disable_endpoint(i);
			udd_unallocate_memory(i);
80002756:	a1 dc       	cbr	r12,0x1
80002758:	95 0c       	st.w	r10[0x0],r12
8000275a:	20 19       	sub	r9,1
8000275c:	20 4a       	sub	r10,4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
8000275e:	f0 09 18 00 	cp.b	r9,r8
80002762:	fe 9b ff ea 	brhi	80002736 <udd_ep_alloc+0x96>
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
80002766:	5c 7e       	castu.h	lr
			udd_allocate_memory(i);
			udd_enable_endpoint(i);
80002768:	fe 6a 00 00 	mov	r10,-131072
8000276c:	30 17       	mov	r7,1
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
8000276e:	30 3c       	mov	r12,3
		if (ep_allocated & (1 << i)) {
			udd_allocate_memory(i);
80002770:	fe 66 01 00 	mov	r6,-130816
80002774:	f0 0b 15 02 	lsl	r11,r8,0x2
			udd_enable_endpoint(i);
80002778:	ee 08 09 45 	lsl	r5,r7,r8
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
			udd_allocate_memory(i);
8000277c:	f6 06 00 09 	add	r9,r11,r6
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
80002780:	f0 c6 ff ff 	sub	r6,r8,-1
		if (ep_allocated & (1 << i)) {
			udd_allocate_memory(i);
			udd_enable_endpoint(i);
			if (!Is_udd_endpoint_configured(i))
80002784:	e0 3b fe d0 	sub	r11,130768
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
80002788:	fc 08 08 48 	asr	r8,lr,r8
8000278c:	ed b8 00 00 	bld	r8,0x0
80002790:	c0 f1       	brne	800027ae <udd_ep_alloc+0x10e>
			udd_allocate_memory(i);
80002792:	72 08       	ld.w	r8,r9[0x0]
80002794:	a1 b8       	sbr	r8,0x1
80002796:	93 08       	st.w	r9[0x0],r8
			udd_enable_endpoint(i);
80002798:	74 78       	ld.w	r8,r10[0x1c]
8000279a:	eb e8 10 08 	or	r8,r5,r8
8000279e:	95 78       	st.w	r10[0x1c],r8
			if (!Is_udd_endpoint_configured(i))
800027a0:	76 08       	ld.w	r8,r11[0x0]
800027a2:	ed b8 00 12 	bld	r8,0x12
800027a6:	c0 b1       	brne	800027bc <udd_ep_alloc+0x11c>
				return false;
			udd_enable_endpoint_bank_autoswitch(i);	
800027a8:	72 08       	ld.w	r8,r9[0x0]
800027aa:	a9 b8       	sbr	r8,0x9
800027ac:	93 08       	st.w	r9[0x0],r8
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
800027ae:	f1 d6 c0 08 	bfextu	r8,r6,0x0,0x8
800027b2:	f8 08 18 00 	cp.b	r8,r12
800027b6:	fe 98 ff dd 	brls	80002770 <udd_ep_alloc+0xd0>
800027ba:	da 2a       	popm	r4-r7,pc,r12=1
800027bc:	d8 2a       	popm	r4-r7,pc,r12=0

800027be <udd_reset_ep_ctrl>:

static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;
	// Reset USB address to 0
	udd_configure_address(0);
800027be:	fe 68 00 00 	mov	r8,-131072
800027c2:	70 09       	ld.w	r9,r8[0x0]
800027c4:	e0 19 ff 80 	andl	r9,0xff80
800027c8:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
800027ca:	30 8c       	mov	r12,8
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;
	// Reset USB address to 0
	udd_configure_address(0);
	udd_enable_address();
800027cc:	70 09       	ld.w	r9,r8[0x0]
800027ce:	a7 b9       	sbr	r9,0x7
800027d0:	91 09       	st.w	r8[0x0],r9
	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
800027d2:	34 0b       	mov	r11,64
800027d4:	fe 69 01 00 	mov	r9,-130816
800027d8:	f6 0c 0c 4b 	max	r11,r11,r12
800027dc:	72 0a       	ld.w	r10,r9[0x0]
800027de:	e0 6c 04 00 	mov	r12,1024
800027e2:	e0 1a e6 83 	andl	r10,0xe683
800027e6:	f6 0c 0d 4b 	min	r11,r11,r12
800027ea:	a1 7b       	lsl	r11,0x1
800027ec:	20 1b       	sub	r11,1
800027ee:	f6 0b 12 00 	clz	r11,r11
800027f2:	f6 0b 11 1c 	rsub	r11,r11,28
800027f6:	a5 6b       	lsl	r11,0x4
800027f8:	e2 1b 19 7c 	andl	r11,0x197c,COH
800027fc:	f7 ea 10 0a 	or	r10,r11,r10
80002800:	93 0a       	st.w	r9[0x0],r10
			USB_EP_TYPE_CONTROL,
			0,
			USB_DEVICE_EP_CTRL_SIZE, AVR32_USBB_UECFG0_EPBK_SINGLE);

	udd_allocate_memory(0);
80002802:	72 0a       	ld.w	r10,r9[0x0]
80002804:	a1 ba       	sbr	r10,0x1
80002806:	93 0a       	st.w	r9[0x0],r10
	udd_enable_endpoint(0);
80002808:	70 79       	ld.w	r9,r8[0x1c]
8000280a:	a1 a9       	sbr	r9,0x0
8000280c:	91 79       	st.w	r8[0x1c],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000280e:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80002812:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
80002814:	fe 69 01 f0 	mov	r9,-130576
80002818:	30 4b       	mov	r11,4
8000281a:	93 0b       	st.w	r9[0x0],r11
	udd_enable_out_received_interrupt(0);
8000281c:	30 2b       	mov	r11,2
8000281e:	93 0b       	st.w	r9[0x0],r11
	udd_enable_endpoint_interrupt(0);
80002820:	e0 69 10 00 	mov	r9,4096
80002824:	91 69       	st.w	r8[0x18],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002826:	e3 ba 00 00 	mtsr	0x0,r10
	cpu_irq_restore(flags);
}
8000282a:	5e fc       	retal	r12

8000282c <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
8000282c:	d4 21       	pushm	r4-r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000282e:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80002832:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown, 
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
	otg_unfreeze_clock();
80002834:	fe 67 00 00 	mov	r7,-131072
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown, 
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
80002838:	30 1c       	mov	r12,1
8000283a:	c5 fe       	rcall	800024f8 <udd_sleep_mode>
8000283c:	ee f8 08 00 	ld.w	r8,r7[2048]
	otg_unfreeze_clock();
80002840:	af c8       	cbr	r8,0xe
80002842:	ef 48 08 00 	st.w	r7[2048],r8
80002846:	6e 08       	ld.w	r8,r7[0x0]
#else
	// Check USB clock because the source can be a PLL
	while( !Is_clock_usable() );
#endif
	// Authorize attach if VBus is present
	udd_attach_device();
80002848:	a9 c8       	cbr	r8,0x8
8000284a:	8f 08       	st.w	r7[0x0],r8
8000284c:	e0 a0 06 e6 	rcall	80003618 <udc_reset>

	// (RESET_AND_WAKEUP)
	// After the attach and the first USB suspend, the following USB Reset time can be inferior to CPU restart clock time.
	// Thus, the USB Reset state is not detected and endpoint control is not allocated
	// In this case, a Reset is do automatically after attach.
	udc_reset();	// Reset USB Device Stack Core
80002850:	cb 7f       	rcall	800027be <udd_reset_ep_ctrl>
	udd_reset_ep_ctrl();	// Reset endpoint control
80002852:	c8 5e       	rcall	8000255c <udd_ctrl_init>
80002854:	30 8b       	mov	r11,8
	udd_ctrl_init();	// Reset endpoint control management
80002856:	8f 6b       	st.w	r7[0x18],r11
80002858:	30 19       	mov	r9,1

	// Enable USB line events
	udd_enable_reset_interrupt();
8000285a:	8f 69       	st.w	r7[0x18],r9
8000285c:	31 08       	mov	r8,16
	udd_enable_suspend_interrupt();
8000285e:	8f 68       	st.w	r7[0x18],r8
80002860:	30 4a       	mov	r10,4
	udd_enable_wake_up_interrupt();
80002862:	8f 6a       	st.w	r7[0x18],r10
80002864:	8f 2b       	st.w	r7[0x8],r11
	udd_enable_sof_interrupt();
80002866:	8f 2a       	st.w	r7[0x8],r10
80002868:	30 2a       	mov	r10,2
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
#endif
	// Reset following interupts flag
	udd_ack_reset();
8000286a:	8f 2a       	st.w	r7[0x8],r10
	udd_ack_sof();
8000286c:	8f 29       	st.w	r7[0x8],r9
	udd_ack_msof();
8000286e:	8f 28       	st.w	r7[0x8],r8
80002870:	ee f8 08 00 	ld.w	r8,r7[2048]
	udd_ack_suspend();
#else
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
#endif
	udd_ack_wake_up();
80002874:	af a8       	sbr	r8,0xe
	otg_freeze_clock();
80002876:	ef 48 08 00 	st.w	r7[2048],r8
8000287a:	e3 b6 00 00 	mtsr	0x0,r6
8000287e:	d8 22       	popm	r4-r7,pc

80002880 <udd_enable>:
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002880:	d4 21       	pushm	r4-r7,lr
80002882:	e0 a0 03 bd 	rcall	80002ffc <sysclk_enable_usb>
	cpu_irq_restore(flags);
}
80002886:	e1 b6 00 00 	mfsr	r6,0x0
8000288a:	d3 03       	ssrf	0x10
8000288c:	fe 67 00 00 	mov	r7,-131072
80002890:	ee f8 08 00 	ld.w	r8,r7[2048]
80002894:	af d8       	cbr	r8,0xf
80002896:	ef 48 08 00 	st.w	r7[2048],r8

	flags = cpu_irq_save();

	//** Enable USB hardware
	otg_disable();
	(void)Is_otg_enabled();
8000289a:	ee f8 08 00 	ld.w	r8,r7[2048]
	// Check UID pin state before enter in USB device mode
	if (!Is_otg_id_device())
		return false;
#else
	// Here, only the Device mode is possible, then link USBB interrupt to UDD interrupt
	irq_register_handler(udd_interrupt, AVR32_USBB_IRQ, UDD_USB_INT_LEVEL);
8000289e:	30 0a       	mov	r10,0
800028a0:	e0 6b 02 20 	mov	r11,544
800028a4:	fe cc ff 34 	sub	r12,pc,-204
800028a8:	fe b0 fc 5e 	rcall	80002164 <INTC_register_interrupt>
	otg_force_device_mode();
800028ac:	ee f8 08 00 	ld.w	r8,r7[2048]
800028b0:	b9 b8       	sbr	r8,0x19
800028b2:	ef 48 08 00 	st.w	r7[2048],r8
800028b6:	ee f8 08 00 	ld.w	r8,r7[2048]
800028ba:	b9 c8       	cbr	r8,0x18
800028bc:	ef 48 08 00 	st.w	r7[2048],r8
#endif
	otg_disable_pad();
800028c0:	ee f8 08 00 	ld.w	r8,r7[2048]
800028c4:	ad c8       	cbr	r8,0xc
800028c6:	ef 48 08 00 	st.w	r7[2048],r8
	otg_enable_pad();
800028ca:	ee f8 08 00 	ld.w	r8,r7[2048]
800028ce:	ad a8       	sbr	r8,0xc
800028d0:	ef 48 08 00 	st.w	r7[2048],r8
	otg_enable();
800028d4:	ee f8 08 00 	ld.w	r8,r7[2048]
800028d8:	af b8       	sbr	r8,0xf
800028da:	ef 48 08 00 	st.w	r7[2048],r8
	otg_unfreeze_clock();
800028de:	ee f8 08 00 	ld.w	r8,r7[2048]
800028e2:	af c8       	cbr	r8,0xe
800028e4:	ef 48 08 00 	st.w	r7[2048],r8
	(void)Is_otg_clock_frozen();
800028e8:	ee f8 08 00 	ld.w	r8,r7[2048]

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
800028ec:	6e 08       	ld.w	r8,r7[0x0]
800028ee:	ad c8       	cbr	r8,0xc
#  ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
#  else
	udd_high_speed_disable();
800028f0:	8f 08       	st.w	r7[0x0],r8
800028f2:	6e 08       	ld.w	r8,r7[0x0]
800028f4:	e8 18 0c 00 	orl	r8,0xc00
#  endif
#endif
	udd_enable_vbus_interrupt();
800028f8:	8f 08       	st.w	r7[0x0],r8
800028fa:	ee f8 08 00 	ld.w	r8,r7[2048]
800028fe:	a1 b8       	sbr	r8,0x1
80002900:	ef 48 08 00 	st.w	r7[2048],r8
	otg_freeze_clock();
80002904:	ee f8 08 00 	ld.w	r8,r7[2048]

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80002908:	af a8       	sbr	r8,0xe
#  else
	udd_high_speed_disable();
#  endif
#endif
	udd_enable_vbus_interrupt();
	otg_freeze_clock();
8000290a:	30 09       	mov	r9,0
8000290c:	ef 48 08 00 	st.w	r7[2048],r8

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80002910:	49 58       	lddpc	r8,80002964 <udd_enable+0xe4>
		udd_ep_job[i].stall_requested = false;
80002912:	70 0a       	ld.w	r10,r8[0x0]
80002914:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
80002918:	f5 d9 d3 81 	bfins	r10,r9,0x1c,0x1

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
8000291c:	91 0a       	st.w	r8[0x0],r10
		udd_ep_job[i].stall_requested = false;
8000291e:	70 4a       	ld.w	r10,r8[0x10]
80002920:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
80002924:	f5 d9 d3 81 	bfins	r10,r9,0x1c,0x1

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80002928:	91 4a       	st.w	r8[0x10],r10
		udd_ep_job[i].stall_requested = false;
8000292a:	70 8a       	ld.w	r10,r8[0x20]
8000292c:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
80002930:	f5 d9 d3 81 	bfins	r10,r9,0x1c,0x1
#  endif
#endif
	udd_enable_vbus_interrupt();
	otg_freeze_clock();
	// Always authorize asynchrone USB interrupts to exit of sleep mode
	AVR32_PM.AWEN.usb_waken = 1;
80002934:	91 8a       	st.w	r8[0x20],r10
80002936:	fe 78 0c 00 	mov	r8,-62464
8000293a:	30 1b       	mov	r11,1
8000293c:	f0 fa 01 44 	ld.w	r10,r8[324]
80002940:	f5 db d0 01 	bfins	r10,r11,0x0,0x1
80002944:	f1 4a 01 44 	st.w	r8[324],r10

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
80002948:	48 88       	lddpc	r8,80002968 <udd_enable+0xe8>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000294a:	b0 89       	st.b	r8[0x0],r9
8000294c:	e1 b9 00 00 	mfsr	r9,0x0
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
80002950:	d3 03       	ssrf	0x10
80002952:	48 78       	lddpc	r8,8000296c <udd_enable+0xec>
80002954:	11 ba       	ld.ub	r10,r8[0x3]
80002956:	2f fa       	sub	r10,-1
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002958:	b0 ba       	st.b	r8[0x3],r10
8000295a:	e3 b9 00 00 	mtsr	0x0,r9
8000295e:	e3 b6 00 00 	mtsr	0x0,r6
	sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_SUSPEND);
#endif

	cpu_irq_restore(flags);
}
80002962:	d8 22       	popm	r4-r7,pc
80002964:	00 00       	add	r0,r0
80002966:	06 e8       	st.h	--r3,r8
80002968:	00 00       	add	r0,r0
8000296a:	07 18       	ld.sh	r8,r3++
8000296c:	00 00       	add	r0,r0
8000296e:	0c b0       	st.h	r6++,r0

80002970 <udd_interrupt>:
80002970:	eb cd 40 fe 	pushm	r1-r7,lr
80002974:	fe 68 00 00 	mov	r8,-131072
80002978:	70 19       	ld.w	r9,r8[0x4]
8000297a:	ed b9 00 02 	bld	r9,0x2
#endif
#endif
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#endif
{
	if (Is_udd_sof()) {
8000297e:	c0 a1       	brne	80002992 <udd_interrupt+0x22>
		udd_ack_sof();
80002980:	30 49       	mov	r9,4
80002982:	91 29       	st.w	r8[0x8],r9
		if (Is_udd_full_speed_mode()) {
80002984:	f0 f8 08 04 	ld.w	r8,r8[2052]
80002988:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
8000298c:	e0 81 02 98 	brne	80002ebc <udd_interrupt+0x54c>
80002990:	c0 78       	rjmp	8000299e <udd_interrupt+0x2e>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_end;
	}
	if (Is_udd_msof()) {
80002992:	70 19       	ld.w	r9,r8[0x4]
80002994:	ed b9 00 01 	bld	r9,0x1
80002998:	c0 71       	brne	800029a6 <udd_interrupt+0x36>
		udd_ack_msof();
8000299a:	30 29       	mov	r9,2
8000299c:	91 29       	st.w	r8[0x8],r9
		udc_sof_notify();
8000299e:	e0 a0 05 8f 	rcall	800034bc <udc_sof_notify>
		goto udd_interrupt_end;
800029a2:	e0 8f 02 8d 	bral	80002ebc <udd_interrupt+0x54c>


static bool udd_ctrl_interrupt(void)
{

	if (!Is_udd_endpoint_interrupt(0))
800029a6:	70 18       	ld.w	r8,r8[0x4]
800029a8:	ed b8 00 0c 	bld	r8,0xc
800029ac:	e0 81 01 79 	brne	80002c9e <udd_interrupt+0x32e>
		return false;	// No interrupt events on control endpoint

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
800029b0:	fe 68 02 20 	mov	r8,-130528
800029b4:	31 09       	mov	r9,16
800029b6:	91 09       	st.w	r8[0x0],r9
	udd_disable_nak_out_interrupt(0);
800029b8:	30 89       	mov	r9,8
800029ba:	91 09       	st.w	r8[0x0],r9


	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
800029bc:	fe 69 01 30 	mov	r9,-130768
800029c0:	72 08       	ld.w	r8,r9[0x0]
800029c2:	ed b8 00 02 	bld	r8,0x2
800029c6:	c7 51       	brne	80002ab0 <udd_interrupt+0x140>
static void udd_ctrl_setup_received(void)
{
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
800029c8:	4c 18       	lddpc	r8,80002acc <udd_interrupt+0x15c>
800029ca:	70 08       	ld.w	r8,r8[0x0]
800029cc:	58 08       	cp.w	r8,0
800029ce:	c0 80       	breq	800029de <udd_interrupt+0x6e>


static void udd_ctrl_endofrequest(void)
{
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
800029d0:	4c 08       	lddpc	r8,80002ad0 <udd_interrupt+0x160>
800029d2:	70 48       	ld.w	r8,r8[0x10]
800029d4:	58 08       	cp.w	r8,0
800029d6:	c0 20       	breq	800029da <udd_interrupt+0x6a>
		udd_g_ctrlreq.callback();
800029d8:	5d 18       	icall	r8
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
		// Reinitializes control endpoint management
		udd_ctrl_init();
800029da:	fe b0 fd c1 	rcall	8000255c <udd_ctrl_init>
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
800029de:	fe 68 01 30 	mov	r8,-130768
800029e2:	70 08       	ld.w	r8,r8[0x0]
800029e4:	f1 d8 c2 8b 	bfextu	r8,r8,0x14,0xb
800029e8:	58 88       	cp.w	r8,8
800029ea:	c2 61       	brne	80002a36 <udd_interrupt+0xc6>
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
800029ec:	fc 18 e0 00 	movh	r8,0xe000
		return;	// Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
800029f0:	4b 8a       	lddpc	r10,80002ad0 <udd_interrupt+0x160>
800029f2:	fc 19 20 00 	movh	r9,0x2000
800029f6:	f0 0a 00 0b 	add	r11,r8,r10
800029fa:	11 3c       	ld.ub	r12,r8++
800029fc:	f6 09 0b 0c 	st.b	r11[r9],r12
80002a00:	4b 47       	lddpc	r7,80002ad0 <udd_interrupt+0x160>
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return;	// Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
80002a02:	30 8e       	mov	lr,8
80002a04:	ea 1e e0 00 	orh	lr,0xe000
80002a08:	1c 38       	cp.w	r8,lr
80002a0a:	cf 61       	brne	800029f6 <udd_interrupt+0x86>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
80002a0c:	8e 9a       	ld.uh	r10,r7[0x2]
80002a0e:	f4 0b 16 08 	lsr	r11,r10,0x8
80002a12:	f7 ea 10 8a 	or	r10,r11,r10<<0x8
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
80002a16:	8e a9       	ld.uh	r9,r7[0x4]
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
80002a18:	ae 1a       	st.h	r7[0x2],r10
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
80002a1a:	f2 0a 16 08 	lsr	r10,r9,0x8
80002a1e:	f5 e9 10 89 	or	r9,r10,r9<<0x8
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
80002a22:	8e b8       	ld.uh	r8,r7[0x6]
	for (i = 0; i < 8; i++) {
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
80002a24:	ae 29       	st.h	r7[0x4],r9
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
80002a26:	f0 09 16 08 	lsr	r9,r8,0x8
80002a2a:	f3 e8 10 88 	or	r8,r9,r8<<0x8
80002a2e:	ae 38       	st.h	r7[0x6],r8

	// Decode setup request
	if (udc_process_setup() == false) {
80002a30:	e0 a0 06 18 	rcall	80003660 <udc_process_setup>
80002a34:	c0 b1       	brne	80002a4a <udd_interrupt+0xda>

static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
	udd_enable_stall_handshake(0);
80002a36:	e8 69 00 00 	mov	r9,524288
80002a3a:	fe 68 01 f0 	mov	r8,-130576
80002a3e:	91 09       	st.w	r8[0x0],r9


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
80002a40:	30 59       	mov	r9,5
80002a42:	4a 38       	lddpc	r8,80002acc <udd_interrupt+0x15c>
80002a44:	91 09       	st.w	r8[0x0],r9

	// Decode setup request
	if (udc_process_setup() == false) {
		// Setup request unknow then stall it
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
80002a46:	30 49       	mov	r9,4
80002a48:	cc c8       	rjmp	80002be0 <udd_interrupt+0x270>
		return;
	}
	udd_ack_setup_received(0);
80002a4a:	30 49       	mov	r9,4
80002a4c:	fe 68 01 60 	mov	r8,-130720
80002a50:	91 09       	st.w	r8[0x0],r9

	if (Udd_setup_is_in()) {
80002a52:	30 09       	mov	r9,0
80002a54:	0f 8a       	ld.ub	r10,r7[0x0]
80002a56:	f2 0a 18 00 	cp.b	r10,r9
80002a5a:	c1 04       	brge	80002a7a <udd_interrupt+0x10a>
		// Compute if an IN ZLP must be send after IN data
		udd_ctrl_payload_need_in_zlp =
80002a5c:	49 e9       	lddpc	r9,80002ad4 <udd_interrupt+0x164>
80002a5e:	8e e8       	ld.uh	r8,r7[0xc]
80002a60:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80002a64:	5f 0a       	sreq	r10
80002a66:	b2 8a       	st.b	r9[0x0],r10
				((udd_g_ctrlreq.payload_size %
						USB_DEVICE_EP_CTRL_SIZE) == 0);
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80002a68:	49 c9       	lddpc	r9,80002ad8 <udd_interrupt+0x168>
80002a6a:	30 08       	mov	r8,0
80002a6c:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80002a6e:	49 c9       	lddpc	r9,80002adc <udd_interrupt+0x16c>
80002a70:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
80002a72:	30 29       	mov	r9,2
80002a74:	49 68       	lddpc	r8,80002acc <udd_interrupt+0x15c>
80002a76:	91 09       	st.w	r8[0x0],r9
80002a78:	c2 68       	rjmp	80002ac4 <udd_interrupt+0x154>
		udd_ctrl_in_sent();	// Send first data transfer
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
80002a7a:	8e 3b       	ld.sh	r11,r7[0x6]
80002a7c:	30 09       	mov	r9,0
80002a7e:	49 4a       	lddpc	r10,80002acc <udd_interrupt+0x15c>
80002a80:	f2 0b 19 00 	cp.h	r11,r9
80002a84:	c0 41       	brne	80002a8c <udd_interrupt+0x11c>

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
80002a86:	30 39       	mov	r9,3
80002a88:	95 09       	st.w	r10[0x0],r9
80002a8a:	c8 f8       	rjmp	80002ba8 <udd_interrupt+0x238>
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80002a8c:	49 3b       	lddpc	r11,80002ad8 <udd_interrupt+0x168>
80002a8e:	b6 09       	st.h	r11[0x0],r9
		udd_ctrl_payload_nb_trans = 0;
80002a90:	49 3b       	lddpc	r11,80002adc <udd_interrupt+0x16c>
80002a92:	b6 09       	st.h	r11[0x0],r9
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
80002a94:	30 19       	mov	r9,1
80002a96:	95 09       	st.w	r10[0x0],r9
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
80002a98:	31 09       	mov	r9,16
80002a9a:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002a9c:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002aa0:	d3 03       	ssrf	0x10
		flags = cpu_irq_save();
		udd_enable_nak_in_interrupt(0);
80002aa2:	fe 6a 01 f0 	mov	r10,-130576
80002aa6:	95 09       	st.w	r10[0x0],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002aa8:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
80002aac:	e0 8f 02 08 	bral	80002ebc <udd_interrupt+0x54c>
	if (Is_udd_setup_received(0)) {
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
80002ab0:	72 08       	ld.w	r8,r9[0x0]
80002ab2:	ed b8 00 00 	bld	r8,0x0
80002ab6:	c1 51       	brne	80002ae0 <udd_interrupt+0x170>
80002ab8:	fe 68 01 c0 	mov	r8,-130624
80002abc:	70 08       	ld.w	r8,r8[0x0]
80002abe:	ed b8 00 00 	bld	r8,0x0
80002ac2:	c0 f1       	brne	80002ae0 <udd_interrupt+0x170>
		// IN packet sent
		udd_ctrl_in_sent();
80002ac4:	fe b0 fd 66 	rcall	80002590 <udd_ctrl_in_sent>
80002ac8:	e0 8f 01 fa 	bral	80002ebc <udd_interrupt+0x54c>
80002acc:	00 00       	add	r0,r0
80002ace:	07 1c       	ld.sh	r12,r3++
80002ad0:	00 00       	add	r0,r0
80002ad2:	0c 98       	mov	r8,r6
80002ad4:	00 00       	add	r0,r0
80002ad6:	07 20       	ld.uh	r0,r3++
80002ad8:	00 00       	add	r0,r0
80002ada:	06 e4       	st.h	--r3,r4
80002adc:	00 00       	add	r0,r0
80002ade:	07 1a       	ld.sh	r10,r3++
80002ae0:	fe 68 01 30 	mov	r8,-130768
80002ae4:	70 09       	ld.w	r9,r8[0x0]
80002ae6:	ed b9 00 01 	bld	r9,0x1
80002aea:	e0 81 00 9f 	brne	80002c28 <udd_interrupt+0x2b8>
80002aee:	4c ba       	lddpc	r10,80002c18 <udd_interrupt+0x2a8>
		return true;
	}
	if (Is_udd_out_received(0)) {
80002af0:	74 09       	ld.w	r9,r10[0x0]
80002af2:	58 19       	cp.w	r9,1
80002af4:	c1 70       	breq	80002b22 <udd_interrupt+0x1b2>
80002af6:	58 29       	cp.w	r9,2
80002af8:	5f 08       	sreq	r8
80002afa:	58 49       	cp.w	r9,4
80002afc:	5f 09       	sreq	r9
{
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
80002afe:	f3 e8 10 08 	or	r8,r9,r8
80002b02:	c0 80       	breq	80002b12 <udd_interrupt+0x1a2>
80002b04:	4c 68       	lddpc	r8,80002c1c <udd_interrupt+0x2ac>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
80002b06:	70 48       	ld.w	r8,r8[0x10]
80002b08:	58 08       	cp.w	r8,0
80002b0a:	e0 80 01 82 	breq	80002e0e <udd_interrupt+0x49e>
80002b0e:	5d 18       	icall	r8
80002b10:	c7 f9       	rjmp	80002e0e <udd_interrupt+0x49e>
80002b12:	30 58       	mov	r8,5


static void udd_ctrl_endofrequest(void)
{
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
80002b14:	e8 69 00 00 	mov	r9,524288
80002b18:	95 08       	st.w	r10[0x0],r8
80002b1a:	fe 68 01 f0 	mov	r8,-130576
		udd_g_ctrlreq.callback();
80002b1e:	91 09       	st.w	r8[0x0],r9
80002b20:	c7 79       	rjmp	80002e0e <udd_interrupt+0x49e>


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
80002b22:	4b f9       	lddpc	r9,80002c1c <udd_interrupt+0x2ac>
	udd_enable_stall_handshake(0);
80002b24:	70 08       	ld.w	r8,r8[0x0]
80002b26:	92 6a       	ld.sh	r10,r9[0xc]


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
80002b28:	f1 d8 c2 8b 	bfextu	r8,r8,0x14,0xb
	udd_enable_stall_handshake(0);
80002b2c:	4b d9       	lddpc	r9,80002c20 <udd_interrupt+0x2b0>
80002b2e:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
		udd_ctrl_init();
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
80002b32:	92 09       	ld.sh	r9,r9[0x0]
		// Reinitializes control endpoint management
		udd_ctrl_init();
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
80002b34:	f7 d9 c0 10 	bfextu	r11,r9,0x0,0x10
80002b38:	f0 0b 00 0b 	add	r11,r8,r11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
80002b3c:	16 3c       	cp.w	r12,r11
80002b3e:	c0 44       	brge	80002b46 <udd_interrupt+0x1d6>
80002b40:	f4 09 01 08 	sub	r8,r10,r9
80002b44:	5c 88       	casts.h	r8
80002b46:	4b 6a       	lddpc	r10,80002c1c <udd_interrupt+0x2ac>
80002b48:	74 2b       	ld.w	r11,r10[0x8]
80002b4a:	f5 d9 c0 10 	bfextu	r10,r9,0x0,0x10
80002b4e:	14 0b       	add	r11,r10
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
80002b50:	fc 1a e0 00 	movh	r10,0xe000
80002b54:	c0 38       	rjmp	80002b5a <udd_interrupt+0x1ea>
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80002b56:	15 3c       	ld.ub	r12,r10++
80002b58:	16 cc       	st.b	r11++,r12
80002b5a:	f9 da c0 08 	bfextu	r12,r10,0x0,0x8
80002b5e:	f0 0c 19 00 	cp.h	r12,r8
80002b62:	cf a3       	brcs	80002b56 <udd_interrupt+0x1e6>
80002b64:	f0 09 00 09 	add	r9,r8,r9
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
80002b68:	4a e7       	lddpc	r7,80002c20 <udd_interrupt+0x2b0>
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
80002b6a:	5c 89       	casts.h	r9
80002b6c:	ae 09       	st.h	r7[0x0],r9
80002b6e:	34 0a       	mov	r10,64
80002b70:	f4 08 19 00 	cp.h	r8,r10
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
80002b74:	c0 c1       	brne	80002b8c <udd_interrupt+0x21c>
80002b76:	4a a8       	lddpc	r8,80002c1c <udd_interrupt+0x2ac>
80002b78:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
80002b7c:	4a a6       	lddpc	r6,80002c24 <udd_interrupt+0x2b4>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
80002b7e:	90 bb       	ld.uh	r11,r8[0x6]
80002b80:	8c 8a       	ld.uh	r10,r6[0x0]
80002b82:	f8 0a 00 0a 	add	r10,r12,r10
80002b86:	14 3b       	cp.w	r11,r10
80002b88:	e0 89 00 1c 	brgt	80002bc0 <udd_interrupt+0x250>
80002b8c:	4a 48       	lddpc	r8,80002c1c <udd_interrupt+0x2ac>
80002b8e:	b0 69       	st.h	r8[0xc],r9
80002b90:	70 5c       	ld.w	r12,r8[0x14]
80002b92:	58 0c       	cp.w	r12,0
80002b94:	c0 30       	breq	80002b9a <udd_interrupt+0x22a>
80002b96:	5d 1c       	icall	r12
80002b98:	c1 b0       	breq	80002bce <udd_interrupt+0x25e>
80002b9a:	30 29       	mov	r9,2
							udd_ctrl_payload_nb_trans)))
	{
		// End of reception because it is a short packet
		// Before send ZLP, call intermediat calback 
		// in case of data receiv generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
80002b9c:	fe 68 01 60 	mov	r8,-130720
		if (NULL != udd_g_ctrlreq.over_under_run) {
80002ba0:	30 3a       	mov	r10,3
80002ba2:	91 09       	st.w	r8[0x0],r9
80002ba4:	49 d9       	lddpc	r9,80002c18 <udd_interrupt+0x2a8>
			if (!udd_g_ctrlreq.over_under_run()) {
80002ba6:	93 0a       	st.w	r9[0x0],r10
80002ba8:	e1 bb 00 00 	mfsr	r11,0x0
				udd_ack_out_received(0);
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
80002bac:	d3 03       	ssrf	0x10
80002bae:	30 1a       	mov	r10,1

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
80002bb0:	91 0a       	st.w	r8[0x0],r10
				udd_ack_out_received(0);
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
80002bb2:	fe 69 01 f0 	mov	r9,-130576

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
80002bb6:	93 0a       	st.w	r9[0x0],r10

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002bb8:	30 8a       	mov	r10,8
80002bba:	91 0a       	st.w	r8[0x0],r10
	cpu_irq_disable();
80002bbc:	93 0a       	st.w	r9[0x0],r10
	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
80002bbe:	c6 58       	rjmp	80002c88 <udd_interrupt+0x318>
80002bc0:	90 6a       	ld.sh	r10,r8[0xc]
	udd_enable_in_send_interrupt(0);
80002bc2:	f2 0a 19 00 	cp.h	r10,r9
80002bc6:	c1 a1       	brne	80002bfa <udd_interrupt+0x28a>
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
80002bc8:	70 5c       	ld.w	r12,r8[0x14]
80002bca:	58 0c       	cp.w	r12,0
	udd_enable_nak_out_interrupt(0);
80002bcc:	c0 e1       	brne	80002be8 <udd_interrupt+0x278>
80002bce:	e8 69 00 00 	mov	r9,524288
		udd_ack_out_received(0);
		udd_ctrl_send_zlp_in();
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
80002bd2:	fe 68 01 f0 	mov	r8,-130576
80002bd6:	91 09       	st.w	r8[0x0],r9
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
80002bd8:	30 59       	mov	r9,5
80002bda:	49 08       	lddpc	r8,80002c18 <udd_interrupt+0x2a8>
80002bdc:	91 09       	st.w	r8[0x0],r9

static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
	udd_enable_stall_handshake(0);
80002bde:	30 29       	mov	r9,2
80002be0:	fe 68 01 60 	mov	r8,-130720
80002be4:	91 09       	st.w	r8[0x0],r9
80002be6:	c6 b9       	rjmp	80002ebc <udd_interrupt+0x54c>


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
80002be8:	5d 1c       	icall	r12
80002bea:	cf 20       	breq	80002bce <udd_interrupt+0x25e>
80002bec:	8e 09       	ld.sh	r9,r7[0x0]
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
			// No callback availabled to request a new payload buffer
			udd_ctrl_stall_data();
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80002bee:	8c 08       	ld.sh	r8,r6[0x0]
80002bf0:	f2 08 00 08 	add	r8,r9,r8
80002bf4:	ac 08       	st.h	r6[0x0],r8
80002bf6:	30 08       	mov	r8,0
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
80002bf8:	ae 08       	st.h	r7[0x0],r8
80002bfa:	fe 69 01 60 	mov	r9,-130720
			udd_ack_out_received(0);
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
80002bfe:	30 28       	mov	r8,2
80002c00:	93 08       	st.w	r9[0x0],r8
80002c02:	31 08       	mov	r8,16
80002c04:	93 08       	st.w	r9[0x0],r8
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
80002c06:	e1 b9 00 00 	mfsr	r9,0x0
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
80002c0a:	d3 03       	ssrf	0x10
80002c0c:	fe 6a 01 f0 	mov	r10,-130576
80002c10:	95 08       	st.w	r10[0x0],r8
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
80002c12:	e3 b9 00 00 	mtsr	0x0,r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002c16:	c4 bb       	rjmp	80002aac <udd_interrupt+0x13c>
80002c18:	00 00       	add	r0,r0
	cpu_irq_disable();
80002c1a:	07 1c       	ld.sh	r12,r3++
	flags = cpu_irq_save();
	udd_enable_nak_in_interrupt(0);
80002c1c:	00 00       	add	r0,r0
80002c1e:	0c 98       	mov	r8,r6
80002c20:	00 00       	add	r0,r0
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002c22:	07 1a       	ld.sh	r10,r3++
80002c24:	00 00       	add	r0,r0
80002c26:	06 e4       	st.h	--r3,r4
80002c28:	70 09       	ld.w	r9,r8[0x0]
80002c2a:	ed b9 00 03 	bld	r9,0x3
80002c2e:	c1 01       	brne	80002c4e <udd_interrupt+0x2de>
80002c30:	30 8a       	mov	r10,8
80002c32:	fe 69 01 60 	mov	r9,-130720
80002c36:	93 0a       	st.w	r9[0x0],r10
	if (Is_udd_out_received(0)) {
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_nak_out(0)) {
80002c38:	70 08       	ld.w	r8,r8[0x0]
80002c3a:	ed b8 00 00 	bld	r8,0x0
80002c3e:	e0 80 01 3f 	breq	80002ebc <udd_interrupt+0x54c>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
80002c42:	4d 48       	lddpc	r8,80002d90 <udd_interrupt+0x420>
80002c44:	70 08       	ld.w	r8,r8[0x0]
80002c46:	58 38       	cp.w	r8,3
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
80002c48:	e0 81 01 3a 	brne	80002ebc <udd_interrupt+0x54c>
80002c4c:	c2 48       	rjmp	80002c94 <udd_interrupt+0x324>
80002c4e:	70 09       	ld.w	r9,r8[0x0]
80002c50:	ed b9 00 04 	bld	r9,0x4
		return;	// overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
80002c54:	c2 51       	brne	80002c9e <udd_interrupt+0x32e>
80002c56:	fe 69 01 60 	mov	r9,-130720
80002c5a:	31 0a       	mov	r10,16
80002c5c:	93 0a       	st.w	r9[0x0],r10
		// Overflow on OUT packet
		udd_ack_nak_out(0);
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
80002c5e:	70 08       	ld.w	r8,r8[0x0]
80002c60:	ed b8 00 01 	bld	r8,0x1
80002c64:	e0 80 01 2c 	breq	80002ebc <udd_interrupt+0x54c>
		// Underflow on IN packet
		udd_ack_nak_in(0);
80002c68:	4c aa       	lddpc	r10,80002d90 <udd_interrupt+0x420>
80002c6a:	74 08       	ld.w	r8,r10[0x0]
80002c6c:	58 18       	cp.w	r8,1
}


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
80002c6e:	c1 01       	brne	80002c8e <udd_interrupt+0x31e>
80002c70:	30 3b       	mov	r11,3
80002c72:	95 0b       	st.w	r10[0x0],r11
80002c74:	e1 bb 00 00 	mfsr	r11,0x0
		return;	// underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
80002c78:	d3 03       	ssrf	0x10
80002c7a:	93 08       	st.w	r9[0x0],r8
80002c7c:	fe 6a 01 f0 	mov	r10,-130576

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
80002c80:	95 08       	st.w	r10[0x0],r8
80002c82:	30 88       	mov	r8,8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002c84:	93 08       	st.w	r9[0x0],r8
80002c86:	95 08       	st.w	r10[0x0],r8
	cpu_irq_disable();
80002c88:	e3 bb 00 00 	mtsr	0x0,r11
	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
	udd_enable_in_send_interrupt(0);
80002c8c:	c1 0b       	rjmp	80002aac <udd_interrupt+0x13c>
80002c8e:	58 48       	cp.w	r8,4
80002c90:	e0 81 01 16 	brne	80002ebc <udd_interrupt+0x54c>
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
80002c94:	e8 69 00 00 	mov	r9,524288
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002c98:	fe 68 01 f0 	mov	r8,-130576
80002c9c:	ca 4b       	rjmp	80002be4 <udd_interrupt+0x274>

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
80002c9e:	4b e7       	lddpc	r7,80002d94 <udd_interrupt+0x424>
80002ca0:	fe 69 01 34 	mov	r9,-130764
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
80002ca4:	0e 9c       	mov	r12,r7
80002ca6:	30 06       	mov	r6,0
80002ca8:	fe 6b 00 00 	mov	r11,-131072
80002cac:	fc 13 02 00 	movh	r3,0x200
80002cb0:	e0 64 10 00 	mov	r4,4096
80002cb4:	76 45       	ld.w	r5,r11[0x10]
80002cb6:	e6 06 09 4a 	lsl	r10,r3,r6
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002cba:	ec c8 ff ff 	sub	r8,r6,-1
80002cbe:	f2 c2 ff 70 	sub	r2,r9,-144
			// Call callback to signal end of transfer
			udd_ep_finish_job(ptr_job, false);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80002cc2:	f5 e5 00 05 	and	r5,r10,r5
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002cc6:	10 96       	mov	r6,r8
80002cc8:	fe 6e 00 00 	mov	lr,-131072
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
80002ccc:	c4 20       	breq	80002d50 <udd_interrupt+0x3e0>
			// Call callback to signal end of transfer
			udd_ep_finish_job(ptr_job, false);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80002cce:	76 15       	ld.w	r5,r11[0x4]
80002cd0:	f5 e5 00 05 	and	r5,r10,r5
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002cd4:	c3 e0       	breq	80002d50 <udd_interrupt+0x3e0>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
80002cd6:	9d 5a       	st.w	lr[0x14],r10
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002cd8:	78 09       	ld.w	r9,r12[0x0]
80002cda:	ed b9 00 1d 	bld	r9,0x1d
				&& Is_udd_endpoint_dma_interrupt(ep)) {
80002cde:	c0 31       	brne	80002ce4 <udd_interrupt+0x374>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002ce0:	9d 3a       	st.w	lr[0xc],r10
80002ce2:	c0 a8       	rjmp	80002cf6 <udd_interrupt+0x386>
80002ce4:	78 2a       	ld.w	r10,r12[0x8]
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			udd_disable_endpoint_dma_interrupt(ep);
80002ce6:	f0 09 15 04 	lsl	r9,r8,0x4
			if (ptr_job->b_raise_dma) {
80002cea:	e0 39 fd 00 	sub	r9,130304
80002cee:	72 39       	ld.w	r9,r9[0xc]
				// In case of manual raise DMA interrupt
				// to process a ZLP packet
				udd_raise_endpoint_dma_interrupt(ep);
80002cf0:	b1 89       	lsr	r9,0x10
80002cf2:	12 1a       	sub	r10,r9
				// Save number of data no transfered
				nb_remaining = (udd_endpoint_dma_get_status(ep) &
						AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_MASK)
						>> AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_OFFSET;
				// Update number of data transfered
				ptr_job->buf_size -= nb_remaining;
80002cf4:	99 2a       	st.w	r12[0x8],r10
				// In case of manual raise DMA interrupt
				// to process a ZLP packet
				udd_raise_endpoint_dma_interrupt(ep);
			}else{
				// Save number of data no transfered
				nb_remaining = (udd_endpoint_dma_get_status(ep) &
80002cf6:	f0 09 15 02 	lsl	r9,r8,0x2
80002cfa:	fe 6b 01 00 	mov	r11,-130816
80002cfe:	f2 0b 00 0a 	add	r10,r9,r11
						AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_MASK)
						>> AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_OFFSET;
				// Update number of data transfered
				ptr_job->buf_size -= nb_remaining;
80002d02:	74 0a       	ld.w	r10,r10[0x0]
80002d04:	ed ba 00 08 	bld	r10,0x8
			}

			if (Is_udd_endpoint_in(ep)) {
80002d08:	c4 01       	brne	80002d88 <udd_interrupt+0x418>
80002d0a:	78 0a       	ld.w	r10,r12[0x0]
80002d0c:	ed ba 00 1e 	bld	r10,0x1e
80002d10:	c3 c1       	brne	80002d88 <udd_interrupt+0x418>
80002d12:	fe 61 01 60 	mov	r1,-130720
80002d16:	30 1b       	mov	r11,1
80002d18:	f2 01 00 0a 	add	r10,r9,r1
				// Transfer complet on IN
				if (ptr_job->b_send_zlp) {
80002d1c:	95 0b       	st.w	r10[0x0],r11
80002d1e:	fe 6e 01 30 	mov	lr,-130768
					// Need to send a ZLP after data transfer
					// enable interrupt to wait a free bank to sent ZLP
					udd_ack_in_send(ep);
80002d22:	fe 61 01 90 	mov	r1,-130672
80002d26:	f2 0e 00 0a 	add	r10,r9,lr
80002d2a:	f2 01 00 0c 	add	r12,r9,r1
					if (Is_udd_write_enabled(ep)) {
80002d2e:	74 0a       	ld.w	r10,r10[0x0]
80002d30:	e0 39 fe 10 	sub	r9,130576
						udd_raise_in_send(ep);
80002d34:	e6 1a 00 01 	andh	r10,0x1,COH
				// Transfer complet on IN
				if (ptr_job->b_send_zlp) {
					// Need to send a ZLP after data transfer
					// enable interrupt to wait a free bank to sent ZLP
					udd_ack_in_send(ep);
					if (Is_udd_write_enabled(ep)) {
80002d38:	f9 fb 1a 00 	st.wne	r12[0x0],r11
						udd_raise_in_send(ep);
80002d3c:	30 1a       	mov	r10,1
				// Transfer complet on IN
				if (ptr_job->b_send_zlp) {
					// Need to send a ZLP after data transfer
					// enable interrupt to wait a free bank to sent ZLP
					udd_ack_in_send(ep);
					if (Is_udd_write_enabled(ep)) {
80002d3e:	93 0a       	st.w	r9[0x0],r10
						udd_raise_in_send(ep);
					}
					udd_enable_in_send_interrupt(ep);
80002d40:	e0 69 10 00 	mov	r9,4096
				// Transfer complet on IN
				if (ptr_job->b_send_zlp) {
					// Need to send a ZLP after data transfer
					// enable interrupt to wait a free bank to sent ZLP
					udd_ack_in_send(ep);
					if (Is_udd_write_enabled(ep)) {
80002d44:	f2 08 09 48 	lsl	r8,r9,r8
						udd_raise_in_send(ep);
80002d48:	fe 69 00 00 	mov	r9,-131072
					}
					udd_enable_in_send_interrupt(ep);
80002d4c:	93 68       	st.w	r9[0x18],r8
80002d4e:	cb 78       	rjmp	80002ebc <udd_interrupt+0x54c>
					udd_enable_endpoint_interrupt(ep);
80002d50:	76 4a       	ld.w	r10,r11[0x10]
80002d52:	e8 08 09 45 	lsl	r5,r4,r8
80002d56:	eb ea 00 0a 	and	r10,r5,r10
80002d5a:	c4 50       	breq	80002de4 <udd_interrupt+0x474>
80002d5c:	64 0e       	ld.w	lr,r2[0x0]
80002d5e:	e0 71 fe d0 	mov	r1,130768
			// Call callback to signal end of transfer
			udd_ep_finish_job(ptr_job, false);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80002d62:	fd de c0 01 	bfextu	lr,lr,0x0,0x1
80002d66:	f2 01 00 0a 	add	r10,r9,r1
80002d6a:	58 0e       	cp.w	lr,0
			if (Is_udd_in_send_interrupt_enabled(ep) && Is_udd_in_send(ep)) {
80002d6c:	c1 60       	breq	80002d98 <udd_interrupt+0x428>
			// Call callback to signal end of transfer
			udd_ep_finish_job(ptr_job, false);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80002d6e:	72 0e       	ld.w	lr,r9[0x0]
80002d70:	ed be 00 00 	bld	lr,0x0
			if (Is_udd_in_send_interrupt_enabled(ep) && Is_udd_in_send(ep)) {
80002d74:	c1 21       	brne	80002d98 <udd_interrupt+0x428>
			// Call callback to signal end of transfer
			udd_ep_finish_job(ptr_job, false);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80002d76:	f2 c8 ff 10 	sub	r8,r9,-240
			if (Is_udd_in_send_interrupt_enabled(ep) && Is_udd_in_send(ep)) {
80002d7a:	30 1a       	mov	r10,1
80002d7c:	91 0a       	st.w	r8[0x0],r10
80002d7e:	2d 09       	sub	r9,-48
80002d80:	93 0a       	st.w	r9[0x0],r10
80002d82:	e0 69 40 00 	mov	r9,16384
				udd_disable_in_send_interrupt(ep);
80002d86:	91 09       	st.w	r8[0x0],r9
80002d88:	30 0b       	mov	r11,0
80002d8a:	fe b0 fa f1 	rcall	8000236c <udd_ep_finish_job>
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
80002d8e:	c9 78       	rjmp	80002ebc <udd_interrupt+0x54c>
80002d90:	00 00       	add	r0,r0
				udd_ack_fifocon(ep);
80002d92:	07 1c       	ld.sh	r12,r3++
80002d94:	00 00       	add	r0,r0
80002d96:	06 e8       	st.h	--r3,r8
				udd_ep_finish_job(ptr_job, false);
80002d98:	64 0e       	ld.w	lr,r2[0x0]
80002d9a:	e2 1e 10 00 	andl	lr,0x1000,COH
80002d9e:	c2 30       	breq	80002de4 <udd_interrupt+0x474>
80002da0:	72 0e       	ld.w	lr,r9[0x0]
80002da2:	fd de c1 82 	bfextu	lr,lr,0xc,0x2
80002da6:	c1 f1       	brne	80002de4 <udd_interrupt+0x474>
80002da8:	fe 6b 02 20 	mov	r11,-130528
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep) && (0==udd_nb_busy_bank(ep))) {
80002dac:	f4 0b 00 08 	add	r8,r10,r11
80002db0:	e0 69 10 00 	mov	r9,4096
80002db4:	91 09       	st.w	r8[0x0],r9
80002db6:	fe 68 00 00 	mov	r8,-131072
80002dba:	91 55       	st.w	r8[0x14],r5
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
80002dbc:	78 08       	ld.w	r8,r12[0x0]
80002dbe:	f1 de d3 81 	bfins	r8,lr,0x1c,0x1
80002dc2:	99 08       	st.w	r12[0x0],r8
80002dc4:	fe 68 01 00 	mov	r8,-130816
80002dc8:	f4 08 00 09 	add	r9,r10,r8
				udd_disable_endpoint_interrupt(ep);
80002dcc:	72 08       	ld.w	r8,r9[0x0]
80002dce:	a9 d8       	cbr	r8,0x9

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
80002dd0:	93 08       	st.w	r9[0x0],r8
80002dd2:	e0 3a fe 10 	sub	r10,130576
80002dd6:	e8 68 00 00 	mov	r8,524288
				udd_disable_endpoint_bank_autoswitch(ep);
80002dda:	95 08       	st.w	r10[0x0],r8
80002ddc:	e4 68 00 00 	mov	r8,262144
80002de0:	95 08       	st.w	r10[0x0],r8
80002de2:	c6 d8       	rjmp	80002ebc <udd_interrupt+0x54c>
80002de4:	2f 0c       	sub	r12,-16
				udd_enable_stall_handshake(ep);
80002de6:	2f c9       	sub	r9,-4
80002de8:	58 38       	cp.w	r8,3
80002dea:	fe 91 ff 65 	brne	80002cb4 <udd_interrupt+0x344>
80002dee:	c6 e8       	rjmp	80002eca <udd_interrupt+0x55a>
				udd_reset_data_toggle(ep);
80002df0:	30 89       	mov	r9,8
80002df2:	ee c6 ff d0 	sub	r6,r7,-48
80002df6:	91 29       	st.w	r8[0x8],r9
80002df8:	0e 9c       	mov	r12,r7
80002dfa:	30 1b       	mov	r11,1
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
80002dfc:	2f 07       	sub	r7,-16
80002dfe:	fe b0 fa b7 	rcall	8000236c <udd_ep_finish_job>
80002e02:	0c 37       	cp.w	r7,r6
		goto udd_interrupt_end;	// Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
		udd_ack_reset();
80002e04:	cf a1       	brne	80002df8 <udd_interrupt+0x488>
#if __ICCAVR32__
#if !defined(AVR32_USBB_IRQ_GROUP)
#define AVR32_USBB_IRQ_GROUP AVR32_USB_IRQ_GROUP
#endif
#endif
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
80002e06:	e0 a0 04 09 	rcall	80003618 <udc_reset>
		goto udd_interrupt_end;	// Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
		udd_ack_reset();
80002e0a:	fe b0 fc da 	rcall	800027be <udd_reset_ep_ctrl>
static void udd_ep_job_table_kill(void)
{
	uint8_t i;
	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_finish_job(&udd_ep_job[i], true);
80002e0e:	fe b0 fb a7 	rcall	8000255c <udd_ctrl_init>
80002e12:	c5 58       	rjmp	80002ebc <udd_interrupt+0x54c>
80002e14:	70 49       	ld.w	r9,r8[0x10]

static void udd_ep_job_table_kill(void)
{
	uint8_t i;
	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
80002e16:	ed b9 00 00 	bld	r9,0x0
		// Abort all jobs on-going
#if (0!=USB_DEVICE_MAX_EP)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
80002e1a:	c1 41       	brne	80002e42 <udd_interrupt+0x4d2>
80002e1c:	70 19       	ld.w	r9,r8[0x4]
		// Reset endpoint control
		udd_reset_ep_ctrl();
80002e1e:	ed b9 00 00 	bld	r9,0x0
		// Reset endpoint control management
		udd_ctrl_init();
80002e22:	c1 01       	brne	80002e42 <udd_interrupt+0x4d2>
80002e24:	f0 f9 08 00 	ld.w	r9,r8[2048]
		goto udd_interrupt_end;
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
80002e28:	af c9       	cbr	r9,0xe
80002e2a:	f1 49 08 00 	st.w	r8[2048],r9
80002e2e:	30 19       	mov	r9,1
80002e30:	91 59       	st.w	r8[0x14],r9
80002e32:	31 09       	mov	r9,16
80002e34:	91 69       	st.w	r8[0x18],r9
80002e36:	f0 f9 08 00 	ld.w	r9,r8[2048]
		otg_unfreeze_clock();
80002e3a:	af a9       	sbr	r9,0xe
80002e3c:	f1 49 08 00 	st.w	r8[2048],r9
80002e40:	c2 18       	rjmp	80002e82 <udd_interrupt+0x512>
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
80002e42:	fe 68 00 00 	mov	r8,-131072
		udd_enable_wake_up_interrupt();
80002e46:	70 49       	ld.w	r9,r8[0x10]
80002e48:	ed b9 00 04 	bld	r9,0x4
		otg_freeze_clock();	// Mandatory to exit of sleep mode after a wakeup event
80002e4c:	c1 e1       	brne	80002e88 <udd_interrupt+0x518>
80002e4e:	70 19       	ld.w	r9,r8[0x4]
80002e50:	ed b9 00 04 	bld	r9,0x4
80002e54:	c1 a1       	brne	80002e88 <udd_interrupt+0x518>
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
80002e56:	f0 f9 08 00 	ld.w	r9,r8[2048]
80002e5a:	10 9a       	mov	r10,r8
80002e5c:	af c9       	cbr	r9,0xe
80002e5e:	f1 49 08 00 	st.w	r8[2048],r9
80002e62:	c0 58       	rjmp	80002e6c <udd_interrupt+0x4fc>
80002e64:	74 18       	ld.w	r8,r10[0x4]
80002e66:	ed b8 00 00 	bld	r8,0x0
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
80002e6a:	c0 60       	breq	80002e76 <udd_interrupt+0x506>
80002e6c:	f4 f8 08 04 	ld.w	r8,r10[2052]
80002e70:	ed b8 00 0e 	bld	r8,0xe
80002e74:	cf 81       	brne	80002e64 <udd_interrupt+0x4f4>
		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_clock_usable() ) {
80002e76:	fe 68 00 00 	mov	r8,-131072
			if(Is_udd_suspend()) break;   // In case of USB state change in HS
80002e7a:	31 09       	mov	r9,16
80002e7c:	91 59       	st.w	r8[0x14],r9
80002e7e:	30 1c       	mov	r12,1

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_clock_usable() ) {
80002e80:	91 6c       	st.w	r8[0x18],r12
80002e82:	fe b0 fb 3b 	rcall	800024f8 <udd_sleep_mode>
80002e86:	c1 b8       	rjmp	80002ebc <udd_interrupt+0x54c>
80002e88:	fe 68 00 00 	mov	r8,-131072
			if(Is_udd_suspend()) break;   // In case of USB state change in HS
		};
		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
80002e8c:	f0 f9 08 04 	ld.w	r9,r8[2052]
80002e90:	ed b9 00 01 	bld	r9,0x1
		udd_enable_suspend_interrupt();
80002e94:	c1 41       	brne	80002ebc <udd_interrupt+0x54c>
		udd_sleep_mode(true);	// Enter in IDLE mode
80002e96:	f0 f9 08 00 	ld.w	r9,r8[2048]
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_end;
80002e9a:	af c9       	cbr	r9,0xe
	}

	if (Is_udd_vbus_transition()) {
80002e9c:	f1 49 08 00 	st.w	r8[2048],r9
80002ea0:	30 29       	mov	r9,2
80002ea2:	f1 49 08 08 	st.w	r8[2056],r9
80002ea6:	f0 f9 08 00 	ld.w	r9,r8[2048]
		// Ack VBus transition and send status to high level
		otg_unfreeze_clock();
80002eaa:	af a9       	sbr	r9,0xe
80002eac:	f1 49 08 00 	st.w	r8[2048],r9
80002eb0:	f0 fc 08 04 	ld.w	r12,r8[2052]
		udd_ack_vbus_transition();
80002eb4:	f9 dc c1 61 	bfextu	r12,r12,0xb,0x1
80002eb8:	e0 a0 05 d0 	rcall	80003a58 <stdio_usb_vbus_event>
		otg_freeze_clock();
80002ebc:	fe 68 00 00 	mov	r8,-131072
80002ec0:	f0 f8 08 18 	ld.w	r8,r8[2072]
#ifdef UDC_VBUS_EVENT
		UDC_VBUS_EVENT(Is_udd_vbus_high());
80002ec4:	e3 cd 40 fe 	ldm	sp++,r1-r7,lr
80002ec8:	d6 03       	rete
80002eca:	fe 68 00 00 	mov	r8,-131072
80002ece:	70 1c       	ld.w	r12,r8[0x4]
#endif
		goto udd_interrupt_end;
	}
udd_interrupt_end:
	otg_data_memory_barrier();
80002ed0:	e2 1c 00 08 	andl	r12,0x8,COH
80002ed4:	c8 e1       	brne	80002df0 <udd_interrupt+0x480>
80002ed6:	c9 fb       	rjmp	80002e14 <udd_interrupt+0x4a4>

80002ed8 <_stext>:
	return;
}
80002ed8:	48 dd       	lddpc	sp,80002f0c <udata_clear_loop_end+0x4>
80002eda:	fe c0 96 da 	sub	r0,pc,-26918
	if (udd_ep_interrupt())
		goto udd_interrupt_end;	// Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
80002ede:	e3 b0 00 01 	mtsr	0x4,r0
80002ee2:	d5 53       	csrf	0x15
80002ee4:	48 b0       	lddpc	r0,80002f10 <udata_clear_loop_end+0x8>
80002ee6:	48 c1       	lddpc	r1,80002f14 <udata_clear_loop_end+0xc>
80002ee8:	02 30       	cp.w	r0,r1
80002eea:	c0 62       	brcc	80002ef6 <idata_load_loop_end>
80002eec:	48 b2       	lddpc	r2,80002f18 <udata_clear_loop_end+0x10>

80002eee <idata_load_loop>:
80002eee:	a5 05       	ld.d	r4,r2++
80002ef0:	a1 24       	st.d	r0++,r4
80002ef2:	02 30       	cp.w	r0,r1
80002ef4:	cf d3       	brcs	80002eee <idata_load_loop>

80002ef6 <idata_load_loop_end>:
80002ef6:	48 a0       	lddpc	r0,80002f1c <udata_clear_loop_end+0x14>
80002ef8:	48 a1       	lddpc	r1,80002f20 <udata_clear_loop_end+0x18>
80002efa:	02 30       	cp.w	r0,r1
80002efc:	c0 62       	brcc	80002f08 <udata_clear_loop_end>
80002efe:	30 02       	mov	r2,0
80002f00:	30 03       	mov	r3,0

80002f02 <udata_clear_loop>:
80002f02:	a1 22       	st.d	r0++,r2
80002f04:	02 30       	cp.w	r0,r1
80002f06:	cf e3       	brcs	80002f02 <udata_clear_loop>

80002f08 <udata_clear_loop_end>:
80002f08:	fe cf f3 4c 	sub	pc,pc,-3252
80002f0c:	00 01       	add	r1,r0
80002f0e:	00 00       	add	r0,r0
80002f10:	00 00       	add	r0,r0
80002f12:	00 08       	add	r8,r0
80002f14:	00 00       	add	r0,r0
80002f16:	05 d8       	ld.ub	r8,r2[0x5]
80002f18:	80 00       	ld.sh	r0,r0[0x0]
80002f1a:	a0 90       	st.b	r0[0x1],r0
80002f1c:	00 00       	add	r0,r0
80002f1e:	05 d8       	ld.ub	r8,r2[0x5]
80002f20:	00 00       	add	r0,r0
80002f22:	0c c8       	st.b	r6++,r8

80002f24 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
80002f24:	d4 21       	pushm	r4-r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002f26:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80002f2a:	d3 03       	ssrf	0x10
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
80002f2c:	fe 78 0c 00 	mov	r8,-62464
80002f30:	e0 69 03 07 	mov	r9,775
80002f34:	91 a9       	st.w	r8[0x28],r9
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
80002f36:	70 09       	ld.w	r9,r8[0x0]
80002f38:	a3 a9       	sbr	r9,0x2
80002f3a:	91 09       	st.w	r8[0x0],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002f3c:	e3 ba 00 00 	mtsr	0x0,r10
	cpu_irq_restore(flags);
}

static inline bool osc_is_ready(uint8_t id)
{
	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_OSC0RDY + id)));
80002f40:	71 59       	ld.w	r9,r8[0x54]
80002f42:	fe 77 0c 00 	mov	r7,-62464
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
80002f46:	e2 19 00 80 	andl	r9,0x80,COH
80002f4a:	cf b0       	breq	80002f40 <sysclk_init+0x1c>
#ifdef BOARD_OSC0_HZ
	case SYSCLK_SRC_OSC0:
		osc_enable(0);
		osc_wait_ready(0);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(BOARD_OSC0_HZ);
80002f4c:	e0 6c 1b 00 	mov	r12,6912
80002f50:	ea 1c 00 b7 	orh	r12,0xb7
80002f54:	fe b0 f8 6a 	rcall	80002028 <flashc_set_bus_freq>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002f58:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002f5c:	d3 03       	ssrf	0x10
	uint32_t   mcctrl;

	Assert(src <= SYSCLK_SRC_PLL0);

	flags = cpu_irq_save();
	mcctrl = AVR32_PM.mcctrl & ~AVR32_PM_MCCTRL_MCSEL_MASK;
80002f5e:	6e 08       	ld.w	r8,r7[0x0]
80002f60:	e0 18 ff fc 	andl	r8,0xfffc
	mcctrl |= src << AVR32_PM_MCCTRL_MCSEL;
80002f64:	a1 a8       	sbr	r8,0x0
	AVR32_PM.mcctrl = mcctrl;
80002f66:	8f 08       	st.w	r7[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002f68:	e3 b9 00 00 	mtsr	0x0,r9
		break;
	}

	/* If the user has specified clock masks, enable only requested clocks */
#if defined(CONFIG_SYSCLK_INIT_CPUMASK)
	AVR32_PM.cpumask = SYSCLK_INIT_MINIMAL_CPUMASK | CONFIG_SYSCLK_INIT_CPUMASK;
80002f6c:	e0 78 00 02 	mov	r8,65538
80002f70:	8f 28       	st.w	r7[0x8],r8
#endif
#if defined(CONFIG_SYSCLK_INIT_PBAMASK)
	AVR32_PM.pbamask = SYSCLK_INIT_MINIMAL_PBAMASK | CONFIG_SYSCLK_INIT_PBAMASK;
80002f72:	30 b8       	mov	r8,11
80002f74:	ea 18 00 18 	orh	r8,0x18
80002f78:	8f 48       	st.w	r7[0x10],r8
#endif
#if defined(CONFIG_SYSCLK_INIT_PBBMASK)
	AVR32_PM.pbbmask = SYSCLK_INIT_MINIMAL_PBBMASK | CONFIG_SYSCLK_INIT_PBBMASK;
80002f7a:	30 08       	mov	r8,0
80002f7c:	8f 58       	st.w	r7[0x14],r8
#endif
#if defined(CONFIG_SYSCLK_INIT_HSBMASK)
	AVR32_PM.hsbmask = SYSCLK_INIT_MINIMAL_HSBMASK | CONFIG_SYSCLK_INIT_HSBMASK;
80002f7e:	e0 68 0e 03 	mov	r8,3587
80002f82:	8f 38       	st.w	r7[0xc],r8

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80002f84:	d8 22       	popm	r4-r7,pc
80002f86:	d7 03       	nop

80002f88 <sysclk_priv_enable_module>:
80002f88:	e1 b9 00 00 	mfsr	r9,0x0
static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
	cpu_irq_disable();
80002f8c:	d3 03       	ssrf	0x10

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
80002f8e:	fe 7a 0c 00 	mov	r10,-62464
80002f92:	75 58       	ld.w	r8,r10[0x54]
80002f94:	ed b8 00 06 	bld	r8,0x6
80002f98:	cf d1       	brne	80002f92 <sysclk_priv_enable_module+0xa>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
	mask |= 1U << module_index;
80002f9a:	30 18       	mov	r8,1
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80002f9c:	a3 6c       	lsl	r12,0x2
	mask |= 1U << module_index;
80002f9e:	f0 0b 09 4b 	lsl	r11,r8,r11
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80002fa2:	e0 2c f3 f8 	sub	r12,62456
80002fa6:	78 08       	ld.w	r8,r12[0x0]
	mask |= 1U << module_index;
80002fa8:	10 4b       	or	r11,r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
80002faa:	99 0b       	st.w	r12[0x0],r11
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002fac:	e3 b9 00 00 	mtsr	0x0,r9

	cpu_irq_restore(flags);
}
80002fb0:	5e fc       	retal	r12
80002fb2:	d7 03       	nop

80002fb4 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(unsigned int index)
{
80002fb4:	d4 21       	pushm	r4-r7,lr
80002fb6:	58 9c       	cp.w	r12,9
80002fb8:	5f 07       	sreq	r7
80002fba:	18 96       	mov	r6,r12

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002fbc:	e1 b5 00 00 	mfsr	r5,0x0
	cpu_irq_disable();
80002fc0:	d3 03       	ssrf	0x10
		pbus_id = 1;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (!sysclk_bus_refcount[pbus_id])
80002fc2:	48 e8       	lddpc	r8,80002ff8 <sysclk_enable_pbb_module+0x44>
80002fc4:	f0 07 07 09 	ld.ub	r9,r8[r7]
80002fc8:	30 08       	mov	r8,0
80002fca:	f0 09 18 00 	cp.b	r9,r8
80002fce:	c0 91       	brne	80002fe0 <sysclk_enable_pbb_module+0x2c>
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
80002fd0:	ee 0b 15 01 	lsl	r11,r7,0x1
80002fd4:	30 1c       	mov	r12,1
80002fd6:	f9 bb 01 06 	movne	r11,6
80002fda:	f9 bb 00 02 	moveq	r11,2
80002fde:	cd 5f       	rcall	80002f88 <sysclk_priv_enable_module>
80002fe0:	48 68       	lddpc	r8,80002ff8 <sysclk_enable_pbb_module+0x44>
		sysclk_enable_hsb_module(2 + (4 * pbus_id));
	sysclk_bus_refcount[pbus_id]++;
80002fe2:	f0 07 07 09 	ld.ub	r9,r8[r7]
80002fe6:	2f f9       	sub	r9,-1
80002fe8:	f0 07 0b 09 	st.b	r8[r7],r9
80002fec:	e3 b5 00 00 	mtsr	0x0,r5
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002ff0:	30 3c       	mov	r12,3

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
80002ff2:	0c 9b       	mov	r11,r6
80002ff4:	cc af       	rcall	80002f88 <sysclk_priv_enable_module>
80002ff6:	d8 22       	popm	r4-r7,pc
80002ff8:	00 00       	add	r0,r0
}
80002ffa:	07 24       	ld.uh	r4,r3++

80002ffc <sysclk_enable_usb>:
80002ffc:	d4 01       	pushm	lr
80002ffe:	30 1c       	mov	r12,1
80003000:	cd af       	rcall	80002fb4 <sysclk_enable_pbb_module>
80003002:	30 3b       	mov	r11,3
80003004:	30 1c       	mov	r12,1
80003006:	cc 1f       	rcall	80002f88 <sysclk_priv_enable_module>
80003008:	e1 ba 00 00 	mfsr	r10,0x0

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000300c:	d3 03       	ssrf	0x10
8000300e:	fe 78 0c 00 	mov	r8,-62464
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
80003012:	e0 69 03 07 	mov	r9,775
80003016:	91 a9       	st.w	r8[0x28],r9
80003018:	70 09       	ld.w	r9,r8[0x0]
8000301a:	a3 a9       	sbr	r9,0x2
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
8000301c:	91 09       	st.w	r8[0x0],r9
8000301e:	e3 ba 00 00 	mtsr	0x0,r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003022:	71 59       	ld.w	r9,r8[0x54]
80003024:	ed b9 00 07 	bld	r9,0x7
80003028:	cf d1       	brne	80003022 <sysclk_enable_usb+0x26>
8000302a:	30 49       	mov	r9,4
8000302c:	fe 78 0c 00 	mov	r8,-62464
}

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
80003030:	f1 49 00 70 	st.w	r8[112],r9
80003034:	d8 02       	popm	pc
80003036:	d7 03       	nop

80003038 <udi_cdc_data_disable>:
	UDI_CDC_DISABLE_EXT();
}

void udi_cdc_data_disable(void)
{
}
80003038:	5e fc       	retal	r12
		break;
	}

	genclk_config_set_divider(&gcfg, CONFIG_USBCLK_DIV);
	genclk_enable(&gcfg, AVR32_PM_GCLK_USBB);
}
8000303a:	d7 03       	nop

8000303c <udi_cdc_comm_setup>:


bool udi_cdc_comm_setup(void)
{
	if (Udd_setup_is_in()) {
8000303c:	49 98       	lddpc	r8,800030a0 <udi_cdc_comm_setup+0x64>
8000303e:	30 0b       	mov	r11,0
80003040:	11 8a       	ld.ub	r10,r8[0x0]
80003042:	14 99       	mov	r9,r10
80003044:	e2 19 00 60 	andl	r9,0x60,COH
80003048:	f6 0a 18 00 	cp.b	r10,r11
8000304c:	c1 04       	brge	8000306c <udi_cdc_comm_setup+0x30>
		// GET Interface Requests 
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
8000304e:	e0 49 00 20 	cp.w	r9,32
80003052:	c2 51       	brne	8000309c <udi_cdc_comm_setup+0x60>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
80003054:	11 9a       	ld.ub	r10,r8[0x1]
80003056:	32 19       	mov	r9,33
80003058:	f2 0a 18 00 	cp.b	r10,r9
8000305c:	c2 01       	brne	8000309c <udi_cdc_comm_setup+0x60>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
8000305e:	90 39       	ld.sh	r9,r8[0x6]
80003060:	30 7a       	mov	r10,7
80003062:	f4 09 19 00 	cp.h	r9,r10
80003066:	c1 b1       	brne	8000309c <udi_cdc_comm_setup+0x60>
						udd_g_ctrlreq.req.wLength)
					return false;	// Error for USB host
				udd_g_ctrlreq.payload =
						(uint8_t *) &
						udi_cdc_line_coding;
				udd_g_ctrlreq.payload_size =
80003068:	b0 69       	st.h	r8[0xc],r9
8000306a:	c1 68       	rjmp	80003096 <udi_cdc_comm_setup+0x5a>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests  
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
8000306c:	e0 49 00 20 	cp.w	r9,32
80003070:	c1 61       	brne	8000309c <udi_cdc_comm_setup+0x60>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
80003072:	11 9a       	ld.ub	r10,r8[0x1]
80003074:	f2 0a 18 00 	cp.b	r10,r9
80003078:	c0 60       	breq	80003084 <udi_cdc_comm_setup+0x48>
8000307a:	32 28       	mov	r8,34
8000307c:	f0 0a 18 00 	cp.b	r10,r8
80003080:	c0 e1       	brne	8000309c <udi_cdc_comm_setup+0x60>
80003082:	c0 c8       	rjmp	8000309a <udi_cdc_comm_setup+0x5e>
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
80003084:	90 39       	ld.sh	r9,r8[0x6]
80003086:	30 7a       	mov	r10,7
80003088:	f4 09 19 00 	cp.h	r9,r10
8000308c:	c0 81       	brne	8000309c <udi_cdc_comm_setup+0x60>
				udd_g_ctrlreq.callback =
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
						(uint8_t *) &
						udi_cdc_line_coding;
				udd_g_ctrlreq.payload_size =
8000308e:	b0 69       	st.h	r8[0xc],r9
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false;	// Error for USB host
				udd_g_ctrlreq.callback =
80003090:	fe c9 ff e4 	sub	r9,pc,-28
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
80003094:	91 49       	st.w	r8[0x10],r9
80003096:	48 49       	lddpc	r9,800030a4 <udi_cdc_comm_setup+0x68>
						(uint8_t *) &
						udi_cdc_line_coding;
				udd_g_ctrlreq.payload_size =
80003098:	91 29       	st.w	r8[0x8],r9
						sizeof(udi_cdc_line_coding);
				return true;
8000309a:	5e ff       	retal	1
8000309c:	5e fd       	retal	0
8000309e:	d7 03       	nop
800030a0:	00 00       	add	r0,r0
800030a2:	0c 98       	mov	r8,r6
800030a4:	00 00       	add	r0,r0
800030a6:	07 28       	ld.uh	r8,r3++

800030a8 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
800030a8:	5e fd       	retal	0

800030aa <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
800030aa:	5e fd       	retal	0

800030ac <udi_cdc_line_coding_received>:

void udi_cdc_line_coding_received(void)
{
	// Send line coding to component associated to CDC
	UDI_CDC_SET_CODING_EXT((&udi_cdc_line_coding));
}
800030ac:	5e fc       	retal	r12
800030ae:	d7 03       	nop

800030b0 <udi_cdc_is_tx_ready>:


bool udi_cdc_is_tx_ready(void)
{
	irqflags_t flags;
	if (udi_cdc_tx_buf_nb[udi_cdc_tx_buf_sel]!=UDI_CDC_TX_BUFFERS) {
800030b0:	49 59       	lddpc	r9,80003104 <udi_cdc_is_tx_ready+0x54>
800030b2:	49 68       	lddpc	r8,80003108 <udi_cdc_is_tx_ready+0x58>
800030b4:	11 8a       	ld.ub	r10,r8[0x0]
800030b6:	f2 0a 04 1a 	ld.sh	r10,r9[r10<<0x1]
800030ba:	e0 69 01 40 	mov	r9,320
800030be:	f2 0a 19 00 	cp.h	r10,r9
800030c2:	c0 20       	breq	800030c6 <udi_cdc_is_tx_ready+0x16>
800030c4:	5e ff       	retal	1
		return true;
	}
	if (!udi_cdc_tx_both_buf_to_send) {
800030c6:	49 29       	lddpc	r9,8000310c <udi_cdc_is_tx_ready+0x5c>
800030c8:	13 8a       	ld.ub	r10,r9[0x0]
800030ca:	58 0a       	cp.w	r10,0
800030cc:	c1 01       	brne	800030ec <udi_cdc_is_tx_ready+0x3c>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800030ce:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
800030d2:	d3 03       	ssrf	0x10
		flags = cpu_irq_save();	// to protect udi_cdc_tx_buf_sel
		if (!udi_cdc_tx_trans_ongoing) {
800030d4:	48 fb       	lddpc	r11,80003110 <udi_cdc_is_tx_ready+0x60>
800030d6:	17 8b       	ld.ub	r11,r11[0x0]
800030d8:	58 0b       	cp.w	r11,0
800030da:	c0 71       	brne	800030e8 <udi_cdc_is_tx_ready+0x38>
			// No transfer on-going
			// then use the other buffer to store data
			udi_cdc_tx_both_buf_to_send = true;
800030dc:	30 1b       	mov	r11,1
800030de:	b2 8b       	st.b	r9[0x0],r11
			udi_cdc_tx_buf_sel = (udi_cdc_tx_buf_sel==0)?1:0;
800030e0:	11 89       	ld.ub	r9,r8[0x0]
800030e2:	58 09       	cp.w	r9,0
800030e4:	5f 09       	sreq	r9
800030e6:	b0 89       	st.b	r8[0x0],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800030e8:	e3 ba 00 00 	mtsr	0x0,r10
		}
	  	cpu_irq_restore(flags);
	}
	return (udi_cdc_tx_buf_nb[udi_cdc_tx_buf_sel]!=UDI_CDC_TX_BUFFERS);
800030ec:	48 78       	lddpc	r8,80003108 <udi_cdc_is_tx_ready+0x58>
800030ee:	11 89       	ld.ub	r9,r8[0x0]
800030f0:	48 58       	lddpc	r8,80003104 <udi_cdc_is_tx_ready+0x54>
800030f2:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
800030f6:	e0 68 01 40 	mov	r8,320
800030fa:	f0 09 19 00 	cp.h	r9,r8
800030fe:	5f 1c       	srne	r12
}
80003100:	5e fc       	retal	r12
80003102:	d7 03       	nop
80003104:	00 00       	add	r0,r0
80003106:	07 30       	ld.ub	r0,r3++
80003108:	00 00       	add	r0,r0
8000310a:	07 2f       	ld.uh	pc,r3++
8000310c:	00 00       	add	r0,r0
8000310e:	0c 41       	or	r1,r6
80003110:	00 00       	add	r0,r0
80003112:	09 be       	ld.ub	lr,r4[0x3]

80003114 <udi_cdc_putc>:


int udi_cdc_putc(int value)
{
80003114:	d4 31       	pushm	r0-r7,lr
	irqflags_t flags;
	bool b_databit_9;
	uint8_t buf_sel;

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);
80003116:	49 68       	lddpc	r8,8000316c <udi_cdc_putc+0x58>
	return (udi_cdc_tx_buf_nb[udi_cdc_tx_buf_sel]!=UDI_CDC_TX_BUFFERS);
}


int udi_cdc_putc(int value)
{
80003118:	18 97       	mov	r7,r12
	irqflags_t flags;
	bool b_databit_9;
	uint8_t buf_sel;

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);
8000311a:	11 e9       	ld.ub	r9,r8[0x6]

udi_cdc_putc_process_one_byte:
	// Check avaliable space
	if (!udi_cdc_is_tx_ready()) {
		if (!udi_cdc_running) {
8000311c:	49 52       	lddpc	r2,80003170 <udi_cdc_putc+0x5c>
{
	irqflags_t flags;
	bool b_databit_9;
	uint8_t buf_sel;

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);
8000311e:	30 98       	mov	r8,9
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel;
80003120:	49 53       	lddpc	r3,80003174 <udi_cdc_putc+0x60>
{
	irqflags_t flags;
	bool b_databit_9;
	uint8_t buf_sel;

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);
80003122:	f0 09 18 00 	cp.b	r9,r8
80003126:	5f 05       	sreq	r5
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel;
	udi_cdc_tx_buf[buf_sel][udi_cdc_tx_buf_nb[buf_sel]++] = value;
80003128:	49 46       	lddpc	r6,80003178 <udi_cdc_putc+0x64>
8000312a:	49 54       	lddpc	r4,8000317c <udi_cdc_putc+0x68>

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);

udi_cdc_putc_process_one_byte:
	// Check avaliable space
	if (!udi_cdc_is_tx_ready()) {
8000312c:	cc 2f       	rcall	800030b0 <udi_cdc_is_tx_ready>
8000312e:	c0 51       	brne	80003138 <udi_cdc_putc+0x24>
80003130:	05 8c       	ld.ub	r12,r2[0x0]
		if (!udi_cdc_running) {
80003132:	58 0c       	cp.w	r12,0
80003134:	cf c1       	brne	8000312c <udi_cdc_putc+0x18>
80003136:	d8 32       	popm	r0-r7,pc
80003138:	e1 ba 00 00 	mfsr	r10,0x0

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000313c:	d3 03       	ssrf	0x10
	cpu_irq_disable();
8000313e:	07 88       	ld.ub	r8,r3[0x0]
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel;
80003140:	ec 08 04 19 	ld.sh	r9,r6[r8<<0x1]
	udi_cdc_tx_buf[buf_sel][udi_cdc_tx_buf_nb[buf_sel]++] = value;
80003144:	f2 cb ff ff 	sub	r11,r9,-1
80003148:	5c 79       	castu.h	r9
8000314a:	ec 08 0a 1b 	st.h	r6[r8<<0x1],r11
8000314e:	f0 08 00 28 	add	r8,r8,r8<<0x2
80003152:	a7 68       	lsl	r8,0x6
80003154:	f0 09 00 09 	add	r9,r8,r9
80003158:	e8 09 0b 07 	st.b	r4[r9],r7
8000315c:	e3 ba 00 00 	mtsr	0x0,r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003160:	58 05       	cp.w	r5,0
	cpu_irq_restore(flags);

	if (b_databit_9) {
80003162:	c0 21       	brne	80003166 <udi_cdc_putc+0x52>
80003164:	da 3a       	popm	r0-r7,pc,r12=1
80003166:	a9 47       	asr	r7,0x8
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
80003168:	30 05       	mov	r5,0
8000316a:	ce 1b       	rjmp	8000312c <udi_cdc_putc+0x18>
8000316c:	00 00       	add	r0,r0
8000316e:	07 28       	ld.uh	r8,r3++
80003170:	00 00       	add	r0,r0
80003172:	09 bd       	ld.ub	sp,r4[0x3]
80003174:	00 00       	add	r0,r0
80003176:	07 2f       	ld.uh	pc,r3++
80003178:	00 00       	add	r0,r0
8000317a:	07 30       	ld.ub	r0,r3++
8000317c:	00 00       	add	r0,r0
8000317e:	07 34       	ld.ub	r4,r3++

80003180 <udi_cdc_rx_start>:
80003180:	d4 21       	pushm	r4-r7,lr
80003182:	e1 bb 00 00 	mfsr	r11,0x0
80003186:	d3 03       	ssrf	0x10
{
	irqflags_t flags;
	uint8_t buf_sel_trans;

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel;
80003188:	49 59       	lddpc	r9,800031dc <udi_cdc_rx_start+0x5c>
8000318a:	13 88       	ld.ub	r8,r9[0x0]
	if (udi_cdc_rx_trans_ongoing ||
8000318c:	49 5c       	lddpc	r12,800031e0 <udi_cdc_rx_start+0x60>
8000318e:	19 8e       	ld.ub	lr,r12[0x0]
80003190:	58 0e       	cp.w	lr,0
80003192:	c0 a1       	brne	800031a6 <udi_cdc_rx_start+0x26>
		(udi_cdc_rx_pos < udi_cdc_rx_buf_nb[buf_sel_trans])) {
80003194:	49 4a       	lddpc	r10,800031e4 <udi_cdc_rx_start+0x64>
80003196:	49 56       	lddpc	r6,800031e8 <udi_cdc_rx_start+0x68>
80003198:	94 07       	ld.sh	r7,r10[0x0]
8000319a:	ec 08 04 16 	ld.sh	r6,r6[r8<<0x1]
8000319e:	ee 06 19 00 	cp.h	r6,r7
800031a2:	e0 88 00 05 	brls	800031ac <udi_cdc_rx_start+0x2c>
800031a6:	e3 bb 00 00 	mtsr	0x0,r11
#endif
	barrier();
800031aa:	d8 2a       	popm	r4-r7,pc,r12=0
		cpu_irq_restore(flags);
		return false;
	}

	// Change current buffer
	udi_cdc_rx_pos = 0;
800031ac:	b4 0e       	st.h	r10[0x0],lr
	udi_cdc_rx_buf_sel = (buf_sel_trans==0)?1:0;
800031ae:	58 08       	cp.w	r8,0
800031b0:	5f 0e       	sreq	lr
800031b2:	b2 8e       	st.b	r9[0x0],lr

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing = true;
800031b4:	30 1e       	mov	lr,1
800031b6:	b8 8e       	st.b	r12[0x0],lr
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800031b8:	e3 bb 00 00 	mtsr	0x0,r11
}


bool udi_cdc_is_rx_ready(void)
{
	return (udi_cdc_rx_pos < udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]);
800031bc:	94 0a       	ld.sh	r10,r10[0x0]
	
	if (udi_cdc_is_rx_ready()) {
		UDI_CDC_RX_NOTIFY();
	}

	return udd_ep_run( UDI_CDC_DATA_EP_OUT,
800031be:	f0 08 00 28 	add	r8,r8,r8<<0x2
}


bool udi_cdc_is_rx_ready(void)
{
	return (udi_cdc_rx_pos < udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]);
800031c2:	13 89       	ld.ub	r9,r9[0x0]
	
	if (udi_cdc_is_rx_ready()) {
		UDI_CDC_RX_NOTIFY();
	}

	return udd_ep_run( UDI_CDC_DATA_EP_OUT,
800031c4:	a7 68       	lsl	r8,0x6
800031c6:	48 aa       	lddpc	r10,800031ec <udi_cdc_rx_start+0x6c>
800031c8:	e0 69 01 40 	mov	r9,320
800031cc:	10 0a       	add	r10,r8
800031ce:	30 1b       	mov	r11,1
800031d0:	fe c8 ff 68 	sub	r8,pc,-152
800031d4:	30 2c       	mov	r12,2
800031d6:	fe b0 f8 f7 	rcall	800023c4 <udd_ep_run>
					true,
					udi_cdc_rx_buf[buf_sel_trans],
					UDI_CDC_RX_BUFFERS,
					udi_cdc_data_recevied);
}
800031da:	d8 22       	popm	r4-r7,pc
800031dc:	00 00       	add	r0,r0
800031de:	09 bc       	ld.ub	r12,r4[0x3]
800031e0:	00 00       	add	r0,r0
800031e2:	0c 40       	or	r0,r6
800031e4:	00 00       	add	r0,r0
800031e6:	09 b8       	ld.ub	r8,r4[0x3]
800031e8:	00 00       	add	r0,r0
800031ea:	09 b4       	ld.ub	r4,r4[0x3]
800031ec:	00 00       	add	r0,r0
800031ee:	09 c0       	ld.ub	r0,r4[0x4]

800031f0 <udi_cdc_getc>:
800031f0:	d4 31       	pushm	r0-r7,lr
800031f2:	49 88       	lddpc	r8,80003250 <udi_cdc_getc+0x60>
800031f4:	11 e9       	ld.ub	r9,r8[0x6]
800031f6:	30 98       	mov	r8,9

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	while (udi_cdc_rx_pos >= udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]) {
800031f8:	49 77       	lddpc	r7,80003254 <udi_cdc_getc+0x64>
int udi_cdc_getc(void)
{
	int rx_data = 0;
	bool b_databit_9;

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);
800031fa:	f0 09 18 00 	cp.b	r9,r8
800031fe:	5f 04       	sreq	r4
80003200:	30 08       	mov	r8,0

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	while (udi_cdc_rx_pos >= udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]) {
80003202:	49 65       	lddpc	r5,80003258 <udi_cdc_getc+0x68>
80003204:	49 61       	lddpc	r1,8000325c <udi_cdc_getc+0x6c>
		if (!udi_cdc_running) {
80003206:	49 72       	lddpc	r2,80003260 <udi_cdc_getc+0x70>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[udi_cdc_rx_buf_sel][udi_cdc_rx_pos];
80003208:	49 73       	lddpc	r3,80003264 <udi_cdc_getc+0x74>
8000320a:	c0 48       	rjmp	80003212 <udi_cdc_getc+0x22>
	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	while (udi_cdc_rx_pos >= udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]) {
		if (!udi_cdc_running) {
8000320c:	05 86       	ld.ub	r6,r2[0x0]
8000320e:	58 06       	cp.w	r6,0
80003210:	c1 e0       	breq	8000324c <udi_cdc_getc+0x5c>

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	while (udi_cdc_rx_pos >= udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]) {
80003212:	8e 09       	ld.sh	r9,r7[0x0]
80003214:	0b 8a       	ld.ub	r10,r5[0x0]
80003216:	e2 0a 04 1a 	ld.sh	r10,r1[r10<<0x1]
8000321a:	f2 0a 19 00 	cp.h	r10,r9
8000321e:	fe 98 ff f7 	brls	8000320c <udi_cdc_getc+0x1c>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[udi_cdc_rx_buf_sel][udi_cdc_rx_pos];
80003222:	0b 89       	ld.ub	r9,r5[0x0]
80003224:	8e 0a       	ld.sh	r10,r7[0x0]
80003226:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000322a:	5c 7a       	castu.h	r10
8000322c:	a7 69       	lsl	r9,0x6
8000322e:	14 09       	add	r9,r10
80003230:	e6 09 07 06 	ld.ub	r6,r3[r9]
80003234:	f1 e6 10 06 	or	r6,r8,r6
	udi_cdc_rx_pos++;
80003238:	8e 08       	ld.sh	r8,r7[0x0]
8000323a:	2f f8       	sub	r8,-1
8000323c:	ae 08       	st.h	r7[0x0],r8

	udi_cdc_rx_start();
8000323e:	ca 1f       	rcall	80003180 <udi_cdc_rx_start>
80003240:	58 04       	cp.w	r4,0

	if (b_databit_9) {
80003242:	c0 50       	breq	8000324c <udi_cdc_getc+0x5c>
80003244:	ec 08 15 08 	lsl	r8,r6,0x8
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
80003248:	30 04       	mov	r4,0
8000324a:	ce 4b       	rjmp	80003212 <udi_cdc_getc+0x22>
8000324c:	0c 9c       	mov	r12,r6
		goto udi_cdc_getc_process_one_byte;
	}
	return rx_data;
}
8000324e:	d8 32       	popm	r0-r7,pc
80003250:	00 00       	add	r0,r0
80003252:	07 28       	ld.uh	r8,r3++
80003254:	00 00       	add	r0,r0
80003256:	09 b8       	ld.ub	r8,r4[0x3]
80003258:	00 00       	add	r0,r0
8000325a:	09 bc       	ld.ub	r12,r4[0x3]
8000325c:	00 00       	add	r0,r0
8000325e:	09 b4       	ld.ub	r4,r4[0x3]
80003260:	00 00       	add	r0,r0
80003262:	09 bd       	ld.ub	sp,r4[0x3]
80003264:	00 00       	add	r0,r0
80003266:	09 c0       	ld.ub	r0,r4[0x4]

80003268 <udi_cdc_data_recevied>:
80003268:	d4 01       	pushm	lr
8000326a:	58 0c       	cp.w	r12,0
8000326c:	c0 e1       	brne	80003288 <udi_cdc_data_recevied+0x20>
8000326e:	48 88       	lddpc	r8,8000328c <udi_cdc_data_recevied+0x24>

	if (UDD_EP_TRANSFER_OK != status) {
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel==0)?1:0;
80003270:	11 88       	ld.ub	r8,r8[0x0]
	udi_cdc_rx_buf_nb[buf_sel_trans] = n;
80003272:	58 08       	cp.w	r8,0
80003274:	f9 b8 00 02 	moveq	r8,2
80003278:	f9 b8 01 00 	movne	r8,0
8000327c:	48 59       	lddpc	r9,80003290 <udi_cdc_data_recevied+0x28>
8000327e:	f2 08 0a 0b 	st.h	r9[r8],r11
	udi_cdc_rx_trans_ongoing = false;
80003282:	48 58       	lddpc	r8,80003294 <udi_cdc_data_recevied+0x2c>
80003284:	b0 8c       	st.b	r8[0x0],r12
	udi_cdc_rx_start();
80003286:	c7 df       	rcall	80003180 <udi_cdc_rx_start>
80003288:	d8 02       	popm	pc
8000328a:	d7 03       	nop
8000328c:	00 00       	add	r0,r0
8000328e:	09 bc       	ld.ub	r12,r4[0x3]
80003290:	00 00       	add	r0,r0
80003292:	09 b4       	ld.ub	r4,r4[0x3]
80003294:	00 00       	add	r0,r0
80003296:	0c 40       	or	r0,r6

80003298 <udi_cdc_tx_send>:
80003298:	d4 21       	pushm	r4-r7,lr
8000329a:	4a 98       	lddpc	r8,8000333c <udi_cdc_tx_send+0xa4>
{
	irqflags_t flags;
	uint8_t buf_sel_trans;
	bool b_short_packet;

	if (udi_cdc_tx_trans_ongoing) {
8000329c:	11 88       	ld.ub	r8,r8[0x0]
8000329e:	58 08       	cp.w	r8,0
800032a0:	c4 c1       	brne	80003338 <udi_cdc_tx_send+0xa0>
800032a2:	4a 86       	lddpc	r6,80003340 <udi_cdc_tx_send+0xa8>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
800032a4:	fe b0 f7 b5 	rcall	8000220e <udd_is_high_speed>
800032a8:	c0 80       	breq	800032b8 <udi_cdc_tx_send+0x20>
		if (udi_cdc_tx_sof_num == udd_get_micro_frame_number()) {
800032aa:	8c 07       	ld.sh	r7,r6[0x0]
800032ac:	fe b0 f7 cf 	rcall	8000224a <udd_get_micro_frame_number>
800032b0:	f8 07 19 00 	cp.h	r7,r12
800032b4:	c0 81       	brne	800032c4 <udi_cdc_tx_send+0x2c>
800032b6:	d8 22       	popm	r4-r7,pc
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num == udd_get_frame_number()) {
800032b8:	8c 07       	ld.sh	r7,r6[0x0]
800032ba:	fe b0 f7 c2 	rcall	8000223e <udd_get_frame_number>
800032be:	f8 07 19 00 	cp.h	r7,r12
800032c2:	c3 b0       	breq	80003338 <udi_cdc_tx_send+0xa0>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800032c4:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800032c8:	d3 03       	ssrf	0x10
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save();	// to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel;
800032ca:	49 f8       	lddpc	r8,80003344 <udi_cdc_tx_send+0xac>
800032cc:	11 87       	ld.ub	r7,r8[0x0]
	if (!udi_cdc_tx_both_buf_to_send) {
800032ce:	49 fa       	lddpc	r10,80003348 <udi_cdc_tx_send+0xb0>
800032d0:	15 8a       	ld.ub	r10,r10[0x0]
800032d2:	58 0a       	cp.w	r10,0
800032d4:	c0 51       	brne	800032de <udi_cdc_tx_send+0x46>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel = (buf_sel_trans==0)?1:0;
800032d6:	58 07       	cp.w	r7,0
800032d8:	5f 0a       	sreq	r10
800032da:	b0 8a       	st.b	r8[0x0],r10
800032dc:	c0 38       	rjmp	800032e2 <udi_cdc_tx_send+0x4a>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
800032de:	58 07       	cp.w	r7,0
800032e0:	5f 07       	sreq	r7
	}
	udi_cdc_tx_trans_ongoing = true;
800032e2:	30 1a       	mov	r10,1
800032e4:	49 68       	lddpc	r8,8000333c <udi_cdc_tx_send+0xa4>
800032e6:	b0 8a       	st.b	r8[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800032e8:	e3 b9 00 00 	mtsr	0x0,r9
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[buf_sel_trans] != UDI_CDC_TX_BUFFERS);
800032ec:	49 88       	lddpc	r8,8000334c <udi_cdc_tx_send+0xb4>
800032ee:	f0 07 04 19 	ld.sh	r9,r8[r7<<0x1]
800032f2:	e0 68 01 40 	mov	r8,320
800032f6:	f0 09 19 00 	cp.h	r9,r8
800032fa:	5f 15       	srne	r5
	if (b_short_packet) {
800032fc:	58 05       	cp.w	r5,0
800032fe:	c0 c0       	breq	80003316 <udi_cdc_tx_send+0x7e>
80003300:	49 06       	lddpc	r6,80003340 <udi_cdc_tx_send+0xa8>
		if (udd_is_high_speed()) {
80003302:	fe b0 f7 86 	rcall	8000220e <udd_is_high_speed>
80003306:	c0 40       	breq	8000330e <udi_cdc_tx_send+0x76>
			udi_cdc_tx_sof_num = udd_get_micro_frame_number();
80003308:	fe b0 f7 a1 	rcall	8000224a <udd_get_micro_frame_number>
8000330c:	c0 38       	rjmp	80003312 <udi_cdc_tx_send+0x7a>
		}else{
			udi_cdc_tx_sof_num = udd_get_frame_number();
8000330e:	fe b0 f7 98 	rcall	8000223e <udd_get_frame_number>
80003312:	ac 0c       	st.h	r6[0x0],r12
80003314:	c0 38       	rjmp	8000331a <udi_cdc_tx_send+0x82>
		}
	}else{
		udi_cdc_tx_sof_num = 0; // Force next transfer without wait SOF
80003316:	48 b8       	lddpc	r8,80003340 <udi_cdc_tx_send+0xa8>
80003318:	b0 05       	st.h	r8[0x0],r5
	}

	// Send the buffer with enable of short packet
	udd_ep_run( UDI_CDC_DATA_EP_IN,
8000331a:	48 d8       	lddpc	r8,8000334c <udi_cdc_tx_send+0xb4>
8000331c:	48 da       	lddpc	r10,80003350 <udi_cdc_tx_send+0xb8>
8000331e:	f0 07 05 19 	ld.uh	r9,r8[r7<<0x1]
80003322:	0a 9b       	mov	r11,r5
80003324:	ee 07 00 27 	add	r7,r7,r7<<0x2
80003328:	fe c8 ff d4 	sub	r8,pc,-44
8000332c:	a7 67       	lsl	r7,0x6
8000332e:	e0 6c 00 81 	mov	r12,129
80003332:	0e 0a       	add	r10,r7
80003334:	fe b0 f8 48 	rcall	800023c4 <udd_ep_run>
80003338:	d8 22       	popm	r4-r7,pc
8000333a:	d7 03       	nop
8000333c:	00 00       	add	r0,r0
8000333e:	09 be       	ld.ub	lr,r4[0x3]
80003340:	00 00       	add	r0,r0
80003342:	09 ba       	ld.ub	r10,r4[0x3]
80003344:	00 00       	add	r0,r0
80003346:	07 2f       	ld.uh	pc,r3++
80003348:	00 00       	add	r0,r0
8000334a:	0c 41       	or	r1,r6
8000334c:	00 00       	add	r0,r0
8000334e:	07 30       	ld.ub	r0,r3++
80003350:	00 00       	add	r0,r0
80003352:	07 34       	ld.ub	r4,r3++

80003354 <udi_cdc_data_sent>:
80003354:	d4 01       	pushm	lr
80003356:	58 0c       	cp.w	r12,0
80003358:	c1 01       	brne	80003378 <udi_cdc_data_sent+0x24>
8000335a:	48 9a       	lddpc	r10,8000337c <udi_cdc_data_sent+0x28>
8000335c:	48 99       	lddpc	r9,80003380 <udi_cdc_data_sent+0x2c>
8000335e:	13 89       	ld.ub	r9,r9[0x0]
80003360:	58 09       	cp.w	r9,0
80003362:	f9 b9 00 02 	moveq	r9,2
{
	if (UDD_EP_TRANSFER_OK != status) {
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[(udi_cdc_tx_buf_sel==0)?1:0] = 0;
80003366:	f9 b9 01 00 	movne	r9,0
	udi_cdc_tx_both_buf_to_send = false;
8000336a:	b4 8c       	st.b	r10[0x0],r12
{
	if (UDD_EP_TRANSFER_OK != status) {
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[(udi_cdc_tx_buf_sel==0)?1:0] = 0;
8000336c:	48 6a       	lddpc	r10,80003384 <udi_cdc_data_sent+0x30>
8000336e:	f4 09 0a 0c 	st.h	r10[r9],r12
	udi_cdc_tx_both_buf_to_send = false;
	udi_cdc_tx_trans_ongoing = false;
80003372:	48 69       	lddpc	r9,80003388 <udi_cdc_data_sent+0x34>
80003374:	b2 8c       	st.b	r9[0x0],r12
	udi_cdc_tx_send();
80003376:	c9 1f       	rcall	80003298 <udi_cdc_tx_send>
80003378:	d8 02       	popm	pc
8000337a:	d7 03       	nop
8000337c:	00 00       	add	r0,r0
8000337e:	0c 41       	or	r1,r6
80003380:	00 00       	add	r0,r0
80003382:	07 2f       	ld.uh	pc,r3++
80003384:	00 00       	add	r0,r0
80003386:	07 30       	ld.ub	r0,r3++
80003388:	00 00       	add	r0,r0
8000338a:	09 be       	ld.ub	lr,r4[0x3]

8000338c <udi_cdc_data_sof_notify>:
8000338c:	d4 01       	pushm	lr
8000338e:	c8 5f       	rcall	80003298 <udi_cdc_tx_send>
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
	udi_cdc_tx_send();
80003390:	d8 02       	popm	pc
}
80003392:	d7 03       	nop

80003394 <udi_cdc_data_enable>:
80003394:	d4 21       	pushm	r4-r7,lr
80003396:	48 e9       	lddpc	r9,800033cc <udi_cdc_data_enable+0x38>
}

bool udi_cdc_data_enable(void)
{
	// Initialize TX management
	udi_cdc_tx_trans_ongoing = false;
80003398:	30 08       	mov	r8,0
8000339a:	b2 88       	st.b	r9[0x0],r8
	udi_cdc_tx_both_buf_to_send = false;
8000339c:	48 d9       	lddpc	r9,800033d0 <udi_cdc_data_enable+0x3c>
8000339e:	b2 88       	st.b	r9[0x0],r8
	udi_cdc_tx_buf_sel = 0;
	udi_cdc_tx_buf_nb[0] = 0;
800033a0:	48 d9       	lddpc	r9,800033d4 <udi_cdc_data_enable+0x40>
800033a2:	30 07       	mov	r7,0
	udi_cdc_tx_buf_nb[1] = 0;
800033a4:	b2 17       	st.h	r9[0x2],r7
{
	// Initialize TX management
	udi_cdc_tx_trans_ongoing = false;
	udi_cdc_tx_both_buf_to_send = false;
	udi_cdc_tx_buf_sel = 0;
	udi_cdc_tx_buf_nb[0] = 0;
800033a6:	b2 07       	st.h	r9[0x0],r7
bool udi_cdc_data_enable(void)
{
	// Initialize TX management
	udi_cdc_tx_trans_ongoing = false;
	udi_cdc_tx_both_buf_to_send = false;
	udi_cdc_tx_buf_sel = 0;
800033a8:	48 c9       	lddpc	r9,800033d8 <udi_cdc_data_enable+0x44>
800033aa:	b2 88       	st.b	r9[0x0],r8
	udi_cdc_tx_buf_nb[0] = 0;
	udi_cdc_tx_buf_nb[1] = 0;
	udi_cdc_tx_sof_num = 0;
800033ac:	48 c8       	lddpc	r8,800033dc <udi_cdc_data_enable+0x48>
800033ae:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_tx_send();
800033b0:	c7 4f       	rcall	80003298 <udi_cdc_tx_send>
800033b2:	48 c8       	lddpc	r8,800033e0 <udi_cdc_data_enable+0x4c>

	// Initialize RX management
	udi_cdc_rx_trans_ongoing = false;
800033b4:	b0 87       	st.b	r8[0x0],r7
800033b6:	48 c8       	lddpc	r8,800033e4 <udi_cdc_data_enable+0x50>
	udi_cdc_rx_buf_sel = 0;
800033b8:	b0 87       	st.b	r8[0x0],r7
800033ba:	48 c8       	lddpc	r8,800033e8 <udi_cdc_data_enable+0x54>
	udi_cdc_rx_buf_nb[0] = 0;
800033bc:	b0 07       	st.h	r8[0x0],r7
800033be:	48 c8       	lddpc	r8,800033ec <udi_cdc_data_enable+0x58>
	udi_cdc_rx_pos = 0;
800033c0:	b0 07       	st.h	r8[0x0],r7
800033c2:	cd fe       	rcall	80003180 <udi_cdc_rx_start>
	udi_cdc_running = udi_cdc_rx_start();
800033c4:	48 b8       	lddpc	r8,800033f0 <udi_cdc_data_enable+0x5c>
800033c6:	b0 8c       	st.b	r8[0x0],r12
800033c8:	11 8c       	ld.ub	r12,r8[0x0]
800033ca:	d8 22       	popm	r4-r7,pc
	return udi_cdc_running;
800033cc:	00 00       	add	r0,r0
}
800033ce:	09 be       	ld.ub	lr,r4[0x3]
800033d0:	00 00       	add	r0,r0
800033d2:	0c 41       	or	r1,r6
800033d4:	00 00       	add	r0,r0
800033d6:	07 30       	ld.ub	r0,r3++
800033d8:	00 00       	add	r0,r0
800033da:	07 2f       	ld.uh	pc,r3++
800033dc:	00 00       	add	r0,r0
800033de:	09 ba       	ld.ub	r10,r4[0x3]
800033e0:	00 00       	add	r0,r0
800033e2:	0c 40       	or	r0,r6
800033e4:	00 00       	add	r0,r0
800033e6:	09 bc       	ld.ub	r12,r4[0x3]
800033e8:	00 00       	add	r0,r0
800033ea:	09 b4       	ld.ub	r4,r4[0x3]
800033ec:	00 00       	add	r0,r0
800033ee:	09 b8       	ld.ub	r8,r4[0x3]
800033f0:	00 00       	add	r0,r0
800033f2:	09 bd       	ld.ub	sp,r4[0x3]

800033f4 <udi_cdc_comm_disable>:
800033f4:	d4 01       	pushm	lr
800033f6:	30 09       	mov	r9,0
800033f8:	48 38       	lddpc	r8,80003404 <udi_cdc_comm_disable+0x10>
800033fa:	b0 89       	st.b	r8[0x0],r9
800033fc:	e0 a0 03 28 	rcall	80003a4c <stdio_usb_disable>

void udi_cdc_comm_disable(void)
{
	udi_cdc_running = false;
	UDI_CDC_DISABLE_EXT();
}
80003400:	d8 02       	popm	pc
80003402:	d7 03       	nop
80003404:	00 00       	add	r0,r0
80003406:	09 bd       	ld.ub	sp,r4[0x3]

80003408 <udi_cdc_comm_enable>:
80003408:	d4 01       	pushm	lr
8000340a:	48 b8       	lddpc	r8,80003434 <udi_cdc_comm_enable+0x2c>


bool udi_cdc_comm_enable(void)
{
	// Initialize control signal management
	udi_cdc_state = CPU_TO_LE16(0);
8000340c:	30 09       	mov	r9,0
8000340e:	48 ba       	lddpc	r10,80003438 <udi_cdc_comm_enable+0x30>
	uid_cdc_state_msg.value = CPU_TO_LE16(0);

	udi_cdc_line_coding.dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
80003410:	b0 89       	st.b	r8[0x0],r9


bool udi_cdc_comm_enable(void)
{
	// Initialize control signal management
	udi_cdc_state = CPU_TO_LE16(0);
80003412:	b4 09       	st.h	r10[0x0],r9
	uid_cdc_state_msg.value = CPU_TO_LE16(0);

	udi_cdc_line_coding.dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
	udi_cdc_line_coding.bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
	udi_cdc_line_coding.bParityType = UDI_CDC_DEFAULT_PARITY;
80003414:	b0 d9       	st.b	r8[0x5],r9
	// Initialize control signal management
	udi_cdc_state = CPU_TO_LE16(0);
	uid_cdc_state_msg.value = CPU_TO_LE16(0);

	udi_cdc_line_coding.dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
	udi_cdc_line_coding.bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
80003416:	b0 c9       	st.b	r8[0x4],r9

bool udi_cdc_comm_enable(void)
{
	// Initialize control signal management
	udi_cdc_state = CPU_TO_LE16(0);
	uid_cdc_state_msg.value = CPU_TO_LE16(0);
80003418:	48 9a       	lddpc	r10,8000343c <udi_cdc_comm_enable+0x34>
8000341a:	b4 49       	st.h	r10[0x8],r9

	udi_cdc_line_coding.dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
8000341c:	30 09       	mov	r9,0
8000341e:	b0 b9       	st.b	r8[0x3],r9
80003420:	3c 29       	mov	r9,-62
80003422:	b0 99       	st.b	r8[0x1],r9
80003424:	30 19       	mov	r9,1
80003426:	b0 a9       	st.b	r8[0x2],r9
	udi_cdc_line_coding.bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
	udi_cdc_line_coding.bParityType = UDI_CDC_DEFAULT_PARITY;
	udi_cdc_line_coding.bDataBits = UDI_CDC_DEFAULT_DATABITS;
80003428:	30 89       	mov	r9,8
8000342a:	b0 e9       	st.b	r8[0x6],r9
	UDI_CDC_SET_CODING_EXT((&udi_cdc_line_coding));

	// Call application callback
	// to initialize memories or indicate that interface is enabled
	return UDI_CDC_ENABLE_EXT();
8000342c:	e0 a0 03 08 	rcall	80003a3c <stdio_usb_enable>
}
80003430:	d8 02       	popm	pc
80003432:	d7 03       	nop
80003434:	00 00       	add	r0,r0
80003436:	07 28       	ld.uh	r8,r3++
80003438:	00 00       	add	r0,r0
8000343a:	0c 42       	or	r2,r6
8000343c:	00 00       	add	r0,r0
8000343e:	00 30       	cp.w	r0,r0

80003440 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
80003440:	d4 01       	pushm	lr
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration)
80003442:	49 c8       	lddpc	r8,800034b0 <udc_update_iface_desc+0x70>
80003444:	11 89       	ld.ub	r9,r8[0x0]
80003446:	30 08       	mov	r8,0
80003448:	f0 09 18 00 	cp.b	r9,r8
8000344c:	c3 10       	breq	800034ae <udc_update_iface_desc+0x6e>
		return false;

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
8000344e:	49 a8       	lddpc	r8,800034b4 <udc_update_iface_desc+0x74>
80003450:	70 08       	ld.w	r8,r8[0x0]
80003452:	70 08       	ld.w	r8,r8[0x0]
80003454:	11 c9       	ld.ub	r9,r8[0x4]
80003456:	f8 09 18 00 	cp.b	r9,r12
8000345a:	e0 88 00 2a 	brls	800034ae <udc_update_iface_desc+0x6e>
		return false;

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
8000345e:	49 79       	lddpc	r9,800034b8 <udc_update_iface_desc+0x78>
80003460:	93 08       	st.w	r9[0x0],r8
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
80003462:	11 aa       	ld.ub	r10,r8[0x2]
80003464:	11 b9       	ld.ub	r9,r8[0x3]

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
80003466:	30 4e       	mov	lr,4
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
80003468:	f3 ea 10 89 	or	r9,r9,r10<<0x8
8000346c:	f2 0a 16 08 	lsr	r10,r9,0x8
80003470:	f5 e9 10 89 	or	r9,r10,r9<<0x8
80003474:	5c 79       	castu.h	r9
80003476:	f0 09 00 09 	add	r9,r8,r9
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
8000347a:	c1 38       	rjmp	800034a0 <udc_update_iface_desc+0x60>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
8000347c:	11 9a       	ld.ub	r10,r8[0x1]
8000347e:	fc 0a 18 00 	cp.b	r10,lr
80003482:	c0 d1       	brne	8000349c <udc_update_iface_desc+0x5c>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber)
80003484:	11 aa       	ld.ub	r10,r8[0x2]
80003486:	f8 0a 18 00 	cp.b	r10,r12
8000348a:	c0 91       	brne	8000349c <udc_update_iface_desc+0x5c>
					&& (setting_num ==
							udc_ptr_iface->
8000348c:	11 ba       	ld.ub	r10,r8[0x3]
8000348e:	f6 0a 18 00 	cp.b	r10,r11
80003492:	c0 51       	brne	8000349c <udc_update_iface_desc+0x5c>
80003494:	48 99       	lddpc	r9,800034b8 <udc_update_iface_desc+0x78>
80003496:	30 1c       	mov	r12,1
80003498:	93 08       	st.w	r9[0x0],r8
8000349a:	d8 02       	popm	pc
							bAlternateSetting))
				return true;	// Interface found
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) ((uint8_t
8000349c:	11 8a       	ld.ub	r10,r8[0x0]
8000349e:	14 08       	add	r8,r10
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
800034a0:	10 39       	cp.w	r9,r8
800034a2:	fe 9b ff ed 	brhi	8000347c <udc_update_iface_desc+0x3c>
800034a6:	48 59       	lddpc	r9,800034b8 <udc_update_iface_desc+0x78>
800034a8:	30 0c       	mov	r12,0
800034aa:	93 08       	st.w	r9[0x0],r8
800034ac:	d8 02       	popm	pc
800034ae:	d8 0a       	popm	pc,r12=0
800034b0:	00 00       	add	r0,r0
800034b2:	0c 50       	eor	r0,r6
800034b4:	00 00       	add	r0,r0
800034b6:	0c 48       	or	r8,r6
800034b8:	00 00       	add	r0,r0
800034ba:	0c 54       	eor	r4,r6

800034bc <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
800034bc:	d4 21       	pushm	r4-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
800034be:	48 e8       	lddpc	r8,800034f4 <udc_sof_notify+0x38>
800034c0:	11 89       	ld.ub	r9,r8[0x0]
800034c2:	30 08       	mov	r8,0
800034c4:	f0 09 18 00 	cp.b	r9,r8
800034c8:	c1 40       	breq	800034f0 <udc_sof_notify+0x34>
800034ca:	30 07       	mov	r7,0
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800034cc:	48 b6       	lddpc	r6,800034f8 <udc_sof_notify+0x3c>
800034ce:	c0 a8       	rjmp	800034e2 <udc_sof_notify+0x26>
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
800034d0:	70 18       	ld.w	r8,r8[0x4]
800034d2:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
800034d6:	70 48       	ld.w	r8,r8[0x10]
800034d8:	58 08       	cp.w	r8,0
800034da:	c0 20       	breq	800034de <udc_sof_notify+0x22>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
800034dc:	5d 18       	icall	r8
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
800034de:	2f f7       	sub	r7,-1
800034e0:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800034e2:	6c 08       	ld.w	r8,r6[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
800034e4:	70 09       	ld.w	r9,r8[0x0]
800034e6:	13 c9       	ld.ub	r9,r9[0x4]
800034e8:	ee 09 18 00 	cp.b	r9,r7
800034ec:	fe 9b ff f2 	brhi	800034d0 <udc_sof_notify+0x14>
800034f0:	d8 22       	popm	r4-r7,pc
800034f2:	d7 03       	nop
800034f4:	00 00       	add	r0,r0
800034f6:	0c 50       	eor	r0,r6
800034f8:	00 00       	add	r0,r0
800034fa:	0c 48       	or	r8,r6

800034fc <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
800034fc:	d4 01       	pushm	lr
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
800034fe:	48 48       	lddpc	r8,8000350c <udc_valid_address+0x10>
80003500:	11 bc       	ld.ub	r12,r8[0x3]
80003502:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80003506:	fe b0 f6 85 	rcall	80002210 <udd_set_address>
}
8000350a:	d8 02       	popm	pc
8000350c:	00 00       	add	r0,r0
8000350e:	0c 98       	mov	r8,r6

80003510 <udc_iface_enable>:
80003510:	d4 31       	pushm	r0-r7,lr
80003512:	18 96       	mov	r6,r12
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num))
80003514:	c9 6f       	rcall	80003440 <udc_update_iface_desc>
80003516:	c3 c0       	breq	8000358e <udc_iface_enable+0x7e>
80003518:	49 e8       	lddpc	r8,80003590 <udc_iface_enable+0x80>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
8000351a:	49 f3       	lddpc	r3,80003594 <udc_iface_enable+0x84>
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
8000351c:	70 07       	ld.w	r7,r8[0x0]

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
8000351e:	30 44       	mov	r4,4
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
80003520:	30 55       	mov	r5,5
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
80003522:	66 0a       	ld.w	r10,r3[0x0]
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
80003524:	74 08       	ld.w	r8,r10[0x0]
80003526:	11 ac       	ld.ub	r12,r8[0x2]
80003528:	11 bb       	ld.ub	r11,r8[0x3]
8000352a:	0f 89       	ld.ub	r9,r7[0x0]
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
8000352c:	f7 ec 10 8b 	or	r11,r11,r12<<0x8
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
80003530:	ee 09 00 09 	add	r9,r7,r9
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
80003534:	f6 0c 16 08 	lsr	r12,r11,0x8
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
80003538:	f9 eb 10 8b 	or	r11,r12,r11<<0x8
8000353c:	5c 7b       	castu.h	r11
8000353e:	16 08       	add	r8,r11
80003540:	c0 a8       	rjmp	80003554 <udc_iface_enable+0x44>
80003542:	13 9c       	ld.ub	r12,r9[0x1]
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
80003544:	e8 0c 18 00 	cp.b	r12,r4
80003548:	c0 90       	breq	8000355a <udc_iface_enable+0x4a>
8000354a:	ea 0c 18 00 	cp.b	r12,r5
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
8000354e:	c0 70       	breq	8000355c <udc_iface_enable+0x4c>
80003550:	13 8b       	ld.ub	r11,r9[0x0]
			return desc;	// Specific descriptor found
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
80003552:	16 09       	add	r9,r11
80003554:	12 38       	cp.w	r8,r9
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
80003556:	fe 9b ff f6 	brhi	80003542 <udc_iface_enable+0x32>
8000355a:	30 09       	mov	r9,0
8000355c:	12 97       	mov	r7,r9

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
8000355e:	58 09       	cp.w	r9,0
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
80003560:	c1 10       	breq	80003582 <udc_iface_enable+0x72>
80003562:	13 ca       	ld.ub	r10,r9[0x4]
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
						ep_desc->bmAttributes,
						le16_to_cpu
80003564:	13 d8       	ld.ub	r8,r9[0x5]
80003566:	13 ac       	ld.ub	r12,r9[0x2]
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
80003568:	f1 ea 10 88 	or	r8,r8,r10<<0x8
8000356c:	13 bb       	ld.ub	r11,r9[0x3]
8000356e:	f0 09 16 08 	lsr	r9,r8,0x8
80003572:	f3 e8 10 88 	or	r8,r9,r8<<0x8
80003576:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000357a:	fe b0 f8 93 	rcall	800026a0 <udd_ep_alloc>
8000357e:	cd 21       	brne	80003522 <udc_iface_enable+0x12>
80003580:	c0 78       	rjmp	8000358e <udc_iface_enable+0x7e>
80003582:	74 18       	ld.w	r8,r10[0x4]
						(ep_desc->wMaxPacketSize)))
			return false;
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
80003584:	f0 06 03 28 	ld.w	r8,r8[r6<<0x2]
80003588:	70 0c       	ld.w	r12,r8[0x0]
8000358a:	5d 1c       	icall	r12
8000358c:	d8 32       	popm	r0-r7,pc
8000358e:	d8 3a       	popm	r0-r7,pc,r12=0
80003590:	00 00       	add	r0,r0
80003592:	0c 54       	eor	r4,r6
80003594:	00 00       	add	r0,r0
80003596:	0c 48       	or	r8,r6

80003598 <udc_iface_disable>:
80003598:	d4 31       	pushm	r0-r7,lr
8000359a:	30 0b       	mov	r11,0
8000359c:	18 95       	mov	r5,r12
8000359e:	c5 1f       	rcall	80003440 <udc_update_iface_desc>
800035a0:	c3 70       	breq	8000360e <udc_iface_disable+0x76>
800035a2:	49 c6       	lddpc	r6,80003610 <udc_iface_disable+0x78>
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
		return false;

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
800035a4:	6c 08       	ld.w	r8,r6[0x0]
800035a6:	70 18       	ld.w	r8,r8[0x4]
800035a8:	f0 05 03 27 	ld.w	r7,r8[r5<<0x2]
800035ac:	6e 3c       	ld.w	r12,r7[0xc]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting()))
800035ae:	5d 1c       	icall	r12
800035b0:	18 9b       	mov	r11,r12
800035b2:	0a 9c       	mov	r12,r5
800035b4:	c4 6f       	rcall	80003440 <udc_update_iface_desc>
800035b6:	c2 c0       	breq	8000360e <udc_iface_disable+0x76>
800035b8:	49 78       	lddpc	r8,80003614 <udc_iface_disable+0x7c>
800035ba:	30 43       	mov	r3,4
		return false;

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
800035bc:	70 05       	ld.w	r5,r8[0x0]
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
800035be:	30 54       	mov	r4,5
		return false;

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
800035c0:	6c 08       	ld.w	r8,r6[0x0]
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
800035c2:	70 09       	ld.w	r9,r8[0x0]
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
800035c4:	13 ab       	ld.ub	r11,r9[0x2]
800035c6:	13 ba       	ld.ub	r10,r9[0x3]
800035c8:	0b 88       	ld.ub	r8,r5[0x0]
800035ca:	f5 eb 10 8a 	or	r10,r10,r11<<0x8
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
800035ce:	ea 08 00 08 	add	r8,r5,r8
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
800035d2:	f4 0b 16 08 	lsr	r11,r10,0x8
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
800035d6:	f7 ea 10 8a 	or	r10,r11,r10<<0x8
800035da:	5c 7a       	castu.h	r10
800035dc:	14 09       	add	r9,r10
800035de:	c0 a8       	rjmp	800035f2 <udc_iface_disable+0x5a>
800035e0:	11 9b       	ld.ub	r11,r8[0x1]
800035e2:	e6 0b 18 00 	cp.b	r11,r3
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
800035e6:	c0 90       	breq	800035f8 <udc_iface_disable+0x60>
800035e8:	e8 0b 18 00 	cp.b	r11,r4
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
800035ec:	c0 70       	breq	800035fa <udc_iface_disable+0x62>
800035ee:	11 8a       	ld.ub	r10,r8[0x0]
800035f0:	14 08       	add	r8,r10
			return desc;	// Specific descriptor found
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
800035f2:	10 39       	cp.w	r9,r8
800035f4:	fe 9b ff f6 	brhi	800035e0 <udc_iface_disable+0x48>
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
800035f8:	30 08       	mov	r8,0
800035fa:	10 95       	mov	r5,r8
800035fc:	58 08       	cp.w	r8,0
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
800035fe:	c0 50       	breq	80003608 <udc_iface_disable+0x70>
					udc_next_desc_in_iface((UDC_DESC_STORAGE
							usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc)
80003600:	11 ac       	ld.ub	r12,r8[0x2]
80003602:	fe b0 f6 c5 	rcall	8000238c <udd_ep_free>
				break;
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
80003606:	cd db       	rjmp	800035c0 <udc_iface_disable+0x28>
80003608:	6e 18       	ld.w	r8,r7[0x4]
		}
8000360a:	5d 18       	icall	r8
	}
#endif

	// Disable interface
	udi_api->disable();
8000360c:	da 3a       	popm	r0-r7,pc,r12=1
8000360e:	d8 3a       	popm	r0-r7,pc,r12=0
80003610:	00 00       	add	r0,r0
	return true;
80003612:	0c 48       	or	r8,r6
80003614:	00 00       	add	r0,r0
80003616:	0c 54       	eor	r4,r6

80003618 <udc_reset>:
80003618:	d4 21       	pushm	r4-r7,lr
8000361a:	48 f8       	lddpc	r8,80003654 <udc_reset+0x3c>
8000361c:	11 89       	ld.ub	r9,r8[0x0]
8000361e:	30 08       	mov	r8,0
80003620:	f0 09 18 00 	cp.b	r9,r8
 */
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
80003624:	c0 f0       	breq	80003642 <udc_reset+0x2a>
80003626:	30 07       	mov	r7,0
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003628:	48 c6       	lddpc	r6,80003658 <udc_reset+0x40>
8000362a:	c0 58       	rjmp	80003634 <udc_reset+0x1c>
				iface_num++) {
			udc_iface_disable(iface_num);
8000362c:	0e 9c       	mov	r12,r7
8000362e:	cb 5f       	rcall	80003598 <udc_iface_disable>
80003630:	2f f7       	sub	r7,-1
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
80003632:	5c 57       	castu.b	r7
80003634:	6c 08       	ld.w	r8,r6[0x0]
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003636:	70 08       	ld.w	r8,r8[0x0]
80003638:	11 c8       	ld.ub	r8,r8[0x4]
8000363a:	ee 08 18 00 	cp.b	r8,r7
8000363e:	fe 9b ff f7 	brhi	8000362c <udc_reset+0x14>
80003642:	30 09       	mov	r9,0
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
80003644:	48 48       	lddpc	r8,80003654 <udc_reset+0x3c>
80003646:	b0 89       	st.b	r8[0x0],r9
80003648:	e0 69 01 00 	mov	r9,256
	if (0 != (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status)) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
8000364c:	48 48       	lddpc	r8,8000365c <udc_reset+0x44>
8000364e:	b0 09       	st.h	r8[0x0],r9
80003650:	d8 22       	popm	r4-r7,pc
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
80003652:	d7 03       	nop
80003654:	00 00       	add	r0,r0
80003656:	0c 50       	eor	r0,r6
80003658:	00 00       	add	r0,r0
8000365a:	0c 48       	or	r8,r6
8000365c:	00 00       	add	r0,r0
8000365e:	0c 4e       	or	lr,r6

80003660 <udc_process_setup>:
80003660:	d4 21       	pushm	r4-r7,lr
80003662:	4c c8       	lddpc	r8,80003790 <udc_process_setup+0x130>
 */
bool udc_process_setup(void)
{
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
	udd_g_ctrlreq.callback = NULL;
80003664:	30 0a       	mov	r10,0
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
80003666:	30 09       	mov	r9,0
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;
80003668:	91 5a       	st.w	r8[0x14],r10
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
8000366a:	b0 69       	st.h	r8[0xc],r9
	udd_g_ctrlreq.callback = NULL;
8000366c:	91 4a       	st.w	r8[0x10],r10
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
8000366e:	11 86       	ld.ub	r6,r8[0x0]
80003670:	f2 06 18 00 	cp.b	r6,r9
80003674:	c0 64       	brge	80003680 <udc_process_setup+0x20>
		if (udd_g_ctrlreq.req.wLength == 0)
80003676:	90 38       	ld.sh	r8,r8[0x6]
80003678:	f2 08 19 00 	cp.h	r8,r9
8000367c:	e0 80 01 b3 	breq	800039e2 <udc_process_setup+0x382>
			return false;	// Error from USB host
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
80003680:	0c 9b       	mov	r11,r6
80003682:	e2 1b 00 60 	andl	r11,0x60,COH
80003686:	e0 81 01 87 	brne	80003994 <udc_process_setup+0x334>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
8000368a:	16 98       	mov	r8,r11
8000368c:	f6 06 18 00 	cp.b	r6,r11
80003690:	e0 84 00 d9 	brge	80003842 <udc_process_setup+0x1e2>
		// GET Standard Requests 
		if (udd_g_ctrlreq.req.wLength == 0)
80003694:	4b f7       	lddpc	r7,80003790 <udc_process_setup+0x130>
80003696:	8e 39       	ld.sh	r9,r7[0x6]
80003698:	58 09       	cp.w	r9,0
8000369a:	e0 80 01 7d 	breq	80003994 <udc_process_setup+0x334>
			return false;	// Error for USB host

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
8000369e:	ed d6 c0 05 	bfextu	r6,r6,0x0,0x5
800036a2:	e0 81 00 8d 	brne	800037bc <udc_process_setup+0x15c>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
800036a6:	0f 9a       	ld.ub	r10,r7[0x1]
800036a8:	30 6b       	mov	r11,6
800036aa:	f6 0a 18 00 	cp.b	r10,r11
800036ae:	c1 10       	breq	800036d0 <udc_process_setup+0x70>
800036b0:	30 8b       	mov	r11,8
800036b2:	f6 0a 18 00 	cp.b	r10,r11
800036b6:	c7 b0       	breq	800037ac <udc_process_setup+0x14c>
800036b8:	f0 0a 18 00 	cp.b	r10,r8
800036bc:	e0 81 01 6c 	brne	80003994 <udc_process_setup+0x334>
800036c0:	30 28       	mov	r8,2
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status))
800036c2:	f0 09 19 00 	cp.h	r9,r8
800036c6:	e0 81 01 67 	brne	80003994 <udc_process_setup+0x334>
800036ca:	30 2b       	mov	r11,2
		return false;

	udd_set_setup_payload(
800036cc:	4b 2c       	lddpc	r12,80003794 <udc_process_setup+0x134>
800036ce:	c9 f8       	rjmp	8000380c <udc_process_setup+0x1ac>
800036d0:	8e 1a       	ld.sh	r10,r7[0x2]
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
800036d2:	30 2b       	mov	r11,2

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
800036d4:	f1 da c0 10 	bfextu	r8,r10,0x0,0x10
800036d8:	f0 06 16 08 	lsr	r6,r8,0x8
800036dc:	f6 06 18 00 	cp.b	r6,r11
800036e0:	c0 f0       	breq	800036fe <udc_process_setup+0x9e>
800036e2:	30 3a       	mov	r10,3
800036e4:	f4 06 18 00 	cp.b	r6,r10
800036e8:	c2 80       	breq	80003738 <udc_process_setup+0xd8>
800036ea:	30 18       	mov	r8,1
800036ec:	f0 06 18 00 	cp.b	r6,r8
800036f0:	e0 81 01 52 	brne	80003994 <udc_process_setup+0x334>
800036f4:	4a 98       	lddpc	r8,80003798 <udc_process_setup+0x138>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
800036f6:	70 08       	ld.w	r8,r8[0x0]
800036f8:	10 9c       	mov	r12,r8
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
800036fa:	11 8b       	ld.ub	r11,r8[0x0]
800036fc:	c3 f8       	rjmp	8000377a <udc_process_setup+0x11a>
800036fe:	f1 da c0 08 	bfextu	r8,r10,0x0,0x8
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
80003702:	4a 69       	lddpc	r9,80003798 <udc_process_setup+0x138>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
80003704:	72 0a       	ld.w	r10,r9[0x0]
80003706:	f5 3a 00 11 	ld.ub	r10,r10[17]
8000370a:	f0 0a 18 00 	cp.b	r10,r8
8000370e:	e0 88 01 43 	brls	80003994 <udc_process_setup+0x334>
80003712:	72 19       	ld.w	r9,r9[0x4]
					bNumConfigurations)
				return false;
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
80003714:	f2 08 03 38 	ld.w	r8,r9[r8<<0x3]
80003718:	11 a9       	ld.ub	r9,r8[0x2]
8000371a:	10 9c       	mov	r12,r8
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations)
				return false;
			udd_set_setup_payload(
8000371c:	11 b8       	ld.ub	r8,r8[0x3]
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
8000371e:	f1 e9 10 88 	or	r8,r8,r9<<0x8
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations)
				return false;
			udd_set_setup_payload(
80003722:	f0 09 16 08 	lsr	r9,r8,0x8
80003726:	f3 e8 10 88 	or	r8,r9,r8<<0x8
8000372a:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
8000372e:	fe b0 f5 95 	rcall	80002258 <udd_set_setup_payload>
80003732:	6e 28       	ld.w	r8,r7[0x8]
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
80003734:	b0 96       	st.b	r8[0x1],r6
80003736:	c2 48       	rjmp	8000377e <udc_process_setup+0x11e>
80003738:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
	uint8_t i;
	uint8_t *str;
	uint8_t str_lgt=0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
8000373c:	58 18       	cp.w	r8,1
8000373e:	c0 60       	breq	8000374a <udc_process_setup+0xea>
80003740:	58 28       	cp.w	r8,2
80003742:	c0 a0       	breq	80003756 <udc_process_setup+0xf6>
80003744:	58 08       	cp.w	r8,0
80003746:	c0 50       	breq	80003750 <udc_process_setup+0xf0>
80003748:	c2 69       	rjmp	80003994 <udc_process_setup+0x334>
8000374a:	30 98       	mov	r8,9
8000374c:	49 4a       	lddpc	r10,8000379c <udc_process_setup+0x13c>
8000374e:	c0 68       	rjmp	8000375a <udc_process_setup+0xfa>
80003750:	30 4b       	mov	r11,4
	case 0:
		udd_set_setup_payload(
80003752:	49 4c       	lddpc	r12,800037a0 <udc_process_setup+0x140>
80003754:	c1 38       	rjmp	8000377a <udc_process_setup+0x11a>
80003756:	30 38       	mov	r8,3
80003758:	49 3a       	lddpc	r10,800037a4 <udc_process_setup+0x144>
8000375a:	49 4b       	lddpc	r11,800037a8 <udc_process_setup+0x148>
8000375c:	14 99       	mov	r9,r10
8000375e:	2f eb       	sub	r11,-2
80003760:	13 3c       	ld.ub	r12,r9++
		return false;
	}

	if (str_lgt != 0) {
		for(i = 0; i < str_lgt; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
80003762:	a9 6c       	lsl	r12,0x8
80003764:	16 bc       	st.h	r11++,r12
80003766:	f2 0a 01 0c 	sub	r12,r9,r10
#endif
		return false;
	}

	if (str_lgt != 0) {
		for(i = 0; i < str_lgt; i++) {
8000376a:	f0 0c 18 00 	cp.b	r12,r8
8000376e:	cf 93       	brcs	80003760 <udc_process_setup+0x100>
80003770:	2f f8       	sub	r8,-1
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}
		
		udc_string_desc.header.bLength = 2 + (str_lgt) * 2;
80003772:	48 ec       	lddpc	r12,800037a8 <udc_process_setup+0x148>
80003774:	a1 78       	lsl	r8,0x1
80003776:	10 9b       	mov	r11,r8
		udd_set_setup_payload(
80003778:	b8 88       	st.b	r12[0x0],r8
	if (str_lgt != 0) {
		for(i = 0; i < str_lgt; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}
		
		udc_string_desc.header.bLength = 2 + (str_lgt) * 2;
8000377a:	fe b0 f5 6f 	rcall	80002258 <udd_set_setup_payload>
		udd_set_setup_payload(
8000377e:	48 58       	lddpc	r8,80003790 <udc_process_setup+0x130>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size)
80003780:	90 39       	ld.sh	r9,r8[0x6]
80003782:	90 6a       	ld.sh	r10,r8[0xc]
80003784:	f2 0a 19 00 	cp.h	r10,r9
80003788:	e0 88 01 2e 	brls	800039e4 <udc_process_setup+0x384>
8000378c:	b0 69       	st.h	r8[0xc],r9
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
8000378e:	c2 b9       	rjmp	800039e4 <udc_process_setup+0x384>
80003790:	00 00       	add	r0,r0
80003792:	0c 98       	mov	r8,r6
80003794:	00 00       	add	r0,r0
80003796:	0c 4e       	or	lr,r6
80003798:	00 00       	add	r0,r0
8000379a:	00 90       	mov	r0,r0
8000379c:	00 00       	add	r0,r0
8000379e:	00 b0       	st.h	r0++,r0
800037a0:	00 00       	add	r0,r0
800037a2:	00 d0       	st.w	--r0,r0
800037a4:	00 00       	add	r0,r0
800037a6:	00 ac       	st.w	r0++,r12
800037a8:	00 00       	add	r0,r0
800037aa:	00 bc       	st.h	r0++,r12
800037ac:	30 18       	mov	r8,1
800037ae:	f0 09 19 00 	cp.h	r9,r8
800037b2:	e0 81 00 f1 	brne	80003994 <udc_process_setup+0x334>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1)
800037b6:	30 1b       	mov	r11,1
800037b8:	4c 8c       	lddpc	r12,800038d8 <udc_process_setup+0x278>
800037ba:	c2 98       	rjmp	8000380c <udc_process_setup+0x1ac>
800037bc:	58 16       	cp.w	r6,1
		return false;

	udd_set_setup_payload(&udc_num_configuration,1);
800037be:	c2 a1       	brne	80003812 <udc_process_setup+0x1b2>
800037c0:	0f 9c       	ld.ub	r12,r7[0x1]
800037c2:	30 aa       	mov	r10,10
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
800037c4:	f4 0c 18 00 	cp.b	r12,r10
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
800037c8:	e0 81 00 e6 	brne	80003994 <udc_process_setup+0x334>
800037cc:	ec 09 19 00 	cp.h	r9,r6
800037d0:	e0 81 00 e2 	brne	80003994 <udc_process_setup+0x334>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1)
800037d4:	4c 19       	lddpc	r9,800038d8 <udc_process_setup+0x278>
800037d6:	13 89       	ld.ub	r9,r9[0x0]
800037d8:	f6 09 18 00 	cp.b	r9,r11
		return false;	// Error in request
	if (!udc_num_configuration)
800037dc:	e0 80 00 dc 	breq	80003994 <udc_process_setup+0x334>
800037e0:	4b f8       	lddpc	r8,800038dc <udc_process_setup+0x27c>
800037e2:	0f d7       	ld.ub	r7,r7[0x5]
800037e4:	70 06       	ld.w	r6,r8[0x0]
800037e6:	6c 08       	ld.w	r8,r6[0x0]
		return false;	// The device is not is configured state yet

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
800037e8:	11 c8       	ld.ub	r8,r8[0x4]
		return false;	// Error in request
	if (!udc_num_configuration)
		return false;	// The device is not is configured state yet

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
800037ea:	ee 08 18 00 	cp.b	r8,r7
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
800037ee:	e0 88 00 d3 	brls	80003994 <udc_process_setup+0x334>
800037f2:	0e 9c       	mov	r12,r7
800037f4:	c2 6e       	rcall	80003440 <udc_update_iface_desc>
800037f6:	e0 80 00 cf 	breq	80003994 <udc_process_setup+0x334>
		return false;

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
800037fa:	6c 18       	ld.w	r8,r6[0x4]
800037fc:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
80003800:	70 3c       	ld.w	r12,r8[0xc]
80003802:	5d 1c       	icall	r12
		return false;
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
	udc_iface_setting = udi_api->getsetting();
80003804:	4b 78       	lddpc	r8,800038e0 <udc_process_setup+0x280>
80003806:	30 1b       	mov	r11,1
80003808:	b0 8c       	st.b	r8[0x0],r12
8000380a:	10 9c       	mov	r12,r8
8000380c:	fe b0 f5 26 	rcall	80002258 <udd_set_setup_payload>
	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
80003810:	c3 48       	rjmp	80003878 <udc_process_setup+0x218>
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
		return false;
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
	udc_iface_setting = udi_api->getsetting();
80003812:	58 26       	cp.w	r6,2
	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
80003814:	e0 81 00 c0 	brne	80003994 <udc_process_setup+0x334>
80003818:	0f 9a       	ld.ub	r10,r7[0x1]
8000381a:	f6 0a 18 00 	cp.b	r10,r11
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
8000381e:	e0 81 00 bb 	brne	80003994 <udc_process_setup+0x334>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
80003822:	ec 09 19 00 	cp.h	r9,r6
80003826:	e0 81 00 b7 	brne	80003994 <udc_process_setup+0x334>
8000382a:	0f dc       	ld.ub	r12,r7[0x5]
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status))
8000382c:	fe b0 f5 1c 	rcall	80002264 <udd_ep_is_halted>
80003830:	4a d8       	lddpc	r8,800038e4 <udc_process_setup+0x284>
80003832:	e0 69 01 00 	mov	r9,256
		return false;

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
80003836:	0c 9b       	mov	r11,r6
80003838:	58 0c       	cp.w	r12,0
8000383a:	f9 b9 00 00 	moveq	r9,0
8000383e:	b0 09       	st.h	r8[0x0],r9
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload(
80003840:	ce 5b       	rjmp	8000380a <udc_process_setup+0x1aa>
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status))
		return false;

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
80003842:	ef d6 c0 05 	bfextu	r7,r6,0x0,0x5
80003846:	c6 51       	brne	80003910 <udc_process_setup+0x2b0>
80003848:	4a 86       	lddpc	r6,800038e8 <udc_process_setup+0x288>
8000384a:	30 59       	mov	r9,5
			}
		}
#endif
	} else {
		// SET Standard Requests  
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
8000384c:	0d 98       	ld.ub	r8,r6[0x1]
8000384e:	f2 08 18 00 	cp.b	r8,r9
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
80003852:	c0 b0       	breq	80003868 <udc_process_setup+0x208>
80003854:	30 99       	mov	r9,9
80003856:	f2 08 18 00 	cp.b	r8,r9
8000385a:	c2 10       	breq	8000389c <udc_process_setup+0x23c>
8000385c:	30 19       	mov	r9,1
8000385e:	f2 08 18 00 	cp.b	r8,r9
80003862:	e0 81 00 99 	brne	80003994 <udc_process_setup+0x334>
80003866:	c0 a8       	rjmp	8000387a <udc_process_setup+0x21a>
80003868:	8c 38       	ld.sh	r8,r6[0x6]
8000386a:	ee 08 19 00 	cp.h	r8,r7
8000386e:	e0 81 00 93 	brne	80003994 <udc_process_setup+0x334>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003872:	fe c8 03 76 	sub	r8,pc,886
80003876:	8d 48       	st.w	r6[0x10],r8
80003878:	da 2a       	popm	r4-r7,pc,r12=1
8000387a:	8c 38       	ld.sh	r8,r6[0x6]
		return false;

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
8000387c:	ee 08 19 00 	cp.h	r8,r7
80003880:	e0 81 00 8a 	brne	80003994 <udc_process_setup+0x334>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003884:	8c 19       	ld.sh	r9,r6[0x2]
80003886:	30 18       	mov	r8,1
80003888:	f0 09 19 00 	cp.h	r9,r8
		return false;

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
8000388c:	e0 81 00 84 	brne	80003994 <udc_process_setup+0x334>
80003890:	49 79       	lddpc	r9,800038ec <udc_process_setup+0x28c>
80003892:	30 1c       	mov	r12,1
80003894:	92 08       	ld.sh	r8,r9[0x0]
80003896:	a9 d8       	cbr	r8,0x9
		udc_device_status &= CPU_TO_LE16(~USB_DEV_STATUS_REMOTEWAKEUP);
80003898:	b2 08       	st.h	r9[0x0],r8
8000389a:	d8 22       	popm	r4-r7,pc
8000389c:	8c 39       	ld.sh	r9,r6[0x6]
8000389e:	ee 09 19 00 	cp.h	r9,r7
800038a2:	c7 91       	brne	80003994 <udc_process_setup+0x334>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength != 0)
800038a4:	fe b0 f4 c7 	rcall	80002232 <udd_getaddress>
800038a8:	c7 60       	breq	80003994 <udc_process_setup+0x334>
800038aa:	49 25       	lddpc	r5,800038f0 <udc_process_setup+0x290>
800038ac:	0d b9       	ld.ub	r9,r6[0x3]
		return false;
	// Authorize configuration only if the address is valid
	if (!udd_getaddress())
800038ae:	6a 08       	ld.w	r8,r5[0x0]
800038b0:	f1 38 00 11 	ld.ub	r8,r8[17]
800038b4:	10 39       	cp.w	r9,r8
			return false;
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
800038b6:	e0 89 00 6f 	brgt	80003994 <udc_process_setup+0x334>
800038ba:	ca fe       	rcall	80003618 <udc_reset>
800038bc:	0d b8       	ld.ub	r8,r6[0x3]
800038be:	48 79       	lddpc	r9,800038d8 <udc_process_setup+0x278>
800038c0:	b2 88       	st.b	r9[0x0],r8
800038c2:	58 08       	cp.w	r8,0
800038c4:	e0 80 00 90 	breq	800039e4 <udc_process_setup+0x384>
				udc_config.confdev_lsfs->bNumConfigurations)
			return false;
	}

	// Reset current configuration
	udc_reset();
800038c8:	20 18       	sub	r8,1

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
800038ca:	6a 19       	ld.w	r9,r5[0x4]
800038cc:	48 46       	lddpc	r6,800038dc <udc_process_setup+0x27c>
800038ce:	f2 08 00 38 	add	r8,r9,r8<<0x3
	if (udc_num_configuration == 0) {
800038d2:	8d 08       	st.w	r6[0x0],r8
800038d4:	c1 68       	rjmp	80003900 <udc_process_setup+0x2a0>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
800038d6:	d7 03       	nop
800038d8:	00 00       	add	r0,r0
800038da:	0c 50       	eor	r0,r6
800038dc:	00 00       	add	r0,r0
800038de:	0c 48       	or	r8,r6
800038e0:	00 00       	add	r0,r0
800038e2:	0c 4c       	or	r12,r6
800038e4:	00 00       	add	r0,r0
800038e6:	0c 44       	or	r4,r6
800038e8:	00 00       	add	r0,r0
800038ea:	0c 98       	mov	r8,r6
800038ec:	00 00       	add	r0,r0
800038ee:	0c 4e       	or	lr,r6
800038f0:	00 00       	add	r0,r0
800038f2:	00 90       	mov	r0,r0
800038f4:	0e 9c       	mov	r12,r7
800038f6:	30 0b       	mov	r11,0
800038f8:	c0 ce       	rcall	80003510 <udc_iface_enable>
800038fa:	c4 d0       	breq	80003994 <udc_process_setup+0x334>
800038fc:	2f f7       	sub	r7,-1
800038fe:	5c 57       	castu.b	r7
80003900:	6c 08       	ld.w	r8,r6[0x0]
80003902:	70 08       	ld.w	r8,r8[0x0]
80003904:	11 c8       	ld.ub	r8,r8[0x4]
80003906:	ee 08 18 00 	cp.b	r8,r7
8000390a:	fe 9b ff f5 	brhi	800038f4 <udc_process_setup+0x294>
8000390e:	c6 b8       	rjmp	800039e4 <udc_process_setup+0x384>
80003910:	58 17       	cp.w	r7,1
80003912:	c1 b1       	brne	80003948 <udc_process_setup+0x2e8>
80003914:	4b 59       	lddpc	r9,800039e8 <udc_process_setup+0x388>
80003916:	30 ba       	mov	r10,11
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0))
80003918:	13 9c       	ld.ub	r12,r9[0x1]
8000391a:	f4 0c 18 00 	cp.b	r12,r10
8000391e:	c3 b1       	brne	80003994 <udc_process_setup+0x334>
80003920:	92 3a       	ld.sh	r10,r9[0x6]
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
80003922:	f6 0a 19 00 	cp.h	r10,r11
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003926:	c3 71       	brne	80003994 <udc_process_setup+0x334>
80003928:	4b 1a       	lddpc	r10,800039ec <udc_process_setup+0x38c>
8000392a:	15 8a       	ld.ub	r10,r10[0x0]
8000392c:	f6 0a 18 00 	cp.b	r10,r11
80003930:	c3 20       	breq	80003994 <udc_process_setup+0x334>
80003932:	13 d7       	ld.ub	r7,r9[0x5]
80003934:	92 16       	ld.sh	r6,r9[0x2]
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
80003936:	0e 9c       	mov	r12,r7
80003938:	c3 0e       	rcall	80003598 <udc_iface_disable>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
8000393a:	c2 d0       	breq	80003994 <udc_process_setup+0x334>
8000393c:	f7 d6 c0 08 	bfextu	r11,r6,0x0,0x8
80003940:	0e 9c       	mov	r12,r7
80003942:	fe b0 fd e7 	rcall	80003510 <udc_iface_enable>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength != 0)
80003946:	c2 58       	rjmp	80003990 <udc_process_setup+0x330>
80003948:	58 27       	cp.w	r7,2
8000394a:	c2 51       	brne	80003994 <udc_process_setup+0x334>
8000394c:	4a 78       	lddpc	r8,800039e8 <udc_process_setup+0x388>
		return false;	// Error in request
	if (!udc_num_configuration)
8000394e:	30 1a       	mov	r10,1
80003950:	11 99       	ld.ub	r9,r8[0x1]
80003952:	f4 09 18 00 	cp.b	r9,r10
80003956:	c0 60       	breq	80003962 <udc_process_setup+0x302>

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;

	// Disable current setting
	if (!udc_iface_disable(iface_num))
80003958:	30 3a       	mov	r10,3
	if (!udc_num_configuration)
		return false;	// The device is not is configured state yet


	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
8000395a:	f4 09 18 00 	cp.b	r9,r10

	// Disable current setting
	if (!udc_iface_disable(iface_num))
8000395e:	c1 b1       	brne	80003994 <udc_process_setup+0x334>
80003960:	c0 d8       	rjmp	8000397a <udc_process_setup+0x31a>
80003962:	90 39       	ld.sh	r9,r8[0x6]
		return false;

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
80003964:	f6 09 19 00 	cp.h	r9,r11
80003968:	c1 61       	brne	80003994 <udc_process_setup+0x334>
8000396a:	90 1a       	ld.sh	r10,r8[0x2]
8000396c:	f2 0a 19 00 	cp.h	r10,r9
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
80003970:	c1 21       	brne	80003994 <udc_process_setup+0x334>
80003972:	11 dc       	ld.ub	r12,r8[0x5]
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
80003974:	fe b0 f4 c0 	rcall	800022f4 <udd_ep_clear_halt>
80003978:	c0 c8       	rjmp	80003990 <udc_process_setup+0x330>
8000397a:	90 39       	ld.sh	r9,r8[0x6]
8000397c:	f6 09 19 00 	cp.h	r9,r11
80003980:	c0 a1       	brne	80003994 <udc_process_setup+0x334>
80003982:	90 1a       	ld.sh	r10,r8[0x2]
80003984:	f2 0a 19 00 	cp.h	r10,r9
80003988:	c0 61       	brne	80003994 <udc_process_setup+0x334>
 *
 * \return true if success 
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
8000398a:	11 dc       	ld.ub	r12,r8[0x5]
8000398c:	fe b0 f4 76 	rcall	80002278 <udd_ep_set_halt>
80003990:	58 0c       	cp.w	r12,0
		return false;

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
80003992:	c2 91       	brne	800039e4 <udc_process_setup+0x384>
80003994:	49 58       	lddpc	r8,800039e8 <udc_process_setup+0x388>
80003996:	11 89       	ld.ub	r9,r8[0x0]
80003998:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
8000399c:	58 19       	cp.w	r9,1
8000399e:	c2 21       	brne	800039e2 <udc_process_setup+0x382>
800039a0:	49 39       	lddpc	r9,800039ec <udc_process_setup+0x38c>
 * \return true if success 
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_epset_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
800039a2:	13 8a       	ld.ub	r10,r9[0x0]
800039a4:	30 09       	mov	r9,0
800039a6:	f2 0a 18 00 	cp.b	r10,r9
		return false;
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
800039aa:	c1 c0       	breq	800039e2 <udc_process_setup+0x382>
800039ac:	11 d7       	ld.ub	r7,r8[0x5]
800039ae:	49 18       	lddpc	r8,800039f0 <udc_process_setup+0x390>
800039b0:	70 06       	ld.w	r6,r8[0x0]
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
800039b2:	6c 08       	ld.w	r8,r6[0x0]
800039b4:	11 c8       	ld.ub	r8,r8[0x4]
800039b6:	ee 08 18 00 	cp.b	r8,r7
			return false;	// Error from USB host
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd())
800039ba:	e0 88 00 14 	brls	800039e2 <udc_process_setup+0x382>
			return true;
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
800039be:	30 0b       	mov	r11,0
800039c0:	0e 9c       	mov	r12,r7
800039c2:	fe b0 fd 3f 	rcall	80003440 <udc_update_iface_desc>
800039c6:	c0 e0       	breq	800039e2 <udc_process_setup+0x382>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration)
800039c8:	6c 18       	ld.w	r8,r6[0x4]
800039ca:	f0 07 03 26 	ld.w	r6,r8[r7<<0x2]
800039ce:	6c 3c       	ld.w	r12,r6[0xc]
800039d0:	5d 1c       	icall	r12
800039d2:	18 9b       	mov	r11,r12
		return false;	// The device is not is configured state yet
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
800039d4:	0e 9c       	mov	r12,r7
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
800039d6:	fe b0 fd 35 	rcall	80003440 <udc_update_iface_desc>
800039da:	c0 40       	breq	800039e2 <udc_process_setup+0x382>
800039dc:	6c 2c       	ld.w	r12,r6[0x8]
800039de:	5d 1c       	icall	r12
800039e0:	d8 22       	popm	r4-r7,pc
800039e2:	d8 2a       	popm	r4-r7,pc,r12=0
800039e4:	da 2a       	popm	r4-r7,pc,r12=1
		return false;

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
800039e6:	d7 03       	nop
800039e8:	00 00       	add	r0,r0
800039ea:	0c 98       	mov	r8,r6
800039ec:	00 00       	add	r0,r0
800039ee:	0c 50       	eor	r0,r6
		return false;
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
800039f0:	00 00       	add	r0,r0
800039f2:	0c 48       	or	r8,r6

800039f4 <_read>:
#elif (defined(__GNUC__) && !defined(XMEGA))


int __attribute__((weak))
_read (int file, char * ptr, int len)
{
800039f4:	d4 31       	pushm	r0-r7,lr
800039f6:	20 1d       	sub	sp,4
800039f8:	16 97       	mov	r7,r11
800039fa:	14 92       	mov	r2,r10
	int nChars = 0;

	if (file != 0)
800039fc:	58 0c       	cp.w	r12,0
800039fe:	c0 30       	breq	80003a04 <_read+0x10>
80003a00:	3f f6       	mov	r6,-1
80003a02:	c1 58       	rjmp	80003a2c <_read+0x38>
80003a04:	18 96       	mov	r6,r12
		return -1;

	for (; len > 0; --len) {
		int c;
		ptr_get(stdio_base,&c);
80003a06:	48 c3       	lddpc	r3,80003a34 <_read+0x40>
80003a08:	48 c4       	lddpc	r4,80003a38 <_read+0x44>
80003a0a:	1a 95       	mov	r5,sp
80003a0c:	c0 b8       	rjmp	80003a22 <_read+0x2e>
80003a0e:	68 08       	ld.w	r8,r4[0x0]
80003a10:	66 0c       	ld.w	r12,r3[0x0]
80003a12:	1a 9b       	mov	r11,sp
80003a14:	5d 18       	icall	r8
		if (c < 0)
80003a16:	40 08       	lddsp	r8,sp[0x0]
80003a18:	58 08       	cp.w	r8,0
80003a1a:	c0 95       	brlt	80003a2c <_read+0x38>
		break;
		*ptr++ = c;
80003a1c:	ee 06 0b 08 	st.b	r7[r6],r8
		++nChars;
80003a20:	2f f6       	sub	r6,-1
// GCC AVR32 implementation
#elif (defined(__GNUC__) && !defined(XMEGA))


int __attribute__((weak))
_read (int file, char * ptr, int len)
80003a22:	e4 06 01 08 	sub	r8,r2,r6
	int nChars = 0;

	if (file != 0)
		return -1;

	for (; len > 0; --len) {
80003a26:	58 08       	cp.w	r8,0
80003a28:	fe 99 ff f3 	brgt	80003a0e <_read+0x1a>
		break;
		*ptr++ = c;
		++nChars;
	}
	return nChars;
}
80003a2c:	0c 9c       	mov	r12,r6
80003a2e:	2f fd       	sub	sp,-4
80003a30:	d8 32       	popm	r0-r7,pc
80003a32:	d7 03       	nop
80003a34:	00 00       	add	r0,r0
80003a36:	0c c0       	st.b	r6++,r0
80003a38:	00 00       	add	r0,r0
80003a3a:	0c b8       	st.h	r6++,r8

80003a3c <stdio_usb_enable>:
	}
}

bool stdio_usb_enable(void)
{
	stdio_usb_interface_enable = true;
80003a3c:	30 19       	mov	r9,1
80003a3e:	48 38       	lddpc	r8,80003a48 <stdio_usb_enable+0xc>
	return true;
}
80003a40:	30 1c       	mov	r12,1
	}
}

bool stdio_usb_enable(void)
{
	stdio_usb_interface_enable = true;
80003a42:	b0 89       	st.b	r8[0x0],r9
	return true;
}
80003a44:	5e fc       	retal	r12
80003a46:	d7 03       	nop
80003a48:	00 00       	add	r0,r0
80003a4a:	0c 58       	eor	r8,r6

80003a4c <stdio_usb_disable>:

void stdio_usb_disable(void)
{
	stdio_usb_interface_enable = false;
80003a4c:	30 09       	mov	r9,0
80003a4e:	48 28       	lddpc	r8,80003a54 <stdio_usb_disable+0x8>
80003a50:	b0 89       	st.b	r8[0x0],r9
}
80003a52:	5e fc       	retal	r12
80003a54:	00 00       	add	r0,r0
80003a56:	0c 58       	eor	r8,r6

80003a58 <stdio_usb_vbus_event>:
	
	*data = udi_cdc_getc ();
}

void stdio_usb_vbus_event(bool b_high)
{
80003a58:	d4 01       	pushm	lr
	if (b_high) {
80003a5a:	58 0c       	cp.w	r12,0
80003a5c:	c0 40       	breq	80003a64 <stdio_usb_vbus_event+0xc>
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
	udd_attach();
80003a5e:	fe b0 f6 e7 	rcall	8000282c <udd_attach>
80003a62:	d8 02       	popm	pc
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
80003a64:	fe b0 f5 6e 	rcall	80002540 <udd_detach>
80003a68:	d8 02       	popm	pc
80003a6a:	d7 03       	nop

80003a6c <stdio_usb_init>:
80003a6c:	d4 01       	pushm	lr
80003a6e:	48 a8       	lddpc	r8,80003a94 <stdio_usb_init+0x28>
80003a70:	fe c9 ff ac 	sub	r9,pc,-84
}

void stdio_usb_init (volatile void * usart)
{
	stdio_base = usart;
	ptr_put = stdio_usb_putchar;
80003a74:	91 0c       	st.w	r8[0x0],r12
80003a76:	48 98       	lddpc	r8,80003a98 <stdio_usb_init+0x2c>
	ptr_get = stdio_usb_getchar;
80003a78:	91 09       	st.w	r8[0x0],r9
80003a7a:	fe c9 ff da 	sub	r9,pc,-38

/*! \brief Start the USB Device stack
 */
static inline void udc_start(void)
{
	udd_enable();
80003a7e:	48 88       	lddpc	r8,80003a9c <stdio_usb_init+0x30>
80003a80:	91 09       	st.w	r8[0x0],r9
 *        udc_attach(); \n
 *     }  \n
 */
static inline bool udc_include_vbus_monitoring(void)
{
	return udd_include_vbus_monitoring();
80003a82:	fe b0 f6 ff 	rcall	80002880 <udd_enable>
	 * integrated USB interfaces.  Assume the VBUS is present if
	 * VBUS monitoring is not available.
	 */
	udc_start ();

	if (! udc_include_vbus_monitoring ()) {
80003a86:	fe b0 f3 c3 	rcall	8000220c <udd_include_vbus_monitoring>
		stdio_usb_vbus_event (true);
80003a8a:	c0 31       	brne	80003a90 <stdio_usb_init+0x24>
80003a8c:	30 1c       	mov	r12,1
80003a8e:	ce 5f       	rcall	80003a58 <stdio_usb_vbus_event>
80003a90:	d8 02       	popm	pc
80003a92:	d7 03       	nop
80003a94:	00 00       	add	r0,r0
80003a96:	0c c0       	st.b	r6++,r0
80003a98:	00 00       	add	r0,r0
80003a9a:	0c bc       	st.h	r6++,r12
80003a9c:	00 00       	add	r0,r0
80003a9e:	0c b8       	st.h	r6++,r8

80003aa0 <stdio_usb_getchar>:
80003aa0:	d4 21       	pushm	r4-r7,lr
80003aa2:	48 88       	lddpc	r8,80003ac0 <stdio_usb_getchar+0x20>
80003aa4:	16 97       	mov	r7,r11
80003aa6:	11 89       	ld.ub	r9,r8[0x0]
80003aa8:	30 08       	mov	r8,0
80003aaa:	f0 09 18 00 	cp.b	r9,r8
80003aae:	c0 41       	brne	80003ab6 <stdio_usb_getchar+0x16>
{
	/* A negative return value should be used to indicate that data
	 * was not read, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
		*data = 0;  // -1
80003ab0:	30 08       	mov	r8,0
80003ab2:	97 08       	st.w	r11[0x0],r8
		return;
80003ab4:	d8 22       	popm	r4-r7,pc
	}
	
	*data = udi_cdc_getc ();
80003ab6:	fe b0 fb 9d 	rcall	800031f0 <udi_cdc_getc>
80003aba:	8f 0c       	st.w	r7[0x0],r12
80003abc:	d8 22       	popm	r4-r7,pc
80003abe:	d7 03       	nop
80003ac0:	00 00       	add	r0,r0
80003ac2:	0c 58       	eor	r8,r6

80003ac4 <stdio_usb_putchar>:
80003ac4:	d4 01       	pushm	lr
80003ac6:	48 78       	lddpc	r8,80003ae0 <stdio_usb_putchar+0x1c>
int stdio_usb_putchar (volatile void * usart, int data)
{
	/* A negative return value should be used to indicate that data
	 * was not written, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
80003ac8:	11 89       	ld.ub	r9,r8[0x0]
80003aca:	30 08       	mov	r8,0
80003acc:	f0 09 18 00 	cp.b	r9,r8
80003ad0:	c0 60       	breq	80003adc <stdio_usb_putchar+0x18>
		return 0;  // -1
	}

	return udi_cdc_putc (data) ? 0 : -1;
80003ad2:	16 9c       	mov	r12,r11
80003ad4:	fe b0 fb 20 	rcall	80003114 <udi_cdc_putc>
80003ad8:	c0 21       	brne	80003adc <stdio_usb_putchar+0x18>
80003ada:	dc 0a       	popm	pc,r12=-1
80003adc:	d8 0a       	popm	pc,r12=0
80003ade:	d7 03       	nop
80003ae0:	00 00       	add	r0,r0
80003ae2:	0c 58       	eor	r8,r6

80003ae4 <_write>:

#elif (defined(__GNUC__) && !defined(XMEGA))

	int __attribute__((weak))
	_write (int file, char * ptr, int len)
	{
80003ae4:	d4 31       	pushm	r0-r7,lr
80003ae6:	16 97       	mov	r7,r11
80003ae8:	14 93       	mov	r3,r10
		int nChars = 0;
	
		if ( (file != 1)
80003aea:	20 1c       	sub	r12,1
80003aec:	58 2c       	cp.w	r12,2
80003aee:	e0 8b 00 10 	brhi	80003b0e <_write+0x2a>
80003af2:	30 06       	mov	r6,0
			&& (file != 2) && (file!=3))
		return -1;
	
		for (; len != 0; --len) {
			if (ptr_put(stdio_base, *ptr++) < 0) {
80003af4:	48 84       	lddpc	r4,80003b14 <_write+0x30>
80003af6:	48 95       	lddpc	r5,80003b18 <_write+0x34>
80003af8:	c0 88       	rjmp	80003b08 <_write+0x24>
80003afa:	ee 06 07 0b 	ld.ub	r11,r7[r6]
80003afe:	68 0c       	ld.w	r12,r4[0x0]
				return -1;
			}
			++nChars;
80003b00:	2f f6       	sub	r6,-1
		if ( (file != 1)
			&& (file != 2) && (file!=3))
		return -1;
	
		for (; len != 0; --len) {
			if (ptr_put(stdio_base, *ptr++) < 0) {
80003b02:	6a 08       	ld.w	r8,r5[0x0]
80003b04:	5d 18       	icall	r8
80003b06:	c0 45       	brlt	80003b0e <_write+0x2a>
	
		if ( (file != 1)
			&& (file != 2) && (file!=3))
		return -1;
	
		for (; len != 0; --len) {
80003b08:	0c 33       	cp.w	r3,r6
80003b0a:	cf 81       	brne	80003afa <_write+0x16>
80003b0c:	c0 28       	rjmp	80003b10 <_write+0x2c>
80003b0e:	3f f6       	mov	r6,-1
				return -1;
			}
			++nChars;
		}
		return nChars;
	}
80003b10:	0c 9c       	mov	r12,r6
80003b12:	d8 32       	popm	r0-r7,pc
80003b14:	00 00       	add	r0,r0
80003b16:	0c c0       	st.b	r6++,r0
80003b18:	00 00       	add	r0,r0
80003b1a:	0c bc       	st.h	r6++,r12

80003b1c <busy_delay_init>:

//_____ D E C L A R A T I O N S ____________________________________________

void busy_delay_init(unsigned long fcpu_hz)
{
    s_fcpu_hz = fcpu_hz;
80003b1c:	48 28       	lddpc	r8,80003b24 <busy_delay_init+0x8>
80003b1e:	91 0c       	st.w	r8[0x0],r12
}
80003b20:	5e fc       	retal	r12
80003b22:	d7 03       	nop
80003b24:	00 00       	add	r0,r0
80003b26:	0c 5c       	eor	r12,r6

80003b28 <busy_delay_us>:
{
    cpu_delay_ms(delay, s_fcpu_hz);
}

void busy_delay_us(unsigned long delay)
{
80003b28:	d4 01       	pushm	lr
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80003b2a:	49 18       	lddpc	r8,80003b6c <busy_delay_us+0x44>
80003b2c:	70 0b       	ld.w	r11,r8[0x0]
80003b2e:	ee 78 42 3f 	mov	r8,999999
80003b32:	f8 0b 06 4a 	mulu.d	r10,r12,r11
80003b36:	30 09       	mov	r9,0
80003b38:	10 0a       	add	r10,r8
80003b3a:	f6 09 00 4b 	adc	r11,r11,r9
80003b3e:	ee 78 42 40 	mov	r8,1000000
80003b42:	30 09       	mov	r9,0
80003b44:	c7 6c       	rcall	80003c30 <__avr32_udiv64>
80003b46:	e1 b8 00 42 	mfsr	r8,0x108
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003b4a:	f0 0a 00 0a 	add	r10,r8,r10
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003b4e:	e1 b9 00 42 	mfsr	r9,0x108
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003b52:	14 38       	cp.w	r8,r10
  // Test if the timeout as already occured.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003b54:	e0 88 00 05 	brls	80003b5e <busy_delay_us+0x36>
80003b58:	10 39       	cp.w	r9,r8
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003b5a:	cf a2       	brcc	80003b4e <busy_delay_us+0x26>
80003b5c:	c0 38       	rjmp	80003b62 <busy_delay_us+0x3a>
80003b5e:	10 39       	cp.w	r9,r8
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003b60:	c0 43       	brcs	80003b68 <busy_delay_us+0x40>
80003b62:	14 39       	cp.w	r9,r10
80003b64:	fe 98 ff f5 	brls	80003b4e <busy_delay_us+0x26>
80003b68:	d8 02       	popm	pc
80003b6a:	d7 03       	nop
80003b6c:	00 00       	add	r0,r0
80003b6e:	0c 5c       	eor	r12,r6

80003b70 <init>:
//void test_A_init();
//void test_ABC();
//void test_ABC_init();
void test_ABC_interrupts_init();

void init(){
80003b70:	d4 21       	pushm	r4-r7,lr
    sysclk_init();
80003b72:	fe b0 f9 d9 	rcall	80002f24 <sysclk_init>
    board_init();
80003b76:	fe b0 f2 47 	rcall	80002004 <board_init>
    busy_delay_init(BOARD_OSC0_HZ);
80003b7a:	e0 6c 1b 00 	mov	r12,6912
80003b7e:	ea 1c 00 b7 	orh	r12,0xb7
80003b82:	cc df       	rcall	80003b1c <busy_delay_init>
80003b84:	d3 03       	ssrf	0x10
    
    cpu_irq_disable();
80003b86:	fe b0 f3 05 	rcall	80002190 <INTC_init_interrupts>
    INTC_init_interrupts();
80003b8a:	30 1a       	mov	r10,1
	INTC_register_interrupt(&interrupt_J3, AVR32_GPIO_IRQ_3, AVR32_INTC_INT1);  // Task C
80003b8c:	34 3b       	mov	r11,67
80003b8e:	fe cc ff ca 	sub	r12,pc,-54
80003b92:	fe b0 f2 e9 	rcall	80002164 <INTC_register_interrupt>
    cpu_irq_enable();
80003b96:	d5 03       	csrf	0x10
    
    stdio_usb_init(&CONFIG_USART_IF);
80003b98:	fe 7c 1c 00 	mov	r12,-58368
80003b9c:	c6 8f       	rcall	80003a6c <stdio_usb_init>
80003b9e:	48 77       	lddpc	r7,80003bb8 <init+0x48>

    #if defined(__GNUC__) && defined(__AVR32__)
        setbuf(stdout, NULL);
80003ba0:	6e 08       	ld.w	r8,r7[0x0]
80003ba2:	30 0b       	mov	r11,0
80003ba4:	70 1c       	ld.w	r12,r8[0x4]
80003ba6:	e0 a0 02 33 	rcall	8000400c <setbuf>
80003baa:	6e 08       	ld.w	r8,r7[0x0]
        setbuf(stdin,  NULL);
80003bac:	30 0b       	mov	r11,0
80003bae:	70 0c       	ld.w	r12,r8[0x0]
80003bb0:	e0 a0 02 2e 	rcall	8000400c <setbuf>
80003bb4:	d8 22       	popm	r4-r7,pc
    #endif
}
80003bb6:	d7 03       	nop
80003bb8:	00 00       	add	r0,r0
80003bba:	01 c4       	ld.ub	r4,r0[0x4]

80003bbc <main>:
80003bbc:	d4 01       	pushm	lr
80003bbe:	cd 9f       	rcall	80003b70 <init>
80003bc0:	c0 08       	rjmp	80003bc0 <main+0x4>
80003bc2:	d7 03       	nop

80003bc4 <interrupt_J3>:
80003bc4:	d4 01       	pushm	lr
80003bc6:	49 ac       	lddpc	r12,80003c2c <interrupt_J3+0x68>
80003bc8:	e0 a0 02 0a 	rcall	80003fdc <printf>
80003bcc:	31 fc       	mov	r12,31
80003bce:	fe b0 f2 b4 	rcall	80002136 <gpio_get_pin_interrupt_flag>
80003bd2:	c0 c0       	breq	80003bea <interrupt_J3+0x26>
80003bd4:	31 ec       	mov	r12,30
80003bd6:	fe b0 f2 a6 	rcall	80002122 <gpio_set_pin_low>
80003bda:	30 5c       	mov	r12,5
// Task C
__attribute__((__interrupt__)) static void interrupt_J3(void){
	printf("inside handler\n\r");
	if (gpio_get_pin_interrupt_flag(TEST_A)) {
		gpio_set_pin_low(RESPONSE_A);
		busy_delay_us(5);
80003bdc:	ca 6f       	rcall	80003b28 <busy_delay_us>
80003bde:	31 ec       	mov	r12,30
		gpio_set_pin_high(RESPONSE_A);
80003be0:	fe b0 f2 97 	rcall	8000210e <gpio_set_pin_high>
80003be4:	31 fc       	mov	r12,31
		gpio_clear_pin_interrupt_flag(TEST_A);	
80003be6:	fe b0 f2 b4 	rcall	8000214e <gpio_clear_pin_interrupt_flag>
80003bea:	31 dc       	mov	r12,29
	}
	if (gpio_get_pin_interrupt_flag(TEST_B)){
80003bec:	fe b0 f2 a5 	rcall	80002136 <gpio_get_pin_interrupt_flag>
80003bf0:	c0 c0       	breq	80003c08 <interrupt_J3+0x44>
80003bf2:	31 cc       	mov	r12,28
		gpio_set_pin_low(RESPONSE_B);
80003bf4:	fe b0 f2 97 	rcall	80002122 <gpio_set_pin_low>
80003bf8:	30 5c       	mov	r12,5
		busy_delay_us(5);
80003bfa:	c9 7f       	rcall	80003b28 <busy_delay_us>
80003bfc:	31 cc       	mov	r12,28
80003bfe:	fe b0 f2 88 	rcall	8000210e <gpio_set_pin_high>
		gpio_set_pin_high(RESPONSE_B);
80003c02:	31 dc       	mov	r12,29
80003c04:	fe b0 f2 a5 	rcall	8000214e <gpio_clear_pin_interrupt_flag>
		gpio_clear_pin_interrupt_flag(TEST_B);
80003c08:	31 bc       	mov	r12,27
80003c0a:	fe b0 f2 96 	rcall	80002136 <gpio_get_pin_interrupt_flag>
	}
	if (gpio_get_pin_interrupt_flag(TEST_C)){
80003c0e:	c0 c0       	breq	80003c26 <interrupt_J3+0x62>
80003c10:	32 0c       	mov	r12,32
80003c12:	fe b0 f2 88 	rcall	80002122 <gpio_set_pin_low>
		gpio_set_pin_low(RESPONSE_C);
80003c16:	30 5c       	mov	r12,5
80003c18:	c8 8f       	rcall	80003b28 <busy_delay_us>
		busy_delay_us(5);
80003c1a:	32 0c       	mov	r12,32
80003c1c:	fe b0 f2 79 	rcall	8000210e <gpio_set_pin_high>
		gpio_set_pin_high(RESPONSE_C);
80003c20:	31 bc       	mov	r12,27
80003c22:	fe b0 f2 96 	rcall	8000214e <gpio_clear_pin_interrupt_flag>
		gpio_clear_pin_interrupt_flag(TEST_C);
80003c26:	d4 02       	popm	lr
80003c28:	d6 03       	rete
80003c2a:	d7 03       	nop
	}
}
80003c2c:	80 00       	ld.sh	r0,r0[0x0]
80003c2e:	9a f0       	ld.uh	r0,sp[0xe]

80003c30 <__avr32_udiv64>:
80003c30:	d4 31       	pushm	r0-r7,lr
80003c32:	1a 97       	mov	r7,sp
80003c34:	20 3d       	sub	sp,12
80003c36:	10 9c       	mov	r12,r8
80003c38:	12 9e       	mov	lr,r9
80003c3a:	14 93       	mov	r3,r10
80003c3c:	58 09       	cp.w	r9,0
80003c3e:	e0 81 00 bd 	brne	80003db8 <__avr32_udiv64+0x188>
80003c42:	16 38       	cp.w	r8,r11
80003c44:	e0 88 00 40 	brls	80003cc4 <__avr32_udiv64+0x94>
80003c48:	f0 08 12 00 	clz	r8,r8
80003c4c:	c0 d0       	breq	80003c66 <__avr32_udiv64+0x36>
80003c4e:	f6 08 09 4b 	lsl	r11,r11,r8
80003c52:	f0 09 11 20 	rsub	r9,r8,32
80003c56:	f8 08 09 4c 	lsl	r12,r12,r8
80003c5a:	f4 09 0a 49 	lsr	r9,r10,r9
80003c5e:	f4 08 09 43 	lsl	r3,r10,r8
80003c62:	f3 eb 10 0b 	or	r11,r9,r11
80003c66:	f8 0e 16 10 	lsr	lr,r12,0x10
80003c6a:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80003c6e:	f6 0e 0d 00 	divu	r0,r11,lr
80003c72:	e6 0b 16 10 	lsr	r11,r3,0x10
80003c76:	00 99       	mov	r9,r0
80003c78:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003c7c:	e0 0a 02 48 	mul	r8,r0,r10
80003c80:	10 3b       	cp.w	r11,r8
80003c82:	c0 a2       	brcc	80003c96 <__avr32_udiv64+0x66>
80003c84:	20 19       	sub	r9,1
80003c86:	18 0b       	add	r11,r12
80003c88:	18 3b       	cp.w	r11,r12
80003c8a:	c0 63       	brcs	80003c96 <__avr32_udiv64+0x66>
80003c8c:	10 3b       	cp.w	r11,r8
80003c8e:	f7 b9 03 01 	sublo	r9,1
80003c92:	f7 dc e3 0b 	addcs	r11,r11,r12
80003c96:	f6 08 01 01 	sub	r1,r11,r8
80003c9a:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80003c9e:	e2 0e 0d 00 	divu	r0,r1,lr
80003ca2:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80003ca6:	00 98       	mov	r8,r0
80003ca8:	e0 0a 02 4a 	mul	r10,r0,r10
80003cac:	14 33       	cp.w	r3,r10
80003cae:	c0 82       	brcc	80003cbe <__avr32_udiv64+0x8e>
80003cb0:	20 18       	sub	r8,1
80003cb2:	18 03       	add	r3,r12
80003cb4:	18 33       	cp.w	r3,r12
80003cb6:	c0 43       	brcs	80003cbe <__avr32_udiv64+0x8e>
80003cb8:	14 33       	cp.w	r3,r10
80003cba:	f7 b8 03 01 	sublo	r8,1
80003cbe:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80003cc2:	cd f8       	rjmp	80003e80 <__avr32_udiv64+0x250>
80003cc4:	58 08       	cp.w	r8,0
80003cc6:	c0 51       	brne	80003cd0 <__avr32_udiv64+0xa0>
80003cc8:	30 19       	mov	r9,1
80003cca:	f2 08 0d 08 	divu	r8,r9,r8
80003cce:	10 9c       	mov	r12,r8
80003cd0:	f8 06 12 00 	clz	r6,r12
80003cd4:	c0 41       	brne	80003cdc <__avr32_udiv64+0xac>
80003cd6:	18 1b       	sub	r11,r12
80003cd8:	30 19       	mov	r9,1
80003cda:	c4 08       	rjmp	80003d5a <__avr32_udiv64+0x12a>
80003cdc:	ec 01 11 20 	rsub	r1,r6,32
80003ce0:	f4 01 0a 49 	lsr	r9,r10,r1
80003ce4:	f8 06 09 4c 	lsl	r12,r12,r6
80003ce8:	f6 06 09 48 	lsl	r8,r11,r6
80003cec:	f6 01 0a 41 	lsr	r1,r11,r1
80003cf0:	f3 e8 10 08 	or	r8,r9,r8
80003cf4:	f8 03 16 10 	lsr	r3,r12,0x10
80003cf8:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80003cfc:	e2 03 0d 00 	divu	r0,r1,r3
80003d00:	f0 0b 16 10 	lsr	r11,r8,0x10
80003d04:	00 9e       	mov	lr,r0
80003d06:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003d0a:	e0 05 02 49 	mul	r9,r0,r5
80003d0e:	12 3b       	cp.w	r11,r9
80003d10:	c0 a2       	brcc	80003d24 <__avr32_udiv64+0xf4>
80003d12:	20 1e       	sub	lr,1
80003d14:	18 0b       	add	r11,r12
80003d16:	18 3b       	cp.w	r11,r12
80003d18:	c0 63       	brcs	80003d24 <__avr32_udiv64+0xf4>
80003d1a:	12 3b       	cp.w	r11,r9
80003d1c:	f7 be 03 01 	sublo	lr,1
80003d20:	f7 dc e3 0b 	addcs	r11,r11,r12
80003d24:	12 1b       	sub	r11,r9
80003d26:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80003d2a:	f6 03 0d 02 	divu	r2,r11,r3
80003d2e:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80003d32:	04 99       	mov	r9,r2
80003d34:	e4 05 02 4b 	mul	r11,r2,r5
80003d38:	16 38       	cp.w	r8,r11
80003d3a:	c0 a2       	brcc	80003d4e <__avr32_udiv64+0x11e>
80003d3c:	20 19       	sub	r9,1
80003d3e:	18 08       	add	r8,r12
80003d40:	18 38       	cp.w	r8,r12
80003d42:	c0 63       	brcs	80003d4e <__avr32_udiv64+0x11e>
80003d44:	16 38       	cp.w	r8,r11
80003d46:	f7 b9 03 01 	sublo	r9,1
80003d4a:	f1 dc e3 08 	addcs	r8,r8,r12
80003d4e:	f4 06 09 43 	lsl	r3,r10,r6
80003d52:	f0 0b 01 0b 	sub	r11,r8,r11
80003d56:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80003d5a:	f8 06 16 10 	lsr	r6,r12,0x10
80003d5e:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80003d62:	f6 06 0d 00 	divu	r0,r11,r6
80003d66:	e6 0b 16 10 	lsr	r11,r3,0x10
80003d6a:	00 9a       	mov	r10,r0
80003d6c:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003d70:	e0 0e 02 48 	mul	r8,r0,lr
80003d74:	10 3b       	cp.w	r11,r8
80003d76:	c0 a2       	brcc	80003d8a <__avr32_udiv64+0x15a>
80003d78:	20 1a       	sub	r10,1
80003d7a:	18 0b       	add	r11,r12
80003d7c:	18 3b       	cp.w	r11,r12
80003d7e:	c0 63       	brcs	80003d8a <__avr32_udiv64+0x15a>
80003d80:	10 3b       	cp.w	r11,r8
80003d82:	f7 ba 03 01 	sublo	r10,1
80003d86:	f7 dc e3 0b 	addcs	r11,r11,r12
80003d8a:	f6 08 01 01 	sub	r1,r11,r8
80003d8e:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80003d92:	e2 06 0d 00 	divu	r0,r1,r6
80003d96:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80003d9a:	00 98       	mov	r8,r0
80003d9c:	e0 0e 02 4b 	mul	r11,r0,lr
80003da0:	16 33       	cp.w	r3,r11
80003da2:	c0 82       	brcc	80003db2 <__avr32_udiv64+0x182>
80003da4:	20 18       	sub	r8,1
80003da6:	18 03       	add	r3,r12
80003da8:	18 33       	cp.w	r3,r12
80003daa:	c0 43       	brcs	80003db2 <__avr32_udiv64+0x182>
80003dac:	16 33       	cp.w	r3,r11
80003dae:	f7 b8 03 01 	sublo	r8,1
80003db2:	f1 ea 11 08 	or	r8,r8,r10<<0x10
80003db6:	c6 98       	rjmp	80003e88 <__avr32_udiv64+0x258>
80003db8:	16 39       	cp.w	r9,r11
80003dba:	e0 8b 00 65 	brhi	80003e84 <__avr32_udiv64+0x254>
80003dbe:	f2 09 12 00 	clz	r9,r9
80003dc2:	c0 b1       	brne	80003dd8 <__avr32_udiv64+0x1a8>
80003dc4:	10 3a       	cp.w	r10,r8
80003dc6:	5f 2a       	srhs	r10
80003dc8:	1c 3b       	cp.w	r11,lr
80003dca:	5f b8       	srhi	r8
80003dcc:	10 4a       	or	r10,r8
80003dce:	f2 0a 18 00 	cp.b	r10,r9
80003dd2:	c5 90       	breq	80003e84 <__avr32_udiv64+0x254>
80003dd4:	30 18       	mov	r8,1
80003dd6:	c5 98       	rjmp	80003e88 <__avr32_udiv64+0x258>
80003dd8:	f0 09 09 46 	lsl	r6,r8,r9
80003ddc:	f2 03 11 20 	rsub	r3,r9,32
80003de0:	fc 09 09 4e 	lsl	lr,lr,r9
80003de4:	f0 03 0a 48 	lsr	r8,r8,r3
80003de8:	f6 09 09 4c 	lsl	r12,r11,r9
80003dec:	f4 03 0a 42 	lsr	r2,r10,r3
80003df0:	ef 46 ff f4 	st.w	r7[-12],r6
80003df4:	f6 03 0a 43 	lsr	r3,r11,r3
80003df8:	18 42       	or	r2,r12
80003dfa:	f1 ee 10 0c 	or	r12,r8,lr
80003dfe:	f8 01 16 10 	lsr	r1,r12,0x10
80003e02:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80003e06:	e6 01 0d 04 	divu	r4,r3,r1
80003e0a:	e4 03 16 10 	lsr	r3,r2,0x10
80003e0e:	08 9e       	mov	lr,r4
80003e10:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80003e14:	e8 06 02 48 	mul	r8,r4,r6
80003e18:	10 33       	cp.w	r3,r8
80003e1a:	c0 a2       	brcc	80003e2e <__avr32_udiv64+0x1fe>
80003e1c:	20 1e       	sub	lr,1
80003e1e:	18 03       	add	r3,r12
80003e20:	18 33       	cp.w	r3,r12
80003e22:	c0 63       	brcs	80003e2e <__avr32_udiv64+0x1fe>
80003e24:	10 33       	cp.w	r3,r8
80003e26:	f7 be 03 01 	sublo	lr,1
80003e2a:	e7 dc e3 03 	addcs	r3,r3,r12
80003e2e:	10 13       	sub	r3,r8
80003e30:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80003e34:	e6 01 0d 00 	divu	r0,r3,r1
80003e38:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003e3c:	00 98       	mov	r8,r0
80003e3e:	e0 06 02 46 	mul	r6,r0,r6
80003e42:	0c 3b       	cp.w	r11,r6
80003e44:	c0 a2       	brcc	80003e58 <__avr32_udiv64+0x228>
80003e46:	20 18       	sub	r8,1
80003e48:	18 0b       	add	r11,r12
80003e4a:	18 3b       	cp.w	r11,r12
80003e4c:	c0 63       	brcs	80003e58 <__avr32_udiv64+0x228>
80003e4e:	0c 3b       	cp.w	r11,r6
80003e50:	f7 dc e3 0b 	addcs	r11,r11,r12
80003e54:	f7 b8 03 01 	sublo	r8,1
80003e58:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80003e5c:	ee f4 ff f4 	ld.w	r4,r7[-12]
80003e60:	0c 1b       	sub	r11,r6
80003e62:	f0 04 06 42 	mulu.d	r2,r8,r4
80003e66:	06 95       	mov	r5,r3
80003e68:	16 35       	cp.w	r5,r11
80003e6a:	e0 8b 00 0a 	brhi	80003e7e <__avr32_udiv64+0x24e>
80003e6e:	5f 0b       	sreq	r11
80003e70:	f4 09 09 49 	lsl	r9,r10,r9
80003e74:	12 32       	cp.w	r2,r9
80003e76:	5f b9       	srhi	r9
80003e78:	f7 e9 00 09 	and	r9,r11,r9
80003e7c:	c0 60       	breq	80003e88 <__avr32_udiv64+0x258>
80003e7e:	20 18       	sub	r8,1
80003e80:	30 09       	mov	r9,0
80003e82:	c0 38       	rjmp	80003e88 <__avr32_udiv64+0x258>
80003e84:	30 09       	mov	r9,0
80003e86:	12 98       	mov	r8,r9
80003e88:	10 9a       	mov	r10,r8
80003e8a:	12 93       	mov	r3,r9
80003e8c:	10 92       	mov	r2,r8
80003e8e:	12 9b       	mov	r11,r9
80003e90:	2f dd       	sub	sp,-12
80003e92:	d8 32       	popm	r0-r7,pc

80003e94 <memcpy>:
80003e94:	58 8a       	cp.w	r10,8
80003e96:	c2 f5       	brlt	80003ef4 <memcpy+0x60>
80003e98:	f9 eb 10 09 	or	r9,r12,r11
80003e9c:	e2 19 00 03 	andl	r9,0x3,COH
80003ea0:	e0 81 00 97 	brne	80003fce <memcpy+0x13a>
80003ea4:	e0 4a 00 20 	cp.w	r10,32
80003ea8:	c3 b4       	brge	80003f1e <memcpy+0x8a>
80003eaa:	f4 08 14 02 	asr	r8,r10,0x2
80003eae:	f0 09 11 08 	rsub	r9,r8,8
80003eb2:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80003eb6:	76 69       	ld.w	r9,r11[0x18]
80003eb8:	99 69       	st.w	r12[0x18],r9
80003eba:	76 59       	ld.w	r9,r11[0x14]
80003ebc:	99 59       	st.w	r12[0x14],r9
80003ebe:	76 49       	ld.w	r9,r11[0x10]
80003ec0:	99 49       	st.w	r12[0x10],r9
80003ec2:	76 39       	ld.w	r9,r11[0xc]
80003ec4:	99 39       	st.w	r12[0xc],r9
80003ec6:	76 29       	ld.w	r9,r11[0x8]
80003ec8:	99 29       	st.w	r12[0x8],r9
80003eca:	76 19       	ld.w	r9,r11[0x4]
80003ecc:	99 19       	st.w	r12[0x4],r9
80003ece:	76 09       	ld.w	r9,r11[0x0]
80003ed0:	99 09       	st.w	r12[0x0],r9
80003ed2:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80003ed6:	f8 08 00 28 	add	r8,r12,r8<<0x2
80003eda:	e0 1a 00 03 	andl	r10,0x3
80003ede:	f4 0a 11 04 	rsub	r10,r10,4
80003ee2:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80003ee6:	17 a9       	ld.ub	r9,r11[0x2]
80003ee8:	b0 a9       	st.b	r8[0x2],r9
80003eea:	17 99       	ld.ub	r9,r11[0x1]
80003eec:	b0 99       	st.b	r8[0x1],r9
80003eee:	17 89       	ld.ub	r9,r11[0x0]
80003ef0:	b0 89       	st.b	r8[0x0],r9
80003ef2:	5e fc       	retal	r12
80003ef4:	f4 0a 11 09 	rsub	r10,r10,9
80003ef8:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80003efc:	17 f9       	ld.ub	r9,r11[0x7]
80003efe:	b8 f9       	st.b	r12[0x7],r9
80003f00:	17 e9       	ld.ub	r9,r11[0x6]
80003f02:	b8 e9       	st.b	r12[0x6],r9
80003f04:	17 d9       	ld.ub	r9,r11[0x5]
80003f06:	b8 d9       	st.b	r12[0x5],r9
80003f08:	17 c9       	ld.ub	r9,r11[0x4]
80003f0a:	b8 c9       	st.b	r12[0x4],r9
80003f0c:	17 b9       	ld.ub	r9,r11[0x3]
80003f0e:	b8 b9       	st.b	r12[0x3],r9
80003f10:	17 a9       	ld.ub	r9,r11[0x2]
80003f12:	b8 a9       	st.b	r12[0x2],r9
80003f14:	17 99       	ld.ub	r9,r11[0x1]
80003f16:	b8 99       	st.b	r12[0x1],r9
80003f18:	17 89       	ld.ub	r9,r11[0x0]
80003f1a:	b8 89       	st.b	r12[0x0],r9
80003f1c:	5e fc       	retal	r12
80003f1e:	eb cd 40 c0 	pushm	r6-r7,lr
80003f22:	18 99       	mov	r9,r12
80003f24:	22 0a       	sub	r10,32
80003f26:	b7 07       	ld.d	r6,r11++
80003f28:	b3 26       	st.d	r9++,r6
80003f2a:	b7 07       	ld.d	r6,r11++
80003f2c:	b3 26       	st.d	r9++,r6
80003f2e:	b7 07       	ld.d	r6,r11++
80003f30:	b3 26       	st.d	r9++,r6
80003f32:	b7 07       	ld.d	r6,r11++
80003f34:	b3 26       	st.d	r9++,r6
80003f36:	22 0a       	sub	r10,32
80003f38:	cf 74       	brge	80003f26 <memcpy+0x92>
80003f3a:	2f 0a       	sub	r10,-16
80003f3c:	c0 65       	brlt	80003f48 <memcpy+0xb4>
80003f3e:	b7 07       	ld.d	r6,r11++
80003f40:	b3 26       	st.d	r9++,r6
80003f42:	b7 07       	ld.d	r6,r11++
80003f44:	b3 26       	st.d	r9++,r6
80003f46:	21 0a       	sub	r10,16
80003f48:	5c 3a       	neg	r10
80003f4a:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80003f4e:	d7 03       	nop
80003f50:	d7 03       	nop
80003f52:	f7 36 00 0e 	ld.ub	r6,r11[14]
80003f56:	f3 66 00 0e 	st.b	r9[14],r6
80003f5a:	f7 36 00 0d 	ld.ub	r6,r11[13]
80003f5e:	f3 66 00 0d 	st.b	r9[13],r6
80003f62:	f7 36 00 0c 	ld.ub	r6,r11[12]
80003f66:	f3 66 00 0c 	st.b	r9[12],r6
80003f6a:	f7 36 00 0b 	ld.ub	r6,r11[11]
80003f6e:	f3 66 00 0b 	st.b	r9[11],r6
80003f72:	f7 36 00 0a 	ld.ub	r6,r11[10]
80003f76:	f3 66 00 0a 	st.b	r9[10],r6
80003f7a:	f7 36 00 09 	ld.ub	r6,r11[9]
80003f7e:	f3 66 00 09 	st.b	r9[9],r6
80003f82:	f7 36 00 08 	ld.ub	r6,r11[8]
80003f86:	f3 66 00 08 	st.b	r9[8],r6
80003f8a:	f7 36 00 07 	ld.ub	r6,r11[7]
80003f8e:	f3 66 00 07 	st.b	r9[7],r6
80003f92:	f7 36 00 06 	ld.ub	r6,r11[6]
80003f96:	f3 66 00 06 	st.b	r9[6],r6
80003f9a:	f7 36 00 05 	ld.ub	r6,r11[5]
80003f9e:	f3 66 00 05 	st.b	r9[5],r6
80003fa2:	f7 36 00 04 	ld.ub	r6,r11[4]
80003fa6:	f3 66 00 04 	st.b	r9[4],r6
80003faa:	f7 36 00 03 	ld.ub	r6,r11[3]
80003fae:	f3 66 00 03 	st.b	r9[3],r6
80003fb2:	f7 36 00 02 	ld.ub	r6,r11[2]
80003fb6:	f3 66 00 02 	st.b	r9[2],r6
80003fba:	f7 36 00 01 	ld.ub	r6,r11[1]
80003fbe:	f3 66 00 01 	st.b	r9[1],r6
80003fc2:	f7 36 00 00 	ld.ub	r6,r11[0]
80003fc6:	f3 66 00 00 	st.b	r9[0],r6
80003fca:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003fce:	20 1a       	sub	r10,1
80003fd0:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80003fd4:	f8 0a 0b 09 	st.b	r12[r10],r9
80003fd8:	cf b1       	brne	80003fce <memcpy+0x13a>
80003fda:	5e fc       	retal	r12

80003fdc <printf>:
80003fdc:	d4 21       	pushm	r4-r7,lr
80003fde:	48 b8       	lddpc	r8,80004008 <printf+0x2c>
80003fe0:	fa c4 ff ec 	sub	r4,sp,-20
80003fe4:	18 96       	mov	r6,r12
80003fe6:	70 07       	ld.w	r7,r8[0x0]
80003fe8:	58 07       	cp.w	r7,0
80003fea:	c0 70       	breq	80003ff8 <printf+0x1c>
80003fec:	6e 68       	ld.w	r8,r7[0x18]
80003fee:	58 08       	cp.w	r8,0
80003ff0:	c0 41       	brne	80003ff8 <printf+0x1c>
80003ff2:	0e 9c       	mov	r12,r7
80003ff4:	e0 a0 19 9a 	rcall	80007328 <__sinit>
80003ff8:	08 99       	mov	r9,r4
80003ffa:	0c 9a       	mov	r10,r6
80003ffc:	0e 9c       	mov	r12,r7
80003ffe:	6e 1b       	ld.w	r11,r7[0x4]
80004000:	e0 a0 02 34 	rcall	80004468 <_vfprintf_r>
80004004:	d8 22       	popm	r4-r7,pc
80004006:	d7 03       	nop
80004008:	00 00       	add	r0,r0
8000400a:	01 c4       	ld.ub	r4,r0[0x4]

8000400c <setbuf>:
8000400c:	d4 01       	pushm	lr
8000400e:	e0 69 04 00 	mov	r9,1024
80004012:	58 0b       	cp.w	r11,0
80004014:	f9 ba 00 02 	moveq	r10,2
80004018:	f9 ba 01 00 	movne	r10,0
8000401c:	c0 2c       	rcall	80004020 <setvbuf>
8000401e:	d8 02       	popm	pc

80004020 <setvbuf>:
80004020:	d4 31       	pushm	r0-r7,lr
80004022:	4b f8       	lddpc	r8,8000411c <setvbuf+0xfc>
80004024:	18 97       	mov	r7,r12
80004026:	16 96       	mov	r6,r11
80004028:	14 95       	mov	r5,r10
8000402a:	12 94       	mov	r4,r9
8000402c:	70 0c       	ld.w	r12,r8[0x0]
8000402e:	58 0c       	cp.w	r12,0
80004030:	c0 60       	breq	8000403c <setvbuf+0x1c>
80004032:	78 68       	ld.w	r8,r12[0x18]
80004034:	58 08       	cp.w	r8,0
80004036:	c0 31       	brne	8000403c <setvbuf+0x1c>
80004038:	e0 a0 19 78 	rcall	80007328 <__sinit>
8000403c:	4b 98       	lddpc	r8,80004120 <setvbuf+0x100>
8000403e:	10 37       	cp.w	r7,r8
80004040:	c0 51       	brne	8000404a <setvbuf+0x2a>
80004042:	4b 78       	lddpc	r8,8000411c <setvbuf+0xfc>
80004044:	70 08       	ld.w	r8,r8[0x0]
80004046:	70 07       	ld.w	r7,r8[0x0]
80004048:	c0 e8       	rjmp	80004064 <setvbuf+0x44>
8000404a:	4b 78       	lddpc	r8,80004124 <setvbuf+0x104>
8000404c:	10 37       	cp.w	r7,r8
8000404e:	c0 51       	brne	80004058 <setvbuf+0x38>
80004050:	4b 38       	lddpc	r8,8000411c <setvbuf+0xfc>
80004052:	70 08       	ld.w	r8,r8[0x0]
80004054:	70 17       	ld.w	r7,r8[0x4]
80004056:	c0 78       	rjmp	80004064 <setvbuf+0x44>
80004058:	4b 48       	lddpc	r8,80004128 <setvbuf+0x108>
8000405a:	10 37       	cp.w	r7,r8
8000405c:	c0 41       	brne	80004064 <setvbuf+0x44>
8000405e:	4b 08       	lddpc	r8,8000411c <setvbuf+0xfc>
80004060:	70 08       	ld.w	r8,r8[0x0]
80004062:	70 27       	ld.w	r7,r8[0x8]
80004064:	58 25       	cp.w	r5,2
80004066:	5f b8       	srhi	r8
80004068:	f1 e4 13 f8 	or	r8,r8,r4>>0x1f
8000406c:	c0 20       	breq	80004070 <setvbuf+0x50>
8000406e:	dc 3a       	popm	r0-r7,pc,r12=-1
80004070:	4a b3       	lddpc	r3,8000411c <setvbuf+0xfc>
80004072:	0e 9b       	mov	r11,r7
80004074:	66 0c       	ld.w	r12,r3[0x0]
80004076:	e0 a0 18 7d 	rcall	80007170 <_fflush_r>
8000407a:	30 08       	mov	r8,0
8000407c:	8f 68       	st.w	r7[0x18],r8
8000407e:	8f 18       	st.w	r7[0x4],r8
80004080:	8e 68       	ld.sh	r8,r7[0xc]
80004082:	ed b8 00 07 	bld	r8,0x7
80004086:	c0 51       	brne	80004090 <setvbuf+0x70>
80004088:	66 0c       	ld.w	r12,r3[0x0]
8000408a:	6e 4b       	ld.w	r11,r7[0x10]
8000408c:	e0 a0 19 ea 	rcall	80007460 <_free_r>
80004090:	8e 68       	ld.sh	r8,r7[0xc]
80004092:	e0 18 ff 7c 	andl	r8,0xff7c
80004096:	ae 68       	st.h	r7[0xc],r8
80004098:	58 25       	cp.w	r5,2
8000409a:	c0 31       	brne	800040a0 <setvbuf+0x80>
8000409c:	30 0c       	mov	r12,0
8000409e:	c1 38       	rjmp	800040c4 <setvbuf+0xa4>
800040a0:	58 06       	cp.w	r6,0
800040a2:	c2 11       	brne	800040e4 <setvbuf+0xc4>
800040a4:	e0 63 04 00 	mov	r3,1024
800040a8:	58 04       	cp.w	r4,0
800040aa:	e6 04 17 00 	moveq	r4,r3
800040ae:	08 9c       	mov	r12,r4
800040b0:	e0 a0 1c 78 	rcall	800079a0 <malloc>
800040b4:	18 96       	mov	r6,r12
800040b6:	c1 41       	brne	800040de <setvbuf+0xbe>
800040b8:	06 9c       	mov	r12,r3
800040ba:	e0 a0 1c 73 	rcall	800079a0 <malloc>
800040be:	18 96       	mov	r6,r12
800040c0:	c0 e1       	brne	800040dc <setvbuf+0xbc>
800040c2:	3f fc       	mov	r12,-1
800040c4:	8e 68       	ld.sh	r8,r7[0xc]
800040c6:	a1 b8       	sbr	r8,0x1
800040c8:	ae 68       	st.h	r7[0xc],r8
800040ca:	ee c8 ff b9 	sub	r8,r7,-71
800040ce:	8f 48       	st.w	r7[0x10],r8
800040d0:	8f 08       	st.w	r7[0x0],r8
800040d2:	30 08       	mov	r8,0
800040d4:	8f 28       	st.w	r7[0x8],r8
800040d6:	30 18       	mov	r8,1
800040d8:	8f 58       	st.w	r7[0x14],r8
800040da:	d8 32       	popm	r0-r7,pc
800040dc:	06 94       	mov	r4,r3
800040de:	8e 68       	ld.sh	r8,r7[0xc]
800040e0:	a7 b8       	sbr	r8,0x7
800040e2:	ae 68       	st.h	r7[0xc],r8
800040e4:	58 15       	cp.w	r5,1
800040e6:	c0 71       	brne	800040f4 <setvbuf+0xd4>
800040e8:	8e 68       	ld.sh	r8,r7[0xc]
800040ea:	a1 a8       	sbr	r8,0x0
800040ec:	ae 68       	st.h	r7[0xc],r8
800040ee:	e8 08 11 00 	rsub	r8,r4,0
800040f2:	8f 68       	st.w	r7[0x18],r8
800040f4:	48 a8       	lddpc	r8,8000411c <setvbuf+0xfc>
800040f6:	fe c9 ce 72 	sub	r9,pc,-12686
800040fa:	70 08       	ld.w	r8,r8[0x0]
800040fc:	8f 46       	st.w	r7[0x10],r6
800040fe:	91 a9       	st.w	r8[0x28],r9
80004100:	8f 06       	st.w	r7[0x0],r6
80004102:	8f 54       	st.w	r7[0x14],r4
80004104:	8e 68       	ld.sh	r8,r7[0xc]
80004106:	10 9c       	mov	r12,r8
80004108:	e2 1c 00 08 	andl	r12,0x8,COH
8000410c:	c0 70       	breq	8000411a <setvbuf+0xfa>
8000410e:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80004112:	30 0c       	mov	r12,0
80004114:	f9 b4 01 00 	movne	r4,0
80004118:	8f 24       	st.w	r7[0x8],r4
8000411a:	d8 32       	popm	r0-r7,pc
8000411c:	00 00       	add	r0,r0
8000411e:	01 c4       	ld.ub	r4,r0[0x4]
80004120:	80 00       	ld.sh	r0,r0[0x0]
80004122:	9e f0       	ld.uh	r0,pc[0xe]
80004124:	80 00       	ld.sh	r0,r0[0x0]
80004126:	9f 10       	st.w	pc[0x4],r0
80004128:	80 00       	ld.sh	r0,r0[0x0]
8000412a:	9f 30       	st.w	pc[0xc],r0

8000412c <get_arg>:
8000412c:	d4 31       	pushm	r0-r7,lr
8000412e:	20 8d       	sub	sp,32
80004130:	fa c4 ff bc 	sub	r4,sp,-68
80004134:	50 4b       	stdsp	sp[0x10],r11
80004136:	68 2e       	ld.w	lr,r4[0x8]
80004138:	50 58       	stdsp	sp[0x14],r8
8000413a:	12 96       	mov	r6,r9
8000413c:	7c 0b       	ld.w	r11,lr[0x0]
8000413e:	70 05       	ld.w	r5,r8[0x0]
80004140:	50 6e       	stdsp	sp[0x18],lr
80004142:	58 0b       	cp.w	r11,0
80004144:	f4 0b 17 00 	moveq	r11,r10
80004148:	68 03       	ld.w	r3,r4[0x0]
8000414a:	68 11       	ld.w	r1,r4[0x4]
8000414c:	40 49       	lddsp	r9,sp[0x10]
8000414e:	30 08       	mov	r8,0
80004150:	c2 e9       	rjmp	800043ac <get_arg+0x280>
80004152:	2f fb       	sub	r11,-1
80004154:	32 5c       	mov	r12,37
80004156:	17 8a       	ld.ub	r10,r11[0x0]
80004158:	f8 0a 18 00 	cp.b	r10,r12
8000415c:	5f 1e       	srne	lr
8000415e:	f0 0a 18 00 	cp.b	r10,r8
80004162:	5f 1c       	srne	r12
80004164:	fd ec 00 0c 	and	r12,lr,r12
80004168:	f0 0c 18 00 	cp.b	r12,r8
8000416c:	cf 31       	brne	80004152 <get_arg+0x26>
8000416e:	58 0a       	cp.w	r10,0
80004170:	e0 80 01 2b 	breq	800043c6 <get_arg+0x29a>
80004174:	30 0c       	mov	r12,0
80004176:	3f fa       	mov	r10,-1
80004178:	18 90       	mov	r0,r12
8000417a:	50 3a       	stdsp	sp[0xc],r10
8000417c:	18 94       	mov	r4,r12
8000417e:	18 92       	mov	r2,r12
80004180:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
80004184:	16 97       	mov	r7,r11
80004186:	50 7c       	stdsp	sp[0x1c],r12
80004188:	4c ec       	lddpc	r12,800042c0 <get_arg+0x194>
8000418a:	0f 3a       	ld.ub	r10,r7++
8000418c:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
80004190:	40 7c       	lddsp	r12,sp[0x1c]
80004192:	1c 0c       	add	r12,lr
80004194:	4c ce       	lddpc	lr,800042c4 <get_arg+0x198>
80004196:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
8000419a:	20 1e       	sub	lr,1
8000419c:	50 0e       	stdsp	sp[0x0],lr
8000419e:	4c be       	lddpc	lr,800042c8 <get_arg+0x19c>
800041a0:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
800041a4:	50 7c       	stdsp	sp[0x1c],r12
800041a6:	40 0c       	lddsp	r12,sp[0x0]
800041a8:	58 7c       	cp.w	r12,7
800041aa:	e0 8b 00 fa 	brhi	8000439e <get_arg+0x272>
800041ae:	4c 8e       	lddpc	lr,800042cc <get_arg+0x1a0>
800041b0:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
800041b4:	36 8b       	mov	r11,104
800041b6:	f6 0a 18 00 	cp.b	r10,r11
800041ba:	e0 80 00 f2 	breq	8000439e <get_arg+0x272>
800041be:	37 1b       	mov	r11,113
800041c0:	f6 0a 18 00 	cp.b	r10,r11
800041c4:	c0 70       	breq	800041d2 <get_arg+0xa6>
800041c6:	34 cb       	mov	r11,76
800041c8:	f6 0a 18 00 	cp.b	r10,r11
800041cc:	c0 51       	brne	800041d6 <get_arg+0xaa>
800041ce:	a3 b4       	sbr	r4,0x3
800041d0:	ce 78       	rjmp	8000439e <get_arg+0x272>
800041d2:	a5 b4       	sbr	r4,0x5
800041d4:	ce 58       	rjmp	8000439e <get_arg+0x272>
800041d6:	08 9a       	mov	r10,r4
800041d8:	0e 9b       	mov	r11,r7
800041da:	a5 aa       	sbr	r10,0x4
800041dc:	17 3c       	ld.ub	r12,r11++
800041de:	a5 b4       	sbr	r4,0x5
800041e0:	36 ce       	mov	lr,108
800041e2:	fc 0c 18 00 	cp.b	r12,lr
800041e6:	e0 80 00 dd 	breq	800043a0 <get_arg+0x274>
800041ea:	14 94       	mov	r4,r10
800041ec:	cd 98       	rjmp	8000439e <get_arg+0x272>
800041ee:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
800041f2:	36 7c       	mov	r12,103
800041f4:	f8 0a 18 00 	cp.b	r10,r12
800041f8:	e0 8b 00 27 	brhi	80004246 <get_arg+0x11a>
800041fc:	36 5b       	mov	r11,101
800041fe:	f6 0a 18 00 	cp.b	r10,r11
80004202:	c4 82       	brcc	80004292 <get_arg+0x166>
80004204:	34 fb       	mov	r11,79
80004206:	f6 0a 18 00 	cp.b	r10,r11
8000420a:	c4 80       	breq	8000429a <get_arg+0x16e>
8000420c:	e0 8b 00 0c 	brhi	80004224 <get_arg+0xf8>
80004210:	34 5b       	mov	r11,69
80004212:	f6 0a 18 00 	cp.b	r10,r11
80004216:	c3 e0       	breq	80004292 <get_arg+0x166>
80004218:	34 7b       	mov	r11,71
8000421a:	f6 0a 18 00 	cp.b	r10,r11
8000421e:	c3 a0       	breq	80004292 <get_arg+0x166>
80004220:	34 4b       	mov	r11,68
80004222:	c0 88       	rjmp	80004232 <get_arg+0x106>
80004224:	35 8b       	mov	r11,88
80004226:	f6 0a 18 00 	cp.b	r10,r11
8000422a:	c2 c0       	breq	80004282 <get_arg+0x156>
8000422c:	e0 8b 00 07 	brhi	8000423a <get_arg+0x10e>
80004230:	35 5b       	mov	r11,85
80004232:	f6 0a 18 00 	cp.b	r10,r11
80004236:	c3 51       	brne	800042a0 <get_arg+0x174>
80004238:	c3 18       	rjmp	8000429a <get_arg+0x16e>
8000423a:	36 3b       	mov	r11,99
8000423c:	f6 0a 18 00 	cp.b	r10,r11
80004240:	c2 f0       	breq	8000429e <get_arg+0x172>
80004242:	36 4b       	mov	r11,100
80004244:	c0 e8       	rjmp	80004260 <get_arg+0x134>
80004246:	37 0b       	mov	r11,112
80004248:	f6 0a 18 00 	cp.b	r10,r11
8000424c:	c2 50       	breq	80004296 <get_arg+0x16a>
8000424e:	e0 8b 00 0d 	brhi	80004268 <get_arg+0x13c>
80004252:	36 eb       	mov	r11,110
80004254:	f6 0a 18 00 	cp.b	r10,r11
80004258:	c1 f0       	breq	80004296 <get_arg+0x16a>
8000425a:	e0 8b 00 14 	brhi	80004282 <get_arg+0x156>
8000425e:	36 9b       	mov	r11,105
80004260:	f6 0a 18 00 	cp.b	r10,r11
80004264:	c1 e1       	brne	800042a0 <get_arg+0x174>
80004266:	c0 e8       	rjmp	80004282 <get_arg+0x156>
80004268:	37 5b       	mov	r11,117
8000426a:	f6 0a 18 00 	cp.b	r10,r11
8000426e:	c0 a0       	breq	80004282 <get_arg+0x156>
80004270:	37 8b       	mov	r11,120
80004272:	f6 0a 18 00 	cp.b	r10,r11
80004276:	c0 60       	breq	80004282 <get_arg+0x156>
80004278:	37 3b       	mov	r11,115
8000427a:	f6 0a 18 00 	cp.b	r10,r11
8000427e:	c1 11       	brne	800042a0 <get_arg+0x174>
80004280:	c0 b8       	rjmp	80004296 <get_arg+0x16a>
80004282:	ed b4 00 04 	bld	r4,0x4
80004286:	c0 a0       	breq	8000429a <get_arg+0x16e>
80004288:	ed b4 00 05 	bld	r4,0x5
8000428c:	c0 91       	brne	8000429e <get_arg+0x172>
8000428e:	30 20       	mov	r0,2
80004290:	c0 88       	rjmp	800042a0 <get_arg+0x174>
80004292:	30 40       	mov	r0,4
80004294:	c0 68       	rjmp	800042a0 <get_arg+0x174>
80004296:	30 30       	mov	r0,3
80004298:	c0 48       	rjmp	800042a0 <get_arg+0x174>
8000429a:	30 10       	mov	r0,1
8000429c:	c0 28       	rjmp	800042a0 <get_arg+0x174>
8000429e:	30 00       	mov	r0,0
800042a0:	40 3b       	lddsp	r11,sp[0xc]
800042a2:	5b fb       	cp.w	r11,-1
800042a4:	c0 40       	breq	800042ac <get_arg+0x180>
800042a6:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
800042aa:	c7 a8       	rjmp	8000439e <get_arg+0x272>
800042ac:	58 60       	cp.w	r0,6
800042ae:	e0 8b 00 78 	brhi	8000439e <get_arg+0x272>
800042b2:	6c 0a       	ld.w	r10,r6[0x0]
800042b4:	ea cc ff ff 	sub	r12,r5,-1
800042b8:	48 6e       	lddpc	lr,800042d0 <get_arg+0x1a4>
800042ba:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
800042be:	d7 03       	nop
800042c0:	80 00       	ld.sh	r0,r0[0x0]
800042c2:	9d e0       	st.w	lr[0x38],r0
800042c4:	80 00       	ld.sh	r0,r0[0x0]
800042c6:	9d 18       	st.w	lr[0x4],r8
800042c8:	80 00       	ld.sh	r0,r0[0x0]
800042ca:	9c ac       	ld.uh	r12,lr[0x4]
800042cc:	80 00       	ld.sh	r0,r0[0x0]
800042ce:	9b 0c       	st.w	sp[0x0],r12
800042d0:	80 00       	ld.sh	r0,r0[0x0]
800042d2:	9b 2c       	st.w	sp[0x8],r12
800042d4:	f4 cb ff f8 	sub	r11,r10,-8
800042d8:	8d 0b       	st.w	r6[0x0],r11
800042da:	f4 ea 00 00 	ld.d	r10,r10[0]
800042de:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
800042e2:	c0 f8       	rjmp	80004300 <get_arg+0x1d4>
800042e4:	f4 cb ff fc 	sub	r11,r10,-4
800042e8:	8d 0b       	st.w	r6[0x0],r11
800042ea:	74 0a       	ld.w	r10,r10[0x0]
800042ec:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
800042f0:	c0 88       	rjmp	80004300 <get_arg+0x1d4>
800042f2:	f4 cb ff f8 	sub	r11,r10,-8
800042f6:	8d 0b       	st.w	r6[0x0],r11
800042f8:	f4 ea 00 00 	ld.d	r10,r10[0]
800042fc:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80004300:	0e 9b       	mov	r11,r7
80004302:	18 95       	mov	r5,r12
80004304:	c4 e8       	rjmp	800043a0 <get_arg+0x274>
80004306:	62 0a       	ld.w	r10,r1[0x0]
80004308:	5b fa       	cp.w	r10,-1
8000430a:	c0 b1       	brne	80004320 <get_arg+0x1f4>
8000430c:	50 19       	stdsp	sp[0x4],r9
8000430e:	50 28       	stdsp	sp[0x8],r8
80004310:	e0 6a 00 80 	mov	r10,128
80004314:	30 0b       	mov	r11,0
80004316:	02 9c       	mov	r12,r1
80004318:	e0 a0 1d 8c 	rcall	80007e30 <memset>
8000431c:	40 28       	lddsp	r8,sp[0x8]
8000431e:	40 19       	lddsp	r9,sp[0x4]
80004320:	e4 cc 00 01 	sub	r12,r2,1
80004324:	0e 9b       	mov	r11,r7
80004326:	50 3c       	stdsp	sp[0xc],r12
80004328:	f2 0c 0c 49 	max	r9,r9,r12
8000432c:	c3 a8       	rjmp	800043a0 <get_arg+0x274>
8000432e:	62 0a       	ld.w	r10,r1[0x0]
80004330:	5b fa       	cp.w	r10,-1
80004332:	c0 b1       	brne	80004348 <get_arg+0x21c>
80004334:	50 19       	stdsp	sp[0x4],r9
80004336:	50 28       	stdsp	sp[0x8],r8
80004338:	e0 6a 00 80 	mov	r10,128
8000433c:	30 0b       	mov	r11,0
8000433e:	02 9c       	mov	r12,r1
80004340:	e0 a0 1d 78 	rcall	80007e30 <memset>
80004344:	40 28       	lddsp	r8,sp[0x8]
80004346:	40 19       	lddsp	r9,sp[0x4]
80004348:	20 12       	sub	r2,1
8000434a:	30 0a       	mov	r10,0
8000434c:	0e 9b       	mov	r11,r7
8000434e:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
80004352:	f2 02 0c 49 	max	r9,r9,r2
80004356:	c2 58       	rjmp	800043a0 <get_arg+0x274>
80004358:	16 97       	mov	r7,r11
8000435a:	6c 0a       	ld.w	r10,r6[0x0]
8000435c:	f4 cb ff fc 	sub	r11,r10,-4
80004360:	8d 0b       	st.w	r6[0x0],r11
80004362:	74 0a       	ld.w	r10,r10[0x0]
80004364:	0e 9b       	mov	r11,r7
80004366:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
8000436a:	2f f5       	sub	r5,-1
8000436c:	c1 a8       	rjmp	800043a0 <get_arg+0x274>
8000436e:	f4 c2 00 30 	sub	r2,r10,48
80004372:	c0 68       	rjmp	8000437e <get_arg+0x252>
80004374:	e4 02 00 22 	add	r2,r2,r2<<0x2
80004378:	2f f7       	sub	r7,-1
8000437a:	f4 02 00 12 	add	r2,r10,r2<<0x1
8000437e:	0f 8a       	ld.ub	r10,r7[0x0]
80004380:	58 0a       	cp.w	r10,0
80004382:	c0 e0       	breq	8000439e <get_arg+0x272>
80004384:	23 0a       	sub	r10,48
80004386:	58 9a       	cp.w	r10,9
80004388:	fe 98 ff f6 	brls	80004374 <get_arg+0x248>
8000438c:	c0 98       	rjmp	8000439e <get_arg+0x272>
8000438e:	2f f7       	sub	r7,-1
80004390:	0f 8a       	ld.ub	r10,r7[0x0]
80004392:	58 0a       	cp.w	r10,0
80004394:	c0 50       	breq	8000439e <get_arg+0x272>
80004396:	23 0a       	sub	r10,48
80004398:	58 9a       	cp.w	r10,9
8000439a:	fe 98 ff fa 	brls	8000438e <get_arg+0x262>
8000439e:	0e 9b       	mov	r11,r7
800043a0:	40 7c       	lddsp	r12,sp[0x1c]
800043a2:	30 ba       	mov	r10,11
800043a4:	f4 0c 18 00 	cp.b	r12,r10
800043a8:	fe 91 fe ec 	brne	80004180 <get_arg+0x54>
800043ac:	40 42       	lddsp	r2,sp[0x10]
800043ae:	17 8c       	ld.ub	r12,r11[0x0]
800043b0:	0a 32       	cp.w	r2,r5
800043b2:	5f 4a       	srge	r10
800043b4:	f0 0c 18 00 	cp.b	r12,r8
800043b8:	5f 1c       	srne	r12
800043ba:	f9 ea 00 0a 	and	r10,r12,r10
800043be:	f0 0a 18 00 	cp.b	r10,r8
800043c2:	fe 91 fe c9 	brne	80004154 <get_arg+0x28>
800043c6:	30 08       	mov	r8,0
800043c8:	40 4e       	lddsp	lr,sp[0x10]
800043ca:	17 8a       	ld.ub	r10,r11[0x0]
800043cc:	e2 05 00 21 	add	r1,r1,r5<<0x2
800043d0:	f0 0a 18 00 	cp.b	r10,r8
800043d4:	fc 09 17 10 	movne	r9,lr
800043d8:	e6 05 00 38 	add	r8,r3,r5<<0x3
800043dc:	06 9e       	mov	lr,r3
800043de:	c2 a8       	rjmp	80004432 <get_arg+0x306>
800043e0:	62 0a       	ld.w	r10,r1[0x0]
800043e2:	58 3a       	cp.w	r10,3
800043e4:	c1 e0       	breq	80004420 <get_arg+0x2f4>
800043e6:	e0 89 00 07 	brgt	800043f4 <get_arg+0x2c8>
800043ea:	58 1a       	cp.w	r10,1
800043ec:	c1 a0       	breq	80004420 <get_arg+0x2f4>
800043ee:	58 2a       	cp.w	r10,2
800043f0:	c1 81       	brne	80004420 <get_arg+0x2f4>
800043f2:	c0 58       	rjmp	800043fc <get_arg+0x2d0>
800043f4:	58 5a       	cp.w	r10,5
800043f6:	c0 c0       	breq	8000440e <get_arg+0x2e2>
800043f8:	c0 b5       	brlt	8000440e <get_arg+0x2e2>
800043fa:	c1 38       	rjmp	80004420 <get_arg+0x2f4>
800043fc:	6c 0a       	ld.w	r10,r6[0x0]
800043fe:	f4 cc ff f8 	sub	r12,r10,-8
80004402:	8d 0c       	st.w	r6[0x0],r12
80004404:	f4 e2 00 00 	ld.d	r2,r10[0]
80004408:	f0 e3 00 00 	st.d	r8[0],r2
8000440c:	c1 08       	rjmp	8000442c <get_arg+0x300>
8000440e:	6c 0a       	ld.w	r10,r6[0x0]
80004410:	f4 cc ff f8 	sub	r12,r10,-8
80004414:	8d 0c       	st.w	r6[0x0],r12
80004416:	f4 e2 00 00 	ld.d	r2,r10[0]
8000441a:	f0 e3 00 00 	st.d	r8[0],r2
8000441e:	c0 78       	rjmp	8000442c <get_arg+0x300>
80004420:	6c 0a       	ld.w	r10,r6[0x0]
80004422:	f4 cc ff fc 	sub	r12,r10,-4
80004426:	8d 0c       	st.w	r6[0x0],r12
80004428:	74 0a       	ld.w	r10,r10[0x0]
8000442a:	91 0a       	st.w	r8[0x0],r10
8000442c:	2f f5       	sub	r5,-1
8000442e:	2f 88       	sub	r8,-8
80004430:	2f c1       	sub	r1,-4
80004432:	12 35       	cp.w	r5,r9
80004434:	fe 9a ff d6 	brle	800043e0 <get_arg+0x2b4>
80004438:	1c 93       	mov	r3,lr
8000443a:	40 52       	lddsp	r2,sp[0x14]
8000443c:	40 6e       	lddsp	lr,sp[0x18]
8000443e:	85 05       	st.w	r2[0x0],r5
80004440:	9d 0b       	st.w	lr[0x0],r11
80004442:	40 4b       	lddsp	r11,sp[0x10]
80004444:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
80004448:	2f 8d       	sub	sp,-32
8000444a:	d8 32       	popm	r0-r7,pc

8000444c <__sprint_r>:
8000444c:	d4 21       	pushm	r4-r7,lr
8000444e:	14 97       	mov	r7,r10
80004450:	74 28       	ld.w	r8,r10[0x8]
80004452:	58 08       	cp.w	r8,0
80004454:	c0 41       	brne	8000445c <__sprint_r+0x10>
80004456:	95 18       	st.w	r10[0x4],r8
80004458:	10 9c       	mov	r12,r8
8000445a:	d8 22       	popm	r4-r7,pc
8000445c:	e0 a0 18 ca 	rcall	800075f0 <__sfvwrite_r>
80004460:	30 08       	mov	r8,0
80004462:	8f 18       	st.w	r7[0x4],r8
80004464:	8f 28       	st.w	r7[0x8],r8
80004466:	d8 22       	popm	r4-r7,pc

80004468 <_vfprintf_r>:
80004468:	d4 31       	pushm	r0-r7,lr
8000446a:	fa cd 06 bc 	sub	sp,sp,1724
8000446e:	51 09       	stdsp	sp[0x40],r9
80004470:	16 91       	mov	r1,r11
80004472:	14 97       	mov	r7,r10
80004474:	18 95       	mov	r5,r12
80004476:	e0 a0 1a 33 	rcall	800078dc <_localeconv_r>
8000447a:	78 0c       	ld.w	r12,r12[0x0]
8000447c:	50 cc       	stdsp	sp[0x30],r12
8000447e:	58 05       	cp.w	r5,0
80004480:	c0 70       	breq	8000448e <_vfprintf_r+0x26>
80004482:	6a 68       	ld.w	r8,r5[0x18]
80004484:	58 08       	cp.w	r8,0
80004486:	c0 41       	brne	8000448e <_vfprintf_r+0x26>
80004488:	0a 9c       	mov	r12,r5
8000448a:	e0 a0 17 4f 	rcall	80007328 <__sinit>
8000448e:	4d 08       	lddpc	r8,800045cc <_vfprintf_r+0x164>
80004490:	10 31       	cp.w	r1,r8
80004492:	c0 31       	brne	80004498 <_vfprintf_r+0x30>
80004494:	6a 01       	ld.w	r1,r5[0x0]
80004496:	c0 a8       	rjmp	800044aa <_vfprintf_r+0x42>
80004498:	4c e8       	lddpc	r8,800045d0 <_vfprintf_r+0x168>
8000449a:	10 31       	cp.w	r1,r8
8000449c:	c0 31       	brne	800044a2 <_vfprintf_r+0x3a>
8000449e:	6a 11       	ld.w	r1,r5[0x4]
800044a0:	c0 58       	rjmp	800044aa <_vfprintf_r+0x42>
800044a2:	4c d8       	lddpc	r8,800045d4 <_vfprintf_r+0x16c>
800044a4:	10 31       	cp.w	r1,r8
800044a6:	eb f1 00 02 	ld.weq	r1,r5[0x8]
800044aa:	82 68       	ld.sh	r8,r1[0xc]
800044ac:	ed b8 00 03 	bld	r8,0x3
800044b0:	c0 41       	brne	800044b8 <_vfprintf_r+0x50>
800044b2:	62 48       	ld.w	r8,r1[0x10]
800044b4:	58 08       	cp.w	r8,0
800044b6:	c0 71       	brne	800044c4 <_vfprintf_r+0x5c>
800044b8:	02 9b       	mov	r11,r1
800044ba:	0a 9c       	mov	r12,r5
800044bc:	e0 a0 0f 6c 	rcall	80006394 <__swsetup_r>
800044c0:	e0 81 0f 63 	brne	80006386 <_vfprintf_r+0x1f1e>
800044c4:	82 68       	ld.sh	r8,r1[0xc]
800044c6:	10 99       	mov	r9,r8
800044c8:	e2 19 00 1a 	andl	r9,0x1a,COH
800044cc:	58 a9       	cp.w	r9,10
800044ce:	c3 c1       	brne	80004546 <_vfprintf_r+0xde>
800044d0:	82 79       	ld.sh	r9,r1[0xe]
800044d2:	30 0a       	mov	r10,0
800044d4:	f4 09 19 00 	cp.h	r9,r10
800044d8:	c3 75       	brlt	80004546 <_vfprintf_r+0xde>
800044da:	a1 d8       	cbr	r8,0x1
800044dc:	fb 58 05 d0 	st.h	sp[1488],r8
800044e0:	62 88       	ld.w	r8,r1[0x20]
800044e2:	fb 48 05 e4 	st.w	sp[1508],r8
800044e6:	62 a8       	ld.w	r8,r1[0x28]
800044e8:	fb 48 05 ec 	st.w	sp[1516],r8
800044ec:	fa c8 ff bc 	sub	r8,sp,-68
800044f0:	fb 48 05 d4 	st.w	sp[1492],r8
800044f4:	fb 48 05 c4 	st.w	sp[1476],r8
800044f8:	e0 68 04 00 	mov	r8,1024
800044fc:	fb 48 05 d8 	st.w	sp[1496],r8
80004500:	fb 48 05 cc 	st.w	sp[1484],r8
80004504:	30 08       	mov	r8,0
80004506:	fb 59 05 d2 	st.h	sp[1490],r9
8000450a:	0e 9a       	mov	r10,r7
8000450c:	41 09       	lddsp	r9,sp[0x40]
8000450e:	fa c7 fa 3c 	sub	r7,sp,-1476
80004512:	fb 48 05 dc 	st.w	sp[1500],r8
80004516:	0a 9c       	mov	r12,r5
80004518:	0e 9b       	mov	r11,r7
8000451a:	ca 7f       	rcall	80004468 <_vfprintf_r>
8000451c:	50 bc       	stdsp	sp[0x2c],r12
8000451e:	c0 95       	brlt	80004530 <_vfprintf_r+0xc8>
80004520:	0e 9b       	mov	r11,r7
80004522:	0a 9c       	mov	r12,r5
80004524:	e0 a0 16 26 	rcall	80007170 <_fflush_r>
80004528:	40 be       	lddsp	lr,sp[0x2c]
8000452a:	f9 be 01 ff 	movne	lr,-1
8000452e:	50 be       	stdsp	sp[0x2c],lr
80004530:	fb 08 05 d0 	ld.sh	r8,sp[1488]
80004534:	ed b8 00 06 	bld	r8,0x6
80004538:	e0 81 0f 29 	brne	8000638a <_vfprintf_r+0x1f22>
8000453c:	82 68       	ld.sh	r8,r1[0xc]
8000453e:	a7 a8       	sbr	r8,0x6
80004540:	a2 68       	st.h	r1[0xc],r8
80004542:	e0 8f 0f 24 	bral	8000638a <_vfprintf_r+0x1f22>
80004546:	30 08       	mov	r8,0
80004548:	fb 48 06 b4 	st.w	sp[1716],r8
8000454c:	fb 48 06 90 	st.w	sp[1680],r8
80004550:	fb 48 06 8c 	st.w	sp[1676],r8
80004554:	fb 48 06 b0 	st.w	sp[1712],r8
80004558:	30 08       	mov	r8,0
8000455a:	30 09       	mov	r9,0
8000455c:	50 a7       	stdsp	sp[0x28],r7
8000455e:	50 78       	stdsp	sp[0x1c],r8
80004560:	fa c3 f9 e0 	sub	r3,sp,-1568
80004564:	3f f8       	mov	r8,-1
80004566:	50 59       	stdsp	sp[0x14],r9
80004568:	fb 43 06 88 	st.w	sp[1672],r3
8000456c:	fb 48 05 44 	st.w	sp[1348],r8
80004570:	12 9c       	mov	r12,r9
80004572:	50 69       	stdsp	sp[0x18],r9
80004574:	50 d9       	stdsp	sp[0x34],r9
80004576:	50 e9       	stdsp	sp[0x38],r9
80004578:	50 b9       	stdsp	sp[0x2c],r9
8000457a:	12 97       	mov	r7,r9
8000457c:	0a 94       	mov	r4,r5
8000457e:	40 a2       	lddsp	r2,sp[0x28]
80004580:	32 5a       	mov	r10,37
80004582:	30 08       	mov	r8,0
80004584:	c0 28       	rjmp	80004588 <_vfprintf_r+0x120>
80004586:	2f f2       	sub	r2,-1
80004588:	05 89       	ld.ub	r9,r2[0x0]
8000458a:	f0 09 18 00 	cp.b	r9,r8
8000458e:	5f 1b       	srne	r11
80004590:	f4 09 18 00 	cp.b	r9,r10
80004594:	5f 19       	srne	r9
80004596:	f3 eb 00 0b 	and	r11,r9,r11
8000459a:	f0 0b 18 00 	cp.b	r11,r8
8000459e:	cf 41       	brne	80004586 <_vfprintf_r+0x11e>
800045a0:	40 ab       	lddsp	r11,sp[0x28]
800045a2:	e4 0b 01 06 	sub	r6,r2,r11
800045a6:	c2 50       	breq	800045f0 <_vfprintf_r+0x188>
800045a8:	fa f8 06 90 	ld.w	r8,sp[1680]
800045ac:	0c 08       	add	r8,r6
800045ae:	87 0b       	st.w	r3[0x0],r11
800045b0:	fb 48 06 90 	st.w	sp[1680],r8
800045b4:	87 16       	st.w	r3[0x4],r6
800045b6:	fa f8 06 8c 	ld.w	r8,sp[1676]
800045ba:	2f f8       	sub	r8,-1
800045bc:	fb 48 06 8c 	st.w	sp[1676],r8
800045c0:	58 78       	cp.w	r8,7
800045c2:	e0 89 00 0b 	brgt	800045d8 <_vfprintf_r+0x170>
800045c6:	2f 83       	sub	r3,-8
800045c8:	c1 18       	rjmp	800045ea <_vfprintf_r+0x182>
800045ca:	d7 03       	nop
800045cc:	80 00       	ld.sh	r0,r0[0x0]
800045ce:	9e f0       	ld.uh	r0,pc[0xe]
800045d0:	80 00       	ld.sh	r0,r0[0x0]
800045d2:	9f 10       	st.w	pc[0x4],r0
800045d4:	80 00       	ld.sh	r0,r0[0x0]
800045d6:	9f 30       	st.w	pc[0xc],r0
800045d8:	fa ca f9 78 	sub	r10,sp,-1672
800045dc:	02 9b       	mov	r11,r1
800045de:	08 9c       	mov	r12,r4
800045e0:	c3 6f       	rcall	8000444c <__sprint_r>
800045e2:	e0 81 0e ce 	brne	8000637e <_vfprintf_r+0x1f16>
800045e6:	fa c3 f9 e0 	sub	r3,sp,-1568
800045ea:	40 ba       	lddsp	r10,sp[0x2c]
800045ec:	0c 0a       	add	r10,r6
800045ee:	50 ba       	stdsp	sp[0x2c],r10
800045f0:	05 89       	ld.ub	r9,r2[0x0]
800045f2:	30 08       	mov	r8,0
800045f4:	f0 09 18 00 	cp.b	r9,r8
800045f8:	e0 80 0e b2 	breq	8000635c <_vfprintf_r+0x1ef4>
800045fc:	30 09       	mov	r9,0
800045fe:	fb 68 06 bb 	st.b	sp[1723],r8
80004602:	0e 96       	mov	r6,r7
80004604:	e4 c8 ff ff 	sub	r8,r2,-1
80004608:	3f fe       	mov	lr,-1
8000460a:	50 93       	stdsp	sp[0x24],r3
8000460c:	50 41       	stdsp	sp[0x10],r1
8000460e:	0e 93       	mov	r3,r7
80004610:	04 91       	mov	r1,r2
80004612:	50 89       	stdsp	sp[0x20],r9
80004614:	50 a8       	stdsp	sp[0x28],r8
80004616:	50 2e       	stdsp	sp[0x8],lr
80004618:	50 39       	stdsp	sp[0xc],r9
8000461a:	12 95       	mov	r5,r9
8000461c:	12 90       	mov	r0,r9
8000461e:	10 97       	mov	r7,r8
80004620:	08 92       	mov	r2,r4
80004622:	c0 78       	rjmp	80004630 <_vfprintf_r+0x1c8>
80004624:	3f fc       	mov	r12,-1
80004626:	08 97       	mov	r7,r4
80004628:	50 2c       	stdsp	sp[0x8],r12
8000462a:	c0 38       	rjmp	80004630 <_vfprintf_r+0x1c8>
8000462c:	30 0b       	mov	r11,0
8000462e:	50 3b       	stdsp	sp[0xc],r11
80004630:	0f 38       	ld.ub	r8,r7++
80004632:	c0 28       	rjmp	80004636 <_vfprintf_r+0x1ce>
80004634:	12 90       	mov	r0,r9
80004636:	f0 c9 00 20 	sub	r9,r8,32
8000463a:	e0 49 00 58 	cp.w	r9,88
8000463e:	e0 8b 0a 36 	brhi	80005aaa <_vfprintf_r+0x1642>
80004642:	4d 9a       	lddpc	r10,800047a4 <_vfprintf_r+0x33c>
80004644:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
80004648:	50 a7       	stdsp	sp[0x28],r7
8000464a:	50 80       	stdsp	sp[0x20],r0
8000464c:	0c 97       	mov	r7,r6
8000464e:	04 94       	mov	r4,r2
80004650:	06 96       	mov	r6,r3
80004652:	02 92       	mov	r2,r1
80004654:	4d 59       	lddpc	r9,800047a8 <_vfprintf_r+0x340>
80004656:	40 93       	lddsp	r3,sp[0x24]
80004658:	10 90       	mov	r0,r8
8000465a:	40 41       	lddsp	r1,sp[0x10]
8000465c:	50 d9       	stdsp	sp[0x34],r9
8000465e:	e0 8f 08 95 	bral	80005788 <_vfprintf_r+0x1320>
80004662:	30 08       	mov	r8,0
80004664:	fb 39 06 bb 	ld.ub	r9,sp[1723]
80004668:	f0 09 18 00 	cp.b	r9,r8
8000466c:	ce 21       	brne	80004630 <_vfprintf_r+0x1c8>
8000466e:	32 08       	mov	r8,32
80004670:	c6 e8       	rjmp	8000474c <_vfprintf_r+0x2e4>
80004672:	a1 a5       	sbr	r5,0x0
80004674:	cd eb       	rjmp	80004630 <_vfprintf_r+0x1c8>
80004676:	0f 89       	ld.ub	r9,r7[0x0]
80004678:	f2 c8 00 30 	sub	r8,r9,48
8000467c:	58 98       	cp.w	r8,9
8000467e:	e0 8b 00 1d 	brhi	800046b8 <_vfprintf_r+0x250>
80004682:	ee c8 ff ff 	sub	r8,r7,-1
80004686:	30 0b       	mov	r11,0
80004688:	23 09       	sub	r9,48
8000468a:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000468e:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
80004692:	11 39       	ld.ub	r9,r8++
80004694:	f2 ca 00 30 	sub	r10,r9,48
80004698:	58 9a       	cp.w	r10,9
8000469a:	fe 98 ff f7 	brls	80004688 <_vfprintf_r+0x220>
8000469e:	e0 49 00 24 	cp.w	r9,36
800046a2:	cc 51       	brne	8000462c <_vfprintf_r+0x1c4>
800046a4:	e0 4b 00 20 	cp.w	r11,32
800046a8:	e0 89 0e 6a 	brgt	8000637c <_vfprintf_r+0x1f14>
800046ac:	20 1b       	sub	r11,1
800046ae:	fa f9 06 b4 	ld.w	r9,sp[1716]
800046b2:	12 3b       	cp.w	r11,r9
800046b4:	c0 95       	brlt	800046c6 <_vfprintf_r+0x25e>
800046b6:	c1 08       	rjmp	800046d6 <_vfprintf_r+0x26e>
800046b8:	fa f9 06 b4 	ld.w	r9,sp[1716]
800046bc:	ec ca ff ff 	sub	r10,r6,-1
800046c0:	12 36       	cp.w	r6,r9
800046c2:	c1 f5       	brlt	80004700 <_vfprintf_r+0x298>
800046c4:	c2 68       	rjmp	80004710 <_vfprintf_r+0x2a8>
800046c6:	fa ce f9 44 	sub	lr,sp,-1724
800046ca:	10 97       	mov	r7,r8
800046cc:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
800046d0:	f6 f0 fd 88 	ld.w	r0,r11[-632]
800046d4:	c3 58       	rjmp	8000473e <_vfprintf_r+0x2d6>
800046d6:	10 97       	mov	r7,r8
800046d8:	fa c8 f9 50 	sub	r8,sp,-1712
800046dc:	1a d8       	st.w	--sp,r8
800046de:	fa c8 fa b8 	sub	r8,sp,-1352
800046e2:	1a d8       	st.w	--sp,r8
800046e4:	fa c8 fb b4 	sub	r8,sp,-1100
800046e8:	02 9a       	mov	r10,r1
800046ea:	1a d8       	st.w	--sp,r8
800046ec:	04 9c       	mov	r12,r2
800046ee:	fa c8 f9 40 	sub	r8,sp,-1728
800046f2:	fa c9 ff b4 	sub	r9,sp,-76
800046f6:	fe b0 fd 1b 	rcall	8000412c <get_arg>
800046fa:	2f dd       	sub	sp,-12
800046fc:	78 00       	ld.w	r0,r12[0x0]
800046fe:	c2 08       	rjmp	8000473e <_vfprintf_r+0x2d6>
80004700:	fa cc f9 44 	sub	r12,sp,-1724
80004704:	14 96       	mov	r6,r10
80004706:	f8 03 00 38 	add	r8,r12,r3<<0x3
8000470a:	f0 f0 fd 88 	ld.w	r0,r8[-632]
8000470e:	c1 88       	rjmp	8000473e <_vfprintf_r+0x2d6>
80004710:	41 08       	lddsp	r8,sp[0x40]
80004712:	59 f9       	cp.w	r9,31
80004714:	e0 89 00 11 	brgt	80004736 <_vfprintf_r+0x2ce>
80004718:	f0 cb ff fc 	sub	r11,r8,-4
8000471c:	51 0b       	stdsp	sp[0x40],r11
8000471e:	70 00       	ld.w	r0,r8[0x0]
80004720:	fa cb f9 44 	sub	r11,sp,-1724
80004724:	f6 09 00 38 	add	r8,r11,r9<<0x3
80004728:	f1 40 fd 88 	st.w	r8[-632],r0
8000472c:	2f f9       	sub	r9,-1
8000472e:	14 96       	mov	r6,r10
80004730:	fb 49 06 b4 	st.w	sp[1716],r9
80004734:	c0 58       	rjmp	8000473e <_vfprintf_r+0x2d6>
80004736:	70 00       	ld.w	r0,r8[0x0]
80004738:	14 96       	mov	r6,r10
8000473a:	2f c8       	sub	r8,-4
8000473c:	51 08       	stdsp	sp[0x40],r8
8000473e:	58 00       	cp.w	r0,0
80004740:	fe 94 ff 78 	brge	80004630 <_vfprintf_r+0x1c8>
80004744:	5c 30       	neg	r0
80004746:	a3 a5       	sbr	r5,0x2
80004748:	c7 4b       	rjmp	80004630 <_vfprintf_r+0x1c8>
8000474a:	32 b8       	mov	r8,43
8000474c:	fb 68 06 bb 	st.b	sp[1723],r8
80004750:	c7 0b       	rjmp	80004630 <_vfprintf_r+0x1c8>
80004752:	0f 38       	ld.ub	r8,r7++
80004754:	e0 48 00 2a 	cp.w	r8,42
80004758:	c0 30       	breq	8000475e <_vfprintf_r+0x2f6>
8000475a:	30 09       	mov	r9,0
8000475c:	c7 d8       	rjmp	80004856 <_vfprintf_r+0x3ee>
8000475e:	0f 88       	ld.ub	r8,r7[0x0]
80004760:	f0 c9 00 30 	sub	r9,r8,48
80004764:	58 99       	cp.w	r9,9
80004766:	e0 8b 00 23 	brhi	800047ac <_vfprintf_r+0x344>
8000476a:	ee c4 ff ff 	sub	r4,r7,-1
8000476e:	30 0b       	mov	r11,0
80004770:	23 08       	sub	r8,48
80004772:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80004776:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
8000477a:	09 38       	ld.ub	r8,r4++
8000477c:	f0 c9 00 30 	sub	r9,r8,48
80004780:	58 99       	cp.w	r9,9
80004782:	fe 98 ff f7 	brls	80004770 <_vfprintf_r+0x308>
80004786:	e0 48 00 24 	cp.w	r8,36
8000478a:	fe 91 ff 51 	brne	8000462c <_vfprintf_r+0x1c4>
8000478e:	e0 4b 00 20 	cp.w	r11,32
80004792:	e0 89 0d f5 	brgt	8000637c <_vfprintf_r+0x1f14>
80004796:	20 1b       	sub	r11,1
80004798:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000479c:	10 3b       	cp.w	r11,r8
8000479e:	c0 e5       	brlt	800047ba <_vfprintf_r+0x352>
800047a0:	c1 58       	rjmp	800047ca <_vfprintf_r+0x362>
800047a2:	d7 03       	nop
800047a4:	80 00       	ld.sh	r0,r0[0x0]
800047a6:	9b 48       	st.w	sp[0x10],r8
800047a8:	80 00       	ld.sh	r0,r0[0x0]
800047aa:	9d 84       	st.w	lr[0x20],r4
800047ac:	fa fa 06 b4 	ld.w	r10,sp[1716]
800047b0:	ec c9 ff ff 	sub	r9,r6,-1
800047b4:	14 36       	cp.w	r6,r10
800047b6:	c1 f5       	brlt	800047f4 <_vfprintf_r+0x38c>
800047b8:	c2 88       	rjmp	80004808 <_vfprintf_r+0x3a0>
800047ba:	fa ca f9 44 	sub	r10,sp,-1724
800047be:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
800047c2:	f6 fb fd 88 	ld.w	r11,r11[-632]
800047c6:	50 2b       	stdsp	sp[0x8],r11
800047c8:	c3 c8       	rjmp	80004840 <_vfprintf_r+0x3d8>
800047ca:	fa c8 f9 50 	sub	r8,sp,-1712
800047ce:	1a d8       	st.w	--sp,r8
800047d0:	fa c8 fa b8 	sub	r8,sp,-1352
800047d4:	1a d8       	st.w	--sp,r8
800047d6:	fa c8 fb b4 	sub	r8,sp,-1100
800047da:	02 9a       	mov	r10,r1
800047dc:	1a d8       	st.w	--sp,r8
800047de:	04 9c       	mov	r12,r2
800047e0:	fa c8 f9 40 	sub	r8,sp,-1728
800047e4:	fa c9 ff b4 	sub	r9,sp,-76
800047e8:	fe b0 fc a2 	rcall	8000412c <get_arg>
800047ec:	2f dd       	sub	sp,-12
800047ee:	78 0c       	ld.w	r12,r12[0x0]
800047f0:	50 2c       	stdsp	sp[0x8],r12
800047f2:	c2 78       	rjmp	80004840 <_vfprintf_r+0x3d8>
800047f4:	12 96       	mov	r6,r9
800047f6:	0e 94       	mov	r4,r7
800047f8:	fa c9 f9 44 	sub	r9,sp,-1724
800047fc:	f2 03 00 38 	add	r8,r9,r3<<0x3
80004800:	f0 f8 fd 88 	ld.w	r8,r8[-632]
80004804:	50 28       	stdsp	sp[0x8],r8
80004806:	c1 d8       	rjmp	80004840 <_vfprintf_r+0x3d8>
80004808:	41 08       	lddsp	r8,sp[0x40]
8000480a:	59 fa       	cp.w	r10,31
8000480c:	e0 89 00 14 	brgt	80004834 <_vfprintf_r+0x3cc>
80004810:	f0 cb ff fc 	sub	r11,r8,-4
80004814:	70 08       	ld.w	r8,r8[0x0]
80004816:	51 0b       	stdsp	sp[0x40],r11
80004818:	50 28       	stdsp	sp[0x8],r8
8000481a:	fa c6 f9 44 	sub	r6,sp,-1724
8000481e:	40 2e       	lddsp	lr,sp[0x8]
80004820:	ec 0a 00 38 	add	r8,r6,r10<<0x3
80004824:	f1 4e fd 88 	st.w	r8[-632],lr
80004828:	2f fa       	sub	r10,-1
8000482a:	0e 94       	mov	r4,r7
8000482c:	fb 4a 06 b4 	st.w	sp[1716],r10
80004830:	12 96       	mov	r6,r9
80004832:	c0 78       	rjmp	80004840 <_vfprintf_r+0x3d8>
80004834:	70 0c       	ld.w	r12,r8[0x0]
80004836:	0e 94       	mov	r4,r7
80004838:	2f c8       	sub	r8,-4
8000483a:	50 2c       	stdsp	sp[0x8],r12
8000483c:	12 96       	mov	r6,r9
8000483e:	51 08       	stdsp	sp[0x40],r8
80004840:	40 2b       	lddsp	r11,sp[0x8]
80004842:	58 0b       	cp.w	r11,0
80004844:	fe 95 fe f0 	brlt	80004624 <_vfprintf_r+0x1bc>
80004848:	08 97       	mov	r7,r4
8000484a:	cf 3a       	rjmp	80004630 <_vfprintf_r+0x1c8>
8000484c:	f2 09 00 29 	add	r9,r9,r9<<0x2
80004850:	0f 38       	ld.ub	r8,r7++
80004852:	f4 09 00 19 	add	r9,r10,r9<<0x1
80004856:	f0 ca 00 30 	sub	r10,r8,48
8000485a:	58 9a       	cp.w	r10,9
8000485c:	fe 98 ff f8 	brls	8000484c <_vfprintf_r+0x3e4>
80004860:	3f fa       	mov	r10,-1
80004862:	f2 0a 0c 49 	max	r9,r9,r10
80004866:	50 29       	stdsp	sp[0x8],r9
80004868:	ce 7a       	rjmp	80004636 <_vfprintf_r+0x1ce>
8000486a:	a7 b5       	sbr	r5,0x7
8000486c:	ce 2a       	rjmp	80004630 <_vfprintf_r+0x1c8>
8000486e:	30 09       	mov	r9,0
80004870:	23 08       	sub	r8,48
80004872:	f2 09 00 29 	add	r9,r9,r9<<0x2
80004876:	f0 09 00 19 	add	r9,r8,r9<<0x1
8000487a:	0f 38       	ld.ub	r8,r7++
8000487c:	f0 ca 00 30 	sub	r10,r8,48
80004880:	58 9a       	cp.w	r10,9
80004882:	fe 98 ff f7 	brls	80004870 <_vfprintf_r+0x408>
80004886:	e0 48 00 24 	cp.w	r8,36
8000488a:	fe 91 fe d5 	brne	80004634 <_vfprintf_r+0x1cc>
8000488e:	e0 49 00 20 	cp.w	r9,32
80004892:	e0 89 0d 75 	brgt	8000637c <_vfprintf_r+0x1f14>
80004896:	f2 c3 00 01 	sub	r3,r9,1
8000489a:	30 19       	mov	r9,1
8000489c:	50 39       	stdsp	sp[0xc],r9
8000489e:	cc 9a       	rjmp	80004630 <_vfprintf_r+0x1c8>
800048a0:	a3 b5       	sbr	r5,0x3
800048a2:	cc 7a       	rjmp	80004630 <_vfprintf_r+0x1c8>
800048a4:	a7 a5       	sbr	r5,0x6
800048a6:	cc 5a       	rjmp	80004630 <_vfprintf_r+0x1c8>
800048a8:	0a 98       	mov	r8,r5
800048aa:	a5 b5       	sbr	r5,0x5
800048ac:	a5 a8       	sbr	r8,0x4
800048ae:	0f 89       	ld.ub	r9,r7[0x0]
800048b0:	36 ce       	mov	lr,108
800048b2:	fc 09 18 00 	cp.b	r9,lr
800048b6:	f7 b7 00 ff 	subeq	r7,-1
800048ba:	f0 05 17 10 	movne	r5,r8
800048be:	cb 9a       	rjmp	80004630 <_vfprintf_r+0x1c8>
800048c0:	a5 b5       	sbr	r5,0x5
800048c2:	cb 7a       	rjmp	80004630 <_vfprintf_r+0x1c8>
800048c4:	50 a7       	stdsp	sp[0x28],r7
800048c6:	50 80       	stdsp	sp[0x20],r0
800048c8:	0c 97       	mov	r7,r6
800048ca:	10 90       	mov	r0,r8
800048cc:	06 96       	mov	r6,r3
800048ce:	04 94       	mov	r4,r2
800048d0:	40 93       	lddsp	r3,sp[0x24]
800048d2:	02 92       	mov	r2,r1
800048d4:	0e 99       	mov	r9,r7
800048d6:	40 41       	lddsp	r1,sp[0x10]
800048d8:	fa f8 06 b4 	ld.w	r8,sp[1716]
800048dc:	40 3c       	lddsp	r12,sp[0xc]
800048de:	58 0c       	cp.w	r12,0
800048e0:	c1 d0       	breq	8000491a <_vfprintf_r+0x4b2>
800048e2:	10 36       	cp.w	r6,r8
800048e4:	c0 64       	brge	800048f0 <_vfprintf_r+0x488>
800048e6:	fa cb f9 44 	sub	r11,sp,-1724
800048ea:	f6 06 00 36 	add	r6,r11,r6<<0x3
800048ee:	c1 d8       	rjmp	80004928 <_vfprintf_r+0x4c0>
800048f0:	fa c8 f9 50 	sub	r8,sp,-1712
800048f4:	1a d8       	st.w	--sp,r8
800048f6:	fa c8 fa b8 	sub	r8,sp,-1352
800048fa:	1a d8       	st.w	--sp,r8
800048fc:	fa c8 fb b4 	sub	r8,sp,-1100
80004900:	1a d8       	st.w	--sp,r8
80004902:	fa c8 f9 40 	sub	r8,sp,-1728
80004906:	fa c9 ff b4 	sub	r9,sp,-76
8000490a:	04 9a       	mov	r10,r2
8000490c:	0c 9b       	mov	r11,r6
8000490e:	08 9c       	mov	r12,r4
80004910:	fe b0 fc 0e 	rcall	8000412c <get_arg>
80004914:	2f dd       	sub	sp,-12
80004916:	19 b8       	ld.ub	r8,r12[0x3]
80004918:	c2 28       	rjmp	8000495c <_vfprintf_r+0x4f4>
8000491a:	2f f7       	sub	r7,-1
8000491c:	10 39       	cp.w	r9,r8
8000491e:	c0 84       	brge	8000492e <_vfprintf_r+0x4c6>
80004920:	fa ca f9 44 	sub	r10,sp,-1724
80004924:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004928:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
8000492c:	c1 88       	rjmp	8000495c <_vfprintf_r+0x4f4>
8000492e:	41 09       	lddsp	r9,sp[0x40]
80004930:	59 f8       	cp.w	r8,31
80004932:	e0 89 00 12 	brgt	80004956 <_vfprintf_r+0x4ee>
80004936:	f2 ca ff fc 	sub	r10,r9,-4
8000493a:	51 0a       	stdsp	sp[0x40],r10
8000493c:	72 09       	ld.w	r9,r9[0x0]
8000493e:	fa c6 f9 44 	sub	r6,sp,-1724
80004942:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80004946:	2f f8       	sub	r8,-1
80004948:	f5 49 fd 88 	st.w	r10[-632],r9
8000494c:	fb 48 06 b4 	st.w	sp[1716],r8
80004950:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80004954:	c0 48       	rjmp	8000495c <_vfprintf_r+0x4f4>
80004956:	13 b8       	ld.ub	r8,r9[0x3]
80004958:	2f c9       	sub	r9,-4
8000495a:	51 09       	stdsp	sp[0x40],r9
8000495c:	fb 68 06 60 	st.b	sp[1632],r8
80004960:	30 0e       	mov	lr,0
80004962:	30 08       	mov	r8,0
80004964:	30 12       	mov	r2,1
80004966:	fb 68 06 bb 	st.b	sp[1723],r8
8000496a:	50 2e       	stdsp	sp[0x8],lr
8000496c:	e0 8f 08 b1 	bral	80005ace <_vfprintf_r+0x1666>
80004970:	50 a7       	stdsp	sp[0x28],r7
80004972:	50 80       	stdsp	sp[0x20],r0
80004974:	0c 97       	mov	r7,r6
80004976:	04 94       	mov	r4,r2
80004978:	06 96       	mov	r6,r3
8000497a:	02 92       	mov	r2,r1
8000497c:	40 93       	lddsp	r3,sp[0x24]
8000497e:	10 90       	mov	r0,r8
80004980:	40 41       	lddsp	r1,sp[0x10]
80004982:	a5 a5       	sbr	r5,0x4
80004984:	c0 a8       	rjmp	80004998 <_vfprintf_r+0x530>
80004986:	50 a7       	stdsp	sp[0x28],r7
80004988:	50 80       	stdsp	sp[0x20],r0
8000498a:	0c 97       	mov	r7,r6
8000498c:	04 94       	mov	r4,r2
8000498e:	06 96       	mov	r6,r3
80004990:	02 92       	mov	r2,r1
80004992:	40 93       	lddsp	r3,sp[0x24]
80004994:	10 90       	mov	r0,r8
80004996:	40 41       	lddsp	r1,sp[0x10]
80004998:	ed b5 00 05 	bld	r5,0x5
8000499c:	c5 11       	brne	80004a3e <_vfprintf_r+0x5d6>
8000499e:	fa f8 06 b4 	ld.w	r8,sp[1716]
800049a2:	40 3c       	lddsp	r12,sp[0xc]
800049a4:	58 0c       	cp.w	r12,0
800049a6:	c1 e0       	breq	800049e2 <_vfprintf_r+0x57a>
800049a8:	10 36       	cp.w	r6,r8
800049aa:	c0 64       	brge	800049b6 <_vfprintf_r+0x54e>
800049ac:	fa cb f9 44 	sub	r11,sp,-1724
800049b0:	f6 06 00 36 	add	r6,r11,r6<<0x3
800049b4:	c2 08       	rjmp	800049f4 <_vfprintf_r+0x58c>
800049b6:	fa c8 f9 50 	sub	r8,sp,-1712
800049ba:	1a d8       	st.w	--sp,r8
800049bc:	fa c8 fa b8 	sub	r8,sp,-1352
800049c0:	0c 9b       	mov	r11,r6
800049c2:	1a d8       	st.w	--sp,r8
800049c4:	fa c8 fb b4 	sub	r8,sp,-1100
800049c8:	1a d8       	st.w	--sp,r8
800049ca:	fa c9 ff b4 	sub	r9,sp,-76
800049ce:	fa c8 f9 40 	sub	r8,sp,-1728
800049d2:	04 9a       	mov	r10,r2
800049d4:	08 9c       	mov	r12,r4
800049d6:	fe b0 fb ab 	rcall	8000412c <get_arg>
800049da:	2f dd       	sub	sp,-12
800049dc:	78 1b       	ld.w	r11,r12[0x4]
800049de:	78 09       	ld.w	r9,r12[0x0]
800049e0:	c2 b8       	rjmp	80004a36 <_vfprintf_r+0x5ce>
800049e2:	ee ca ff ff 	sub	r10,r7,-1
800049e6:	10 37       	cp.w	r7,r8
800049e8:	c0 b4       	brge	800049fe <_vfprintf_r+0x596>
800049ea:	fa c9 f9 44 	sub	r9,sp,-1724
800049ee:	14 97       	mov	r7,r10
800049f0:	f2 06 00 36 	add	r6,r9,r6<<0x3
800049f4:	ec fb fd 8c 	ld.w	r11,r6[-628]
800049f8:	ec f9 fd 88 	ld.w	r9,r6[-632]
800049fc:	c1 d8       	rjmp	80004a36 <_vfprintf_r+0x5ce>
800049fe:	41 09       	lddsp	r9,sp[0x40]
80004a00:	59 f8       	cp.w	r8,31
80004a02:	e0 89 00 14 	brgt	80004a2a <_vfprintf_r+0x5c2>
80004a06:	f2 cb ff f8 	sub	r11,r9,-8
80004a0a:	51 0b       	stdsp	sp[0x40],r11
80004a0c:	fa c6 f9 44 	sub	r6,sp,-1724
80004a10:	72 1b       	ld.w	r11,r9[0x4]
80004a12:	ec 08 00 3c 	add	r12,r6,r8<<0x3
80004a16:	72 09       	ld.w	r9,r9[0x0]
80004a18:	f9 4b fd 8c 	st.w	r12[-628],r11
80004a1c:	f9 49 fd 88 	st.w	r12[-632],r9
80004a20:	2f f8       	sub	r8,-1
80004a22:	14 97       	mov	r7,r10
80004a24:	fb 48 06 b4 	st.w	sp[1716],r8
80004a28:	c0 78       	rjmp	80004a36 <_vfprintf_r+0x5ce>
80004a2a:	f2 c8 ff f8 	sub	r8,r9,-8
80004a2e:	72 1b       	ld.w	r11,r9[0x4]
80004a30:	14 97       	mov	r7,r10
80004a32:	51 08       	stdsp	sp[0x40],r8
80004a34:	72 09       	ld.w	r9,r9[0x0]
80004a36:	16 98       	mov	r8,r11
80004a38:	fa e9 00 00 	st.d	sp[0],r8
80004a3c:	ca e8       	rjmp	80004b98 <_vfprintf_r+0x730>
80004a3e:	ed b5 00 04 	bld	r5,0x4
80004a42:	c1 71       	brne	80004a70 <_vfprintf_r+0x608>
80004a44:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004a48:	40 3e       	lddsp	lr,sp[0xc]
80004a4a:	58 0e       	cp.w	lr,0
80004a4c:	c0 80       	breq	80004a5c <_vfprintf_r+0x5f4>
80004a4e:	10 36       	cp.w	r6,r8
80004a50:	c6 94       	brge	80004b22 <_vfprintf_r+0x6ba>
80004a52:	fa cc f9 44 	sub	r12,sp,-1724
80004a56:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004a5a:	c8 28       	rjmp	80004b5e <_vfprintf_r+0x6f6>
80004a5c:	ee ca ff ff 	sub	r10,r7,-1
80004a60:	10 37       	cp.w	r7,r8
80004a62:	e0 84 00 81 	brge	80004b64 <_vfprintf_r+0x6fc>
80004a66:	fa cb f9 44 	sub	r11,sp,-1724
80004a6a:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004a6e:	c7 78       	rjmp	80004b5c <_vfprintf_r+0x6f4>
80004a70:	ed b5 00 06 	bld	r5,0x6
80004a74:	c4 b1       	brne	80004b0a <_vfprintf_r+0x6a2>
80004a76:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004a7a:	40 3c       	lddsp	r12,sp[0xc]
80004a7c:	58 0c       	cp.w	r12,0
80004a7e:	c1 d0       	breq	80004ab8 <_vfprintf_r+0x650>
80004a80:	10 36       	cp.w	r6,r8
80004a82:	c0 64       	brge	80004a8e <_vfprintf_r+0x626>
80004a84:	fa cb f9 44 	sub	r11,sp,-1724
80004a88:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004a8c:	c1 f8       	rjmp	80004aca <_vfprintf_r+0x662>
80004a8e:	fa c8 f9 50 	sub	r8,sp,-1712
80004a92:	1a d8       	st.w	--sp,r8
80004a94:	fa c8 fa b8 	sub	r8,sp,-1352
80004a98:	1a d8       	st.w	--sp,r8
80004a9a:	fa c8 fb b4 	sub	r8,sp,-1100
80004a9e:	1a d8       	st.w	--sp,r8
80004aa0:	fa c8 f9 40 	sub	r8,sp,-1728
80004aa4:	fa c9 ff b4 	sub	r9,sp,-76
80004aa8:	04 9a       	mov	r10,r2
80004aaa:	0c 9b       	mov	r11,r6
80004aac:	08 9c       	mov	r12,r4
80004aae:	fe b0 fb 3f 	rcall	8000412c <get_arg>
80004ab2:	2f dd       	sub	sp,-12
80004ab4:	98 18       	ld.sh	r8,r12[0x2]
80004ab6:	c2 68       	rjmp	80004b02 <_vfprintf_r+0x69a>
80004ab8:	ee ca ff ff 	sub	r10,r7,-1
80004abc:	10 37       	cp.w	r7,r8
80004abe:	c0 94       	brge	80004ad0 <_vfprintf_r+0x668>
80004ac0:	fa c9 f9 44 	sub	r9,sp,-1724
80004ac4:	14 97       	mov	r7,r10
80004ac6:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004aca:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004ace:	c1 a8       	rjmp	80004b02 <_vfprintf_r+0x69a>
80004ad0:	41 09       	lddsp	r9,sp[0x40]
80004ad2:	59 f8       	cp.w	r8,31
80004ad4:	e0 89 00 13 	brgt	80004afa <_vfprintf_r+0x692>
80004ad8:	f2 cb ff fc 	sub	r11,r9,-4
80004adc:	51 0b       	stdsp	sp[0x40],r11
80004ade:	72 09       	ld.w	r9,r9[0x0]
80004ae0:	fa c6 f9 44 	sub	r6,sp,-1724
80004ae4:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004ae8:	2f f8       	sub	r8,-1
80004aea:	f7 49 fd 88 	st.w	r11[-632],r9
80004aee:	fb 48 06 b4 	st.w	sp[1716],r8
80004af2:	14 97       	mov	r7,r10
80004af4:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004af8:	c0 58       	rjmp	80004b02 <_vfprintf_r+0x69a>
80004afa:	92 18       	ld.sh	r8,r9[0x2]
80004afc:	14 97       	mov	r7,r10
80004afe:	2f c9       	sub	r9,-4
80004b00:	51 09       	stdsp	sp[0x40],r9
80004b02:	50 18       	stdsp	sp[0x4],r8
80004b04:	bf 58       	asr	r8,0x1f
80004b06:	50 08       	stdsp	sp[0x0],r8
80004b08:	c4 88       	rjmp	80004b98 <_vfprintf_r+0x730>
80004b0a:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004b0e:	40 3c       	lddsp	r12,sp[0xc]
80004b10:	58 0c       	cp.w	r12,0
80004b12:	c1 d0       	breq	80004b4c <_vfprintf_r+0x6e4>
80004b14:	10 36       	cp.w	r6,r8
80004b16:	c0 64       	brge	80004b22 <_vfprintf_r+0x6ba>
80004b18:	fa cb f9 44 	sub	r11,sp,-1724
80004b1c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004b20:	c1 f8       	rjmp	80004b5e <_vfprintf_r+0x6f6>
80004b22:	fa c8 f9 50 	sub	r8,sp,-1712
80004b26:	1a d8       	st.w	--sp,r8
80004b28:	fa c8 fa b8 	sub	r8,sp,-1352
80004b2c:	0c 9b       	mov	r11,r6
80004b2e:	1a d8       	st.w	--sp,r8
80004b30:	fa c8 fb b4 	sub	r8,sp,-1100
80004b34:	04 9a       	mov	r10,r2
80004b36:	1a d8       	st.w	--sp,r8
80004b38:	08 9c       	mov	r12,r4
80004b3a:	fa c8 f9 40 	sub	r8,sp,-1728
80004b3e:	fa c9 ff b4 	sub	r9,sp,-76
80004b42:	fe b0 fa f5 	rcall	8000412c <get_arg>
80004b46:	2f dd       	sub	sp,-12
80004b48:	78 0b       	ld.w	r11,r12[0x0]
80004b4a:	c2 48       	rjmp	80004b92 <_vfprintf_r+0x72a>
80004b4c:	ee ca ff ff 	sub	r10,r7,-1
80004b50:	10 37       	cp.w	r7,r8
80004b52:	c0 94       	brge	80004b64 <_vfprintf_r+0x6fc>
80004b54:	fa c9 f9 44 	sub	r9,sp,-1724
80004b58:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004b5c:	14 97       	mov	r7,r10
80004b5e:	ec fb fd 88 	ld.w	r11,r6[-632]
80004b62:	c1 88       	rjmp	80004b92 <_vfprintf_r+0x72a>
80004b64:	41 09       	lddsp	r9,sp[0x40]
80004b66:	59 f8       	cp.w	r8,31
80004b68:	e0 89 00 11 	brgt	80004b8a <_vfprintf_r+0x722>
80004b6c:	f2 cb ff fc 	sub	r11,r9,-4
80004b70:	51 0b       	stdsp	sp[0x40],r11
80004b72:	fa c6 f9 44 	sub	r6,sp,-1724
80004b76:	72 0b       	ld.w	r11,r9[0x0]
80004b78:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004b7c:	f3 4b fd 88 	st.w	r9[-632],r11
80004b80:	2f f8       	sub	r8,-1
80004b82:	14 97       	mov	r7,r10
80004b84:	fb 48 06 b4 	st.w	sp[1716],r8
80004b88:	c0 58       	rjmp	80004b92 <_vfprintf_r+0x72a>
80004b8a:	72 0b       	ld.w	r11,r9[0x0]
80004b8c:	14 97       	mov	r7,r10
80004b8e:	2f c9       	sub	r9,-4
80004b90:	51 09       	stdsp	sp[0x40],r9
80004b92:	50 1b       	stdsp	sp[0x4],r11
80004b94:	bf 5b       	asr	r11,0x1f
80004b96:	50 0b       	stdsp	sp[0x0],r11
80004b98:	fa ea 00 00 	ld.d	r10,sp[0]
80004b9c:	58 0a       	cp.w	r10,0
80004b9e:	5c 2b       	cpc	r11
80004ba0:	c0 e4       	brge	80004bbc <_vfprintf_r+0x754>
80004ba2:	30 08       	mov	r8,0
80004ba4:	fa ea 00 00 	ld.d	r10,sp[0]
80004ba8:	30 09       	mov	r9,0
80004baa:	f0 0a 01 0a 	sub	r10,r8,r10
80004bae:	f2 0b 01 4b 	sbc	r11,r9,r11
80004bb2:	32 d8       	mov	r8,45
80004bb4:	fa eb 00 00 	st.d	sp[0],r10
80004bb8:	fb 68 06 bb 	st.b	sp[1723],r8
80004bbc:	30 18       	mov	r8,1
80004bbe:	e0 8f 06 fe 	bral	800059ba <_vfprintf_r+0x1552>
80004bc2:	50 a7       	stdsp	sp[0x28],r7
80004bc4:	50 80       	stdsp	sp[0x20],r0
80004bc6:	0c 97       	mov	r7,r6
80004bc8:	04 94       	mov	r4,r2
80004bca:	06 96       	mov	r6,r3
80004bcc:	02 92       	mov	r2,r1
80004bce:	40 93       	lddsp	r3,sp[0x24]
80004bd0:	10 90       	mov	r0,r8
80004bd2:	40 41       	lddsp	r1,sp[0x10]
80004bd4:	0e 99       	mov	r9,r7
80004bd6:	ed b5 00 03 	bld	r5,0x3
80004bda:	c4 11       	brne	80004c5c <_vfprintf_r+0x7f4>
80004bdc:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004be0:	40 3a       	lddsp	r10,sp[0xc]
80004be2:	58 0a       	cp.w	r10,0
80004be4:	c1 90       	breq	80004c16 <_vfprintf_r+0x7ae>
80004be6:	10 36       	cp.w	r6,r8
80004be8:	c6 45       	brlt	80004cb0 <_vfprintf_r+0x848>
80004bea:	fa c8 f9 50 	sub	r8,sp,-1712
80004bee:	1a d8       	st.w	--sp,r8
80004bf0:	fa c8 fa b8 	sub	r8,sp,-1352
80004bf4:	1a d8       	st.w	--sp,r8
80004bf6:	fa c8 fb b4 	sub	r8,sp,-1100
80004bfa:	0c 9b       	mov	r11,r6
80004bfc:	1a d8       	st.w	--sp,r8
80004bfe:	04 9a       	mov	r10,r2
80004c00:	fa c8 f9 40 	sub	r8,sp,-1728
80004c04:	fa c9 ff b4 	sub	r9,sp,-76
80004c08:	08 9c       	mov	r12,r4
80004c0a:	fe b0 fa 91 	rcall	8000412c <get_arg>
80004c0e:	2f dd       	sub	sp,-12
80004c10:	78 16       	ld.w	r6,r12[0x4]
80004c12:	50 76       	stdsp	sp[0x1c],r6
80004c14:	c4 88       	rjmp	80004ca4 <_vfprintf_r+0x83c>
80004c16:	2f f7       	sub	r7,-1
80004c18:	10 39       	cp.w	r9,r8
80004c1a:	c0 c4       	brge	80004c32 <_vfprintf_r+0x7ca>
80004c1c:	fa ce f9 44 	sub	lr,sp,-1724
80004c20:	fc 06 00 36 	add	r6,lr,r6<<0x3
80004c24:	ec fc fd 8c 	ld.w	r12,r6[-628]
80004c28:	50 7c       	stdsp	sp[0x1c],r12
80004c2a:	ec f6 fd 88 	ld.w	r6,r6[-632]
80004c2e:	50 56       	stdsp	sp[0x14],r6
80004c30:	c6 68       	rjmp	80004cfc <_vfprintf_r+0x894>
80004c32:	41 09       	lddsp	r9,sp[0x40]
80004c34:	59 f8       	cp.w	r8,31
80004c36:	e0 89 00 10 	brgt	80004c56 <_vfprintf_r+0x7ee>
80004c3a:	f2 ca ff f8 	sub	r10,r9,-8
80004c3e:	72 1b       	ld.w	r11,r9[0x4]
80004c40:	51 0a       	stdsp	sp[0x40],r10
80004c42:	72 09       	ld.w	r9,r9[0x0]
80004c44:	fa ca f9 44 	sub	r10,sp,-1724
80004c48:	50 7b       	stdsp	sp[0x1c],r11
80004c4a:	50 59       	stdsp	sp[0x14],r9
80004c4c:	f4 08 00 39 	add	r9,r10,r8<<0x3
80004c50:	40 5b       	lddsp	r11,sp[0x14]
80004c52:	40 7a       	lddsp	r10,sp[0x1c]
80004c54:	c4 78       	rjmp	80004ce2 <_vfprintf_r+0x87a>
80004c56:	72 18       	ld.w	r8,r9[0x4]
80004c58:	50 78       	stdsp	sp[0x1c],r8
80004c5a:	c4 c8       	rjmp	80004cf2 <_vfprintf_r+0x88a>
80004c5c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004c60:	40 3e       	lddsp	lr,sp[0xc]
80004c62:	58 0e       	cp.w	lr,0
80004c64:	c2 30       	breq	80004caa <_vfprintf_r+0x842>
80004c66:	10 36       	cp.w	r6,r8
80004c68:	c0 94       	brge	80004c7a <_vfprintf_r+0x812>
80004c6a:	fa cc f9 44 	sub	r12,sp,-1724
80004c6e:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004c72:	ec fb fd 8c 	ld.w	r11,r6[-628]
80004c76:	50 7b       	stdsp	sp[0x1c],r11
80004c78:	cd 9b       	rjmp	80004c2a <_vfprintf_r+0x7c2>
80004c7a:	fa c8 f9 50 	sub	r8,sp,-1712
80004c7e:	1a d8       	st.w	--sp,r8
80004c80:	fa c8 fa b8 	sub	r8,sp,-1352
80004c84:	04 9a       	mov	r10,r2
80004c86:	1a d8       	st.w	--sp,r8
80004c88:	fa c8 fb b4 	sub	r8,sp,-1100
80004c8c:	0c 9b       	mov	r11,r6
80004c8e:	1a d8       	st.w	--sp,r8
80004c90:	08 9c       	mov	r12,r4
80004c92:	fa c8 f9 40 	sub	r8,sp,-1728
80004c96:	fa c9 ff b4 	sub	r9,sp,-76
80004c9a:	fe b0 fa 49 	rcall	8000412c <get_arg>
80004c9e:	2f dd       	sub	sp,-12
80004ca0:	78 1a       	ld.w	r10,r12[0x4]
80004ca2:	50 7a       	stdsp	sp[0x1c],r10
80004ca4:	78 0c       	ld.w	r12,r12[0x0]
80004ca6:	50 5c       	stdsp	sp[0x14],r12
80004ca8:	c2 a8       	rjmp	80004cfc <_vfprintf_r+0x894>
80004caa:	2f f7       	sub	r7,-1
80004cac:	10 39       	cp.w	r9,r8
80004cae:	c0 94       	brge	80004cc0 <_vfprintf_r+0x858>
80004cb0:	fa c9 f9 44 	sub	r9,sp,-1724
80004cb4:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004cb8:	ec f8 fd 8c 	ld.w	r8,r6[-628]
80004cbc:	50 78       	stdsp	sp[0x1c],r8
80004cbe:	cb 6b       	rjmp	80004c2a <_vfprintf_r+0x7c2>
80004cc0:	41 09       	lddsp	r9,sp[0x40]
80004cc2:	59 f8       	cp.w	r8,31
80004cc4:	e0 89 00 15 	brgt	80004cee <_vfprintf_r+0x886>
80004cc8:	f2 ca ff f8 	sub	r10,r9,-8
80004ccc:	72 16       	ld.w	r6,r9[0x4]
80004cce:	72 09       	ld.w	r9,r9[0x0]
80004cd0:	51 0a       	stdsp	sp[0x40],r10
80004cd2:	50 59       	stdsp	sp[0x14],r9
80004cd4:	fa ce f9 44 	sub	lr,sp,-1724
80004cd8:	50 76       	stdsp	sp[0x1c],r6
80004cda:	fc 08 00 39 	add	r9,lr,r8<<0x3
80004cde:	40 5b       	lddsp	r11,sp[0x14]
80004ce0:	0c 9a       	mov	r10,r6
80004ce2:	f2 eb fd 88 	st.d	r9[-632],r10
80004ce6:	2f f8       	sub	r8,-1
80004ce8:	fb 48 06 b4 	st.w	sp[1716],r8
80004cec:	c0 88       	rjmp	80004cfc <_vfprintf_r+0x894>
80004cee:	72 1c       	ld.w	r12,r9[0x4]
80004cf0:	50 7c       	stdsp	sp[0x1c],r12
80004cf2:	f2 c8 ff f8 	sub	r8,r9,-8
80004cf6:	51 08       	stdsp	sp[0x40],r8
80004cf8:	72 09       	ld.w	r9,r9[0x0]
80004cfa:	50 59       	stdsp	sp[0x14],r9
80004cfc:	40 5b       	lddsp	r11,sp[0x14]
80004cfe:	40 7a       	lddsp	r10,sp[0x1c]
80004d00:	e0 a0 1c f0 	rcall	800086e0 <__isinfd>
80004d04:	18 96       	mov	r6,r12
80004d06:	c1 50       	breq	80004d30 <_vfprintf_r+0x8c8>
80004d08:	30 08       	mov	r8,0
80004d0a:	30 09       	mov	r9,0
80004d0c:	40 5b       	lddsp	r11,sp[0x14]
80004d0e:	40 7a       	lddsp	r10,sp[0x1c]
80004d10:	e0 a0 21 dc 	rcall	800090c8 <__avr32_f64_cmp_lt>
80004d14:	c0 40       	breq	80004d1c <_vfprintf_r+0x8b4>
80004d16:	32 d8       	mov	r8,45
80004d18:	fb 68 06 bb 	st.b	sp[1723],r8
80004d1c:	4d 18       	lddpc	r8,80004e60 <_vfprintf_r+0x9f8>
80004d1e:	4d 26       	lddpc	r6,80004e64 <_vfprintf_r+0x9fc>
80004d20:	a7 d5       	cbr	r5,0x7
80004d22:	e0 40 00 47 	cp.w	r0,71
80004d26:	f0 06 17 a0 	movle	r6,r8
80004d2a:	30 32       	mov	r2,3
80004d2c:	e0 8f 06 d4 	bral	80005ad4 <_vfprintf_r+0x166c>
80004d30:	40 5b       	lddsp	r11,sp[0x14]
80004d32:	40 7a       	lddsp	r10,sp[0x1c]
80004d34:	e0 a0 1c eb 	rcall	8000870a <__isnand>
80004d38:	c0 c0       	breq	80004d50 <_vfprintf_r+0x8e8>
80004d3a:	50 26       	stdsp	sp[0x8],r6
80004d3c:	4c b8       	lddpc	r8,80004e68 <_vfprintf_r+0xa00>
80004d3e:	4c c6       	lddpc	r6,80004e6c <_vfprintf_r+0xa04>
80004d40:	a7 d5       	cbr	r5,0x7
80004d42:	e0 40 00 47 	cp.w	r0,71
80004d46:	f0 06 17 a0 	movle	r6,r8
80004d4a:	30 32       	mov	r2,3
80004d4c:	e0 8f 06 ca 	bral	80005ae0 <_vfprintf_r+0x1678>
80004d50:	40 2a       	lddsp	r10,sp[0x8]
80004d52:	5b fa       	cp.w	r10,-1
80004d54:	c0 41       	brne	80004d5c <_vfprintf_r+0x8f4>
80004d56:	30 69       	mov	r9,6
80004d58:	50 29       	stdsp	sp[0x8],r9
80004d5a:	c1 18       	rjmp	80004d7c <_vfprintf_r+0x914>
80004d5c:	e0 40 00 47 	cp.w	r0,71
80004d60:	5f 09       	sreq	r9
80004d62:	e0 40 00 67 	cp.w	r0,103
80004d66:	5f 08       	sreq	r8
80004d68:	f3 e8 10 08 	or	r8,r9,r8
80004d6c:	f8 08 18 00 	cp.b	r8,r12
80004d70:	c0 60       	breq	80004d7c <_vfprintf_r+0x914>
80004d72:	40 28       	lddsp	r8,sp[0x8]
80004d74:	58 08       	cp.w	r8,0
80004d76:	f9 b8 00 01 	moveq	r8,1
80004d7a:	50 28       	stdsp	sp[0x8],r8
80004d7c:	40 78       	lddsp	r8,sp[0x1c]
80004d7e:	40 59       	lddsp	r9,sp[0x14]
80004d80:	fa e9 06 94 	st.d	sp[1684],r8
80004d84:	a9 a5       	sbr	r5,0x8
80004d86:	fa f8 06 94 	ld.w	r8,sp[1684]
80004d8a:	58 08       	cp.w	r8,0
80004d8c:	c0 65       	brlt	80004d98 <_vfprintf_r+0x930>
80004d8e:	40 5e       	lddsp	lr,sp[0x14]
80004d90:	30 0c       	mov	r12,0
80004d92:	50 6e       	stdsp	sp[0x18],lr
80004d94:	50 9c       	stdsp	sp[0x24],r12
80004d96:	c0 78       	rjmp	80004da4 <_vfprintf_r+0x93c>
80004d98:	40 5b       	lddsp	r11,sp[0x14]
80004d9a:	32 da       	mov	r10,45
80004d9c:	ee 1b 80 00 	eorh	r11,0x8000
80004da0:	50 9a       	stdsp	sp[0x24],r10
80004da2:	50 6b       	stdsp	sp[0x18],r11
80004da4:	e0 40 00 46 	cp.w	r0,70
80004da8:	5f 09       	sreq	r9
80004daa:	e0 40 00 66 	cp.w	r0,102
80004dae:	5f 08       	sreq	r8
80004db0:	f3 e8 10 08 	or	r8,r9,r8
80004db4:	50 48       	stdsp	sp[0x10],r8
80004db6:	c0 40       	breq	80004dbe <_vfprintf_r+0x956>
80004db8:	40 22       	lddsp	r2,sp[0x8]
80004dba:	30 39       	mov	r9,3
80004dbc:	c1 08       	rjmp	80004ddc <_vfprintf_r+0x974>
80004dbe:	e0 40 00 45 	cp.w	r0,69
80004dc2:	5f 09       	sreq	r9
80004dc4:	e0 40 00 65 	cp.w	r0,101
80004dc8:	5f 08       	sreq	r8
80004dca:	40 22       	lddsp	r2,sp[0x8]
80004dcc:	10 49       	or	r9,r8
80004dce:	2f f2       	sub	r2,-1
80004dd0:	40 46       	lddsp	r6,sp[0x10]
80004dd2:	ec 09 18 00 	cp.b	r9,r6
80004dd6:	fb f2 00 02 	ld.weq	r2,sp[0x8]
80004dda:	30 29       	mov	r9,2
80004ddc:	fa c8 f9 5c 	sub	r8,sp,-1700
80004de0:	1a d8       	st.w	--sp,r8
80004de2:	fa c8 f9 54 	sub	r8,sp,-1708
80004de6:	1a d8       	st.w	--sp,r8
80004de8:	fa c8 f9 4c 	sub	r8,sp,-1716
80004dec:	08 9c       	mov	r12,r4
80004dee:	1a d8       	st.w	--sp,r8
80004df0:	04 98       	mov	r8,r2
80004df2:	40 9b       	lddsp	r11,sp[0x24]
80004df4:	40 aa       	lddsp	r10,sp[0x28]
80004df6:	e0 a0 0b cd 	rcall	80006590 <_dtoa_r>
80004dfa:	e0 40 00 47 	cp.w	r0,71
80004dfe:	5f 19       	srne	r9
80004e00:	e0 40 00 67 	cp.w	r0,103
80004e04:	5f 18       	srne	r8
80004e06:	18 96       	mov	r6,r12
80004e08:	2f dd       	sub	sp,-12
80004e0a:	f3 e8 00 08 	and	r8,r9,r8
80004e0e:	c0 41       	brne	80004e16 <_vfprintf_r+0x9ae>
80004e10:	ed b5 00 00 	bld	r5,0x0
80004e14:	c3 81       	brne	80004e84 <_vfprintf_r+0xa1c>
80004e16:	ec 02 00 0e 	add	lr,r6,r2
80004e1a:	50 3e       	stdsp	sp[0xc],lr
80004e1c:	40 4c       	lddsp	r12,sp[0x10]
80004e1e:	58 0c       	cp.w	r12,0
80004e20:	c1 50       	breq	80004e4a <_vfprintf_r+0x9e2>
80004e22:	0d 89       	ld.ub	r9,r6[0x0]
80004e24:	33 08       	mov	r8,48
80004e26:	f0 09 18 00 	cp.b	r9,r8
80004e2a:	c0 b1       	brne	80004e40 <_vfprintf_r+0x9d8>
80004e2c:	30 08       	mov	r8,0
80004e2e:	30 09       	mov	r9,0
80004e30:	40 6b       	lddsp	r11,sp[0x18]
80004e32:	40 7a       	lddsp	r10,sp[0x1c]
80004e34:	e0 a0 21 03 	rcall	8000903a <__avr32_f64_cmp_eq>
80004e38:	fb b2 00 01 	rsubeq	r2,1
80004e3c:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
80004e40:	40 3b       	lddsp	r11,sp[0xc]
80004e42:	fa f8 06 ac 	ld.w	r8,sp[1708]
80004e46:	10 0b       	add	r11,r8
80004e48:	50 3b       	stdsp	sp[0xc],r11
80004e4a:	40 6b       	lddsp	r11,sp[0x18]
80004e4c:	30 08       	mov	r8,0
80004e4e:	30 09       	mov	r9,0
80004e50:	40 7a       	lddsp	r10,sp[0x1c]
80004e52:	e0 a0 20 f4 	rcall	8000903a <__avr32_f64_cmp_eq>
80004e56:	c1 10       	breq	80004e78 <_vfprintf_r+0xa10>
80004e58:	40 3a       	lddsp	r10,sp[0xc]
80004e5a:	fb 4a 06 a4 	st.w	sp[1700],r10
80004e5e:	c0 d8       	rjmp	80004e78 <_vfprintf_r+0xa10>
80004e60:	80 00       	ld.sh	r0,r0[0x0]
80004e62:	9d 98       	st.w	lr[0x24],r8
80004e64:	80 00       	ld.sh	r0,r0[0x0]
80004e66:	9d 9c       	st.w	lr[0x24],r12
80004e68:	80 00       	ld.sh	r0,r0[0x0]
80004e6a:	9d a0       	st.w	lr[0x28],r0
80004e6c:	80 00       	ld.sh	r0,r0[0x0]
80004e6e:	9d a4       	st.w	lr[0x28],r4
80004e70:	10 c9       	st.b	r8++,r9
80004e72:	fb 48 06 a4 	st.w	sp[1700],r8
80004e76:	c0 28       	rjmp	80004e7a <_vfprintf_r+0xa12>
80004e78:	33 09       	mov	r9,48
80004e7a:	fa f8 06 a4 	ld.w	r8,sp[1700]
80004e7e:	40 3e       	lddsp	lr,sp[0xc]
80004e80:	1c 38       	cp.w	r8,lr
80004e82:	cf 73       	brcs	80004e70 <_vfprintf_r+0xa08>
80004e84:	e0 40 00 47 	cp.w	r0,71
80004e88:	5f 09       	sreq	r9
80004e8a:	e0 40 00 67 	cp.w	r0,103
80004e8e:	5f 08       	sreq	r8
80004e90:	f3 e8 10 08 	or	r8,r9,r8
80004e94:	fa f9 06 a4 	ld.w	r9,sp[1700]
80004e98:	0c 19       	sub	r9,r6
80004e9a:	50 69       	stdsp	sp[0x18],r9
80004e9c:	58 08       	cp.w	r8,0
80004e9e:	c0 b0       	breq	80004eb4 <_vfprintf_r+0xa4c>
80004ea0:	fa f8 06 ac 	ld.w	r8,sp[1708]
80004ea4:	5b d8       	cp.w	r8,-3
80004ea6:	c0 55       	brlt	80004eb0 <_vfprintf_r+0xa48>
80004ea8:	40 2c       	lddsp	r12,sp[0x8]
80004eaa:	18 38       	cp.w	r8,r12
80004eac:	e0 8a 00 6a 	brle	80004f80 <_vfprintf_r+0xb18>
80004eb0:	20 20       	sub	r0,2
80004eb2:	c0 58       	rjmp	80004ebc <_vfprintf_r+0xa54>
80004eb4:	e0 40 00 65 	cp.w	r0,101
80004eb8:	e0 89 00 46 	brgt	80004f44 <_vfprintf_r+0xadc>
80004ebc:	fa fb 06 ac 	ld.w	r11,sp[1708]
80004ec0:	fb 60 06 9c 	st.b	sp[1692],r0
80004ec4:	20 1b       	sub	r11,1
80004ec6:	fb 4b 06 ac 	st.w	sp[1708],r11
80004eca:	c0 47       	brpl	80004ed2 <_vfprintf_r+0xa6a>
80004ecc:	5c 3b       	neg	r11
80004ece:	32 d8       	mov	r8,45
80004ed0:	c0 28       	rjmp	80004ed4 <_vfprintf_r+0xa6c>
80004ed2:	32 b8       	mov	r8,43
80004ed4:	fb 68 06 9d 	st.b	sp[1693],r8
80004ed8:	58 9b       	cp.w	r11,9
80004eda:	e0 8a 00 1d 	brle	80004f14 <_vfprintf_r+0xaac>
80004ede:	fa c9 fa 35 	sub	r9,sp,-1483
80004ee2:	30 aa       	mov	r10,10
80004ee4:	12 98       	mov	r8,r9
80004ee6:	0e 9c       	mov	r12,r7
80004ee8:	0c 92       	mov	r2,r6
80004eea:	f6 0a 0c 06 	divs	r6,r11,r10
80004eee:	0e 9b       	mov	r11,r7
80004ef0:	2d 0b       	sub	r11,-48
80004ef2:	10 fb       	st.b	--r8,r11
80004ef4:	0c 9b       	mov	r11,r6
80004ef6:	58 96       	cp.w	r6,9
80004ef8:	fe 99 ff f9 	brgt	80004eea <_vfprintf_r+0xa82>
80004efc:	2d 0b       	sub	r11,-48
80004efe:	18 97       	mov	r7,r12
80004f00:	04 96       	mov	r6,r2
80004f02:	10 fb       	st.b	--r8,r11
80004f04:	fa ca f9 62 	sub	r10,sp,-1694
80004f08:	c0 38       	rjmp	80004f0e <_vfprintf_r+0xaa6>
80004f0a:	11 3b       	ld.ub	r11,r8++
80004f0c:	14 cb       	st.b	r10++,r11
80004f0e:	12 38       	cp.w	r8,r9
80004f10:	cf d3       	brcs	80004f0a <_vfprintf_r+0xaa2>
80004f12:	c0 98       	rjmp	80004f24 <_vfprintf_r+0xabc>
80004f14:	2d 0b       	sub	r11,-48
80004f16:	33 08       	mov	r8,48
80004f18:	fb 6b 06 9f 	st.b	sp[1695],r11
80004f1c:	fb 68 06 9e 	st.b	sp[1694],r8
80004f20:	fa ca f9 60 	sub	r10,sp,-1696
80004f24:	fa c8 f9 64 	sub	r8,sp,-1692
80004f28:	f4 08 01 08 	sub	r8,r10,r8
80004f2c:	50 e8       	stdsp	sp[0x38],r8
80004f2e:	10 92       	mov	r2,r8
80004f30:	40 6b       	lddsp	r11,sp[0x18]
80004f32:	16 02       	add	r2,r11
80004f34:	58 1b       	cp.w	r11,1
80004f36:	e0 89 00 05 	brgt	80004f40 <_vfprintf_r+0xad8>
80004f3a:	ed b5 00 00 	bld	r5,0x0
80004f3e:	c3 51       	brne	80004fa8 <_vfprintf_r+0xb40>
80004f40:	2f f2       	sub	r2,-1
80004f42:	c3 38       	rjmp	80004fa8 <_vfprintf_r+0xb40>
80004f44:	e0 40 00 66 	cp.w	r0,102
80004f48:	c1 c1       	brne	80004f80 <_vfprintf_r+0xb18>
80004f4a:	fa f2 06 ac 	ld.w	r2,sp[1708]
80004f4e:	58 02       	cp.w	r2,0
80004f50:	e0 8a 00 0c 	brle	80004f68 <_vfprintf_r+0xb00>
80004f54:	40 2a       	lddsp	r10,sp[0x8]
80004f56:	58 0a       	cp.w	r10,0
80004f58:	c0 41       	brne	80004f60 <_vfprintf_r+0xaf8>
80004f5a:	ed b5 00 00 	bld	r5,0x0
80004f5e:	c2 51       	brne	80004fa8 <_vfprintf_r+0xb40>
80004f60:	2f f2       	sub	r2,-1
80004f62:	40 29       	lddsp	r9,sp[0x8]
80004f64:	12 02       	add	r2,r9
80004f66:	c0 b8       	rjmp	80004f7c <_vfprintf_r+0xb14>
80004f68:	40 28       	lddsp	r8,sp[0x8]
80004f6a:	58 08       	cp.w	r8,0
80004f6c:	c0 61       	brne	80004f78 <_vfprintf_r+0xb10>
80004f6e:	ed b5 00 00 	bld	r5,0x0
80004f72:	c0 30       	breq	80004f78 <_vfprintf_r+0xb10>
80004f74:	30 12       	mov	r2,1
80004f76:	c1 98       	rjmp	80004fa8 <_vfprintf_r+0xb40>
80004f78:	40 22       	lddsp	r2,sp[0x8]
80004f7a:	2f e2       	sub	r2,-2
80004f7c:	36 60       	mov	r0,102
80004f7e:	c1 58       	rjmp	80004fa8 <_vfprintf_r+0xb40>
80004f80:	fa f2 06 ac 	ld.w	r2,sp[1708]
80004f84:	40 6e       	lddsp	lr,sp[0x18]
80004f86:	1c 32       	cp.w	r2,lr
80004f88:	c0 65       	brlt	80004f94 <_vfprintf_r+0xb2c>
80004f8a:	ed b5 00 00 	bld	r5,0x0
80004f8e:	f7 b2 00 ff 	subeq	r2,-1
80004f92:	c0 a8       	rjmp	80004fa6 <_vfprintf_r+0xb3e>
80004f94:	e4 08 11 02 	rsub	r8,r2,2
80004f98:	40 6c       	lddsp	r12,sp[0x18]
80004f9a:	58 02       	cp.w	r2,0
80004f9c:	f0 02 17 a0 	movle	r2,r8
80004fa0:	f9 b2 09 01 	movgt	r2,1
80004fa4:	18 02       	add	r2,r12
80004fa6:	36 70       	mov	r0,103
80004fa8:	40 9b       	lddsp	r11,sp[0x24]
80004faa:	58 0b       	cp.w	r11,0
80004fac:	e0 80 05 94 	breq	80005ad4 <_vfprintf_r+0x166c>
80004fb0:	32 d8       	mov	r8,45
80004fb2:	fb 68 06 bb 	st.b	sp[1723],r8
80004fb6:	e0 8f 05 93 	bral	80005adc <_vfprintf_r+0x1674>
80004fba:	50 a7       	stdsp	sp[0x28],r7
80004fbc:	04 94       	mov	r4,r2
80004fbe:	0c 97       	mov	r7,r6
80004fc0:	02 92       	mov	r2,r1
80004fc2:	06 96       	mov	r6,r3
80004fc4:	40 41       	lddsp	r1,sp[0x10]
80004fc6:	40 93       	lddsp	r3,sp[0x24]
80004fc8:	0e 99       	mov	r9,r7
80004fca:	ed b5 00 05 	bld	r5,0x5
80004fce:	c4 81       	brne	8000505e <_vfprintf_r+0xbf6>
80004fd0:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004fd4:	40 3e       	lddsp	lr,sp[0xc]
80004fd6:	58 0e       	cp.w	lr,0
80004fd8:	c1 d0       	breq	80005012 <_vfprintf_r+0xbaa>
80004fda:	10 36       	cp.w	r6,r8
80004fdc:	c0 64       	brge	80004fe8 <_vfprintf_r+0xb80>
80004fde:	fa cc f9 44 	sub	r12,sp,-1724
80004fe2:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004fe6:	c1 d8       	rjmp	80005020 <_vfprintf_r+0xbb8>
80004fe8:	fa c8 f9 50 	sub	r8,sp,-1712
80004fec:	1a d8       	st.w	--sp,r8
80004fee:	fa c8 fa b8 	sub	r8,sp,-1352
80004ff2:	04 9a       	mov	r10,r2
80004ff4:	1a d8       	st.w	--sp,r8
80004ff6:	fa c8 fb b4 	sub	r8,sp,-1100
80004ffa:	0c 9b       	mov	r11,r6
80004ffc:	1a d8       	st.w	--sp,r8
80004ffe:	08 9c       	mov	r12,r4
80005000:	fa c8 f9 40 	sub	r8,sp,-1728
80005004:	fa c9 ff b4 	sub	r9,sp,-76
80005008:	fe b0 f8 92 	rcall	8000412c <get_arg>
8000500c:	2f dd       	sub	sp,-12
8000500e:	78 0a       	ld.w	r10,r12[0x0]
80005010:	c2 08       	rjmp	80005050 <_vfprintf_r+0xbe8>
80005012:	2f f7       	sub	r7,-1
80005014:	10 39       	cp.w	r9,r8
80005016:	c0 84       	brge	80005026 <_vfprintf_r+0xbbe>
80005018:	fa cb f9 44 	sub	r11,sp,-1724
8000501c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005020:	ec fa fd 88 	ld.w	r10,r6[-632]
80005024:	c1 68       	rjmp	80005050 <_vfprintf_r+0xbe8>
80005026:	41 09       	lddsp	r9,sp[0x40]
80005028:	59 f8       	cp.w	r8,31
8000502a:	e0 89 00 10 	brgt	8000504a <_vfprintf_r+0xbe2>
8000502e:	f2 ca ff fc 	sub	r10,r9,-4
80005032:	51 0a       	stdsp	sp[0x40],r10
80005034:	fa c6 f9 44 	sub	r6,sp,-1724
80005038:	72 0a       	ld.w	r10,r9[0x0]
8000503a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000503e:	f3 4a fd 88 	st.w	r9[-632],r10
80005042:	2f f8       	sub	r8,-1
80005044:	fb 48 06 b4 	st.w	sp[1716],r8
80005048:	c0 48       	rjmp	80005050 <_vfprintf_r+0xbe8>
8000504a:	72 0a       	ld.w	r10,r9[0x0]
8000504c:	2f c9       	sub	r9,-4
8000504e:	51 09       	stdsp	sp[0x40],r9
80005050:	40 be       	lddsp	lr,sp[0x2c]
80005052:	1c 98       	mov	r8,lr
80005054:	95 1e       	st.w	r10[0x4],lr
80005056:	bf 58       	asr	r8,0x1f
80005058:	95 08       	st.w	r10[0x0],r8
8000505a:	fe 9f fa 92 	bral	8000457e <_vfprintf_r+0x116>
8000505e:	ed b5 00 04 	bld	r5,0x4
80005062:	c4 80       	breq	800050f2 <_vfprintf_r+0xc8a>
80005064:	e2 15 00 40 	andl	r5,0x40,COH
80005068:	c4 50       	breq	800050f2 <_vfprintf_r+0xc8a>
8000506a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000506e:	40 3c       	lddsp	r12,sp[0xc]
80005070:	58 0c       	cp.w	r12,0
80005072:	c1 d0       	breq	800050ac <_vfprintf_r+0xc44>
80005074:	10 36       	cp.w	r6,r8
80005076:	c0 64       	brge	80005082 <_vfprintf_r+0xc1a>
80005078:	fa cb f9 44 	sub	r11,sp,-1724
8000507c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005080:	c1 d8       	rjmp	800050ba <_vfprintf_r+0xc52>
80005082:	fa c8 f9 50 	sub	r8,sp,-1712
80005086:	1a d8       	st.w	--sp,r8
80005088:	fa c8 fa b8 	sub	r8,sp,-1352
8000508c:	04 9a       	mov	r10,r2
8000508e:	1a d8       	st.w	--sp,r8
80005090:	fa c8 fb b4 	sub	r8,sp,-1100
80005094:	0c 9b       	mov	r11,r6
80005096:	1a d8       	st.w	--sp,r8
80005098:	08 9c       	mov	r12,r4
8000509a:	fa c8 f9 40 	sub	r8,sp,-1728
8000509e:	fa c9 ff b4 	sub	r9,sp,-76
800050a2:	fe b0 f8 45 	rcall	8000412c <get_arg>
800050a6:	2f dd       	sub	sp,-12
800050a8:	78 0a       	ld.w	r10,r12[0x0]
800050aa:	c2 08       	rjmp	800050ea <_vfprintf_r+0xc82>
800050ac:	2f f7       	sub	r7,-1
800050ae:	10 39       	cp.w	r9,r8
800050b0:	c0 84       	brge	800050c0 <_vfprintf_r+0xc58>
800050b2:	fa ca f9 44 	sub	r10,sp,-1724
800050b6:	f4 06 00 36 	add	r6,r10,r6<<0x3
800050ba:	ec fa fd 88 	ld.w	r10,r6[-632]
800050be:	c1 68       	rjmp	800050ea <_vfprintf_r+0xc82>
800050c0:	41 09       	lddsp	r9,sp[0x40]
800050c2:	59 f8       	cp.w	r8,31
800050c4:	e0 89 00 10 	brgt	800050e4 <_vfprintf_r+0xc7c>
800050c8:	f2 ca ff fc 	sub	r10,r9,-4
800050cc:	51 0a       	stdsp	sp[0x40],r10
800050ce:	fa c6 f9 44 	sub	r6,sp,-1724
800050d2:	72 0a       	ld.w	r10,r9[0x0]
800050d4:	ec 08 00 39 	add	r9,r6,r8<<0x3
800050d8:	f3 4a fd 88 	st.w	r9[-632],r10
800050dc:	2f f8       	sub	r8,-1
800050de:	fb 48 06 b4 	st.w	sp[1716],r8
800050e2:	c0 48       	rjmp	800050ea <_vfprintf_r+0xc82>
800050e4:	72 0a       	ld.w	r10,r9[0x0]
800050e6:	2f c9       	sub	r9,-4
800050e8:	51 09       	stdsp	sp[0x40],r9
800050ea:	40 be       	lddsp	lr,sp[0x2c]
800050ec:	b4 0e       	st.h	r10[0x0],lr
800050ee:	fe 9f fa 48 	bral	8000457e <_vfprintf_r+0x116>
800050f2:	fa f8 06 b4 	ld.w	r8,sp[1716]
800050f6:	40 3c       	lddsp	r12,sp[0xc]
800050f8:	58 0c       	cp.w	r12,0
800050fa:	c1 d0       	breq	80005134 <_vfprintf_r+0xccc>
800050fc:	10 36       	cp.w	r6,r8
800050fe:	c0 64       	brge	8000510a <_vfprintf_r+0xca2>
80005100:	fa cb f9 44 	sub	r11,sp,-1724
80005104:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005108:	c1 d8       	rjmp	80005142 <_vfprintf_r+0xcda>
8000510a:	fa c8 f9 50 	sub	r8,sp,-1712
8000510e:	1a d8       	st.w	--sp,r8
80005110:	fa c8 fa b8 	sub	r8,sp,-1352
80005114:	04 9a       	mov	r10,r2
80005116:	1a d8       	st.w	--sp,r8
80005118:	fa c8 fb b4 	sub	r8,sp,-1100
8000511c:	0c 9b       	mov	r11,r6
8000511e:	1a d8       	st.w	--sp,r8
80005120:	08 9c       	mov	r12,r4
80005122:	fa c8 f9 40 	sub	r8,sp,-1728
80005126:	fa c9 ff b4 	sub	r9,sp,-76
8000512a:	fe b0 f8 01 	rcall	8000412c <get_arg>
8000512e:	2f dd       	sub	sp,-12
80005130:	78 0a       	ld.w	r10,r12[0x0]
80005132:	c2 08       	rjmp	80005172 <_vfprintf_r+0xd0a>
80005134:	2f f7       	sub	r7,-1
80005136:	10 39       	cp.w	r9,r8
80005138:	c0 84       	brge	80005148 <_vfprintf_r+0xce0>
8000513a:	fa ca f9 44 	sub	r10,sp,-1724
8000513e:	f4 06 00 36 	add	r6,r10,r6<<0x3
80005142:	ec fa fd 88 	ld.w	r10,r6[-632]
80005146:	c1 68       	rjmp	80005172 <_vfprintf_r+0xd0a>
80005148:	41 09       	lddsp	r9,sp[0x40]
8000514a:	59 f8       	cp.w	r8,31
8000514c:	e0 89 00 10 	brgt	8000516c <_vfprintf_r+0xd04>
80005150:	f2 ca ff fc 	sub	r10,r9,-4
80005154:	51 0a       	stdsp	sp[0x40],r10
80005156:	fa c6 f9 44 	sub	r6,sp,-1724
8000515a:	72 0a       	ld.w	r10,r9[0x0]
8000515c:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005160:	f3 4a fd 88 	st.w	r9[-632],r10
80005164:	2f f8       	sub	r8,-1
80005166:	fb 48 06 b4 	st.w	sp[1716],r8
8000516a:	c0 48       	rjmp	80005172 <_vfprintf_r+0xd0a>
8000516c:	72 0a       	ld.w	r10,r9[0x0]
8000516e:	2f c9       	sub	r9,-4
80005170:	51 09       	stdsp	sp[0x40],r9
80005172:	40 be       	lddsp	lr,sp[0x2c]
80005174:	95 0e       	st.w	r10[0x0],lr
80005176:	fe 9f fa 04 	bral	8000457e <_vfprintf_r+0x116>
8000517a:	50 a7       	stdsp	sp[0x28],r7
8000517c:	50 80       	stdsp	sp[0x20],r0
8000517e:	0c 97       	mov	r7,r6
80005180:	04 94       	mov	r4,r2
80005182:	06 96       	mov	r6,r3
80005184:	02 92       	mov	r2,r1
80005186:	40 93       	lddsp	r3,sp[0x24]
80005188:	10 90       	mov	r0,r8
8000518a:	40 41       	lddsp	r1,sp[0x10]
8000518c:	a5 a5       	sbr	r5,0x4
8000518e:	c0 a8       	rjmp	800051a2 <_vfprintf_r+0xd3a>
80005190:	50 a7       	stdsp	sp[0x28],r7
80005192:	50 80       	stdsp	sp[0x20],r0
80005194:	0c 97       	mov	r7,r6
80005196:	04 94       	mov	r4,r2
80005198:	06 96       	mov	r6,r3
8000519a:	02 92       	mov	r2,r1
8000519c:	40 93       	lddsp	r3,sp[0x24]
8000519e:	10 90       	mov	r0,r8
800051a0:	40 41       	lddsp	r1,sp[0x10]
800051a2:	ed b5 00 05 	bld	r5,0x5
800051a6:	c5 d1       	brne	80005260 <_vfprintf_r+0xdf8>
800051a8:	fa f8 06 b4 	ld.w	r8,sp[1716]
800051ac:	40 3c       	lddsp	r12,sp[0xc]
800051ae:	58 0c       	cp.w	r12,0
800051b0:	c2 60       	breq	800051fc <_vfprintf_r+0xd94>
800051b2:	10 36       	cp.w	r6,r8
800051b4:	c0 a4       	brge	800051c8 <_vfprintf_r+0xd60>
800051b6:	fa cb f9 44 	sub	r11,sp,-1724
800051ba:	f6 06 00 36 	add	r6,r11,r6<<0x3
800051be:	ec e8 fd 88 	ld.d	r8,r6[-632]
800051c2:	fa e9 00 00 	st.d	sp[0],r8
800051c6:	c1 88       	rjmp	800051f6 <_vfprintf_r+0xd8e>
800051c8:	fa c8 f9 50 	sub	r8,sp,-1712
800051cc:	1a d8       	st.w	--sp,r8
800051ce:	fa c8 fa b8 	sub	r8,sp,-1352
800051d2:	04 9a       	mov	r10,r2
800051d4:	1a d8       	st.w	--sp,r8
800051d6:	0c 9b       	mov	r11,r6
800051d8:	fa c8 fb b4 	sub	r8,sp,-1100
800051dc:	08 9c       	mov	r12,r4
800051de:	1a d8       	st.w	--sp,r8
800051e0:	fa c8 f9 40 	sub	r8,sp,-1728
800051e4:	fa c9 ff b4 	sub	r9,sp,-76
800051e8:	fe b0 f7 a2 	rcall	8000412c <get_arg>
800051ec:	2f dd       	sub	sp,-12
800051ee:	f8 ea 00 00 	ld.d	r10,r12[0]
800051f2:	fa eb 00 00 	st.d	sp[0],r10
800051f6:	30 08       	mov	r8,0
800051f8:	e0 8f 03 de 	bral	800059b4 <_vfprintf_r+0x154c>
800051fc:	ee ca ff ff 	sub	r10,r7,-1
80005200:	10 37       	cp.w	r7,r8
80005202:	c0 b4       	brge	80005218 <_vfprintf_r+0xdb0>
80005204:	fa c9 f9 44 	sub	r9,sp,-1724
80005208:	14 97       	mov	r7,r10
8000520a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000520e:	ec ea fd 88 	ld.d	r10,r6[-632]
80005212:	fa eb 00 00 	st.d	sp[0],r10
80005216:	c1 88       	rjmp	80005246 <_vfprintf_r+0xdde>
80005218:	41 09       	lddsp	r9,sp[0x40]
8000521a:	59 f8       	cp.w	r8,31
8000521c:	e0 89 00 18 	brgt	8000524c <_vfprintf_r+0xde4>
80005220:	f2 e6 00 00 	ld.d	r6,r9[0]
80005224:	f2 cb ff f8 	sub	r11,r9,-8
80005228:	fa e7 00 00 	st.d	sp[0],r6
8000522c:	51 0b       	stdsp	sp[0x40],r11
8000522e:	fa c6 f9 44 	sub	r6,sp,-1724
80005232:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005236:	fa e6 00 00 	ld.d	r6,sp[0]
8000523a:	f2 e7 fd 88 	st.d	r9[-632],r6
8000523e:	2f f8       	sub	r8,-1
80005240:	14 97       	mov	r7,r10
80005242:	fb 48 06 b4 	st.w	sp[1716],r8
80005246:	40 38       	lddsp	r8,sp[0xc]
80005248:	e0 8f 03 b6 	bral	800059b4 <_vfprintf_r+0x154c>
8000524c:	f2 e6 00 00 	ld.d	r6,r9[0]
80005250:	40 38       	lddsp	r8,sp[0xc]
80005252:	fa e7 00 00 	st.d	sp[0],r6
80005256:	2f 89       	sub	r9,-8
80005258:	14 97       	mov	r7,r10
8000525a:	51 09       	stdsp	sp[0x40],r9
8000525c:	e0 8f 03 ac 	bral	800059b4 <_vfprintf_r+0x154c>
80005260:	ed b5 00 04 	bld	r5,0x4
80005264:	c1 61       	brne	80005290 <_vfprintf_r+0xe28>
80005266:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000526a:	40 3e       	lddsp	lr,sp[0xc]
8000526c:	58 0e       	cp.w	lr,0
8000526e:	c0 80       	breq	8000527e <_vfprintf_r+0xe16>
80005270:	10 36       	cp.w	r6,r8
80005272:	c6 74       	brge	80005340 <_vfprintf_r+0xed8>
80005274:	fa cc f9 44 	sub	r12,sp,-1724
80005278:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000527c:	c8 08       	rjmp	8000537c <_vfprintf_r+0xf14>
8000527e:	ee ca ff ff 	sub	r10,r7,-1
80005282:	10 37       	cp.w	r7,r8
80005284:	c7 f4       	brge	80005382 <_vfprintf_r+0xf1a>
80005286:	fa cb f9 44 	sub	r11,sp,-1724
8000528a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000528e:	c7 68       	rjmp	8000537a <_vfprintf_r+0xf12>
80005290:	ed b5 00 06 	bld	r5,0x6
80005294:	c4 a1       	brne	80005328 <_vfprintf_r+0xec0>
80005296:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000529a:	40 3c       	lddsp	r12,sp[0xc]
8000529c:	58 0c       	cp.w	r12,0
8000529e:	c1 d0       	breq	800052d8 <_vfprintf_r+0xe70>
800052a0:	10 36       	cp.w	r6,r8
800052a2:	c0 64       	brge	800052ae <_vfprintf_r+0xe46>
800052a4:	fa cb f9 44 	sub	r11,sp,-1724
800052a8:	f6 06 00 36 	add	r6,r11,r6<<0x3
800052ac:	c1 f8       	rjmp	800052ea <_vfprintf_r+0xe82>
800052ae:	fa c8 f9 50 	sub	r8,sp,-1712
800052b2:	1a d8       	st.w	--sp,r8
800052b4:	fa c8 fa b8 	sub	r8,sp,-1352
800052b8:	1a d8       	st.w	--sp,r8
800052ba:	fa c8 fb b4 	sub	r8,sp,-1100
800052be:	1a d8       	st.w	--sp,r8
800052c0:	fa c8 f9 40 	sub	r8,sp,-1728
800052c4:	fa c9 ff b4 	sub	r9,sp,-76
800052c8:	04 9a       	mov	r10,r2
800052ca:	0c 9b       	mov	r11,r6
800052cc:	08 9c       	mov	r12,r4
800052ce:	fe b0 f7 2f 	rcall	8000412c <get_arg>
800052d2:	2f dd       	sub	sp,-12
800052d4:	98 18       	ld.sh	r8,r12[0x2]
800052d6:	c2 68       	rjmp	80005322 <_vfprintf_r+0xeba>
800052d8:	ee ca ff ff 	sub	r10,r7,-1
800052dc:	10 37       	cp.w	r7,r8
800052de:	c0 94       	brge	800052f0 <_vfprintf_r+0xe88>
800052e0:	fa c9 f9 44 	sub	r9,sp,-1724
800052e4:	14 97       	mov	r7,r10
800052e6:	f2 06 00 36 	add	r6,r9,r6<<0x3
800052ea:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800052ee:	c1 a8       	rjmp	80005322 <_vfprintf_r+0xeba>
800052f0:	41 09       	lddsp	r9,sp[0x40]
800052f2:	59 f8       	cp.w	r8,31
800052f4:	e0 89 00 13 	brgt	8000531a <_vfprintf_r+0xeb2>
800052f8:	f2 cb ff fc 	sub	r11,r9,-4
800052fc:	51 0b       	stdsp	sp[0x40],r11
800052fe:	72 09       	ld.w	r9,r9[0x0]
80005300:	fa c6 f9 44 	sub	r6,sp,-1724
80005304:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80005308:	2f f8       	sub	r8,-1
8000530a:	f7 49 fd 88 	st.w	r11[-632],r9
8000530e:	fb 48 06 b4 	st.w	sp[1716],r8
80005312:	14 97       	mov	r7,r10
80005314:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80005318:	c0 58       	rjmp	80005322 <_vfprintf_r+0xeba>
8000531a:	92 18       	ld.sh	r8,r9[0x2]
8000531c:	14 97       	mov	r7,r10
8000531e:	2f c9       	sub	r9,-4
80005320:	51 09       	stdsp	sp[0x40],r9
80005322:	5c 78       	castu.h	r8
80005324:	50 18       	stdsp	sp[0x4],r8
80005326:	c4 68       	rjmp	800053b2 <_vfprintf_r+0xf4a>
80005328:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000532c:	40 3c       	lddsp	r12,sp[0xc]
8000532e:	58 0c       	cp.w	r12,0
80005330:	c1 d0       	breq	8000536a <_vfprintf_r+0xf02>
80005332:	10 36       	cp.w	r6,r8
80005334:	c0 64       	brge	80005340 <_vfprintf_r+0xed8>
80005336:	fa cb f9 44 	sub	r11,sp,-1724
8000533a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000533e:	c1 f8       	rjmp	8000537c <_vfprintf_r+0xf14>
80005340:	fa c8 f9 50 	sub	r8,sp,-1712
80005344:	1a d8       	st.w	--sp,r8
80005346:	fa c8 fa b8 	sub	r8,sp,-1352
8000534a:	0c 9b       	mov	r11,r6
8000534c:	1a d8       	st.w	--sp,r8
8000534e:	fa c8 fb b4 	sub	r8,sp,-1100
80005352:	04 9a       	mov	r10,r2
80005354:	1a d8       	st.w	--sp,r8
80005356:	08 9c       	mov	r12,r4
80005358:	fa c8 f9 40 	sub	r8,sp,-1728
8000535c:	fa c9 ff b4 	sub	r9,sp,-76
80005360:	fe b0 f6 e6 	rcall	8000412c <get_arg>
80005364:	2f dd       	sub	sp,-12
80005366:	78 0b       	ld.w	r11,r12[0x0]
80005368:	c2 48       	rjmp	800053b0 <_vfprintf_r+0xf48>
8000536a:	ee ca ff ff 	sub	r10,r7,-1
8000536e:	10 37       	cp.w	r7,r8
80005370:	c0 94       	brge	80005382 <_vfprintf_r+0xf1a>
80005372:	fa c9 f9 44 	sub	r9,sp,-1724
80005376:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000537a:	14 97       	mov	r7,r10
8000537c:	ec fb fd 88 	ld.w	r11,r6[-632]
80005380:	c1 88       	rjmp	800053b0 <_vfprintf_r+0xf48>
80005382:	41 09       	lddsp	r9,sp[0x40]
80005384:	59 f8       	cp.w	r8,31
80005386:	e0 89 00 11 	brgt	800053a8 <_vfprintf_r+0xf40>
8000538a:	f2 cb ff fc 	sub	r11,r9,-4
8000538e:	51 0b       	stdsp	sp[0x40],r11
80005390:	fa c6 f9 44 	sub	r6,sp,-1724
80005394:	72 0b       	ld.w	r11,r9[0x0]
80005396:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000539a:	f3 4b fd 88 	st.w	r9[-632],r11
8000539e:	2f f8       	sub	r8,-1
800053a0:	14 97       	mov	r7,r10
800053a2:	fb 48 06 b4 	st.w	sp[1716],r8
800053a6:	c0 58       	rjmp	800053b0 <_vfprintf_r+0xf48>
800053a8:	72 0b       	ld.w	r11,r9[0x0]
800053aa:	14 97       	mov	r7,r10
800053ac:	2f c9       	sub	r9,-4
800053ae:	51 09       	stdsp	sp[0x40],r9
800053b0:	50 1b       	stdsp	sp[0x4],r11
800053b2:	30 0e       	mov	lr,0
800053b4:	50 0e       	stdsp	sp[0x0],lr
800053b6:	1c 98       	mov	r8,lr
800053b8:	e0 8f 02 fe 	bral	800059b4 <_vfprintf_r+0x154c>
800053bc:	50 a7       	stdsp	sp[0x28],r7
800053be:	50 80       	stdsp	sp[0x20],r0
800053c0:	0c 97       	mov	r7,r6
800053c2:	04 94       	mov	r4,r2
800053c4:	06 96       	mov	r6,r3
800053c6:	02 92       	mov	r2,r1
800053c8:	40 93       	lddsp	r3,sp[0x24]
800053ca:	40 41       	lddsp	r1,sp[0x10]
800053cc:	0e 99       	mov	r9,r7
800053ce:	fa f8 06 b4 	ld.w	r8,sp[1716]
800053d2:	40 3c       	lddsp	r12,sp[0xc]
800053d4:	58 0c       	cp.w	r12,0
800053d6:	c1 d0       	breq	80005410 <_vfprintf_r+0xfa8>
800053d8:	10 36       	cp.w	r6,r8
800053da:	c0 64       	brge	800053e6 <_vfprintf_r+0xf7e>
800053dc:	fa cb f9 44 	sub	r11,sp,-1724
800053e0:	f6 06 00 36 	add	r6,r11,r6<<0x3
800053e4:	c1 d8       	rjmp	8000541e <_vfprintf_r+0xfb6>
800053e6:	fa c8 f9 50 	sub	r8,sp,-1712
800053ea:	1a d8       	st.w	--sp,r8
800053ec:	fa c8 fa b8 	sub	r8,sp,-1352
800053f0:	1a d8       	st.w	--sp,r8
800053f2:	fa c8 fb b4 	sub	r8,sp,-1100
800053f6:	1a d8       	st.w	--sp,r8
800053f8:	fa c9 ff b4 	sub	r9,sp,-76
800053fc:	fa c8 f9 40 	sub	r8,sp,-1728
80005400:	04 9a       	mov	r10,r2
80005402:	0c 9b       	mov	r11,r6
80005404:	08 9c       	mov	r12,r4
80005406:	fe b0 f6 93 	rcall	8000412c <get_arg>
8000540a:	2f dd       	sub	sp,-12
8000540c:	78 09       	ld.w	r9,r12[0x0]
8000540e:	c2 18       	rjmp	80005450 <_vfprintf_r+0xfe8>
80005410:	2f f7       	sub	r7,-1
80005412:	10 39       	cp.w	r9,r8
80005414:	c0 84       	brge	80005424 <_vfprintf_r+0xfbc>
80005416:	fa ca f9 44 	sub	r10,sp,-1724
8000541a:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000541e:	ec f9 fd 88 	ld.w	r9,r6[-632]
80005422:	c1 78       	rjmp	80005450 <_vfprintf_r+0xfe8>
80005424:	41 09       	lddsp	r9,sp[0x40]
80005426:	59 f8       	cp.w	r8,31
80005428:	e0 89 00 10 	brgt	80005448 <_vfprintf_r+0xfe0>
8000542c:	f2 ca ff fc 	sub	r10,r9,-4
80005430:	51 0a       	stdsp	sp[0x40],r10
80005432:	fa c6 f9 44 	sub	r6,sp,-1724
80005436:	72 09       	ld.w	r9,r9[0x0]
80005438:	ec 08 00 3a 	add	r10,r6,r8<<0x3
8000543c:	f5 49 fd 88 	st.w	r10[-632],r9
80005440:	2f f8       	sub	r8,-1
80005442:	fb 48 06 b4 	st.w	sp[1716],r8
80005446:	c0 58       	rjmp	80005450 <_vfprintf_r+0xfe8>
80005448:	f2 c8 ff fc 	sub	r8,r9,-4
8000544c:	51 08       	stdsp	sp[0x40],r8
8000544e:	72 09       	ld.w	r9,r9[0x0]
80005450:	33 08       	mov	r8,48
80005452:	fb 68 06 b8 	st.b	sp[1720],r8
80005456:	37 88       	mov	r8,120
80005458:	30 0e       	mov	lr,0
8000545a:	fb 68 06 b9 	st.b	sp[1721],r8
8000545e:	4c ac       	lddpc	r12,80005584 <_vfprintf_r+0x111c>
80005460:	50 19       	stdsp	sp[0x4],r9
80005462:	a1 b5       	sbr	r5,0x1
80005464:	50 0e       	stdsp	sp[0x0],lr
80005466:	50 dc       	stdsp	sp[0x34],r12
80005468:	30 28       	mov	r8,2
8000546a:	37 80       	mov	r0,120
8000546c:	e0 8f 02 a4 	bral	800059b4 <_vfprintf_r+0x154c>
80005470:	50 a7       	stdsp	sp[0x28],r7
80005472:	50 80       	stdsp	sp[0x20],r0
80005474:	10 90       	mov	r0,r8
80005476:	30 08       	mov	r8,0
80005478:	fb 68 06 bb 	st.b	sp[1723],r8
8000547c:	0c 97       	mov	r7,r6
8000547e:	04 94       	mov	r4,r2
80005480:	06 96       	mov	r6,r3
80005482:	02 92       	mov	r2,r1
80005484:	40 93       	lddsp	r3,sp[0x24]
80005486:	40 41       	lddsp	r1,sp[0x10]
80005488:	0e 99       	mov	r9,r7
8000548a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000548e:	40 3b       	lddsp	r11,sp[0xc]
80005490:	58 0b       	cp.w	r11,0
80005492:	c1 d0       	breq	800054cc <_vfprintf_r+0x1064>
80005494:	10 36       	cp.w	r6,r8
80005496:	c0 64       	brge	800054a2 <_vfprintf_r+0x103a>
80005498:	fa ca f9 44 	sub	r10,sp,-1724
8000549c:	f4 06 00 36 	add	r6,r10,r6<<0x3
800054a0:	c1 d8       	rjmp	800054da <_vfprintf_r+0x1072>
800054a2:	fa c8 f9 50 	sub	r8,sp,-1712
800054a6:	1a d8       	st.w	--sp,r8
800054a8:	fa c8 fa b8 	sub	r8,sp,-1352
800054ac:	1a d8       	st.w	--sp,r8
800054ae:	fa c8 fb b4 	sub	r8,sp,-1100
800054b2:	0c 9b       	mov	r11,r6
800054b4:	1a d8       	st.w	--sp,r8
800054b6:	04 9a       	mov	r10,r2
800054b8:	fa c8 f9 40 	sub	r8,sp,-1728
800054bc:	fa c9 ff b4 	sub	r9,sp,-76
800054c0:	08 9c       	mov	r12,r4
800054c2:	fe b0 f6 35 	rcall	8000412c <get_arg>
800054c6:	2f dd       	sub	sp,-12
800054c8:	78 06       	ld.w	r6,r12[0x0]
800054ca:	c2 08       	rjmp	8000550a <_vfprintf_r+0x10a2>
800054cc:	2f f7       	sub	r7,-1
800054ce:	10 39       	cp.w	r9,r8
800054d0:	c0 84       	brge	800054e0 <_vfprintf_r+0x1078>
800054d2:	fa c9 f9 44 	sub	r9,sp,-1724
800054d6:	f2 06 00 36 	add	r6,r9,r6<<0x3
800054da:	ec f6 fd 88 	ld.w	r6,r6[-632]
800054de:	c1 68       	rjmp	8000550a <_vfprintf_r+0x10a2>
800054e0:	41 09       	lddsp	r9,sp[0x40]
800054e2:	59 f8       	cp.w	r8,31
800054e4:	e0 89 00 10 	brgt	80005504 <_vfprintf_r+0x109c>
800054e8:	f2 ca ff fc 	sub	r10,r9,-4
800054ec:	51 0a       	stdsp	sp[0x40],r10
800054ee:	72 06       	ld.w	r6,r9[0x0]
800054f0:	fa ce f9 44 	sub	lr,sp,-1724
800054f4:	fc 08 00 39 	add	r9,lr,r8<<0x3
800054f8:	f3 46 fd 88 	st.w	r9[-632],r6
800054fc:	2f f8       	sub	r8,-1
800054fe:	fb 48 06 b4 	st.w	sp[1716],r8
80005502:	c0 48       	rjmp	8000550a <_vfprintf_r+0x10a2>
80005504:	72 06       	ld.w	r6,r9[0x0]
80005506:	2f c9       	sub	r9,-4
80005508:	51 09       	stdsp	sp[0x40],r9
8000550a:	40 2c       	lddsp	r12,sp[0x8]
8000550c:	58 0c       	cp.w	r12,0
8000550e:	c1 05       	brlt	8000552e <_vfprintf_r+0x10c6>
80005510:	18 9a       	mov	r10,r12
80005512:	30 0b       	mov	r11,0
80005514:	0c 9c       	mov	r12,r6
80005516:	e0 a0 14 63 	rcall	80007ddc <memchr>
8000551a:	e0 80 02 e0 	breq	80005ada <_vfprintf_r+0x1672>
8000551e:	f8 06 01 02 	sub	r2,r12,r6
80005522:	40 2b       	lddsp	r11,sp[0x8]
80005524:	16 32       	cp.w	r2,r11
80005526:	e0 89 02 da 	brgt	80005ada <_vfprintf_r+0x1672>
8000552a:	e0 8f 02 d5 	bral	80005ad4 <_vfprintf_r+0x166c>
8000552e:	30 0a       	mov	r10,0
80005530:	0c 9c       	mov	r12,r6
80005532:	50 2a       	stdsp	sp[0x8],r10
80005534:	e0 a0 19 42 	rcall	800087b8 <strlen>
80005538:	18 92       	mov	r2,r12
8000553a:	e0 8f 02 d3 	bral	80005ae0 <_vfprintf_r+0x1678>
8000553e:	50 a7       	stdsp	sp[0x28],r7
80005540:	50 80       	stdsp	sp[0x20],r0
80005542:	0c 97       	mov	r7,r6
80005544:	04 94       	mov	r4,r2
80005546:	06 96       	mov	r6,r3
80005548:	02 92       	mov	r2,r1
8000554a:	40 93       	lddsp	r3,sp[0x24]
8000554c:	10 90       	mov	r0,r8
8000554e:	40 41       	lddsp	r1,sp[0x10]
80005550:	a5 a5       	sbr	r5,0x4
80005552:	c0 a8       	rjmp	80005566 <_vfprintf_r+0x10fe>
80005554:	50 a7       	stdsp	sp[0x28],r7
80005556:	50 80       	stdsp	sp[0x20],r0
80005558:	0c 97       	mov	r7,r6
8000555a:	04 94       	mov	r4,r2
8000555c:	06 96       	mov	r6,r3
8000555e:	02 92       	mov	r2,r1
80005560:	40 93       	lddsp	r3,sp[0x24]
80005562:	10 90       	mov	r0,r8
80005564:	40 41       	lddsp	r1,sp[0x10]
80005566:	ed b5 00 05 	bld	r5,0x5
8000556a:	c5 71       	brne	80005618 <_vfprintf_r+0x11b0>
8000556c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005570:	40 39       	lddsp	r9,sp[0xc]
80005572:	58 09       	cp.w	r9,0
80005574:	c2 20       	breq	800055b8 <_vfprintf_r+0x1150>
80005576:	10 36       	cp.w	r6,r8
80005578:	c0 84       	brge	80005588 <_vfprintf_r+0x1120>
8000557a:	fa c8 f9 44 	sub	r8,sp,-1724
8000557e:	f0 06 00 36 	add	r6,r8,r6<<0x3
80005582:	c2 48       	rjmp	800055ca <_vfprintf_r+0x1162>
80005584:	80 00       	ld.sh	r0,r0[0x0]
80005586:	9d a8       	st.w	lr[0x28],r8
80005588:	fa c8 f9 50 	sub	r8,sp,-1712
8000558c:	1a d8       	st.w	--sp,r8
8000558e:	fa c8 fa b8 	sub	r8,sp,-1352
80005592:	1a d8       	st.w	--sp,r8
80005594:	fa c8 fb b4 	sub	r8,sp,-1100
80005598:	1a d8       	st.w	--sp,r8
8000559a:	fa c8 f9 40 	sub	r8,sp,-1728
8000559e:	fa c9 ff b4 	sub	r9,sp,-76
800055a2:	04 9a       	mov	r10,r2
800055a4:	0c 9b       	mov	r11,r6
800055a6:	08 9c       	mov	r12,r4
800055a8:	fe b0 f5 c2 	rcall	8000412c <get_arg>
800055ac:	2f dd       	sub	sp,-12
800055ae:	f8 e8 00 00 	ld.d	r8,r12[0]
800055b2:	fa e9 00 00 	st.d	sp[0],r8
800055b6:	c2 e8       	rjmp	80005612 <_vfprintf_r+0x11aa>
800055b8:	ee ca ff ff 	sub	r10,r7,-1
800055bc:	10 37       	cp.w	r7,r8
800055be:	c0 b4       	brge	800055d4 <_vfprintf_r+0x116c>
800055c0:	fa c8 f9 44 	sub	r8,sp,-1724
800055c4:	14 97       	mov	r7,r10
800055c6:	f0 06 00 36 	add	r6,r8,r6<<0x3
800055ca:	ec ea fd 88 	ld.d	r10,r6[-632]
800055ce:	fa eb 00 00 	st.d	sp[0],r10
800055d2:	c2 08       	rjmp	80005612 <_vfprintf_r+0x11aa>
800055d4:	41 09       	lddsp	r9,sp[0x40]
800055d6:	59 f8       	cp.w	r8,31
800055d8:	e0 89 00 16 	brgt	80005604 <_vfprintf_r+0x119c>
800055dc:	f2 e6 00 00 	ld.d	r6,r9[0]
800055e0:	f2 cb ff f8 	sub	r11,r9,-8
800055e4:	fa e7 00 00 	st.d	sp[0],r6
800055e8:	51 0b       	stdsp	sp[0x40],r11
800055ea:	fa c6 f9 44 	sub	r6,sp,-1724
800055ee:	ec 08 00 39 	add	r9,r6,r8<<0x3
800055f2:	fa e6 00 00 	ld.d	r6,sp[0]
800055f6:	f2 e7 fd 88 	st.d	r9[-632],r6
800055fa:	2f f8       	sub	r8,-1
800055fc:	14 97       	mov	r7,r10
800055fe:	fb 48 06 b4 	st.w	sp[1716],r8
80005602:	c0 88       	rjmp	80005612 <_vfprintf_r+0x11aa>
80005604:	f2 e6 00 00 	ld.d	r6,r9[0]
80005608:	2f 89       	sub	r9,-8
8000560a:	fa e7 00 00 	st.d	sp[0],r6
8000560e:	51 09       	stdsp	sp[0x40],r9
80005610:	14 97       	mov	r7,r10
80005612:	30 18       	mov	r8,1
80005614:	e0 8f 01 d0 	bral	800059b4 <_vfprintf_r+0x154c>
80005618:	ed b5 00 04 	bld	r5,0x4
8000561c:	c1 61       	brne	80005648 <_vfprintf_r+0x11e0>
8000561e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005622:	40 3e       	lddsp	lr,sp[0xc]
80005624:	58 0e       	cp.w	lr,0
80005626:	c0 80       	breq	80005636 <_vfprintf_r+0x11ce>
80005628:	10 36       	cp.w	r6,r8
8000562a:	c6 74       	brge	800056f8 <_vfprintf_r+0x1290>
8000562c:	fa cc f9 44 	sub	r12,sp,-1724
80005630:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005634:	c8 08       	rjmp	80005734 <_vfprintf_r+0x12cc>
80005636:	ee ca ff ff 	sub	r10,r7,-1
8000563a:	10 37       	cp.w	r7,r8
8000563c:	c7 f4       	brge	8000573a <_vfprintf_r+0x12d2>
8000563e:	fa cb f9 44 	sub	r11,sp,-1724
80005642:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005646:	c7 68       	rjmp	80005732 <_vfprintf_r+0x12ca>
80005648:	ed b5 00 06 	bld	r5,0x6
8000564c:	c4 a1       	brne	800056e0 <_vfprintf_r+0x1278>
8000564e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005652:	40 3c       	lddsp	r12,sp[0xc]
80005654:	58 0c       	cp.w	r12,0
80005656:	c1 d0       	breq	80005690 <_vfprintf_r+0x1228>
80005658:	10 36       	cp.w	r6,r8
8000565a:	c0 64       	brge	80005666 <_vfprintf_r+0x11fe>
8000565c:	fa cb f9 44 	sub	r11,sp,-1724
80005660:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005664:	c1 f8       	rjmp	800056a2 <_vfprintf_r+0x123a>
80005666:	fa c8 f9 50 	sub	r8,sp,-1712
8000566a:	1a d8       	st.w	--sp,r8
8000566c:	fa c8 fa b8 	sub	r8,sp,-1352
80005670:	1a d8       	st.w	--sp,r8
80005672:	fa c8 fb b4 	sub	r8,sp,-1100
80005676:	1a d8       	st.w	--sp,r8
80005678:	fa c8 f9 40 	sub	r8,sp,-1728
8000567c:	fa c9 ff b4 	sub	r9,sp,-76
80005680:	04 9a       	mov	r10,r2
80005682:	0c 9b       	mov	r11,r6
80005684:	08 9c       	mov	r12,r4
80005686:	fe b0 f5 53 	rcall	8000412c <get_arg>
8000568a:	2f dd       	sub	sp,-12
8000568c:	98 18       	ld.sh	r8,r12[0x2]
8000568e:	c2 68       	rjmp	800056da <_vfprintf_r+0x1272>
80005690:	ee ca ff ff 	sub	r10,r7,-1
80005694:	10 37       	cp.w	r7,r8
80005696:	c0 94       	brge	800056a8 <_vfprintf_r+0x1240>
80005698:	fa c9 f9 44 	sub	r9,sp,-1724
8000569c:	14 97       	mov	r7,r10
8000569e:	f2 06 00 36 	add	r6,r9,r6<<0x3
800056a2:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800056a6:	c1 a8       	rjmp	800056da <_vfprintf_r+0x1272>
800056a8:	41 09       	lddsp	r9,sp[0x40]
800056aa:	59 f8       	cp.w	r8,31
800056ac:	e0 89 00 13 	brgt	800056d2 <_vfprintf_r+0x126a>
800056b0:	f2 cb ff fc 	sub	r11,r9,-4
800056b4:	51 0b       	stdsp	sp[0x40],r11
800056b6:	72 09       	ld.w	r9,r9[0x0]
800056b8:	fa c6 f9 44 	sub	r6,sp,-1724
800056bc:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800056c0:	2f f8       	sub	r8,-1
800056c2:	f7 49 fd 88 	st.w	r11[-632],r9
800056c6:	fb 48 06 b4 	st.w	sp[1716],r8
800056ca:	14 97       	mov	r7,r10
800056cc:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800056d0:	c0 58       	rjmp	800056da <_vfprintf_r+0x1272>
800056d2:	92 18       	ld.sh	r8,r9[0x2]
800056d4:	14 97       	mov	r7,r10
800056d6:	2f c9       	sub	r9,-4
800056d8:	51 09       	stdsp	sp[0x40],r9
800056da:	5c 78       	castu.h	r8
800056dc:	50 18       	stdsp	sp[0x4],r8
800056de:	c4 68       	rjmp	8000576a <_vfprintf_r+0x1302>
800056e0:	fa f8 06 b4 	ld.w	r8,sp[1716]
800056e4:	40 3c       	lddsp	r12,sp[0xc]
800056e6:	58 0c       	cp.w	r12,0
800056e8:	c1 d0       	breq	80005722 <_vfprintf_r+0x12ba>
800056ea:	10 36       	cp.w	r6,r8
800056ec:	c0 64       	brge	800056f8 <_vfprintf_r+0x1290>
800056ee:	fa cb f9 44 	sub	r11,sp,-1724
800056f2:	f6 06 00 36 	add	r6,r11,r6<<0x3
800056f6:	c1 f8       	rjmp	80005734 <_vfprintf_r+0x12cc>
800056f8:	fa c8 f9 50 	sub	r8,sp,-1712
800056fc:	1a d8       	st.w	--sp,r8
800056fe:	fa c8 fa b8 	sub	r8,sp,-1352
80005702:	0c 9b       	mov	r11,r6
80005704:	1a d8       	st.w	--sp,r8
80005706:	fa c8 fb b4 	sub	r8,sp,-1100
8000570a:	04 9a       	mov	r10,r2
8000570c:	1a d8       	st.w	--sp,r8
8000570e:	08 9c       	mov	r12,r4
80005710:	fa c8 f9 40 	sub	r8,sp,-1728
80005714:	fa c9 ff b4 	sub	r9,sp,-76
80005718:	fe b0 f5 0a 	rcall	8000412c <get_arg>
8000571c:	2f dd       	sub	sp,-12
8000571e:	78 0b       	ld.w	r11,r12[0x0]
80005720:	c2 48       	rjmp	80005768 <_vfprintf_r+0x1300>
80005722:	ee ca ff ff 	sub	r10,r7,-1
80005726:	10 37       	cp.w	r7,r8
80005728:	c0 94       	brge	8000573a <_vfprintf_r+0x12d2>
8000572a:	fa c9 f9 44 	sub	r9,sp,-1724
8000572e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005732:	14 97       	mov	r7,r10
80005734:	ec fb fd 88 	ld.w	r11,r6[-632]
80005738:	c1 88       	rjmp	80005768 <_vfprintf_r+0x1300>
8000573a:	41 09       	lddsp	r9,sp[0x40]
8000573c:	59 f8       	cp.w	r8,31
8000573e:	e0 89 00 11 	brgt	80005760 <_vfprintf_r+0x12f8>
80005742:	f2 cb ff fc 	sub	r11,r9,-4
80005746:	51 0b       	stdsp	sp[0x40],r11
80005748:	fa c6 f9 44 	sub	r6,sp,-1724
8000574c:	72 0b       	ld.w	r11,r9[0x0]
8000574e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005752:	f3 4b fd 88 	st.w	r9[-632],r11
80005756:	2f f8       	sub	r8,-1
80005758:	14 97       	mov	r7,r10
8000575a:	fb 48 06 b4 	st.w	sp[1716],r8
8000575e:	c0 58       	rjmp	80005768 <_vfprintf_r+0x1300>
80005760:	72 0b       	ld.w	r11,r9[0x0]
80005762:	14 97       	mov	r7,r10
80005764:	2f c9       	sub	r9,-4
80005766:	51 09       	stdsp	sp[0x40],r9
80005768:	50 1b       	stdsp	sp[0x4],r11
8000576a:	30 0e       	mov	lr,0
8000576c:	30 18       	mov	r8,1
8000576e:	50 0e       	stdsp	sp[0x0],lr
80005770:	c2 29       	rjmp	800059b4 <_vfprintf_r+0x154c>
80005772:	50 a7       	stdsp	sp[0x28],r7
80005774:	50 80       	stdsp	sp[0x20],r0
80005776:	0c 97       	mov	r7,r6
80005778:	04 94       	mov	r4,r2
8000577a:	06 96       	mov	r6,r3
8000577c:	02 92       	mov	r2,r1
8000577e:	4d 3c       	lddpc	r12,800058c8 <_vfprintf_r+0x1460>
80005780:	40 93       	lddsp	r3,sp[0x24]
80005782:	10 90       	mov	r0,r8
80005784:	40 41       	lddsp	r1,sp[0x10]
80005786:	50 dc       	stdsp	sp[0x34],r12
80005788:	ed b5 00 05 	bld	r5,0x5
8000578c:	c5 51       	brne	80005836 <_vfprintf_r+0x13ce>
8000578e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005792:	40 3b       	lddsp	r11,sp[0xc]
80005794:	58 0b       	cp.w	r11,0
80005796:	c2 20       	breq	800057da <_vfprintf_r+0x1372>
80005798:	10 36       	cp.w	r6,r8
8000579a:	c0 a4       	brge	800057ae <_vfprintf_r+0x1346>
8000579c:	fa ca f9 44 	sub	r10,sp,-1724
800057a0:	f4 06 00 36 	add	r6,r10,r6<<0x3
800057a4:	ec e8 fd 88 	ld.d	r8,r6[-632]
800057a8:	fa e9 00 00 	st.d	sp[0],r8
800057ac:	cf 38       	rjmp	80005992 <_vfprintf_r+0x152a>
800057ae:	fa c8 f9 50 	sub	r8,sp,-1712
800057b2:	1a d8       	st.w	--sp,r8
800057b4:	fa c8 fa b8 	sub	r8,sp,-1352
800057b8:	04 9a       	mov	r10,r2
800057ba:	1a d8       	st.w	--sp,r8
800057bc:	0c 9b       	mov	r11,r6
800057be:	fa c8 fb b4 	sub	r8,sp,-1100
800057c2:	08 9c       	mov	r12,r4
800057c4:	1a d8       	st.w	--sp,r8
800057c6:	fa c8 f9 40 	sub	r8,sp,-1728
800057ca:	fa c9 ff b4 	sub	r9,sp,-76
800057ce:	fe b0 f4 af 	rcall	8000412c <get_arg>
800057d2:	2f dd       	sub	sp,-12
800057d4:	f8 ea 00 00 	ld.d	r10,r12[0]
800057d8:	c0 c8       	rjmp	800057f0 <_vfprintf_r+0x1388>
800057da:	ee ca ff ff 	sub	r10,r7,-1
800057de:	10 37       	cp.w	r7,r8
800057e0:	c0 b4       	brge	800057f6 <_vfprintf_r+0x138e>
800057e2:	fa c9 f9 44 	sub	r9,sp,-1724
800057e6:	14 97       	mov	r7,r10
800057e8:	f2 06 00 36 	add	r6,r9,r6<<0x3
800057ec:	ec ea fd 88 	ld.d	r10,r6[-632]
800057f0:	fa eb 00 00 	st.d	sp[0],r10
800057f4:	cc f8       	rjmp	80005992 <_vfprintf_r+0x152a>
800057f6:	41 09       	lddsp	r9,sp[0x40]
800057f8:	59 f8       	cp.w	r8,31
800057fa:	e0 89 00 16 	brgt	80005826 <_vfprintf_r+0x13be>
800057fe:	f2 e6 00 00 	ld.d	r6,r9[0]
80005802:	f2 cb ff f8 	sub	r11,r9,-8
80005806:	fa e7 00 00 	st.d	sp[0],r6
8000580a:	51 0b       	stdsp	sp[0x40],r11
8000580c:	fa c6 f9 44 	sub	r6,sp,-1724
80005810:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005814:	fa e6 00 00 	ld.d	r6,sp[0]
80005818:	f2 e7 fd 88 	st.d	r9[-632],r6
8000581c:	2f f8       	sub	r8,-1
8000581e:	14 97       	mov	r7,r10
80005820:	fb 48 06 b4 	st.w	sp[1716],r8
80005824:	cb 78       	rjmp	80005992 <_vfprintf_r+0x152a>
80005826:	f2 e6 00 00 	ld.d	r6,r9[0]
8000582a:	2f 89       	sub	r9,-8
8000582c:	fa e7 00 00 	st.d	sp[0],r6
80005830:	51 09       	stdsp	sp[0x40],r9
80005832:	14 97       	mov	r7,r10
80005834:	ca f8       	rjmp	80005992 <_vfprintf_r+0x152a>
80005836:	ed b5 00 04 	bld	r5,0x4
8000583a:	c1 71       	brne	80005868 <_vfprintf_r+0x1400>
8000583c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005840:	40 3e       	lddsp	lr,sp[0xc]
80005842:	58 0e       	cp.w	lr,0
80005844:	c0 80       	breq	80005854 <_vfprintf_r+0x13ec>
80005846:	10 36       	cp.w	r6,r8
80005848:	c6 a4       	brge	8000591c <_vfprintf_r+0x14b4>
8000584a:	fa cc f9 44 	sub	r12,sp,-1724
8000584e:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005852:	c8 38       	rjmp	80005958 <_vfprintf_r+0x14f0>
80005854:	ee ca ff ff 	sub	r10,r7,-1
80005858:	10 37       	cp.w	r7,r8
8000585a:	e0 84 00 82 	brge	8000595e <_vfprintf_r+0x14f6>
8000585e:	fa cb f9 44 	sub	r11,sp,-1724
80005862:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005866:	c7 88       	rjmp	80005956 <_vfprintf_r+0x14ee>
80005868:	ed b5 00 06 	bld	r5,0x6
8000586c:	c4 c1       	brne	80005904 <_vfprintf_r+0x149c>
8000586e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005872:	40 3c       	lddsp	r12,sp[0xc]
80005874:	58 0c       	cp.w	r12,0
80005876:	c1 d0       	breq	800058b0 <_vfprintf_r+0x1448>
80005878:	10 36       	cp.w	r6,r8
8000587a:	c0 64       	brge	80005886 <_vfprintf_r+0x141e>
8000587c:	fa cb f9 44 	sub	r11,sp,-1724
80005880:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005884:	c1 f8       	rjmp	800058c2 <_vfprintf_r+0x145a>
80005886:	fa c8 f9 50 	sub	r8,sp,-1712
8000588a:	1a d8       	st.w	--sp,r8
8000588c:	fa c8 fa b8 	sub	r8,sp,-1352
80005890:	1a d8       	st.w	--sp,r8
80005892:	fa c8 fb b4 	sub	r8,sp,-1100
80005896:	1a d8       	st.w	--sp,r8
80005898:	fa c8 f9 40 	sub	r8,sp,-1728
8000589c:	fa c9 ff b4 	sub	r9,sp,-76
800058a0:	04 9a       	mov	r10,r2
800058a2:	0c 9b       	mov	r11,r6
800058a4:	08 9c       	mov	r12,r4
800058a6:	fe b0 f4 43 	rcall	8000412c <get_arg>
800058aa:	2f dd       	sub	sp,-12
800058ac:	98 18       	ld.sh	r8,r12[0x2]
800058ae:	c2 88       	rjmp	800058fe <_vfprintf_r+0x1496>
800058b0:	ee ca ff ff 	sub	r10,r7,-1
800058b4:	10 37       	cp.w	r7,r8
800058b6:	c0 b4       	brge	800058cc <_vfprintf_r+0x1464>
800058b8:	fa c9 f9 44 	sub	r9,sp,-1724
800058bc:	14 97       	mov	r7,r10
800058be:	f2 06 00 36 	add	r6,r9,r6<<0x3
800058c2:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800058c6:	c1 c8       	rjmp	800058fe <_vfprintf_r+0x1496>
800058c8:	80 00       	ld.sh	r0,r0[0x0]
800058ca:	9d a8       	st.w	lr[0x28],r8
800058cc:	41 09       	lddsp	r9,sp[0x40]
800058ce:	59 f8       	cp.w	r8,31
800058d0:	e0 89 00 13 	brgt	800058f6 <_vfprintf_r+0x148e>
800058d4:	f2 cb ff fc 	sub	r11,r9,-4
800058d8:	51 0b       	stdsp	sp[0x40],r11
800058da:	72 09       	ld.w	r9,r9[0x0]
800058dc:	fa c6 f9 44 	sub	r6,sp,-1724
800058e0:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800058e4:	2f f8       	sub	r8,-1
800058e6:	f7 49 fd 88 	st.w	r11[-632],r9
800058ea:	fb 48 06 b4 	st.w	sp[1716],r8
800058ee:	14 97       	mov	r7,r10
800058f0:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800058f4:	c0 58       	rjmp	800058fe <_vfprintf_r+0x1496>
800058f6:	92 18       	ld.sh	r8,r9[0x2]
800058f8:	14 97       	mov	r7,r10
800058fa:	2f c9       	sub	r9,-4
800058fc:	51 09       	stdsp	sp[0x40],r9
800058fe:	5c 78       	castu.h	r8
80005900:	50 18       	stdsp	sp[0x4],r8
80005902:	c4 68       	rjmp	8000598e <_vfprintf_r+0x1526>
80005904:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005908:	40 3c       	lddsp	r12,sp[0xc]
8000590a:	58 0c       	cp.w	r12,0
8000590c:	c1 d0       	breq	80005946 <_vfprintf_r+0x14de>
8000590e:	10 36       	cp.w	r6,r8
80005910:	c0 64       	brge	8000591c <_vfprintf_r+0x14b4>
80005912:	fa cb f9 44 	sub	r11,sp,-1724
80005916:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000591a:	c1 f8       	rjmp	80005958 <_vfprintf_r+0x14f0>
8000591c:	fa c8 f9 50 	sub	r8,sp,-1712
80005920:	1a d8       	st.w	--sp,r8
80005922:	fa c8 fa b8 	sub	r8,sp,-1352
80005926:	0c 9b       	mov	r11,r6
80005928:	1a d8       	st.w	--sp,r8
8000592a:	fa c8 fb b4 	sub	r8,sp,-1100
8000592e:	04 9a       	mov	r10,r2
80005930:	1a d8       	st.w	--sp,r8
80005932:	08 9c       	mov	r12,r4
80005934:	fa c8 f9 40 	sub	r8,sp,-1728
80005938:	fa c9 ff b4 	sub	r9,sp,-76
8000593c:	fe b0 f3 f8 	rcall	8000412c <get_arg>
80005940:	2f dd       	sub	sp,-12
80005942:	78 0b       	ld.w	r11,r12[0x0]
80005944:	c2 48       	rjmp	8000598c <_vfprintf_r+0x1524>
80005946:	ee ca ff ff 	sub	r10,r7,-1
8000594a:	10 37       	cp.w	r7,r8
8000594c:	c0 94       	brge	8000595e <_vfprintf_r+0x14f6>
8000594e:	fa c9 f9 44 	sub	r9,sp,-1724
80005952:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005956:	14 97       	mov	r7,r10
80005958:	ec fb fd 88 	ld.w	r11,r6[-632]
8000595c:	c1 88       	rjmp	8000598c <_vfprintf_r+0x1524>
8000595e:	41 09       	lddsp	r9,sp[0x40]
80005960:	59 f8       	cp.w	r8,31
80005962:	e0 89 00 11 	brgt	80005984 <_vfprintf_r+0x151c>
80005966:	f2 cb ff fc 	sub	r11,r9,-4
8000596a:	51 0b       	stdsp	sp[0x40],r11
8000596c:	fa c6 f9 44 	sub	r6,sp,-1724
80005970:	72 0b       	ld.w	r11,r9[0x0]
80005972:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005976:	f3 4b fd 88 	st.w	r9[-632],r11
8000597a:	2f f8       	sub	r8,-1
8000597c:	14 97       	mov	r7,r10
8000597e:	fb 48 06 b4 	st.w	sp[1716],r8
80005982:	c0 58       	rjmp	8000598c <_vfprintf_r+0x1524>
80005984:	72 0b       	ld.w	r11,r9[0x0]
80005986:	14 97       	mov	r7,r10
80005988:	2f c9       	sub	r9,-4
8000598a:	51 09       	stdsp	sp[0x40],r9
8000598c:	50 1b       	stdsp	sp[0x4],r11
8000598e:	30 0e       	mov	lr,0
80005990:	50 0e       	stdsp	sp[0x0],lr
80005992:	40 08       	lddsp	r8,sp[0x0]
80005994:	40 1c       	lddsp	r12,sp[0x4]
80005996:	18 48       	or	r8,r12
80005998:	5f 19       	srne	r9
8000599a:	0a 98       	mov	r8,r5
8000599c:	eb e9 00 09 	and	r9,r5,r9
800059a0:	a1 b8       	sbr	r8,0x1
800059a2:	58 09       	cp.w	r9,0
800059a4:	c0 70       	breq	800059b2 <_vfprintf_r+0x154a>
800059a6:	10 95       	mov	r5,r8
800059a8:	fb 60 06 b9 	st.b	sp[1721],r0
800059ac:	33 08       	mov	r8,48
800059ae:	fb 68 06 b8 	st.b	sp[1720],r8
800059b2:	30 28       	mov	r8,2
800059b4:	30 09       	mov	r9,0
800059b6:	fb 69 06 bb 	st.b	sp[1723],r9
800059ba:	0a 99       	mov	r9,r5
800059bc:	a7 d9       	cbr	r9,0x7
800059be:	40 2b       	lddsp	r11,sp[0x8]
800059c0:	40 16       	lddsp	r6,sp[0x4]
800059c2:	58 0b       	cp.w	r11,0
800059c4:	5f 1a       	srne	r10
800059c6:	f2 05 17 40 	movge	r5,r9
800059ca:	fa c2 f9 78 	sub	r2,sp,-1672
800059ce:	40 09       	lddsp	r9,sp[0x0]
800059d0:	0c 49       	or	r9,r6
800059d2:	5f 19       	srne	r9
800059d4:	f5 e9 10 09 	or	r9,r10,r9
800059d8:	c5 c0       	breq	80005a90 <_vfprintf_r+0x1628>
800059da:	30 19       	mov	r9,1
800059dc:	f2 08 18 00 	cp.b	r8,r9
800059e0:	c0 60       	breq	800059ec <_vfprintf_r+0x1584>
800059e2:	30 29       	mov	r9,2
800059e4:	f2 08 18 00 	cp.b	r8,r9
800059e8:	c0 41       	brne	800059f0 <_vfprintf_r+0x1588>
800059ea:	c3 c8       	rjmp	80005a62 <_vfprintf_r+0x15fa>
800059ec:	04 96       	mov	r6,r2
800059ee:	c3 08       	rjmp	80005a4e <_vfprintf_r+0x15e6>
800059f0:	04 96       	mov	r6,r2
800059f2:	fa e8 00 00 	ld.d	r8,sp[0]
800059f6:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
800059fa:	2d 0a       	sub	r10,-48
800059fc:	0c fa       	st.b	--r6,r10
800059fe:	f0 0b 16 03 	lsr	r11,r8,0x3
80005a02:	f2 0c 16 03 	lsr	r12,r9,0x3
80005a06:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
80005a0a:	18 99       	mov	r9,r12
80005a0c:	16 98       	mov	r8,r11
80005a0e:	58 08       	cp.w	r8,0
80005a10:	5c 29       	cpc	r9
80005a12:	cf 21       	brne	800059f6 <_vfprintf_r+0x158e>
80005a14:	fa e9 00 00 	st.d	sp[0],r8
80005a18:	ed b5 00 00 	bld	r5,0x0
80005a1c:	c4 51       	brne	80005aa6 <_vfprintf_r+0x163e>
80005a1e:	33 09       	mov	r9,48
80005a20:	f2 0a 18 00 	cp.b	r10,r9
80005a24:	c4 10       	breq	80005aa6 <_vfprintf_r+0x163e>
80005a26:	0c f9       	st.b	--r6,r9
80005a28:	c3 f8       	rjmp	80005aa6 <_vfprintf_r+0x163e>
80005a2a:	fa ea 00 00 	ld.d	r10,sp[0]
80005a2e:	30 a8       	mov	r8,10
80005a30:	30 09       	mov	r9,0
80005a32:	e0 a0 1d 0b 	rcall	80009448 <__avr32_umod64>
80005a36:	30 a8       	mov	r8,10
80005a38:	2d 0a       	sub	r10,-48
80005a3a:	30 09       	mov	r9,0
80005a3c:	ac 8a       	st.b	r6[0x0],r10
80005a3e:	fa ea 00 00 	ld.d	r10,sp[0]
80005a42:	fe b0 f0 f7 	rcall	80003c30 <__avr32_udiv64>
80005a46:	16 99       	mov	r9,r11
80005a48:	14 98       	mov	r8,r10
80005a4a:	fa e9 00 00 	st.d	sp[0],r8
80005a4e:	20 16       	sub	r6,1
80005a50:	fa ea 00 00 	ld.d	r10,sp[0]
80005a54:	58 9a       	cp.w	r10,9
80005a56:	5c 2b       	cpc	r11
80005a58:	fe 9b ff e9 	brhi	80005a2a <_vfprintf_r+0x15c2>
80005a5c:	1b f8       	ld.ub	r8,sp[0x7]
80005a5e:	2d 08       	sub	r8,-48
80005a60:	c2 08       	rjmp	80005aa0 <_vfprintf_r+0x1638>
80005a62:	04 96       	mov	r6,r2
80005a64:	fa e8 00 00 	ld.d	r8,sp[0]
80005a68:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80005a6c:	40 de       	lddsp	lr,sp[0x34]
80005a6e:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
80005a72:	0c fa       	st.b	--r6,r10
80005a74:	f2 0b 16 04 	lsr	r11,r9,0x4
80005a78:	f0 0a 16 04 	lsr	r10,r8,0x4
80005a7c:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80005a80:	16 99       	mov	r9,r11
80005a82:	14 98       	mov	r8,r10
80005a84:	58 08       	cp.w	r8,0
80005a86:	5c 29       	cpc	r9
80005a88:	cf 01       	brne	80005a68 <_vfprintf_r+0x1600>
80005a8a:	fa e9 00 00 	st.d	sp[0],r8
80005a8e:	c0 c8       	rjmp	80005aa6 <_vfprintf_r+0x163e>
80005a90:	58 08       	cp.w	r8,0
80005a92:	c0 91       	brne	80005aa4 <_vfprintf_r+0x163c>
80005a94:	ed b5 00 00 	bld	r5,0x0
80005a98:	c0 61       	brne	80005aa4 <_vfprintf_r+0x163c>
80005a9a:	fa c6 f9 79 	sub	r6,sp,-1671
80005a9e:	33 08       	mov	r8,48
80005aa0:	ac 88       	st.b	r6[0x0],r8
80005aa2:	c0 28       	rjmp	80005aa6 <_vfprintf_r+0x163e>
80005aa4:	04 96       	mov	r6,r2
80005aa6:	0c 12       	sub	r2,r6
80005aa8:	c1 c8       	rjmp	80005ae0 <_vfprintf_r+0x1678>
80005aaa:	50 a7       	stdsp	sp[0x28],r7
80005aac:	50 80       	stdsp	sp[0x20],r0
80005aae:	40 93       	lddsp	r3,sp[0x24]
80005ab0:	0c 97       	mov	r7,r6
80005ab2:	10 90       	mov	r0,r8
80005ab4:	04 94       	mov	r4,r2
80005ab6:	40 41       	lddsp	r1,sp[0x10]
80005ab8:	58 08       	cp.w	r8,0
80005aba:	e0 80 04 51 	breq	8000635c <_vfprintf_r+0x1ef4>
80005abe:	fb 68 06 60 	st.b	sp[1632],r8
80005ac2:	30 0c       	mov	r12,0
80005ac4:	30 08       	mov	r8,0
80005ac6:	30 12       	mov	r2,1
80005ac8:	fb 68 06 bb 	st.b	sp[1723],r8
80005acc:	50 2c       	stdsp	sp[0x8],r12
80005ace:	fa c6 f9 a0 	sub	r6,sp,-1632
80005ad2:	c0 78       	rjmp	80005ae0 <_vfprintf_r+0x1678>
80005ad4:	30 0b       	mov	r11,0
80005ad6:	50 2b       	stdsp	sp[0x8],r11
80005ad8:	c0 48       	rjmp	80005ae0 <_vfprintf_r+0x1678>
80005ada:	40 22       	lddsp	r2,sp[0x8]
80005adc:	30 0a       	mov	r10,0
80005ade:	50 2a       	stdsp	sp[0x8],r10
80005ae0:	40 29       	lddsp	r9,sp[0x8]
80005ae2:	e4 09 0c 49 	max	r9,r2,r9
80005ae6:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80005aea:	50 39       	stdsp	sp[0xc],r9
80005aec:	0a 9e       	mov	lr,r5
80005aee:	30 09       	mov	r9,0
80005af0:	e2 1e 00 02 	andl	lr,0x2,COH
80005af4:	f2 08 18 00 	cp.b	r8,r9
80005af8:	fb f8 10 03 	ld.wne	r8,sp[0xc]
80005afc:	f7 b8 01 ff 	subne	r8,-1
80005b00:	fb f8 1a 03 	st.wne	sp[0xc],r8
80005b04:	0a 9b       	mov	r11,r5
80005b06:	58 0e       	cp.w	lr,0
80005b08:	fb fc 10 03 	ld.wne	r12,sp[0xc]
80005b0c:	f7 bc 01 fe 	subne	r12,-2
80005b10:	fb fc 1a 03 	st.wne	sp[0xc],r12
80005b14:	e2 1b 00 84 	andl	r11,0x84,COH
80005b18:	50 fe       	stdsp	sp[0x3c],lr
80005b1a:	50 9b       	stdsp	sp[0x24],r11
80005b1c:	c4 51       	brne	80005ba6 <_vfprintf_r+0x173e>
80005b1e:	40 8a       	lddsp	r10,sp[0x20]
80005b20:	40 39       	lddsp	r9,sp[0xc]
80005b22:	12 1a       	sub	r10,r9
80005b24:	50 4a       	stdsp	sp[0x10],r10
80005b26:	58 0a       	cp.w	r10,0
80005b28:	e0 89 00 1f 	brgt	80005b66 <_vfprintf_r+0x16fe>
80005b2c:	c3 d8       	rjmp	80005ba6 <_vfprintf_r+0x173e>
80005b2e:	2f 09       	sub	r9,-16
80005b30:	2f f8       	sub	r8,-1
80005b32:	4c ee       	lddpc	lr,80005c68 <_vfprintf_r+0x1800>
80005b34:	31 0c       	mov	r12,16
80005b36:	fb 49 06 90 	st.w	sp[1680],r9
80005b3a:	87 0e       	st.w	r3[0x0],lr
80005b3c:	87 1c       	st.w	r3[0x4],r12
80005b3e:	fb 48 06 8c 	st.w	sp[1676],r8
80005b42:	58 78       	cp.w	r8,7
80005b44:	e0 89 00 04 	brgt	80005b4c <_vfprintf_r+0x16e4>
80005b48:	2f 83       	sub	r3,-8
80005b4a:	c0 b8       	rjmp	80005b60 <_vfprintf_r+0x16f8>
80005b4c:	fa ca f9 78 	sub	r10,sp,-1672
80005b50:	02 9b       	mov	r11,r1
80005b52:	08 9c       	mov	r12,r4
80005b54:	fe b0 f4 7c 	rcall	8000444c <__sprint_r>
80005b58:	e0 81 04 13 	brne	8000637e <_vfprintf_r+0x1f16>
80005b5c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005b60:	40 4b       	lddsp	r11,sp[0x10]
80005b62:	21 0b       	sub	r11,16
80005b64:	50 4b       	stdsp	sp[0x10],r11
80005b66:	fa f9 06 90 	ld.w	r9,sp[1680]
80005b6a:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005b6e:	4b fa       	lddpc	r10,80005c68 <_vfprintf_r+0x1800>
80005b70:	40 4e       	lddsp	lr,sp[0x10]
80005b72:	59 0e       	cp.w	lr,16
80005b74:	fe 99 ff dd 	brgt	80005b2e <_vfprintf_r+0x16c6>
80005b78:	1c 09       	add	r9,lr
80005b7a:	2f f8       	sub	r8,-1
80005b7c:	87 0a       	st.w	r3[0x0],r10
80005b7e:	fb 49 06 90 	st.w	sp[1680],r9
80005b82:	87 1e       	st.w	r3[0x4],lr
80005b84:	fb 48 06 8c 	st.w	sp[1676],r8
80005b88:	58 78       	cp.w	r8,7
80005b8a:	e0 89 00 04 	brgt	80005b92 <_vfprintf_r+0x172a>
80005b8e:	2f 83       	sub	r3,-8
80005b90:	c0 b8       	rjmp	80005ba6 <_vfprintf_r+0x173e>
80005b92:	fa ca f9 78 	sub	r10,sp,-1672
80005b96:	02 9b       	mov	r11,r1
80005b98:	08 9c       	mov	r12,r4
80005b9a:	fe b0 f4 59 	rcall	8000444c <__sprint_r>
80005b9e:	e0 81 03 f0 	brne	8000637e <_vfprintf_r+0x1f16>
80005ba2:	fa c3 f9 e0 	sub	r3,sp,-1568
80005ba6:	30 09       	mov	r9,0
80005ba8:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80005bac:	f2 08 18 00 	cp.b	r8,r9
80005bb0:	c1 f0       	breq	80005bee <_vfprintf_r+0x1786>
80005bb2:	fa f8 06 90 	ld.w	r8,sp[1680]
80005bb6:	fa c9 f9 45 	sub	r9,sp,-1723
80005bba:	2f f8       	sub	r8,-1
80005bbc:	87 09       	st.w	r3[0x0],r9
80005bbe:	fb 48 06 90 	st.w	sp[1680],r8
80005bc2:	30 19       	mov	r9,1
80005bc4:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005bc8:	87 19       	st.w	r3[0x4],r9
80005bca:	2f f8       	sub	r8,-1
80005bcc:	fb 48 06 8c 	st.w	sp[1676],r8
80005bd0:	58 78       	cp.w	r8,7
80005bd2:	e0 89 00 04 	brgt	80005bda <_vfprintf_r+0x1772>
80005bd6:	2f 83       	sub	r3,-8
80005bd8:	c0 b8       	rjmp	80005bee <_vfprintf_r+0x1786>
80005bda:	fa ca f9 78 	sub	r10,sp,-1672
80005bde:	02 9b       	mov	r11,r1
80005be0:	08 9c       	mov	r12,r4
80005be2:	fe b0 f4 35 	rcall	8000444c <__sprint_r>
80005be6:	e0 81 03 cc 	brne	8000637e <_vfprintf_r+0x1f16>
80005bea:	fa c3 f9 e0 	sub	r3,sp,-1568
80005bee:	40 fc       	lddsp	r12,sp[0x3c]
80005bf0:	58 0c       	cp.w	r12,0
80005bf2:	c1 f0       	breq	80005c30 <_vfprintf_r+0x17c8>
80005bf4:	fa f8 06 90 	ld.w	r8,sp[1680]
80005bf8:	fa c9 f9 48 	sub	r9,sp,-1720
80005bfc:	2f e8       	sub	r8,-2
80005bfe:	87 09       	st.w	r3[0x0],r9
80005c00:	fb 48 06 90 	st.w	sp[1680],r8
80005c04:	30 29       	mov	r9,2
80005c06:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005c0a:	87 19       	st.w	r3[0x4],r9
80005c0c:	2f f8       	sub	r8,-1
80005c0e:	fb 48 06 8c 	st.w	sp[1676],r8
80005c12:	58 78       	cp.w	r8,7
80005c14:	e0 89 00 04 	brgt	80005c1c <_vfprintf_r+0x17b4>
80005c18:	2f 83       	sub	r3,-8
80005c1a:	c0 b8       	rjmp	80005c30 <_vfprintf_r+0x17c8>
80005c1c:	fa ca f9 78 	sub	r10,sp,-1672
80005c20:	02 9b       	mov	r11,r1
80005c22:	08 9c       	mov	r12,r4
80005c24:	fe b0 f4 14 	rcall	8000444c <__sprint_r>
80005c28:	e0 81 03 ab 	brne	8000637e <_vfprintf_r+0x1f16>
80005c2c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005c30:	40 9b       	lddsp	r11,sp[0x24]
80005c32:	e0 4b 00 80 	cp.w	r11,128
80005c36:	c4 a1       	brne	80005cca <_vfprintf_r+0x1862>
80005c38:	40 8a       	lddsp	r10,sp[0x20]
80005c3a:	40 39       	lddsp	r9,sp[0xc]
80005c3c:	12 1a       	sub	r10,r9
80005c3e:	50 4a       	stdsp	sp[0x10],r10
80005c40:	58 0a       	cp.w	r10,0
80005c42:	e0 89 00 24 	brgt	80005c8a <_vfprintf_r+0x1822>
80005c46:	c4 28       	rjmp	80005cca <_vfprintf_r+0x1862>
80005c48:	2f 09       	sub	r9,-16
80005c4a:	2f f8       	sub	r8,-1
80005c4c:	48 8e       	lddpc	lr,80005c6c <_vfprintf_r+0x1804>
80005c4e:	31 0c       	mov	r12,16
80005c50:	fb 49 06 90 	st.w	sp[1680],r9
80005c54:	87 0e       	st.w	r3[0x0],lr
80005c56:	87 1c       	st.w	r3[0x4],r12
80005c58:	fb 48 06 8c 	st.w	sp[1676],r8
80005c5c:	58 78       	cp.w	r8,7
80005c5e:	e0 89 00 09 	brgt	80005c70 <_vfprintf_r+0x1808>
80005c62:	2f 83       	sub	r3,-8
80005c64:	c1 08       	rjmp	80005c84 <_vfprintf_r+0x181c>
80005c66:	d7 03       	nop
80005c68:	80 00       	ld.sh	r0,r0[0x0]
80005c6a:	9d c0       	st.w	lr[0x30],r0
80005c6c:	80 00       	ld.sh	r0,r0[0x0]
80005c6e:	9d d0       	st.w	lr[0x34],r0
80005c70:	fa ca f9 78 	sub	r10,sp,-1672
80005c74:	02 9b       	mov	r11,r1
80005c76:	08 9c       	mov	r12,r4
80005c78:	fe b0 f3 ea 	rcall	8000444c <__sprint_r>
80005c7c:	e0 81 03 81 	brne	8000637e <_vfprintf_r+0x1f16>
80005c80:	fa c3 f9 e0 	sub	r3,sp,-1568
80005c84:	40 4b       	lddsp	r11,sp[0x10]
80005c86:	21 0b       	sub	r11,16
80005c88:	50 4b       	stdsp	sp[0x10],r11
80005c8a:	fa f9 06 90 	ld.w	r9,sp[1680]
80005c8e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005c92:	4c 6a       	lddpc	r10,80005da8 <_vfprintf_r+0x1940>
80005c94:	40 4e       	lddsp	lr,sp[0x10]
80005c96:	59 0e       	cp.w	lr,16
80005c98:	fe 99 ff d8 	brgt	80005c48 <_vfprintf_r+0x17e0>
80005c9c:	1c 09       	add	r9,lr
80005c9e:	2f f8       	sub	r8,-1
80005ca0:	87 0a       	st.w	r3[0x0],r10
80005ca2:	fb 49 06 90 	st.w	sp[1680],r9
80005ca6:	87 1e       	st.w	r3[0x4],lr
80005ca8:	fb 48 06 8c 	st.w	sp[1676],r8
80005cac:	58 78       	cp.w	r8,7
80005cae:	e0 89 00 04 	brgt	80005cb6 <_vfprintf_r+0x184e>
80005cb2:	2f 83       	sub	r3,-8
80005cb4:	c0 b8       	rjmp	80005cca <_vfprintf_r+0x1862>
80005cb6:	fa ca f9 78 	sub	r10,sp,-1672
80005cba:	02 9b       	mov	r11,r1
80005cbc:	08 9c       	mov	r12,r4
80005cbe:	fe b0 f3 c7 	rcall	8000444c <__sprint_r>
80005cc2:	e0 81 03 5e 	brne	8000637e <_vfprintf_r+0x1f16>
80005cc6:	fa c3 f9 e0 	sub	r3,sp,-1568
80005cca:	40 2c       	lddsp	r12,sp[0x8]
80005ccc:	04 1c       	sub	r12,r2
80005cce:	50 2c       	stdsp	sp[0x8],r12
80005cd0:	58 0c       	cp.w	r12,0
80005cd2:	e0 89 00 1f 	brgt	80005d10 <_vfprintf_r+0x18a8>
80005cd6:	c3 d8       	rjmp	80005d50 <_vfprintf_r+0x18e8>
80005cd8:	2f 09       	sub	r9,-16
80005cda:	2f f8       	sub	r8,-1
80005cdc:	4b 3b       	lddpc	r11,80005da8 <_vfprintf_r+0x1940>
80005cde:	31 0a       	mov	r10,16
80005ce0:	fb 49 06 90 	st.w	sp[1680],r9
80005ce4:	87 0b       	st.w	r3[0x0],r11
80005ce6:	87 1a       	st.w	r3[0x4],r10
80005ce8:	fb 48 06 8c 	st.w	sp[1676],r8
80005cec:	58 78       	cp.w	r8,7
80005cee:	e0 89 00 04 	brgt	80005cf6 <_vfprintf_r+0x188e>
80005cf2:	2f 83       	sub	r3,-8
80005cf4:	c0 b8       	rjmp	80005d0a <_vfprintf_r+0x18a2>
80005cf6:	fa ca f9 78 	sub	r10,sp,-1672
80005cfa:	02 9b       	mov	r11,r1
80005cfc:	08 9c       	mov	r12,r4
80005cfe:	fe b0 f3 a7 	rcall	8000444c <__sprint_r>
80005d02:	e0 81 03 3e 	brne	8000637e <_vfprintf_r+0x1f16>
80005d06:	fa c3 f9 e0 	sub	r3,sp,-1568
80005d0a:	40 29       	lddsp	r9,sp[0x8]
80005d0c:	21 09       	sub	r9,16
80005d0e:	50 29       	stdsp	sp[0x8],r9
80005d10:	fa f9 06 90 	ld.w	r9,sp[1680]
80005d14:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005d18:	4a 4a       	lddpc	r10,80005da8 <_vfprintf_r+0x1940>
80005d1a:	40 2e       	lddsp	lr,sp[0x8]
80005d1c:	59 0e       	cp.w	lr,16
80005d1e:	fe 99 ff dd 	brgt	80005cd8 <_vfprintf_r+0x1870>
80005d22:	1c 09       	add	r9,lr
80005d24:	2f f8       	sub	r8,-1
80005d26:	87 0a       	st.w	r3[0x0],r10
80005d28:	fb 49 06 90 	st.w	sp[1680],r9
80005d2c:	87 1e       	st.w	r3[0x4],lr
80005d2e:	fb 48 06 8c 	st.w	sp[1676],r8
80005d32:	58 78       	cp.w	r8,7
80005d34:	e0 89 00 04 	brgt	80005d3c <_vfprintf_r+0x18d4>
80005d38:	2f 83       	sub	r3,-8
80005d3a:	c0 b8       	rjmp	80005d50 <_vfprintf_r+0x18e8>
80005d3c:	fa ca f9 78 	sub	r10,sp,-1672
80005d40:	02 9b       	mov	r11,r1
80005d42:	08 9c       	mov	r12,r4
80005d44:	fe b0 f3 84 	rcall	8000444c <__sprint_r>
80005d48:	e0 81 03 1b 	brne	8000637e <_vfprintf_r+0x1f16>
80005d4c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005d50:	ed b5 00 08 	bld	r5,0x8
80005d54:	c0 b0       	breq	80005d6a <_vfprintf_r+0x1902>
80005d56:	fa f8 06 90 	ld.w	r8,sp[1680]
80005d5a:	87 12       	st.w	r3[0x4],r2
80005d5c:	87 06       	st.w	r3[0x0],r6
80005d5e:	f0 02 00 02 	add	r2,r8,r2
80005d62:	fb 42 06 90 	st.w	sp[1680],r2
80005d66:	e0 8f 01 d5 	bral	80006110 <_vfprintf_r+0x1ca8>
80005d6a:	e0 40 00 65 	cp.w	r0,101
80005d6e:	e0 8a 01 d7 	brle	8000611c <_vfprintf_r+0x1cb4>
80005d72:	30 08       	mov	r8,0
80005d74:	30 09       	mov	r9,0
80005d76:	40 5b       	lddsp	r11,sp[0x14]
80005d78:	40 7a       	lddsp	r10,sp[0x1c]
80005d7a:	e0 a0 19 60 	rcall	8000903a <__avr32_f64_cmp_eq>
80005d7e:	c7 a0       	breq	80005e72 <_vfprintf_r+0x1a0a>
80005d80:	fa f8 06 90 	ld.w	r8,sp[1680]
80005d84:	48 a9       	lddpc	r9,80005dac <_vfprintf_r+0x1944>
80005d86:	2f f8       	sub	r8,-1
80005d88:	87 09       	st.w	r3[0x0],r9
80005d8a:	fb 48 06 90 	st.w	sp[1680],r8
80005d8e:	30 19       	mov	r9,1
80005d90:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005d94:	87 19       	st.w	r3[0x4],r9
80005d96:	2f f8       	sub	r8,-1
80005d98:	fb 48 06 8c 	st.w	sp[1676],r8
80005d9c:	58 78       	cp.w	r8,7
80005d9e:	e0 89 00 09 	brgt	80005db0 <_vfprintf_r+0x1948>
80005da2:	2f 83       	sub	r3,-8
80005da4:	c1 08       	rjmp	80005dc4 <_vfprintf_r+0x195c>
80005da6:	d7 03       	nop
80005da8:	80 00       	ld.sh	r0,r0[0x0]
80005daa:	9d d0       	st.w	lr[0x34],r0
80005dac:	80 00       	ld.sh	r0,r0[0x0]
80005dae:	9d bc       	st.w	lr[0x2c],r12
80005db0:	fa ca f9 78 	sub	r10,sp,-1672
80005db4:	02 9b       	mov	r11,r1
80005db6:	08 9c       	mov	r12,r4
80005db8:	fe b0 f3 4a 	rcall	8000444c <__sprint_r>
80005dbc:	e0 81 02 e1 	brne	8000637e <_vfprintf_r+0x1f16>
80005dc0:	fa c3 f9 e0 	sub	r3,sp,-1568
80005dc4:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005dc8:	40 6c       	lddsp	r12,sp[0x18]
80005dca:	18 38       	cp.w	r8,r12
80005dcc:	c0 55       	brlt	80005dd6 <_vfprintf_r+0x196e>
80005dce:	ed b5 00 00 	bld	r5,0x0
80005dd2:	e0 81 02 69 	brne	800062a4 <_vfprintf_r+0x1e3c>
80005dd6:	fa f8 06 90 	ld.w	r8,sp[1680]
80005dda:	2f f8       	sub	r8,-1
80005ddc:	40 cb       	lddsp	r11,sp[0x30]
80005dde:	fb 48 06 90 	st.w	sp[1680],r8
80005de2:	30 19       	mov	r9,1
80005de4:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005de8:	87 0b       	st.w	r3[0x0],r11
80005dea:	2f f8       	sub	r8,-1
80005dec:	87 19       	st.w	r3[0x4],r9
80005dee:	fb 48 06 8c 	st.w	sp[1676],r8
80005df2:	58 78       	cp.w	r8,7
80005df4:	e0 89 00 04 	brgt	80005dfc <_vfprintf_r+0x1994>
80005df8:	2f 83       	sub	r3,-8
80005dfa:	c0 b8       	rjmp	80005e10 <_vfprintf_r+0x19a8>
80005dfc:	fa ca f9 78 	sub	r10,sp,-1672
80005e00:	02 9b       	mov	r11,r1
80005e02:	08 9c       	mov	r12,r4
80005e04:	fe b0 f3 24 	rcall	8000444c <__sprint_r>
80005e08:	e0 81 02 bb 	brne	8000637e <_vfprintf_r+0x1f16>
80005e0c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005e10:	40 66       	lddsp	r6,sp[0x18]
80005e12:	20 16       	sub	r6,1
80005e14:	58 06       	cp.w	r6,0
80005e16:	e0 89 00 1d 	brgt	80005e50 <_vfprintf_r+0x19e8>
80005e1a:	e0 8f 02 45 	bral	800062a4 <_vfprintf_r+0x1e3c>
80005e1e:	2f 09       	sub	r9,-16
80005e20:	2f f8       	sub	r8,-1
80005e22:	fb 49 06 90 	st.w	sp[1680],r9
80005e26:	87 02       	st.w	r3[0x0],r2
80005e28:	87 10       	st.w	r3[0x4],r0
80005e2a:	fb 48 06 8c 	st.w	sp[1676],r8
80005e2e:	58 78       	cp.w	r8,7
80005e30:	e0 89 00 04 	brgt	80005e38 <_vfprintf_r+0x19d0>
80005e34:	2f 83       	sub	r3,-8
80005e36:	c0 b8       	rjmp	80005e4c <_vfprintf_r+0x19e4>
80005e38:	fa ca f9 78 	sub	r10,sp,-1672
80005e3c:	02 9b       	mov	r11,r1
80005e3e:	08 9c       	mov	r12,r4
80005e40:	fe b0 f3 06 	rcall	8000444c <__sprint_r>
80005e44:	e0 81 02 9d 	brne	8000637e <_vfprintf_r+0x1f16>
80005e48:	fa c3 f9 e0 	sub	r3,sp,-1568
80005e4c:	21 06       	sub	r6,16
80005e4e:	c0 38       	rjmp	80005e54 <_vfprintf_r+0x19ec>
80005e50:	4d 22       	lddpc	r2,80005f98 <_vfprintf_r+0x1b30>
80005e52:	31 00       	mov	r0,16
80005e54:	fa f9 06 90 	ld.w	r9,sp[1680]
80005e58:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005e5c:	4c fa       	lddpc	r10,80005f98 <_vfprintf_r+0x1b30>
80005e5e:	59 06       	cp.w	r6,16
80005e60:	fe 99 ff df 	brgt	80005e1e <_vfprintf_r+0x19b6>
80005e64:	0c 09       	add	r9,r6
80005e66:	87 0a       	st.w	r3[0x0],r10
80005e68:	fb 49 06 90 	st.w	sp[1680],r9
80005e6c:	2f f8       	sub	r8,-1
80005e6e:	87 16       	st.w	r3[0x4],r6
80005e70:	c5 39       	rjmp	80006116 <_vfprintf_r+0x1cae>
80005e72:	fa fa 06 ac 	ld.w	r10,sp[1708]
80005e76:	58 0a       	cp.w	r10,0
80005e78:	e0 89 00 94 	brgt	80005fa0 <_vfprintf_r+0x1b38>
80005e7c:	fa f8 06 90 	ld.w	r8,sp[1680]
80005e80:	4c 79       	lddpc	r9,80005f9c <_vfprintf_r+0x1b34>
80005e82:	2f f8       	sub	r8,-1
80005e84:	87 09       	st.w	r3[0x0],r9
80005e86:	fb 48 06 90 	st.w	sp[1680],r8
80005e8a:	30 19       	mov	r9,1
80005e8c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005e90:	87 19       	st.w	r3[0x4],r9
80005e92:	2f f8       	sub	r8,-1
80005e94:	fb 48 06 8c 	st.w	sp[1676],r8
80005e98:	58 78       	cp.w	r8,7
80005e9a:	e0 89 00 04 	brgt	80005ea2 <_vfprintf_r+0x1a3a>
80005e9e:	2f 83       	sub	r3,-8
80005ea0:	c0 b8       	rjmp	80005eb6 <_vfprintf_r+0x1a4e>
80005ea2:	fa ca f9 78 	sub	r10,sp,-1672
80005ea6:	02 9b       	mov	r11,r1
80005ea8:	08 9c       	mov	r12,r4
80005eaa:	fe b0 f2 d1 	rcall	8000444c <__sprint_r>
80005eae:	e0 81 02 68 	brne	8000637e <_vfprintf_r+0x1f16>
80005eb2:	fa c3 f9 e0 	sub	r3,sp,-1568
80005eb6:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005eba:	58 08       	cp.w	r8,0
80005ebc:	c0 81       	brne	80005ecc <_vfprintf_r+0x1a64>
80005ebe:	40 6a       	lddsp	r10,sp[0x18]
80005ec0:	58 0a       	cp.w	r10,0
80005ec2:	c0 51       	brne	80005ecc <_vfprintf_r+0x1a64>
80005ec4:	ed b5 00 00 	bld	r5,0x0
80005ec8:	e0 81 01 ee 	brne	800062a4 <_vfprintf_r+0x1e3c>
80005ecc:	40 c9       	lddsp	r9,sp[0x30]
80005ece:	fa f8 06 90 	ld.w	r8,sp[1680]
80005ed2:	2f f8       	sub	r8,-1
80005ed4:	87 09       	st.w	r3[0x0],r9
80005ed6:	fb 48 06 90 	st.w	sp[1680],r8
80005eda:	30 19       	mov	r9,1
80005edc:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005ee0:	87 19       	st.w	r3[0x4],r9
80005ee2:	2f f8       	sub	r8,-1
80005ee4:	fb 48 06 8c 	st.w	sp[1676],r8
80005ee8:	58 78       	cp.w	r8,7
80005eea:	e0 89 00 04 	brgt	80005ef2 <_vfprintf_r+0x1a8a>
80005eee:	2f 83       	sub	r3,-8
80005ef0:	c0 b8       	rjmp	80005f06 <_vfprintf_r+0x1a9e>
80005ef2:	fa ca f9 78 	sub	r10,sp,-1672
80005ef6:	02 9b       	mov	r11,r1
80005ef8:	08 9c       	mov	r12,r4
80005efa:	fe b0 f2 a9 	rcall	8000444c <__sprint_r>
80005efe:	e0 81 02 40 	brne	8000637e <_vfprintf_r+0x1f16>
80005f02:	fa c3 f9 e0 	sub	r3,sp,-1568
80005f06:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005f0a:	5c 32       	neg	r2
80005f0c:	58 02       	cp.w	r2,0
80005f0e:	e0 89 00 1d 	brgt	80005f48 <_vfprintf_r+0x1ae0>
80005f12:	c3 b8       	rjmp	80005f88 <_vfprintf_r+0x1b20>
80005f14:	2f 09       	sub	r9,-16
80005f16:	2f f8       	sub	r8,-1
80005f18:	31 0e       	mov	lr,16
80005f1a:	fb 49 06 90 	st.w	sp[1680],r9
80005f1e:	87 00       	st.w	r3[0x0],r0
80005f20:	87 1e       	st.w	r3[0x4],lr
80005f22:	fb 48 06 8c 	st.w	sp[1676],r8
80005f26:	58 78       	cp.w	r8,7
80005f28:	e0 89 00 04 	brgt	80005f30 <_vfprintf_r+0x1ac8>
80005f2c:	2f 83       	sub	r3,-8
80005f2e:	c0 b8       	rjmp	80005f44 <_vfprintf_r+0x1adc>
80005f30:	fa ca f9 78 	sub	r10,sp,-1672
80005f34:	02 9b       	mov	r11,r1
80005f36:	08 9c       	mov	r12,r4
80005f38:	fe b0 f2 8a 	rcall	8000444c <__sprint_r>
80005f3c:	e0 81 02 21 	brne	8000637e <_vfprintf_r+0x1f16>
80005f40:	fa c3 f9 e0 	sub	r3,sp,-1568
80005f44:	21 02       	sub	r2,16
80005f46:	c0 28       	rjmp	80005f4a <_vfprintf_r+0x1ae2>
80005f48:	49 40       	lddpc	r0,80005f98 <_vfprintf_r+0x1b30>
80005f4a:	fa f9 06 90 	ld.w	r9,sp[1680]
80005f4e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005f52:	49 2a       	lddpc	r10,80005f98 <_vfprintf_r+0x1b30>
80005f54:	59 02       	cp.w	r2,16
80005f56:	fe 99 ff df 	brgt	80005f14 <_vfprintf_r+0x1aac>
80005f5a:	04 09       	add	r9,r2
80005f5c:	2f f8       	sub	r8,-1
80005f5e:	87 0a       	st.w	r3[0x0],r10
80005f60:	fb 49 06 90 	st.w	sp[1680],r9
80005f64:	87 12       	st.w	r3[0x4],r2
80005f66:	fb 48 06 8c 	st.w	sp[1676],r8
80005f6a:	58 78       	cp.w	r8,7
80005f6c:	e0 89 00 04 	brgt	80005f74 <_vfprintf_r+0x1b0c>
80005f70:	2f 83       	sub	r3,-8
80005f72:	c0 b8       	rjmp	80005f88 <_vfprintf_r+0x1b20>
80005f74:	fa ca f9 78 	sub	r10,sp,-1672
80005f78:	02 9b       	mov	r11,r1
80005f7a:	08 9c       	mov	r12,r4
80005f7c:	fe b0 f2 68 	rcall	8000444c <__sprint_r>
80005f80:	e0 81 01 ff 	brne	8000637e <_vfprintf_r+0x1f16>
80005f84:	fa c3 f9 e0 	sub	r3,sp,-1568
80005f88:	40 6c       	lddsp	r12,sp[0x18]
80005f8a:	fa f8 06 90 	ld.w	r8,sp[1680]
80005f8e:	87 06       	st.w	r3[0x0],r6
80005f90:	87 1c       	st.w	r3[0x4],r12
80005f92:	18 08       	add	r8,r12
80005f94:	cb c8       	rjmp	8000610c <_vfprintf_r+0x1ca4>
80005f96:	d7 03       	nop
80005f98:	80 00       	ld.sh	r0,r0[0x0]
80005f9a:	9d d0       	st.w	lr[0x34],r0
80005f9c:	80 00       	ld.sh	r0,r0[0x0]
80005f9e:	9d bc       	st.w	lr[0x2c],r12
80005fa0:	fa f9 06 90 	ld.w	r9,sp[1680]
80005fa4:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005fa8:	40 6b       	lddsp	r11,sp[0x18]
80005faa:	16 3a       	cp.w	r10,r11
80005fac:	c6 d5       	brlt	80006086 <_vfprintf_r+0x1c1e>
80005fae:	16 09       	add	r9,r11
80005fb0:	2f f8       	sub	r8,-1
80005fb2:	87 06       	st.w	r3[0x0],r6
80005fb4:	fb 49 06 90 	st.w	sp[1680],r9
80005fb8:	87 1b       	st.w	r3[0x4],r11
80005fba:	fb 48 06 8c 	st.w	sp[1676],r8
80005fbe:	58 78       	cp.w	r8,7
80005fc0:	e0 89 00 04 	brgt	80005fc8 <_vfprintf_r+0x1b60>
80005fc4:	2f 83       	sub	r3,-8
80005fc6:	c0 b8       	rjmp	80005fdc <_vfprintf_r+0x1b74>
80005fc8:	fa ca f9 78 	sub	r10,sp,-1672
80005fcc:	02 9b       	mov	r11,r1
80005fce:	08 9c       	mov	r12,r4
80005fd0:	fe b0 f2 3e 	rcall	8000444c <__sprint_r>
80005fd4:	e0 81 01 d5 	brne	8000637e <_vfprintf_r+0x1f16>
80005fd8:	fa c3 f9 e0 	sub	r3,sp,-1568
80005fdc:	fa f6 06 ac 	ld.w	r6,sp[1708]
80005fe0:	40 6a       	lddsp	r10,sp[0x18]
80005fe2:	14 16       	sub	r6,r10
80005fe4:	58 06       	cp.w	r6,0
80005fe6:	e0 89 00 1c 	brgt	8000601e <_vfprintf_r+0x1bb6>
80005fea:	c3 b8       	rjmp	80006060 <_vfprintf_r+0x1bf8>
80005fec:	2f 09       	sub	r9,-16
80005fee:	2f f8       	sub	r8,-1
80005ff0:	fb 49 06 90 	st.w	sp[1680],r9
80005ff4:	87 02       	st.w	r3[0x0],r2
80005ff6:	87 10       	st.w	r3[0x4],r0
80005ff8:	fb 48 06 8c 	st.w	sp[1676],r8
80005ffc:	58 78       	cp.w	r8,7
80005ffe:	e0 89 00 04 	brgt	80006006 <_vfprintf_r+0x1b9e>
80006002:	2f 83       	sub	r3,-8
80006004:	c0 b8       	rjmp	8000601a <_vfprintf_r+0x1bb2>
80006006:	fa ca f9 78 	sub	r10,sp,-1672
8000600a:	02 9b       	mov	r11,r1
8000600c:	08 9c       	mov	r12,r4
8000600e:	fe b0 f2 1f 	rcall	8000444c <__sprint_r>
80006012:	e0 81 01 b6 	brne	8000637e <_vfprintf_r+0x1f16>
80006016:	fa c3 f9 e0 	sub	r3,sp,-1568
8000601a:	21 06       	sub	r6,16
8000601c:	c0 38       	rjmp	80006022 <_vfprintf_r+0x1bba>
8000601e:	4d c2       	lddpc	r2,8000618c <_vfprintf_r+0x1d24>
80006020:	31 00       	mov	r0,16
80006022:	fa f9 06 90 	ld.w	r9,sp[1680]
80006026:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000602a:	4d 9a       	lddpc	r10,8000618c <_vfprintf_r+0x1d24>
8000602c:	59 06       	cp.w	r6,16
8000602e:	fe 99 ff df 	brgt	80005fec <_vfprintf_r+0x1b84>
80006032:	0c 09       	add	r9,r6
80006034:	2f f8       	sub	r8,-1
80006036:	87 0a       	st.w	r3[0x0],r10
80006038:	fb 49 06 90 	st.w	sp[1680],r9
8000603c:	87 16       	st.w	r3[0x4],r6
8000603e:	fb 48 06 8c 	st.w	sp[1676],r8
80006042:	58 78       	cp.w	r8,7
80006044:	e0 89 00 04 	brgt	8000604c <_vfprintf_r+0x1be4>
80006048:	2f 83       	sub	r3,-8
8000604a:	c0 b8       	rjmp	80006060 <_vfprintf_r+0x1bf8>
8000604c:	fa ca f9 78 	sub	r10,sp,-1672
80006050:	02 9b       	mov	r11,r1
80006052:	08 9c       	mov	r12,r4
80006054:	fe b0 f1 fc 	rcall	8000444c <__sprint_r>
80006058:	e0 81 01 93 	brne	8000637e <_vfprintf_r+0x1f16>
8000605c:	fa c3 f9 e0 	sub	r3,sp,-1568
80006060:	ed b5 00 00 	bld	r5,0x0
80006064:	e0 81 01 20 	brne	800062a4 <_vfprintf_r+0x1e3c>
80006068:	40 c9       	lddsp	r9,sp[0x30]
8000606a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000606e:	2f f8       	sub	r8,-1
80006070:	87 09       	st.w	r3[0x0],r9
80006072:	fb 48 06 90 	st.w	sp[1680],r8
80006076:	30 19       	mov	r9,1
80006078:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000607c:	87 19       	st.w	r3[0x4],r9
8000607e:	2f f8       	sub	r8,-1
80006080:	fb 48 06 8c 	st.w	sp[1676],r8
80006084:	c0 29       	rjmp	80006288 <_vfprintf_r+0x1e20>
80006086:	14 09       	add	r9,r10
80006088:	2f f8       	sub	r8,-1
8000608a:	fb 49 06 90 	st.w	sp[1680],r9
8000608e:	87 06       	st.w	r3[0x0],r6
80006090:	87 1a       	st.w	r3[0x4],r10
80006092:	fb 48 06 8c 	st.w	sp[1676],r8
80006096:	58 78       	cp.w	r8,7
80006098:	e0 89 00 04 	brgt	800060a0 <_vfprintf_r+0x1c38>
8000609c:	2f 83       	sub	r3,-8
8000609e:	c0 b8       	rjmp	800060b4 <_vfprintf_r+0x1c4c>
800060a0:	fa ca f9 78 	sub	r10,sp,-1672
800060a4:	02 9b       	mov	r11,r1
800060a6:	08 9c       	mov	r12,r4
800060a8:	fe b0 f1 d2 	rcall	8000444c <__sprint_r>
800060ac:	e0 81 01 69 	brne	8000637e <_vfprintf_r+0x1f16>
800060b0:	fa c3 f9 e0 	sub	r3,sp,-1568
800060b4:	40 c8       	lddsp	r8,sp[0x30]
800060b6:	87 08       	st.w	r3[0x0],r8
800060b8:	fa f8 06 90 	ld.w	r8,sp[1680]
800060bc:	2f f8       	sub	r8,-1
800060be:	30 19       	mov	r9,1
800060c0:	fb 48 06 90 	st.w	sp[1680],r8
800060c4:	87 19       	st.w	r3[0x4],r9
800060c6:	fa f8 06 8c 	ld.w	r8,sp[1676]
800060ca:	2f f8       	sub	r8,-1
800060cc:	fb 48 06 8c 	st.w	sp[1676],r8
800060d0:	fa f2 06 ac 	ld.w	r2,sp[1708]
800060d4:	58 78       	cp.w	r8,7
800060d6:	e0 89 00 04 	brgt	800060de <_vfprintf_r+0x1c76>
800060da:	2f 83       	sub	r3,-8
800060dc:	c0 b8       	rjmp	800060f2 <_vfprintf_r+0x1c8a>
800060de:	fa ca f9 78 	sub	r10,sp,-1672
800060e2:	02 9b       	mov	r11,r1
800060e4:	08 9c       	mov	r12,r4
800060e6:	fe b0 f1 b3 	rcall	8000444c <__sprint_r>
800060ea:	e0 81 01 4a 	brne	8000637e <_vfprintf_r+0x1f16>
800060ee:	fa c3 f9 e0 	sub	r3,sp,-1568
800060f2:	04 06       	add	r6,r2
800060f4:	fa f8 06 ac 	ld.w	r8,sp[1708]
800060f8:	87 06       	st.w	r3[0x0],r6
800060fa:	fa f9 06 90 	ld.w	r9,sp[1680]
800060fe:	40 66       	lddsp	r6,sp[0x18]
80006100:	40 6e       	lddsp	lr,sp[0x18]
80006102:	10 16       	sub	r6,r8
80006104:	f2 08 01 08 	sub	r8,r9,r8
80006108:	87 16       	st.w	r3[0x4],r6
8000610a:	1c 08       	add	r8,lr
8000610c:	fb 48 06 90 	st.w	sp[1680],r8
80006110:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006114:	2f f8       	sub	r8,-1
80006116:	fb 48 06 8c 	st.w	sp[1676],r8
8000611a:	cb 78       	rjmp	80006288 <_vfprintf_r+0x1e20>
8000611c:	40 6c       	lddsp	r12,sp[0x18]
8000611e:	58 1c       	cp.w	r12,1
80006120:	e0 89 00 06 	brgt	8000612c <_vfprintf_r+0x1cc4>
80006124:	ed b5 00 00 	bld	r5,0x0
80006128:	e0 81 00 85 	brne	80006232 <_vfprintf_r+0x1dca>
8000612c:	fa f8 06 90 	ld.w	r8,sp[1680]
80006130:	2f f8       	sub	r8,-1
80006132:	30 19       	mov	r9,1
80006134:	fb 48 06 90 	st.w	sp[1680],r8
80006138:	87 06       	st.w	r3[0x0],r6
8000613a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000613e:	87 19       	st.w	r3[0x4],r9
80006140:	2f f8       	sub	r8,-1
80006142:	fb 48 06 8c 	st.w	sp[1676],r8
80006146:	58 78       	cp.w	r8,7
80006148:	e0 89 00 04 	brgt	80006150 <_vfprintf_r+0x1ce8>
8000614c:	2f 83       	sub	r3,-8
8000614e:	c0 b8       	rjmp	80006164 <_vfprintf_r+0x1cfc>
80006150:	fa ca f9 78 	sub	r10,sp,-1672
80006154:	02 9b       	mov	r11,r1
80006156:	08 9c       	mov	r12,r4
80006158:	fe b0 f1 7a 	rcall	8000444c <__sprint_r>
8000615c:	e0 81 01 11 	brne	8000637e <_vfprintf_r+0x1f16>
80006160:	fa c3 f9 e0 	sub	r3,sp,-1568
80006164:	fa f8 06 90 	ld.w	r8,sp[1680]
80006168:	2f f8       	sub	r8,-1
8000616a:	40 cb       	lddsp	r11,sp[0x30]
8000616c:	fb 48 06 90 	st.w	sp[1680],r8
80006170:	30 19       	mov	r9,1
80006172:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006176:	87 0b       	st.w	r3[0x0],r11
80006178:	2f f8       	sub	r8,-1
8000617a:	87 19       	st.w	r3[0x4],r9
8000617c:	fb 48 06 8c 	st.w	sp[1676],r8
80006180:	58 78       	cp.w	r8,7
80006182:	e0 89 00 07 	brgt	80006190 <_vfprintf_r+0x1d28>
80006186:	2f 83       	sub	r3,-8
80006188:	c0 e8       	rjmp	800061a4 <_vfprintf_r+0x1d3c>
8000618a:	d7 03       	nop
8000618c:	80 00       	ld.sh	r0,r0[0x0]
8000618e:	9d d0       	st.w	lr[0x34],r0
80006190:	fa ca f9 78 	sub	r10,sp,-1672
80006194:	02 9b       	mov	r11,r1
80006196:	08 9c       	mov	r12,r4
80006198:	fe b0 f1 5a 	rcall	8000444c <__sprint_r>
8000619c:	e0 81 00 f1 	brne	8000637e <_vfprintf_r+0x1f16>
800061a0:	fa c3 f9 e0 	sub	r3,sp,-1568
800061a4:	30 08       	mov	r8,0
800061a6:	30 09       	mov	r9,0
800061a8:	40 5b       	lddsp	r11,sp[0x14]
800061aa:	40 7a       	lddsp	r10,sp[0x1c]
800061ac:	e0 a0 17 47 	rcall	8000903a <__avr32_f64_cmp_eq>
800061b0:	40 68       	lddsp	r8,sp[0x18]
800061b2:	20 18       	sub	r8,1
800061b4:	58 0c       	cp.w	r12,0
800061b6:	c0 d1       	brne	800061d0 <_vfprintf_r+0x1d68>
800061b8:	2f f6       	sub	r6,-1
800061ba:	87 18       	st.w	r3[0x4],r8
800061bc:	87 06       	st.w	r3[0x0],r6
800061be:	fa f6 06 90 	ld.w	r6,sp[1680]
800061c2:	10 06       	add	r6,r8
800061c4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800061c8:	fb 46 06 90 	st.w	sp[1680],r6
800061cc:	2f f8       	sub	r8,-1
800061ce:	c2 f8       	rjmp	8000622c <_vfprintf_r+0x1dc4>
800061d0:	10 96       	mov	r6,r8
800061d2:	58 08       	cp.w	r8,0
800061d4:	e0 89 00 1c 	brgt	8000620c <_vfprintf_r+0x1da4>
800061d8:	c4 98       	rjmp	8000626a <_vfprintf_r+0x1e02>
800061da:	2f 09       	sub	r9,-16
800061dc:	2f f8       	sub	r8,-1
800061de:	fb 49 06 90 	st.w	sp[1680],r9
800061e2:	87 02       	st.w	r3[0x0],r2
800061e4:	87 10       	st.w	r3[0x4],r0
800061e6:	fb 48 06 8c 	st.w	sp[1676],r8
800061ea:	58 78       	cp.w	r8,7
800061ec:	e0 89 00 04 	brgt	800061f4 <_vfprintf_r+0x1d8c>
800061f0:	2f 83       	sub	r3,-8
800061f2:	c0 b8       	rjmp	80006208 <_vfprintf_r+0x1da0>
800061f4:	fa ca f9 78 	sub	r10,sp,-1672
800061f8:	02 9b       	mov	r11,r1
800061fa:	08 9c       	mov	r12,r4
800061fc:	fe b0 f1 28 	rcall	8000444c <__sprint_r>
80006200:	e0 81 00 bf 	brne	8000637e <_vfprintf_r+0x1f16>
80006204:	fa c3 f9 e0 	sub	r3,sp,-1568
80006208:	21 06       	sub	r6,16
8000620a:	c0 38       	rjmp	80006210 <_vfprintf_r+0x1da8>
8000620c:	4d 22       	lddpc	r2,80006354 <_vfprintf_r+0x1eec>
8000620e:	31 00       	mov	r0,16
80006210:	fa f9 06 90 	ld.w	r9,sp[1680]
80006214:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006218:	4c fa       	lddpc	r10,80006354 <_vfprintf_r+0x1eec>
8000621a:	59 06       	cp.w	r6,16
8000621c:	fe 99 ff df 	brgt	800061da <_vfprintf_r+0x1d72>
80006220:	0c 09       	add	r9,r6
80006222:	87 0a       	st.w	r3[0x0],r10
80006224:	fb 49 06 90 	st.w	sp[1680],r9
80006228:	2f f8       	sub	r8,-1
8000622a:	87 16       	st.w	r3[0x4],r6
8000622c:	fb 48 06 8c 	st.w	sp[1676],r8
80006230:	c0 e8       	rjmp	8000624c <_vfprintf_r+0x1de4>
80006232:	fa f8 06 90 	ld.w	r8,sp[1680]
80006236:	2f f8       	sub	r8,-1
80006238:	30 19       	mov	r9,1
8000623a:	fb 48 06 90 	st.w	sp[1680],r8
8000623e:	87 06       	st.w	r3[0x0],r6
80006240:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006244:	87 19       	st.w	r3[0x4],r9
80006246:	2f f8       	sub	r8,-1
80006248:	fb 48 06 8c 	st.w	sp[1676],r8
8000624c:	58 78       	cp.w	r8,7
8000624e:	e0 89 00 04 	brgt	80006256 <_vfprintf_r+0x1dee>
80006252:	2f 83       	sub	r3,-8
80006254:	c0 b8       	rjmp	8000626a <_vfprintf_r+0x1e02>
80006256:	fa ca f9 78 	sub	r10,sp,-1672
8000625a:	02 9b       	mov	r11,r1
8000625c:	08 9c       	mov	r12,r4
8000625e:	fe b0 f0 f7 	rcall	8000444c <__sprint_r>
80006262:	e0 81 00 8e 	brne	8000637e <_vfprintf_r+0x1f16>
80006266:	fa c3 f9 e0 	sub	r3,sp,-1568
8000626a:	40 ea       	lddsp	r10,sp[0x38]
8000626c:	fa f8 06 90 	ld.w	r8,sp[1680]
80006270:	14 08       	add	r8,r10
80006272:	fa c9 f9 64 	sub	r9,sp,-1692
80006276:	fb 48 06 90 	st.w	sp[1680],r8
8000627a:	87 1a       	st.w	r3[0x4],r10
8000627c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006280:	87 09       	st.w	r3[0x0],r9
80006282:	2f f8       	sub	r8,-1
80006284:	fb 48 06 8c 	st.w	sp[1676],r8
80006288:	58 78       	cp.w	r8,7
8000628a:	e0 89 00 04 	brgt	80006292 <_vfprintf_r+0x1e2a>
8000628e:	2f 83       	sub	r3,-8
80006290:	c0 a8       	rjmp	800062a4 <_vfprintf_r+0x1e3c>
80006292:	fa ca f9 78 	sub	r10,sp,-1672
80006296:	02 9b       	mov	r11,r1
80006298:	08 9c       	mov	r12,r4
8000629a:	fe b0 f0 d9 	rcall	8000444c <__sprint_r>
8000629e:	c7 01       	brne	8000637e <_vfprintf_r+0x1f16>
800062a0:	fa c3 f9 e0 	sub	r3,sp,-1568
800062a4:	e2 15 00 04 	andl	r5,0x4,COH
800062a8:	c3 d0       	breq	80006322 <_vfprintf_r+0x1eba>
800062aa:	40 86       	lddsp	r6,sp[0x20]
800062ac:	40 39       	lddsp	r9,sp[0xc]
800062ae:	12 16       	sub	r6,r9
800062b0:	58 06       	cp.w	r6,0
800062b2:	e0 89 00 1a 	brgt	800062e6 <_vfprintf_r+0x1e7e>
800062b6:	c3 68       	rjmp	80006322 <_vfprintf_r+0x1eba>
800062b8:	2f 09       	sub	r9,-16
800062ba:	2f f8       	sub	r8,-1
800062bc:	fb 49 06 90 	st.w	sp[1680],r9
800062c0:	87 05       	st.w	r3[0x0],r5
800062c2:	87 12       	st.w	r3[0x4],r2
800062c4:	fb 48 06 8c 	st.w	sp[1676],r8
800062c8:	58 78       	cp.w	r8,7
800062ca:	e0 89 00 04 	brgt	800062d2 <_vfprintf_r+0x1e6a>
800062ce:	2f 83       	sub	r3,-8
800062d0:	c0 98       	rjmp	800062e2 <_vfprintf_r+0x1e7a>
800062d2:	00 9a       	mov	r10,r0
800062d4:	02 9b       	mov	r11,r1
800062d6:	08 9c       	mov	r12,r4
800062d8:	fe b0 f0 ba 	rcall	8000444c <__sprint_r>
800062dc:	c5 11       	brne	8000637e <_vfprintf_r+0x1f16>
800062de:	fa c3 f9 e0 	sub	r3,sp,-1568
800062e2:	21 06       	sub	r6,16
800062e4:	c0 58       	rjmp	800062ee <_vfprintf_r+0x1e86>
800062e6:	49 d5       	lddpc	r5,80006358 <_vfprintf_r+0x1ef0>
800062e8:	31 02       	mov	r2,16
800062ea:	fa c0 f9 78 	sub	r0,sp,-1672
800062ee:	fa f9 06 90 	ld.w	r9,sp[1680]
800062f2:	fa f8 06 8c 	ld.w	r8,sp[1676]
800062f6:	49 9a       	lddpc	r10,80006358 <_vfprintf_r+0x1ef0>
800062f8:	59 06       	cp.w	r6,16
800062fa:	fe 99 ff df 	brgt	800062b8 <_vfprintf_r+0x1e50>
800062fe:	0c 09       	add	r9,r6
80006300:	2f f8       	sub	r8,-1
80006302:	87 0a       	st.w	r3[0x0],r10
80006304:	87 16       	st.w	r3[0x4],r6
80006306:	fb 49 06 90 	st.w	sp[1680],r9
8000630a:	fb 48 06 8c 	st.w	sp[1676],r8
8000630e:	58 78       	cp.w	r8,7
80006310:	e0 8a 00 09 	brle	80006322 <_vfprintf_r+0x1eba>
80006314:	fa ca f9 78 	sub	r10,sp,-1672
80006318:	02 9b       	mov	r11,r1
8000631a:	08 9c       	mov	r12,r4
8000631c:	fe b0 f0 98 	rcall	8000444c <__sprint_r>
80006320:	c2 f1       	brne	8000637e <_vfprintf_r+0x1f16>
80006322:	40 bc       	lddsp	r12,sp[0x2c]
80006324:	40 36       	lddsp	r6,sp[0xc]
80006326:	40 8e       	lddsp	lr,sp[0x20]
80006328:	ec 0e 0c 48 	max	r8,r6,lr
8000632c:	10 0c       	add	r12,r8
8000632e:	50 bc       	stdsp	sp[0x2c],r12
80006330:	fa f8 06 90 	ld.w	r8,sp[1680]
80006334:	58 08       	cp.w	r8,0
80006336:	c0 80       	breq	80006346 <_vfprintf_r+0x1ede>
80006338:	fa ca f9 78 	sub	r10,sp,-1672
8000633c:	02 9b       	mov	r11,r1
8000633e:	08 9c       	mov	r12,r4
80006340:	fe b0 f0 86 	rcall	8000444c <__sprint_r>
80006344:	c1 d1       	brne	8000637e <_vfprintf_r+0x1f16>
80006346:	30 0b       	mov	r11,0
80006348:	fa c3 f9 e0 	sub	r3,sp,-1568
8000634c:	fb 4b 06 8c 	st.w	sp[1676],r11
80006350:	fe 9f f1 17 	bral	8000457e <_vfprintf_r+0x116>
80006354:	80 00       	ld.sh	r0,r0[0x0]
80006356:	9d d0       	st.w	lr[0x34],r0
80006358:	80 00       	ld.sh	r0,r0[0x0]
8000635a:	9d c0       	st.w	lr[0x30],r0
8000635c:	08 95       	mov	r5,r4
8000635e:	fa f8 06 90 	ld.w	r8,sp[1680]
80006362:	58 08       	cp.w	r8,0
80006364:	c0 80       	breq	80006374 <_vfprintf_r+0x1f0c>
80006366:	08 9c       	mov	r12,r4
80006368:	fa ca f9 78 	sub	r10,sp,-1672
8000636c:	02 9b       	mov	r11,r1
8000636e:	fe b0 f0 6f 	rcall	8000444c <__sprint_r>
80006372:	c0 61       	brne	8000637e <_vfprintf_r+0x1f16>
80006374:	30 08       	mov	r8,0
80006376:	fb 48 06 8c 	st.w	sp[1676],r8
8000637a:	c0 28       	rjmp	8000637e <_vfprintf_r+0x1f16>
8000637c:	40 41       	lddsp	r1,sp[0x10]
8000637e:	82 68       	ld.sh	r8,r1[0xc]
80006380:	ed b8 00 06 	bld	r8,0x6
80006384:	c0 31       	brne	8000638a <_vfprintf_r+0x1f22>
80006386:	3f fa       	mov	r10,-1
80006388:	50 ba       	stdsp	sp[0x2c],r10
8000638a:	40 bc       	lddsp	r12,sp[0x2c]
8000638c:	fe 3d f9 44 	sub	sp,-1724
80006390:	d8 32       	popm	r0-r7,pc
80006392:	d7 03       	nop

80006394 <__swsetup_r>:
80006394:	d4 21       	pushm	r4-r7,lr
80006396:	4b 38       	lddpc	r8,80006460 <__swsetup_r+0xcc>
80006398:	18 96       	mov	r6,r12
8000639a:	16 97       	mov	r7,r11
8000639c:	70 0c       	ld.w	r12,r8[0x0]
8000639e:	58 0c       	cp.w	r12,0
800063a0:	c0 60       	breq	800063ac <__swsetup_r+0x18>
800063a2:	78 68       	ld.w	r8,r12[0x18]
800063a4:	58 08       	cp.w	r8,0
800063a6:	c0 31       	brne	800063ac <__swsetup_r+0x18>
800063a8:	e0 a0 07 c0 	rcall	80007328 <__sinit>
800063ac:	4a e8       	lddpc	r8,80006464 <__swsetup_r+0xd0>
800063ae:	10 37       	cp.w	r7,r8
800063b0:	c0 51       	brne	800063ba <__swsetup_r+0x26>
800063b2:	4a c8       	lddpc	r8,80006460 <__swsetup_r+0xcc>
800063b4:	70 08       	ld.w	r8,r8[0x0]
800063b6:	70 07       	ld.w	r7,r8[0x0]
800063b8:	c0 e8       	rjmp	800063d4 <__swsetup_r+0x40>
800063ba:	4a c8       	lddpc	r8,80006468 <__swsetup_r+0xd4>
800063bc:	10 37       	cp.w	r7,r8
800063be:	c0 51       	brne	800063c8 <__swsetup_r+0x34>
800063c0:	4a 88       	lddpc	r8,80006460 <__swsetup_r+0xcc>
800063c2:	70 08       	ld.w	r8,r8[0x0]
800063c4:	70 17       	ld.w	r7,r8[0x4]
800063c6:	c0 78       	rjmp	800063d4 <__swsetup_r+0x40>
800063c8:	4a 98       	lddpc	r8,8000646c <__swsetup_r+0xd8>
800063ca:	10 37       	cp.w	r7,r8
800063cc:	c0 41       	brne	800063d4 <__swsetup_r+0x40>
800063ce:	4a 58       	lddpc	r8,80006460 <__swsetup_r+0xcc>
800063d0:	70 08       	ld.w	r8,r8[0x0]
800063d2:	70 27       	ld.w	r7,r8[0x8]
800063d4:	8e 68       	ld.sh	r8,r7[0xc]
800063d6:	ed b8 00 03 	bld	r8,0x3
800063da:	c1 e0       	breq	80006416 <__swsetup_r+0x82>
800063dc:	ed b8 00 04 	bld	r8,0x4
800063e0:	c3 e1       	brne	8000645c <__swsetup_r+0xc8>
800063e2:	ed b8 00 02 	bld	r8,0x2
800063e6:	c1 51       	brne	80006410 <__swsetup_r+0x7c>
800063e8:	6e db       	ld.w	r11,r7[0x34]
800063ea:	58 0b       	cp.w	r11,0
800063ec:	c0 a0       	breq	80006400 <__swsetup_r+0x6c>
800063ee:	ee c8 ff bc 	sub	r8,r7,-68
800063f2:	10 3b       	cp.w	r11,r8
800063f4:	c0 40       	breq	800063fc <__swsetup_r+0x68>
800063f6:	0c 9c       	mov	r12,r6
800063f8:	e0 a0 08 34 	rcall	80007460 <_free_r>
800063fc:	30 08       	mov	r8,0
800063fe:	8f d8       	st.w	r7[0x34],r8
80006400:	8e 68       	ld.sh	r8,r7[0xc]
80006402:	e0 18 ff db 	andl	r8,0xffdb
80006406:	ae 68       	st.h	r7[0xc],r8
80006408:	30 08       	mov	r8,0
8000640a:	8f 18       	st.w	r7[0x4],r8
8000640c:	6e 48       	ld.w	r8,r7[0x10]
8000640e:	8f 08       	st.w	r7[0x0],r8
80006410:	8e 68       	ld.sh	r8,r7[0xc]
80006412:	a3 b8       	sbr	r8,0x3
80006414:	ae 68       	st.h	r7[0xc],r8
80006416:	6e 48       	ld.w	r8,r7[0x10]
80006418:	58 08       	cp.w	r8,0
8000641a:	c0 b1       	brne	80006430 <__swsetup_r+0x9c>
8000641c:	8e 68       	ld.sh	r8,r7[0xc]
8000641e:	e2 18 02 80 	andl	r8,0x280,COH
80006422:	e0 48 02 00 	cp.w	r8,512
80006426:	c0 50       	breq	80006430 <__swsetup_r+0x9c>
80006428:	0c 9c       	mov	r12,r6
8000642a:	0e 9b       	mov	r11,r7
8000642c:	e0 a0 0a 5c 	rcall	800078e4 <__smakebuf_r>
80006430:	8e 69       	ld.sh	r9,r7[0xc]
80006432:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
80006436:	c0 70       	breq	80006444 <__swsetup_r+0xb0>
80006438:	30 08       	mov	r8,0
8000643a:	8f 28       	st.w	r7[0x8],r8
8000643c:	6e 58       	ld.w	r8,r7[0x14]
8000643e:	5c 38       	neg	r8
80006440:	8f 68       	st.w	r7[0x18],r8
80006442:	c0 68       	rjmp	8000644e <__swsetup_r+0xba>
80006444:	ed b9 00 01 	bld	r9,0x1
80006448:	ef f8 10 05 	ld.wne	r8,r7[0x14]
8000644c:	8f 28       	st.w	r7[0x8],r8
8000644e:	6e 48       	ld.w	r8,r7[0x10]
80006450:	58 08       	cp.w	r8,0
80006452:	c0 61       	brne	8000645e <__swsetup_r+0xca>
80006454:	8e 68       	ld.sh	r8,r7[0xc]
80006456:	ed b8 00 07 	bld	r8,0x7
8000645a:	c0 21       	brne	8000645e <__swsetup_r+0xca>
8000645c:	dc 2a       	popm	r4-r7,pc,r12=-1
8000645e:	d8 2a       	popm	r4-r7,pc,r12=0
80006460:	00 00       	add	r0,r0
80006462:	01 c4       	ld.ub	r4,r0[0x4]
80006464:	80 00       	ld.sh	r0,r0[0x0]
80006466:	9e f0       	ld.uh	r0,pc[0xe]
80006468:	80 00       	ld.sh	r0,r0[0x0]
8000646a:	9f 10       	st.w	pc[0x4],r0
8000646c:	80 00       	ld.sh	r0,r0[0x0]
8000646e:	9f 30       	st.w	pc[0xc],r0

80006470 <quorem>:
80006470:	d4 31       	pushm	r0-r7,lr
80006472:	20 2d       	sub	sp,8
80006474:	18 97       	mov	r7,r12
80006476:	78 48       	ld.w	r8,r12[0x10]
80006478:	76 46       	ld.w	r6,r11[0x10]
8000647a:	0c 38       	cp.w	r8,r6
8000647c:	c0 34       	brge	80006482 <quorem+0x12>
8000647e:	30 0c       	mov	r12,0
80006480:	c8 58       	rjmp	8000658a <quorem+0x11a>
80006482:	ec c2 ff fc 	sub	r2,r6,-4
80006486:	f6 c3 ff ec 	sub	r3,r11,-20
8000648a:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
8000648e:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
80006492:	2f f9       	sub	r9,-1
80006494:	20 16       	sub	r6,1
80006496:	f8 09 0d 08 	divu	r8,r12,r9
8000649a:	f6 02 00 22 	add	r2,r11,r2<<0x2
8000649e:	ee c4 ff ec 	sub	r4,r7,-20
800064a2:	10 95       	mov	r5,r8
800064a4:	58 08       	cp.w	r8,0
800064a6:	c4 10       	breq	80006528 <quorem+0xb8>
800064a8:	30 09       	mov	r9,0
800064aa:	06 9a       	mov	r10,r3
800064ac:	08 98       	mov	r8,r4
800064ae:	12 91       	mov	r1,r9
800064b0:	50 0b       	stdsp	sp[0x0],r11
800064b2:	70 0e       	ld.w	lr,r8[0x0]
800064b4:	b1 8e       	lsr	lr,0x10
800064b6:	50 1e       	stdsp	sp[0x4],lr
800064b8:	15 0e       	ld.w	lr,r10++
800064ba:	fc 00 16 10 	lsr	r0,lr,0x10
800064be:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
800064c2:	ea 0e 03 41 	mac	r1,r5,lr
800064c6:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
800064ca:	b1 81       	lsr	r1,0x10
800064cc:	40 1b       	lddsp	r11,sp[0x4]
800064ce:	ea 00 02 40 	mul	r0,r5,r0
800064d2:	e2 00 00 00 	add	r0,r1,r0
800064d6:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
800064da:	02 1b       	sub	r11,r1
800064dc:	50 1b       	stdsp	sp[0x4],r11
800064de:	70 0b       	ld.w	r11,r8[0x0]
800064e0:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
800064e4:	02 09       	add	r9,r1
800064e6:	f2 0e 01 0e 	sub	lr,r9,lr
800064ea:	b0 1e       	st.h	r8[0x2],lr
800064ec:	fc 09 14 10 	asr	r9,lr,0x10
800064f0:	40 1e       	lddsp	lr,sp[0x4]
800064f2:	fc 09 00 09 	add	r9,lr,r9
800064f6:	b0 09       	st.h	r8[0x0],r9
800064f8:	e0 01 16 10 	lsr	r1,r0,0x10
800064fc:	2f c8       	sub	r8,-4
800064fe:	b1 49       	asr	r9,0x10
80006500:	04 3a       	cp.w	r10,r2
80006502:	fe 98 ff d8 	brls	800064b2 <quorem+0x42>
80006506:	40 0b       	lddsp	r11,sp[0x0]
80006508:	58 0c       	cp.w	r12,0
8000650a:	c0 f1       	brne	80006528 <quorem+0xb8>
8000650c:	ec c8 ff fb 	sub	r8,r6,-5
80006510:	ee 08 00 28 	add	r8,r7,r8<<0x2
80006514:	c0 28       	rjmp	80006518 <quorem+0xa8>
80006516:	20 16       	sub	r6,1
80006518:	20 48       	sub	r8,4
8000651a:	08 38       	cp.w	r8,r4
8000651c:	e0 88 00 05 	brls	80006526 <quorem+0xb6>
80006520:	70 09       	ld.w	r9,r8[0x0]
80006522:	58 09       	cp.w	r9,0
80006524:	cf 90       	breq	80006516 <quorem+0xa6>
80006526:	8f 46       	st.w	r7[0x10],r6
80006528:	0e 9c       	mov	r12,r7
8000652a:	e0 a0 0d 03 	rcall	80007f30 <__mcmp>
8000652e:	c2 d5       	brlt	80006588 <quorem+0x118>
80006530:	2f f5       	sub	r5,-1
80006532:	08 98       	mov	r8,r4
80006534:	30 09       	mov	r9,0
80006536:	07 0b       	ld.w	r11,r3++
80006538:	f6 0a 16 10 	lsr	r10,r11,0x10
8000653c:	70 0c       	ld.w	r12,r8[0x0]
8000653e:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80006542:	f8 0e 16 10 	lsr	lr,r12,0x10
80006546:	14 1e       	sub	lr,r10
80006548:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000654c:	16 1a       	sub	r10,r11
8000654e:	12 0a       	add	r10,r9
80006550:	b0 1a       	st.h	r8[0x2],r10
80006552:	b1 4a       	asr	r10,0x10
80006554:	fc 0a 00 09 	add	r9,lr,r10
80006558:	b0 09       	st.h	r8[0x0],r9
8000655a:	2f c8       	sub	r8,-4
8000655c:	b1 49       	asr	r9,0x10
8000655e:	04 33       	cp.w	r3,r2
80006560:	fe 98 ff eb 	brls	80006536 <quorem+0xc6>
80006564:	ec c8 ff fb 	sub	r8,r6,-5
80006568:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
8000656c:	58 09       	cp.w	r9,0
8000656e:	c0 d1       	brne	80006588 <quorem+0x118>
80006570:	ee 08 00 28 	add	r8,r7,r8<<0x2
80006574:	c0 28       	rjmp	80006578 <quorem+0x108>
80006576:	20 16       	sub	r6,1
80006578:	20 48       	sub	r8,4
8000657a:	08 38       	cp.w	r8,r4
8000657c:	e0 88 00 05 	brls	80006586 <quorem+0x116>
80006580:	70 09       	ld.w	r9,r8[0x0]
80006582:	58 09       	cp.w	r9,0
80006584:	cf 90       	breq	80006576 <quorem+0x106>
80006586:	8f 46       	st.w	r7[0x10],r6
80006588:	0a 9c       	mov	r12,r5
8000658a:	2f ed       	sub	sp,-8
8000658c:	d8 32       	popm	r0-r7,pc
8000658e:	d7 03       	nop

80006590 <_dtoa_r>:
80006590:	d4 31       	pushm	r0-r7,lr
80006592:	21 ad       	sub	sp,104
80006594:	fa c4 ff 74 	sub	r4,sp,-140
80006598:	18 97       	mov	r7,r12
8000659a:	16 95       	mov	r5,r11
8000659c:	68 2c       	ld.w	r12,r4[0x8]
8000659e:	50 c9       	stdsp	sp[0x30],r9
800065a0:	68 16       	ld.w	r6,r4[0x4]
800065a2:	68 09       	ld.w	r9,r4[0x0]
800065a4:	50 e8       	stdsp	sp[0x38],r8
800065a6:	14 94       	mov	r4,r10
800065a8:	51 2c       	stdsp	sp[0x48],r12
800065aa:	fa e5 00 08 	st.d	sp[8],r4
800065ae:	51 59       	stdsp	sp[0x54],r9
800065b0:	6e 95       	ld.w	r5,r7[0x24]
800065b2:	58 05       	cp.w	r5,0
800065b4:	c0 91       	brne	800065c6 <_dtoa_r+0x36>
800065b6:	31 0c       	mov	r12,16
800065b8:	e0 a0 09 f4 	rcall	800079a0 <malloc>
800065bc:	99 35       	st.w	r12[0xc],r5
800065be:	8f 9c       	st.w	r7[0x24],r12
800065c0:	99 15       	st.w	r12[0x4],r5
800065c2:	99 25       	st.w	r12[0x8],r5
800065c4:	99 05       	st.w	r12[0x0],r5
800065c6:	6e 99       	ld.w	r9,r7[0x24]
800065c8:	72 08       	ld.w	r8,r9[0x0]
800065ca:	58 08       	cp.w	r8,0
800065cc:	c0 f0       	breq	800065ea <_dtoa_r+0x5a>
800065ce:	72 1a       	ld.w	r10,r9[0x4]
800065d0:	91 1a       	st.w	r8[0x4],r10
800065d2:	30 1a       	mov	r10,1
800065d4:	72 19       	ld.w	r9,r9[0x4]
800065d6:	f4 09 09 49 	lsl	r9,r10,r9
800065da:	10 9b       	mov	r11,r8
800065dc:	91 29       	st.w	r8[0x8],r9
800065de:	0e 9c       	mov	r12,r7
800065e0:	e0 a0 0c c2 	rcall	80007f64 <_Bfree>
800065e4:	6e 98       	ld.w	r8,r7[0x24]
800065e6:	30 09       	mov	r9,0
800065e8:	91 09       	st.w	r8[0x0],r9
800065ea:	40 28       	lddsp	r8,sp[0x8]
800065ec:	10 94       	mov	r4,r8
800065ee:	58 08       	cp.w	r8,0
800065f0:	c0 64       	brge	800065fc <_dtoa_r+0x6c>
800065f2:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
800065f6:	50 28       	stdsp	sp[0x8],r8
800065f8:	30 18       	mov	r8,1
800065fa:	c0 28       	rjmp	800065fe <_dtoa_r+0x6e>
800065fc:	30 08       	mov	r8,0
800065fe:	8d 08       	st.w	r6[0x0],r8
80006600:	fc 1c 7f f0 	movh	r12,0x7ff0
80006604:	40 26       	lddsp	r6,sp[0x8]
80006606:	0c 98       	mov	r8,r6
80006608:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000660c:	18 38       	cp.w	r8,r12
8000660e:	c1 e1       	brne	8000664a <_dtoa_r+0xba>
80006610:	e0 68 27 0f 	mov	r8,9999
80006614:	41 5b       	lddsp	r11,sp[0x54]
80006616:	97 08       	st.w	r11[0x0],r8
80006618:	40 3a       	lddsp	r10,sp[0xc]
8000661a:	58 0a       	cp.w	r10,0
8000661c:	c0 61       	brne	80006628 <_dtoa_r+0x98>
8000661e:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
80006622:	c0 31       	brne	80006628 <_dtoa_r+0x98>
80006624:	4a cc       	lddpc	r12,800066d4 <_dtoa_r+0x144>
80006626:	c0 28       	rjmp	8000662a <_dtoa_r+0x9a>
80006628:	4a cc       	lddpc	r12,800066d8 <_dtoa_r+0x148>
8000662a:	41 29       	lddsp	r9,sp[0x48]
8000662c:	58 09       	cp.w	r9,0
8000662e:	e0 80 05 9e 	breq	8000716a <_dtoa_r+0xbda>
80006632:	f8 c8 ff fd 	sub	r8,r12,-3
80006636:	f8 c9 ff f8 	sub	r9,r12,-8
8000663a:	11 8b       	ld.ub	r11,r8[0x0]
8000663c:	30 0a       	mov	r10,0
8000663e:	41 25       	lddsp	r5,sp[0x48]
80006640:	f4 0b 18 00 	cp.b	r11,r10
80006644:	f2 08 17 10 	movne	r8,r9
80006648:	c1 58       	rjmp	80006672 <_dtoa_r+0xe2>
8000664a:	fa ea 00 08 	ld.d	r10,sp[8]
8000664e:	30 08       	mov	r8,0
80006650:	fa eb 00 3c 	st.d	sp[60],r10
80006654:	30 09       	mov	r9,0
80006656:	e0 a0 14 f2 	rcall	8000903a <__avr32_f64_cmp_eq>
8000665a:	c0 f0       	breq	80006678 <_dtoa_r+0xe8>
8000665c:	30 18       	mov	r8,1
8000665e:	41 5a       	lddsp	r10,sp[0x54]
80006660:	95 08       	st.w	r10[0x0],r8
80006662:	49 fc       	lddpc	r12,800066dc <_dtoa_r+0x14c>
80006664:	41 29       	lddsp	r9,sp[0x48]
80006666:	f8 08 00 08 	add	r8,r12,r8
8000666a:	58 09       	cp.w	r9,0
8000666c:	e0 80 05 7f 	breq	8000716a <_dtoa_r+0xbda>
80006670:	12 95       	mov	r5,r9
80006672:	8b 08       	st.w	r5[0x0],r8
80006674:	e0 8f 05 7b 	bral	8000716a <_dtoa_r+0xbda>
80006678:	fa c8 ff 9c 	sub	r8,sp,-100
8000667c:	fa c9 ff a0 	sub	r9,sp,-96
80006680:	fa ea 00 3c 	ld.d	r10,sp[60]
80006684:	0e 9c       	mov	r12,r7
80006686:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
8000668a:	e0 a0 0c bf 	rcall	80008008 <__d2b>
8000668e:	18 93       	mov	r3,r12
80006690:	58 05       	cp.w	r5,0
80006692:	c0 d0       	breq	800066ac <_dtoa_r+0x11c>
80006694:	fa ea 00 3c 	ld.d	r10,sp[60]
80006698:	30 04       	mov	r4,0
8000669a:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
8000669e:	ea c5 03 ff 	sub	r5,r5,1023
800066a2:	10 9b       	mov	r11,r8
800066a4:	51 74       	stdsp	sp[0x5c],r4
800066a6:	ea 1b 3f f0 	orh	r11,0x3ff0
800066aa:	c2 a8       	rjmp	800066fe <_dtoa_r+0x16e>
800066ac:	41 88       	lddsp	r8,sp[0x60]
800066ae:	41 9c       	lddsp	r12,sp[0x64]
800066b0:	10 0c       	add	r12,r8
800066b2:	f8 c5 fb ce 	sub	r5,r12,-1074
800066b6:	e0 45 00 20 	cp.w	r5,32
800066ba:	e0 8a 00 13 	brle	800066e0 <_dtoa_r+0x150>
800066be:	f8 cc fb ee 	sub	r12,r12,-1042
800066c2:	40 3b       	lddsp	r11,sp[0xc]
800066c4:	ea 08 11 40 	rsub	r8,r5,64
800066c8:	f6 0c 0a 4c 	lsr	r12,r11,r12
800066cc:	ec 08 09 46 	lsl	r6,r6,r8
800066d0:	0c 4c       	or	r12,r6
800066d2:	c0 c8       	rjmp	800066ea <_dtoa_r+0x15a>
800066d4:	80 00       	ld.sh	r0,r0[0x0]
800066d6:	9e e0       	ld.uh	r0,pc[0xc]
800066d8:	80 00       	ld.sh	r0,r0[0x0]
800066da:	9e ec       	ld.uh	r12,pc[0xc]
800066dc:	80 00       	ld.sh	r0,r0[0x0]
800066de:	9d bc       	st.w	lr[0x2c],r12
800066e0:	ea 0c 11 20 	rsub	r12,r5,32
800066e4:	40 3a       	lddsp	r10,sp[0xc]
800066e6:	f4 0c 09 4c 	lsl	r12,r10,r12
800066ea:	e0 a0 14 34 	rcall	80008f52 <__avr32_u32_to_f64>
800066ee:	fc 18 fe 10 	movh	r8,0xfe10
800066f2:	30 19       	mov	r9,1
800066f4:	ea c5 04 33 	sub	r5,r5,1075
800066f8:	f0 0b 00 0b 	add	r11,r8,r11
800066fc:	51 79       	stdsp	sp[0x5c],r9
800066fe:	30 08       	mov	r8,0
80006700:	fc 19 3f f8 	movh	r9,0x3ff8
80006704:	e0 a0 12 bc 	rcall	80008c7c <__avr32_f64_sub>
80006708:	e0 68 43 61 	mov	r8,17249
8000670c:	ea 18 63 6f 	orh	r8,0x636f
80006710:	e0 69 87 a7 	mov	r9,34727
80006714:	ea 19 3f d2 	orh	r9,0x3fd2
80006718:	e0 a0 11 c6 	rcall	80008aa4 <__avr32_f64_mul>
8000671c:	e0 68 c8 b3 	mov	r8,51379
80006720:	ea 18 8b 60 	orh	r8,0x8b60
80006724:	e0 69 8a 28 	mov	r9,35368
80006728:	ea 19 3f c6 	orh	r9,0x3fc6
8000672c:	e0 a0 13 76 	rcall	80008e18 <__avr32_f64_add>
80006730:	0a 9c       	mov	r12,r5
80006732:	14 90       	mov	r0,r10
80006734:	16 91       	mov	r1,r11
80006736:	e0 a0 14 12 	rcall	80008f5a <__avr32_s32_to_f64>
8000673a:	e0 68 79 fb 	mov	r8,31227
8000673e:	ea 18 50 9f 	orh	r8,0x509f
80006742:	e0 69 44 13 	mov	r9,17427
80006746:	ea 19 3f d3 	orh	r9,0x3fd3
8000674a:	e0 a0 11 ad 	rcall	80008aa4 <__avr32_f64_mul>
8000674e:	14 98       	mov	r8,r10
80006750:	16 99       	mov	r9,r11
80006752:	00 9a       	mov	r10,r0
80006754:	02 9b       	mov	r11,r1
80006756:	e0 a0 13 61 	rcall	80008e18 <__avr32_f64_add>
8000675a:	14 90       	mov	r0,r10
8000675c:	16 91       	mov	r1,r11
8000675e:	e0 a0 13 e7 	rcall	80008f2c <__avr32_f64_to_s32>
80006762:	30 08       	mov	r8,0
80006764:	18 96       	mov	r6,r12
80006766:	30 09       	mov	r9,0
80006768:	00 9a       	mov	r10,r0
8000676a:	02 9b       	mov	r11,r1
8000676c:	e0 a0 14 ae 	rcall	800090c8 <__avr32_f64_cmp_lt>
80006770:	c0 c0       	breq	80006788 <_dtoa_r+0x1f8>
80006772:	0c 9c       	mov	r12,r6
80006774:	e0 a0 13 f3 	rcall	80008f5a <__avr32_s32_to_f64>
80006778:	14 98       	mov	r8,r10
8000677a:	16 99       	mov	r9,r11
8000677c:	00 9a       	mov	r10,r0
8000677e:	02 9b       	mov	r11,r1
80006780:	e0 a0 14 5d 	rcall	8000903a <__avr32_f64_cmp_eq>
80006784:	f7 b6 00 01 	subeq	r6,1
80006788:	59 66       	cp.w	r6,22
8000678a:	e0 88 00 05 	brls	80006794 <_dtoa_r+0x204>
8000678e:	30 18       	mov	r8,1
80006790:	51 48       	stdsp	sp[0x50],r8
80006792:	c1 28       	rjmp	800067b6 <_dtoa_r+0x226>
80006794:	4c 08       	lddpc	r8,80006894 <_dtoa_r+0x304>
80006796:	fa ea 00 3c 	ld.d	r10,sp[60]
8000679a:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
8000679e:	e0 a0 14 95 	rcall	800090c8 <__avr32_f64_cmp_lt>
800067a2:	f9 b4 00 00 	moveq	r4,0
800067a6:	fb f4 0a 14 	st.weq	sp[0x50],r4
800067aa:	f7 b6 01 01 	subne	r6,1
800067ae:	f9 bc 01 00 	movne	r12,0
800067b2:	fb fc 1a 14 	st.wne	sp[0x50],r12
800067b6:	41 90       	lddsp	r0,sp[0x64]
800067b8:	20 10       	sub	r0,1
800067ba:	0a 10       	sub	r0,r5
800067bc:	c0 46       	brmi	800067c4 <_dtoa_r+0x234>
800067be:	50 40       	stdsp	sp[0x10],r0
800067c0:	30 00       	mov	r0,0
800067c2:	c0 48       	rjmp	800067ca <_dtoa_r+0x23a>
800067c4:	30 0b       	mov	r11,0
800067c6:	5c 30       	neg	r0
800067c8:	50 4b       	stdsp	sp[0x10],r11
800067ca:	ec 02 11 00 	rsub	r2,r6,0
800067ce:	58 06       	cp.w	r6,0
800067d0:	fb fa 40 04 	ld.wge	r10,sp[0x10]
800067d4:	f5 d6 e4 0a 	addge	r10,r10,r6
800067d8:	fb fa 4a 04 	st.wge	sp[0x10],r10
800067dc:	fb f6 4a 11 	st.wge	sp[0x44],r6
800067e0:	f9 b2 04 00 	movge	r2,0
800067e4:	e1 d6 e5 10 	sublt	r0,r0,r6
800067e8:	f9 b9 05 00 	movlt	r9,0
800067ec:	fb f9 5a 11 	st.wlt	sp[0x44],r9
800067f0:	40 c8       	lddsp	r8,sp[0x30]
800067f2:	58 98       	cp.w	r8,9
800067f4:	e0 8b 00 20 	brhi	80006834 <_dtoa_r+0x2a4>
800067f8:	58 58       	cp.w	r8,5
800067fa:	f9 b4 0a 01 	movle	r4,1
800067fe:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
80006802:	f7 b5 09 04 	subgt	r5,4
80006806:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
8000680a:	f9 b4 09 00 	movgt	r4,0
8000680e:	40 cc       	lddsp	r12,sp[0x30]
80006810:	58 3c       	cp.w	r12,3
80006812:	c2 d0       	breq	8000686c <_dtoa_r+0x2dc>
80006814:	e0 89 00 05 	brgt	8000681e <_dtoa_r+0x28e>
80006818:	58 2c       	cp.w	r12,2
8000681a:	c1 01       	brne	8000683a <_dtoa_r+0x2aa>
8000681c:	c1 88       	rjmp	8000684c <_dtoa_r+0x2bc>
8000681e:	40 cb       	lddsp	r11,sp[0x30]
80006820:	58 4b       	cp.w	r11,4
80006822:	c0 60       	breq	8000682e <_dtoa_r+0x29e>
80006824:	58 5b       	cp.w	r11,5
80006826:	c0 a1       	brne	8000683a <_dtoa_r+0x2aa>
80006828:	30 1a       	mov	r10,1
8000682a:	50 da       	stdsp	sp[0x34],r10
8000682c:	c2 28       	rjmp	80006870 <_dtoa_r+0x2e0>
8000682e:	30 19       	mov	r9,1
80006830:	50 d9       	stdsp	sp[0x34],r9
80006832:	c0 f8       	rjmp	80006850 <_dtoa_r+0x2c0>
80006834:	30 08       	mov	r8,0
80006836:	30 14       	mov	r4,1
80006838:	50 c8       	stdsp	sp[0x30],r8
8000683a:	3f f5       	mov	r5,-1
8000683c:	30 1c       	mov	r12,1
8000683e:	30 0b       	mov	r11,0
80006840:	50 95       	stdsp	sp[0x24],r5
80006842:	50 dc       	stdsp	sp[0x34],r12
80006844:	0a 91       	mov	r1,r5
80006846:	31 28       	mov	r8,18
80006848:	50 eb       	stdsp	sp[0x38],r11
8000684a:	c2 08       	rjmp	8000688a <_dtoa_r+0x2fa>
8000684c:	30 0a       	mov	r10,0
8000684e:	50 da       	stdsp	sp[0x34],r10
80006850:	40 e9       	lddsp	r9,sp[0x38]
80006852:	58 09       	cp.w	r9,0
80006854:	e0 89 00 07 	brgt	80006862 <_dtoa_r+0x2d2>
80006858:	30 18       	mov	r8,1
8000685a:	50 98       	stdsp	sp[0x24],r8
8000685c:	10 91       	mov	r1,r8
8000685e:	50 e8       	stdsp	sp[0x38],r8
80006860:	c1 58       	rjmp	8000688a <_dtoa_r+0x2fa>
80006862:	40 e5       	lddsp	r5,sp[0x38]
80006864:	50 95       	stdsp	sp[0x24],r5
80006866:	0a 91       	mov	r1,r5
80006868:	0a 98       	mov	r8,r5
8000686a:	c1 08       	rjmp	8000688a <_dtoa_r+0x2fa>
8000686c:	30 0c       	mov	r12,0
8000686e:	50 dc       	stdsp	sp[0x34],r12
80006870:	40 eb       	lddsp	r11,sp[0x38]
80006872:	ec 0b 00 0b 	add	r11,r6,r11
80006876:	50 9b       	stdsp	sp[0x24],r11
80006878:	16 98       	mov	r8,r11
8000687a:	2f f8       	sub	r8,-1
8000687c:	58 08       	cp.w	r8,0
8000687e:	e0 89 00 05 	brgt	80006888 <_dtoa_r+0x2f8>
80006882:	10 91       	mov	r1,r8
80006884:	30 18       	mov	r8,1
80006886:	c0 28       	rjmp	8000688a <_dtoa_r+0x2fa>
80006888:	10 91       	mov	r1,r8
8000688a:	30 09       	mov	r9,0
8000688c:	6e 9a       	ld.w	r10,r7[0x24]
8000688e:	95 19       	st.w	r10[0x4],r9
80006890:	30 49       	mov	r9,4
80006892:	c0 78       	rjmp	800068a0 <_dtoa_r+0x310>
80006894:	80 00       	ld.sh	r0,r0[0x0]
80006896:	9f 9c       	st.w	pc[0x24],r12
80006898:	6a 1a       	ld.w	r10,r5[0x4]
8000689a:	a1 79       	lsl	r9,0x1
8000689c:	2f fa       	sub	r10,-1
8000689e:	8b 1a       	st.w	r5[0x4],r10
800068a0:	6e 95       	ld.w	r5,r7[0x24]
800068a2:	f2 ca ff ec 	sub	r10,r9,-20
800068a6:	10 3a       	cp.w	r10,r8
800068a8:	fe 98 ff f8 	brls	80006898 <_dtoa_r+0x308>
800068ac:	6a 1b       	ld.w	r11,r5[0x4]
800068ae:	0e 9c       	mov	r12,r7
800068b0:	e0 a0 0b 74 	rcall	80007f98 <_Balloc>
800068b4:	58 e1       	cp.w	r1,14
800068b6:	5f 88       	srls	r8
800068b8:	8b 0c       	st.w	r5[0x0],r12
800068ba:	f1 e4 00 04 	and	r4,r8,r4
800068be:	6e 98       	ld.w	r8,r7[0x24]
800068c0:	70 08       	ld.w	r8,r8[0x0]
800068c2:	50 88       	stdsp	sp[0x20],r8
800068c4:	e0 80 01 82 	breq	80006bc8 <_dtoa_r+0x638>
800068c8:	58 06       	cp.w	r6,0
800068ca:	e0 8a 00 40 	brle	8000694a <_dtoa_r+0x3ba>
800068ce:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
800068d2:	4c b8       	lddpc	r8,800069fc <_dtoa_r+0x46c>
800068d4:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
800068d8:	fa e5 00 18 	st.d	sp[24],r4
800068dc:	ec 04 14 04 	asr	r4,r6,0x4
800068e0:	ed b4 00 04 	bld	r4,0x4
800068e4:	c0 30       	breq	800068ea <_dtoa_r+0x35a>
800068e6:	30 25       	mov	r5,2
800068e8:	c0 f8       	rjmp	80006906 <_dtoa_r+0x376>
800068ea:	4c 68       	lddpc	r8,80006a00 <_dtoa_r+0x470>
800068ec:	f0 e8 00 20 	ld.d	r8,r8[32]
800068f0:	fa ea 00 3c 	ld.d	r10,sp[60]
800068f4:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
800068f8:	e0 a0 14 1c 	rcall	80009130 <__avr32_f64_div>
800068fc:	30 35       	mov	r5,3
800068fe:	14 98       	mov	r8,r10
80006900:	16 99       	mov	r9,r11
80006902:	fa e9 00 08 	st.d	sp[8],r8
80006906:	4b fc       	lddpc	r12,80006a00 <_dtoa_r+0x470>
80006908:	50 a3       	stdsp	sp[0x28],r3
8000690a:	0c 93       	mov	r3,r6
8000690c:	18 96       	mov	r6,r12
8000690e:	c0 f8       	rjmp	8000692c <_dtoa_r+0x39c>
80006910:	fa ea 00 18 	ld.d	r10,sp[24]
80006914:	ed b4 00 00 	bld	r4,0x0
80006918:	c0 81       	brne	80006928 <_dtoa_r+0x398>
8000691a:	ec e8 00 00 	ld.d	r8,r6[0]
8000691e:	2f f5       	sub	r5,-1
80006920:	e0 a0 10 c2 	rcall	80008aa4 <__avr32_f64_mul>
80006924:	fa eb 00 18 	st.d	sp[24],r10
80006928:	a1 54       	asr	r4,0x1
8000692a:	2f 86       	sub	r6,-8
8000692c:	58 04       	cp.w	r4,0
8000692e:	cf 11       	brne	80006910 <_dtoa_r+0x380>
80006930:	fa e8 00 18 	ld.d	r8,sp[24]
80006934:	fa ea 00 08 	ld.d	r10,sp[8]
80006938:	06 96       	mov	r6,r3
8000693a:	e0 a0 13 fb 	rcall	80009130 <__avr32_f64_div>
8000693e:	40 a3       	lddsp	r3,sp[0x28]
80006940:	14 98       	mov	r8,r10
80006942:	16 99       	mov	r9,r11
80006944:	fa e9 00 08 	st.d	sp[8],r8
80006948:	c2 d8       	rjmp	800069a2 <_dtoa_r+0x412>
8000694a:	ec 08 11 00 	rsub	r8,r6,0
8000694e:	c0 31       	brne	80006954 <_dtoa_r+0x3c4>
80006950:	30 25       	mov	r5,2
80006952:	c2 88       	rjmp	800069a2 <_dtoa_r+0x412>
80006954:	4a bc       	lddpc	r12,80006a00 <_dtoa_r+0x470>
80006956:	f0 04 14 04 	asr	r4,r8,0x4
8000695a:	50 1c       	stdsp	sp[0x4],r12
8000695c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80006960:	4a 79       	lddpc	r9,800069fc <_dtoa_r+0x46c>
80006962:	fa ea 00 3c 	ld.d	r10,sp[60]
80006966:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000696a:	e0 a0 10 9d 	rcall	80008aa4 <__avr32_f64_mul>
8000696e:	40 1c       	lddsp	r12,sp[0x4]
80006970:	50 63       	stdsp	sp[0x18],r3
80006972:	30 25       	mov	r5,2
80006974:	0c 93       	mov	r3,r6
80006976:	fa eb 00 08 	st.d	sp[8],r10
8000697a:	18 96       	mov	r6,r12
8000697c:	c0 f8       	rjmp	8000699a <_dtoa_r+0x40a>
8000697e:	fa ea 00 08 	ld.d	r10,sp[8]
80006982:	ed b4 00 00 	bld	r4,0x0
80006986:	c0 81       	brne	80006996 <_dtoa_r+0x406>
80006988:	ec e8 00 00 	ld.d	r8,r6[0]
8000698c:	2f f5       	sub	r5,-1
8000698e:	e0 a0 10 8b 	rcall	80008aa4 <__avr32_f64_mul>
80006992:	fa eb 00 08 	st.d	sp[8],r10
80006996:	a1 54       	asr	r4,0x1
80006998:	2f 86       	sub	r6,-8
8000699a:	58 04       	cp.w	r4,0
8000699c:	cf 11       	brne	8000697e <_dtoa_r+0x3ee>
8000699e:	06 96       	mov	r6,r3
800069a0:	40 63       	lddsp	r3,sp[0x18]
800069a2:	41 4a       	lddsp	r10,sp[0x50]
800069a4:	58 0a       	cp.w	r10,0
800069a6:	c2 f0       	breq	80006a04 <_dtoa_r+0x474>
800069a8:	fa e8 00 08 	ld.d	r8,sp[8]
800069ac:	58 01       	cp.w	r1,0
800069ae:	5f 94       	srgt	r4
800069b0:	fa e9 00 18 	st.d	sp[24],r8
800069b4:	30 08       	mov	r8,0
800069b6:	fc 19 3f f0 	movh	r9,0x3ff0
800069ba:	fa ea 00 18 	ld.d	r10,sp[24]
800069be:	e0 a0 13 85 	rcall	800090c8 <__avr32_f64_cmp_lt>
800069c2:	f9 bc 00 00 	moveq	r12,0
800069c6:	f9 bc 01 01 	movne	r12,1
800069ca:	e9 ec 00 0c 	and	r12,r4,r12
800069ce:	c1 b0       	breq	80006a04 <_dtoa_r+0x474>
800069d0:	40 98       	lddsp	r8,sp[0x24]
800069d2:	58 08       	cp.w	r8,0
800069d4:	e0 8a 00 f6 	brle	80006bc0 <_dtoa_r+0x630>
800069d8:	30 08       	mov	r8,0
800069da:	fc 19 40 24 	movh	r9,0x4024
800069de:	ec c4 00 01 	sub	r4,r6,1
800069e2:	fa ea 00 18 	ld.d	r10,sp[24]
800069e6:	2f f5       	sub	r5,-1
800069e8:	50 64       	stdsp	sp[0x18],r4
800069ea:	e0 a0 10 5d 	rcall	80008aa4 <__avr32_f64_mul>
800069ee:	40 94       	lddsp	r4,sp[0x24]
800069f0:	14 98       	mov	r8,r10
800069f2:	16 99       	mov	r9,r11
800069f4:	fa e9 00 08 	st.d	sp[8],r8
800069f8:	c0 88       	rjmp	80006a08 <_dtoa_r+0x478>
800069fa:	d7 03       	nop
800069fc:	80 00       	ld.sh	r0,r0[0x0]
800069fe:	9f 9c       	st.w	pc[0x24],r12
80006a00:	80 00       	ld.sh	r0,r0[0x0]
80006a02:	a0 64       	st.h	r0[0xc],r4
80006a04:	50 66       	stdsp	sp[0x18],r6
80006a06:	02 94       	mov	r4,r1
80006a08:	0a 9c       	mov	r12,r5
80006a0a:	e0 a0 12 a8 	rcall	80008f5a <__avr32_s32_to_f64>
80006a0e:	fa e8 00 08 	ld.d	r8,sp[8]
80006a12:	e0 a0 10 49 	rcall	80008aa4 <__avr32_f64_mul>
80006a16:	30 08       	mov	r8,0
80006a18:	fc 19 40 1c 	movh	r9,0x401c
80006a1c:	e0 a0 11 fe 	rcall	80008e18 <__avr32_f64_add>
80006a20:	14 98       	mov	r8,r10
80006a22:	16 99       	mov	r9,r11
80006a24:	fa e9 00 28 	st.d	sp[40],r8
80006a28:	fc 18 fc c0 	movh	r8,0xfcc0
80006a2c:	40 a5       	lddsp	r5,sp[0x28]
80006a2e:	10 05       	add	r5,r8
80006a30:	50 a5       	stdsp	sp[0x28],r5
80006a32:	58 04       	cp.w	r4,0
80006a34:	c2 11       	brne	80006a76 <_dtoa_r+0x4e6>
80006a36:	fa ea 00 08 	ld.d	r10,sp[8]
80006a3a:	30 08       	mov	r8,0
80006a3c:	fc 19 40 14 	movh	r9,0x4014
80006a40:	e0 a0 11 1e 	rcall	80008c7c <__avr32_f64_sub>
80006a44:	40 bc       	lddsp	r12,sp[0x2c]
80006a46:	fa eb 00 08 	st.d	sp[8],r10
80006a4a:	14 98       	mov	r8,r10
80006a4c:	16 99       	mov	r9,r11
80006a4e:	18 9a       	mov	r10,r12
80006a50:	0a 9b       	mov	r11,r5
80006a52:	e0 a0 13 3b 	rcall	800090c8 <__avr32_f64_cmp_lt>
80006a56:	e0 81 02 54 	brne	80006efe <_dtoa_r+0x96e>
80006a5a:	0a 98       	mov	r8,r5
80006a5c:	40 b9       	lddsp	r9,sp[0x2c]
80006a5e:	ee 18 80 00 	eorh	r8,0x8000
80006a62:	fa ea 00 08 	ld.d	r10,sp[8]
80006a66:	10 95       	mov	r5,r8
80006a68:	12 98       	mov	r8,r9
80006a6a:	0a 99       	mov	r9,r5
80006a6c:	e0 a0 13 2e 	rcall	800090c8 <__avr32_f64_cmp_lt>
80006a70:	e0 81 02 3e 	brne	80006eec <_dtoa_r+0x95c>
80006a74:	ca 68       	rjmp	80006bc0 <_dtoa_r+0x630>
80006a76:	4c e9       	lddpc	r9,80006bac <_dtoa_r+0x61c>
80006a78:	e8 c8 00 01 	sub	r8,r4,1
80006a7c:	40 d5       	lddsp	r5,sp[0x34]
80006a7e:	58 05       	cp.w	r5,0
80006a80:	c4 f0       	breq	80006b1e <_dtoa_r+0x58e>
80006a82:	30 0c       	mov	r12,0
80006a84:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80006a88:	51 3c       	stdsp	sp[0x4c],r12
80006a8a:	30 0a       	mov	r10,0
80006a8c:	fc 1b 3f e0 	movh	r11,0x3fe0
80006a90:	e0 a0 13 50 	rcall	80009130 <__avr32_f64_div>
80006a94:	fa e8 00 28 	ld.d	r8,sp[40]
80006a98:	40 85       	lddsp	r5,sp[0x20]
80006a9a:	e0 a0 10 f1 	rcall	80008c7c <__avr32_f64_sub>
80006a9e:	fa eb 00 28 	st.d	sp[40],r10
80006aa2:	fa ea 00 08 	ld.d	r10,sp[8]
80006aa6:	e0 a0 12 43 	rcall	80008f2c <__avr32_f64_to_s32>
80006aaa:	51 6c       	stdsp	sp[0x58],r12
80006aac:	e0 a0 12 57 	rcall	80008f5a <__avr32_s32_to_f64>
80006ab0:	14 98       	mov	r8,r10
80006ab2:	16 99       	mov	r9,r11
80006ab4:	fa ea 00 08 	ld.d	r10,sp[8]
80006ab8:	e0 a0 10 e2 	rcall	80008c7c <__avr32_f64_sub>
80006abc:	fa eb 00 08 	st.d	sp[8],r10
80006ac0:	41 68       	lddsp	r8,sp[0x58]
80006ac2:	2d 08       	sub	r8,-48
80006ac4:	0a c8       	st.b	r5++,r8
80006ac6:	41 39       	lddsp	r9,sp[0x4c]
80006ac8:	2f f9       	sub	r9,-1
80006aca:	51 39       	stdsp	sp[0x4c],r9
80006acc:	fa e8 00 28 	ld.d	r8,sp[40]
80006ad0:	e0 a0 12 fc 	rcall	800090c8 <__avr32_f64_cmp_lt>
80006ad4:	e0 81 03 3a 	brne	80007148 <_dtoa_r+0xbb8>
80006ad8:	fa e8 00 08 	ld.d	r8,sp[8]
80006adc:	30 0a       	mov	r10,0
80006ade:	fc 1b 3f f0 	movh	r11,0x3ff0
80006ae2:	e0 a0 10 cd 	rcall	80008c7c <__avr32_f64_sub>
80006ae6:	fa e8 00 28 	ld.d	r8,sp[40]
80006aea:	e0 a0 12 ef 	rcall	800090c8 <__avr32_f64_cmp_lt>
80006aee:	fa ea 00 28 	ld.d	r10,sp[40]
80006af2:	30 08       	mov	r8,0
80006af4:	fc 19 40 24 	movh	r9,0x4024
80006af8:	e0 81 00 da 	brne	80006cac <_dtoa_r+0x71c>
80006afc:	41 3c       	lddsp	r12,sp[0x4c]
80006afe:	08 3c       	cp.w	r12,r4
80006b00:	c6 04       	brge	80006bc0 <_dtoa_r+0x630>
80006b02:	e0 a0 0f d1 	rcall	80008aa4 <__avr32_f64_mul>
80006b06:	30 08       	mov	r8,0
80006b08:	fa eb 00 28 	st.d	sp[40],r10
80006b0c:	fc 19 40 24 	movh	r9,0x4024
80006b10:	fa ea 00 08 	ld.d	r10,sp[8]
80006b14:	e0 a0 0f c8 	rcall	80008aa4 <__avr32_f64_mul>
80006b18:	fa eb 00 08 	st.d	sp[8],r10
80006b1c:	cc 3b       	rjmp	80006aa2 <_dtoa_r+0x512>
80006b1e:	40 85       	lddsp	r5,sp[0x20]
80006b20:	08 05       	add	r5,r4
80006b22:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
80006b26:	51 35       	stdsp	sp[0x4c],r5
80006b28:	fa e8 00 28 	ld.d	r8,sp[40]
80006b2c:	40 85       	lddsp	r5,sp[0x20]
80006b2e:	e0 a0 0f bb 	rcall	80008aa4 <__avr32_f64_mul>
80006b32:	fa eb 00 28 	st.d	sp[40],r10
80006b36:	fa ea 00 08 	ld.d	r10,sp[8]
80006b3a:	e0 a0 11 f9 	rcall	80008f2c <__avr32_f64_to_s32>
80006b3e:	51 6c       	stdsp	sp[0x58],r12
80006b40:	e0 a0 12 0d 	rcall	80008f5a <__avr32_s32_to_f64>
80006b44:	14 98       	mov	r8,r10
80006b46:	16 99       	mov	r9,r11
80006b48:	fa ea 00 08 	ld.d	r10,sp[8]
80006b4c:	e0 a0 10 98 	rcall	80008c7c <__avr32_f64_sub>
80006b50:	fa eb 00 08 	st.d	sp[8],r10
80006b54:	41 68       	lddsp	r8,sp[0x58]
80006b56:	2d 08       	sub	r8,-48
80006b58:	0a c8       	st.b	r5++,r8
80006b5a:	41 3c       	lddsp	r12,sp[0x4c]
80006b5c:	18 35       	cp.w	r5,r12
80006b5e:	c2 91       	brne	80006bb0 <_dtoa_r+0x620>
80006b60:	30 08       	mov	r8,0
80006b62:	fc 19 3f e0 	movh	r9,0x3fe0
80006b66:	fa ea 00 28 	ld.d	r10,sp[40]
80006b6a:	e0 a0 11 57 	rcall	80008e18 <__avr32_f64_add>
80006b6e:	40 85       	lddsp	r5,sp[0x20]
80006b70:	fa e8 00 08 	ld.d	r8,sp[8]
80006b74:	08 05       	add	r5,r4
80006b76:	e0 a0 12 a9 	rcall	800090c8 <__avr32_f64_cmp_lt>
80006b7a:	e0 81 00 99 	brne	80006cac <_dtoa_r+0x71c>
80006b7e:	fa e8 00 28 	ld.d	r8,sp[40]
80006b82:	30 0a       	mov	r10,0
80006b84:	fc 1b 3f e0 	movh	r11,0x3fe0
80006b88:	e0 a0 10 7a 	rcall	80008c7c <__avr32_f64_sub>
80006b8c:	14 98       	mov	r8,r10
80006b8e:	16 99       	mov	r9,r11
80006b90:	fa ea 00 08 	ld.d	r10,sp[8]
80006b94:	e0 a0 12 9a 	rcall	800090c8 <__avr32_f64_cmp_lt>
80006b98:	c1 40       	breq	80006bc0 <_dtoa_r+0x630>
80006b9a:	33 09       	mov	r9,48
80006b9c:	0a 98       	mov	r8,r5
80006b9e:	11 7a       	ld.ub	r10,--r8
80006ba0:	f2 0a 18 00 	cp.b	r10,r9
80006ba4:	e0 81 02 d2 	brne	80007148 <_dtoa_r+0xbb8>
80006ba8:	10 95       	mov	r5,r8
80006baa:	cf 9b       	rjmp	80006b9c <_dtoa_r+0x60c>
80006bac:	80 00       	ld.sh	r0,r0[0x0]
80006bae:	9f 9c       	st.w	pc[0x24],r12
80006bb0:	30 08       	mov	r8,0
80006bb2:	fc 19 40 24 	movh	r9,0x4024
80006bb6:	e0 a0 0f 77 	rcall	80008aa4 <__avr32_f64_mul>
80006bba:	fa eb 00 08 	st.d	sp[8],r10
80006bbe:	cb cb       	rjmp	80006b36 <_dtoa_r+0x5a6>
80006bc0:	fa ea 00 3c 	ld.d	r10,sp[60]
80006bc4:	fa eb 00 08 	st.d	sp[8],r10
80006bc8:	58 e6       	cp.w	r6,14
80006bca:	5f ab       	srle	r11
80006bcc:	41 8a       	lddsp	r10,sp[0x60]
80006bce:	30 08       	mov	r8,0
80006bd0:	f4 09 11 ff 	rsub	r9,r10,-1
80006bd4:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
80006bd8:	f0 09 18 00 	cp.b	r9,r8
80006bdc:	e0 80 00 81 	breq	80006cde <_dtoa_r+0x74e>
80006be0:	40 ea       	lddsp	r10,sp[0x38]
80006be2:	58 01       	cp.w	r1,0
80006be4:	5f a9       	srle	r9
80006be6:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
80006bea:	4c 9a       	lddpc	r10,80006d0c <_dtoa_r+0x77c>
80006bec:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
80006bf0:	fa e5 00 10 	st.d	sp[16],r4
80006bf4:	f0 09 18 00 	cp.b	r9,r8
80006bf8:	c1 40       	breq	80006c20 <_dtoa_r+0x690>
80006bfa:	58 01       	cp.w	r1,0
80006bfc:	e0 81 01 78 	brne	80006eec <_dtoa_r+0x95c>
80006c00:	30 08       	mov	r8,0
80006c02:	fc 19 40 14 	movh	r9,0x4014
80006c06:	08 9a       	mov	r10,r4
80006c08:	0a 9b       	mov	r11,r5
80006c0a:	e0 a0 0f 4d 	rcall	80008aa4 <__avr32_f64_mul>
80006c0e:	fa e8 00 08 	ld.d	r8,sp[8]
80006c12:	e0 a0 12 27 	rcall	80009060 <__avr32_f64_cmp_ge>
80006c16:	e0 81 01 6b 	brne	80006eec <_dtoa_r+0x95c>
80006c1a:	02 92       	mov	r2,r1
80006c1c:	e0 8f 01 73 	bral	80006f02 <_dtoa_r+0x972>
80006c20:	40 85       	lddsp	r5,sp[0x20]
80006c22:	30 14       	mov	r4,1
80006c24:	fa e8 00 10 	ld.d	r8,sp[16]
80006c28:	fa ea 00 08 	ld.d	r10,sp[8]
80006c2c:	e0 a0 12 82 	rcall	80009130 <__avr32_f64_div>
80006c30:	e0 a0 11 7e 	rcall	80008f2c <__avr32_f64_to_s32>
80006c34:	18 92       	mov	r2,r12
80006c36:	e0 a0 11 92 	rcall	80008f5a <__avr32_s32_to_f64>
80006c3a:	fa e8 00 10 	ld.d	r8,sp[16]
80006c3e:	e0 a0 0f 33 	rcall	80008aa4 <__avr32_f64_mul>
80006c42:	14 98       	mov	r8,r10
80006c44:	16 99       	mov	r9,r11
80006c46:	fa ea 00 08 	ld.d	r10,sp[8]
80006c4a:	e0 a0 10 19 	rcall	80008c7c <__avr32_f64_sub>
80006c4e:	fa eb 00 08 	st.d	sp[8],r10
80006c52:	e4 c8 ff d0 	sub	r8,r2,-48
80006c56:	0a c8       	st.b	r5++,r8
80006c58:	fc 19 40 24 	movh	r9,0x4024
80006c5c:	30 08       	mov	r8,0
80006c5e:	02 34       	cp.w	r4,r1
80006c60:	c3 31       	brne	80006cc6 <_dtoa_r+0x736>
80006c62:	fa e8 00 08 	ld.d	r8,sp[8]
80006c66:	e0 a0 10 d9 	rcall	80008e18 <__avr32_f64_add>
80006c6a:	16 91       	mov	r1,r11
80006c6c:	14 90       	mov	r0,r10
80006c6e:	14 98       	mov	r8,r10
80006c70:	02 99       	mov	r9,r1
80006c72:	fa ea 00 10 	ld.d	r10,sp[16]
80006c76:	e0 a0 12 29 	rcall	800090c8 <__avr32_f64_cmp_lt>
80006c7a:	c1 a1       	brne	80006cae <_dtoa_r+0x71e>
80006c7c:	fa e8 00 10 	ld.d	r8,sp[16]
80006c80:	00 9a       	mov	r10,r0
80006c82:	02 9b       	mov	r11,r1
80006c84:	e0 a0 11 db 	rcall	8000903a <__avr32_f64_cmp_eq>
80006c88:	e0 80 02 5f 	breq	80007146 <_dtoa_r+0xbb6>
80006c8c:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
80006c90:	c0 f1       	brne	80006cae <_dtoa_r+0x71e>
80006c92:	e0 8f 02 5a 	bral	80007146 <_dtoa_r+0xbb6>
80006c96:	40 8a       	lddsp	r10,sp[0x20]
80006c98:	14 38       	cp.w	r8,r10
80006c9a:	c0 30       	breq	80006ca0 <_dtoa_r+0x710>
80006c9c:	10 95       	mov	r5,r8
80006c9e:	c0 98       	rjmp	80006cb0 <_dtoa_r+0x720>
80006ca0:	33 08       	mov	r8,48
80006ca2:	40 89       	lddsp	r9,sp[0x20]
80006ca4:	2f f6       	sub	r6,-1
80006ca6:	b2 88       	st.b	r9[0x0],r8
80006ca8:	40 88       	lddsp	r8,sp[0x20]
80006caa:	c0 88       	rjmp	80006cba <_dtoa_r+0x72a>
80006cac:	40 66       	lddsp	r6,sp[0x18]
80006cae:	33 99       	mov	r9,57
80006cb0:	0a 98       	mov	r8,r5
80006cb2:	11 7a       	ld.ub	r10,--r8
80006cb4:	f2 0a 18 00 	cp.b	r10,r9
80006cb8:	ce f0       	breq	80006c96 <_dtoa_r+0x706>
80006cba:	50 66       	stdsp	sp[0x18],r6
80006cbc:	11 89       	ld.ub	r9,r8[0x0]
80006cbe:	2f f9       	sub	r9,-1
80006cc0:	b0 89       	st.b	r8[0x0],r9
80006cc2:	e0 8f 02 43 	bral	80007148 <_dtoa_r+0xbb8>
80006cc6:	e0 a0 0e ef 	rcall	80008aa4 <__avr32_f64_mul>
80006cca:	2f f4       	sub	r4,-1
80006ccc:	fa eb 00 08 	st.d	sp[8],r10
80006cd0:	30 08       	mov	r8,0
80006cd2:	30 09       	mov	r9,0
80006cd4:	e0 a0 11 b3 	rcall	8000903a <__avr32_f64_cmp_eq>
80006cd8:	ca 60       	breq	80006c24 <_dtoa_r+0x694>
80006cda:	e0 8f 02 36 	bral	80007146 <_dtoa_r+0xbb6>
80006cde:	40 d8       	lddsp	r8,sp[0x34]
80006ce0:	58 08       	cp.w	r8,0
80006ce2:	c0 51       	brne	80006cec <_dtoa_r+0x75c>
80006ce4:	04 98       	mov	r8,r2
80006ce6:	00 95       	mov	r5,r0
80006ce8:	40 d4       	lddsp	r4,sp[0x34]
80006cea:	c3 88       	rjmp	80006d5a <_dtoa_r+0x7ca>
80006cec:	40 c5       	lddsp	r5,sp[0x30]
80006cee:	58 15       	cp.w	r5,1
80006cf0:	e0 89 00 10 	brgt	80006d10 <_dtoa_r+0x780>
80006cf4:	41 74       	lddsp	r4,sp[0x5c]
80006cf6:	58 04       	cp.w	r4,0
80006cf8:	c0 40       	breq	80006d00 <_dtoa_r+0x770>
80006cfa:	f4 c9 fb cd 	sub	r9,r10,-1075
80006cfe:	c0 48       	rjmp	80006d06 <_dtoa_r+0x776>
80006d00:	41 99       	lddsp	r9,sp[0x64]
80006d02:	f2 09 11 36 	rsub	r9,r9,54
80006d06:	04 98       	mov	r8,r2
80006d08:	00 95       	mov	r5,r0
80006d0a:	c1 d8       	rjmp	80006d44 <_dtoa_r+0x7b4>
80006d0c:	80 00       	ld.sh	r0,r0[0x0]
80006d0e:	9f 9c       	st.w	pc[0x24],r12
80006d10:	e2 c8 00 01 	sub	r8,r1,1
80006d14:	58 01       	cp.w	r1,0
80006d16:	e0 05 17 40 	movge	r5,r0
80006d1a:	e2 09 17 40 	movge	r9,r1
80006d1e:	e1 d1 e5 15 	sublt	r5,r0,r1
80006d22:	f9 b9 05 00 	movlt	r9,0
80006d26:	10 32       	cp.w	r2,r8
80006d28:	e5 d8 e4 18 	subge	r8,r2,r8
80006d2c:	f1 d2 e5 18 	sublt	r8,r8,r2
80006d30:	e5 d8 e5 02 	addlt	r2,r2,r8
80006d34:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
80006d38:	f9 d8 e5 0c 	addlt	r12,r12,r8
80006d3c:	fb fc 5a 11 	st.wlt	sp[0x44],r12
80006d40:	f9 b8 05 00 	movlt	r8,0
80006d44:	40 4b       	lddsp	r11,sp[0x10]
80006d46:	12 0b       	add	r11,r9
80006d48:	50 08       	stdsp	sp[0x0],r8
80006d4a:	50 4b       	stdsp	sp[0x10],r11
80006d4c:	12 00       	add	r0,r9
80006d4e:	30 1b       	mov	r11,1
80006d50:	0e 9c       	mov	r12,r7
80006d52:	e0 a0 0a d7 	rcall	80008300 <__i2b>
80006d56:	40 08       	lddsp	r8,sp[0x0]
80006d58:	18 94       	mov	r4,r12
80006d5a:	40 4a       	lddsp	r10,sp[0x10]
80006d5c:	58 05       	cp.w	r5,0
80006d5e:	5f 99       	srgt	r9
80006d60:	58 0a       	cp.w	r10,0
80006d62:	5f 9a       	srgt	r10
80006d64:	f5 e9 00 09 	and	r9,r10,r9
80006d68:	c0 80       	breq	80006d78 <_dtoa_r+0x7e8>
80006d6a:	40 4c       	lddsp	r12,sp[0x10]
80006d6c:	f8 05 0d 49 	min	r9,r12,r5
80006d70:	12 1c       	sub	r12,r9
80006d72:	12 10       	sub	r0,r9
80006d74:	50 4c       	stdsp	sp[0x10],r12
80006d76:	12 15       	sub	r5,r9
80006d78:	58 02       	cp.w	r2,0
80006d7a:	e0 8a 00 27 	brle	80006dc8 <_dtoa_r+0x838>
80006d7e:	40 db       	lddsp	r11,sp[0x34]
80006d80:	58 0b       	cp.w	r11,0
80006d82:	c1 d0       	breq	80006dbc <_dtoa_r+0x82c>
80006d84:	58 08       	cp.w	r8,0
80006d86:	e0 8a 00 17 	brle	80006db4 <_dtoa_r+0x824>
80006d8a:	10 9a       	mov	r10,r8
80006d8c:	50 08       	stdsp	sp[0x0],r8
80006d8e:	08 9b       	mov	r11,r4
80006d90:	0e 9c       	mov	r12,r7
80006d92:	e0 a0 0a fd 	rcall	8000838c <__pow5mult>
80006d96:	06 9a       	mov	r10,r3
80006d98:	18 9b       	mov	r11,r12
80006d9a:	18 94       	mov	r4,r12
80006d9c:	0e 9c       	mov	r12,r7
80006d9e:	e0 a0 0a 31 	rcall	80008200 <__multiply>
80006da2:	18 99       	mov	r9,r12
80006da4:	06 9b       	mov	r11,r3
80006da6:	50 19       	stdsp	sp[0x4],r9
80006da8:	0e 9c       	mov	r12,r7
80006daa:	e0 a0 08 dd 	rcall	80007f64 <_Bfree>
80006dae:	40 19       	lddsp	r9,sp[0x4]
80006db0:	40 08       	lddsp	r8,sp[0x0]
80006db2:	12 93       	mov	r3,r9
80006db4:	e4 08 01 0a 	sub	r10,r2,r8
80006db8:	c0 80       	breq	80006dc8 <_dtoa_r+0x838>
80006dba:	c0 28       	rjmp	80006dbe <_dtoa_r+0x82e>
80006dbc:	04 9a       	mov	r10,r2
80006dbe:	06 9b       	mov	r11,r3
80006dc0:	0e 9c       	mov	r12,r7
80006dc2:	e0 a0 0a e5 	rcall	8000838c <__pow5mult>
80006dc6:	18 93       	mov	r3,r12
80006dc8:	30 1b       	mov	r11,1
80006dca:	0e 9c       	mov	r12,r7
80006dcc:	e0 a0 0a 9a 	rcall	80008300 <__i2b>
80006dd0:	41 1a       	lddsp	r10,sp[0x44]
80006dd2:	18 92       	mov	r2,r12
80006dd4:	58 0a       	cp.w	r10,0
80006dd6:	e0 8a 00 07 	brle	80006de4 <_dtoa_r+0x854>
80006dda:	18 9b       	mov	r11,r12
80006ddc:	0e 9c       	mov	r12,r7
80006dde:	e0 a0 0a d7 	rcall	8000838c <__pow5mult>
80006de2:	18 92       	mov	r2,r12
80006de4:	40 c9       	lddsp	r9,sp[0x30]
80006de6:	58 19       	cp.w	r9,1
80006de8:	e0 89 00 14 	brgt	80006e10 <_dtoa_r+0x880>
80006dec:	40 38       	lddsp	r8,sp[0xc]
80006dee:	58 08       	cp.w	r8,0
80006df0:	c1 01       	brne	80006e10 <_dtoa_r+0x880>
80006df2:	40 29       	lddsp	r9,sp[0x8]
80006df4:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
80006df8:	c0 c1       	brne	80006e10 <_dtoa_r+0x880>
80006dfa:	12 98       	mov	r8,r9
80006dfc:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80006e00:	c0 80       	breq	80006e10 <_dtoa_r+0x880>
80006e02:	40 4c       	lddsp	r12,sp[0x10]
80006e04:	30 1b       	mov	r11,1
80006e06:	2f fc       	sub	r12,-1
80006e08:	2f f0       	sub	r0,-1
80006e0a:	50 4c       	stdsp	sp[0x10],r12
80006e0c:	50 6b       	stdsp	sp[0x18],r11
80006e0e:	c0 38       	rjmp	80006e14 <_dtoa_r+0x884>
80006e10:	30 0a       	mov	r10,0
80006e12:	50 6a       	stdsp	sp[0x18],r10
80006e14:	41 19       	lddsp	r9,sp[0x44]
80006e16:	58 09       	cp.w	r9,0
80006e18:	c0 31       	brne	80006e1e <_dtoa_r+0x88e>
80006e1a:	30 1c       	mov	r12,1
80006e1c:	c0 98       	rjmp	80006e2e <_dtoa_r+0x89e>
80006e1e:	64 48       	ld.w	r8,r2[0x10]
80006e20:	2f c8       	sub	r8,-4
80006e22:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
80006e26:	e0 a0 08 0e 	rcall	80007e42 <__hi0bits>
80006e2a:	f8 0c 11 20 	rsub	r12,r12,32
80006e2e:	40 4b       	lddsp	r11,sp[0x10]
80006e30:	f8 0b 00 08 	add	r8,r12,r11
80006e34:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80006e38:	c0 c0       	breq	80006e50 <_dtoa_r+0x8c0>
80006e3a:	f0 08 11 20 	rsub	r8,r8,32
80006e3e:	58 48       	cp.w	r8,4
80006e40:	e0 8a 00 06 	brle	80006e4c <_dtoa_r+0x8bc>
80006e44:	20 48       	sub	r8,4
80006e46:	10 0b       	add	r11,r8
80006e48:	50 4b       	stdsp	sp[0x10],r11
80006e4a:	c0 78       	rjmp	80006e58 <_dtoa_r+0x8c8>
80006e4c:	58 48       	cp.w	r8,4
80006e4e:	c0 70       	breq	80006e5c <_dtoa_r+0x8cc>
80006e50:	40 4a       	lddsp	r10,sp[0x10]
80006e52:	2e 48       	sub	r8,-28
80006e54:	10 0a       	add	r10,r8
80006e56:	50 4a       	stdsp	sp[0x10],r10
80006e58:	10 00       	add	r0,r8
80006e5a:	10 05       	add	r5,r8
80006e5c:	58 00       	cp.w	r0,0
80006e5e:	e0 8a 00 08 	brle	80006e6e <_dtoa_r+0x8de>
80006e62:	06 9b       	mov	r11,r3
80006e64:	00 9a       	mov	r10,r0
80006e66:	0e 9c       	mov	r12,r7
80006e68:	e0 a0 09 88 	rcall	80008178 <__lshift>
80006e6c:	18 93       	mov	r3,r12
80006e6e:	40 49       	lddsp	r9,sp[0x10]
80006e70:	58 09       	cp.w	r9,0
80006e72:	e0 8a 00 08 	brle	80006e82 <_dtoa_r+0x8f2>
80006e76:	04 9b       	mov	r11,r2
80006e78:	12 9a       	mov	r10,r9
80006e7a:	0e 9c       	mov	r12,r7
80006e7c:	e0 a0 09 7e 	rcall	80008178 <__lshift>
80006e80:	18 92       	mov	r2,r12
80006e82:	41 48       	lddsp	r8,sp[0x50]
80006e84:	58 08       	cp.w	r8,0
80006e86:	c1 b0       	breq	80006ebc <_dtoa_r+0x92c>
80006e88:	04 9b       	mov	r11,r2
80006e8a:	06 9c       	mov	r12,r3
80006e8c:	e0 a0 08 52 	rcall	80007f30 <__mcmp>
80006e90:	c1 64       	brge	80006ebc <_dtoa_r+0x92c>
80006e92:	06 9b       	mov	r11,r3
80006e94:	30 09       	mov	r9,0
80006e96:	30 aa       	mov	r10,10
80006e98:	0e 9c       	mov	r12,r7
80006e9a:	e0 a0 0a 3b 	rcall	80008310 <__multadd>
80006e9e:	20 16       	sub	r6,1
80006ea0:	18 93       	mov	r3,r12
80006ea2:	40 dc       	lddsp	r12,sp[0x34]
80006ea4:	58 0c       	cp.w	r12,0
80006ea6:	c0 31       	brne	80006eac <_dtoa_r+0x91c>
80006ea8:	40 91       	lddsp	r1,sp[0x24]
80006eaa:	c0 98       	rjmp	80006ebc <_dtoa_r+0x92c>
80006eac:	08 9b       	mov	r11,r4
80006eae:	40 91       	lddsp	r1,sp[0x24]
80006eb0:	30 09       	mov	r9,0
80006eb2:	30 aa       	mov	r10,10
80006eb4:	0e 9c       	mov	r12,r7
80006eb6:	e0 a0 0a 2d 	rcall	80008310 <__multadd>
80006eba:	18 94       	mov	r4,r12
80006ebc:	58 01       	cp.w	r1,0
80006ebe:	5f a9       	srle	r9
80006ec0:	40 cb       	lddsp	r11,sp[0x30]
80006ec2:	58 2b       	cp.w	r11,2
80006ec4:	5f 98       	srgt	r8
80006ec6:	f3 e8 00 08 	and	r8,r9,r8
80006eca:	c2 50       	breq	80006f14 <_dtoa_r+0x984>
80006ecc:	58 01       	cp.w	r1,0
80006ece:	c1 11       	brne	80006ef0 <_dtoa_r+0x960>
80006ed0:	04 9b       	mov	r11,r2
80006ed2:	02 99       	mov	r9,r1
80006ed4:	30 5a       	mov	r10,5
80006ed6:	0e 9c       	mov	r12,r7
80006ed8:	e0 a0 0a 1c 	rcall	80008310 <__multadd>
80006edc:	18 92       	mov	r2,r12
80006ede:	18 9b       	mov	r11,r12
80006ee0:	06 9c       	mov	r12,r3
80006ee2:	e0 a0 08 27 	rcall	80007f30 <__mcmp>
80006ee6:	e0 89 00 0f 	brgt	80006f04 <_dtoa_r+0x974>
80006eea:	c0 38       	rjmp	80006ef0 <_dtoa_r+0x960>
80006eec:	30 02       	mov	r2,0
80006eee:	04 94       	mov	r4,r2
80006ef0:	40 ea       	lddsp	r10,sp[0x38]
80006ef2:	30 09       	mov	r9,0
80006ef4:	5c da       	com	r10
80006ef6:	40 85       	lddsp	r5,sp[0x20]
80006ef8:	50 6a       	stdsp	sp[0x18],r10
80006efa:	50 49       	stdsp	sp[0x10],r9
80006efc:	c0 f9       	rjmp	8000711a <_dtoa_r+0xb8a>
80006efe:	08 92       	mov	r2,r4
80006f00:	40 66       	lddsp	r6,sp[0x18]
80006f02:	04 94       	mov	r4,r2
80006f04:	2f f6       	sub	r6,-1
80006f06:	50 66       	stdsp	sp[0x18],r6
80006f08:	33 18       	mov	r8,49
80006f0a:	40 85       	lddsp	r5,sp[0x20]
80006f0c:	0a c8       	st.b	r5++,r8
80006f0e:	30 08       	mov	r8,0
80006f10:	50 48       	stdsp	sp[0x10],r8
80006f12:	c0 49       	rjmp	8000711a <_dtoa_r+0xb8a>
80006f14:	40 dc       	lddsp	r12,sp[0x34]
80006f16:	58 0c       	cp.w	r12,0
80006f18:	e0 80 00 b5 	breq	80007082 <_dtoa_r+0xaf2>
80006f1c:	58 05       	cp.w	r5,0
80006f1e:	e0 8a 00 08 	brle	80006f2e <_dtoa_r+0x99e>
80006f22:	08 9b       	mov	r11,r4
80006f24:	0a 9a       	mov	r10,r5
80006f26:	0e 9c       	mov	r12,r7
80006f28:	e0 a0 09 28 	rcall	80008178 <__lshift>
80006f2c:	18 94       	mov	r4,r12
80006f2e:	40 6b       	lddsp	r11,sp[0x18]
80006f30:	58 0b       	cp.w	r11,0
80006f32:	c0 31       	brne	80006f38 <_dtoa_r+0x9a8>
80006f34:	08 9c       	mov	r12,r4
80006f36:	c1 38       	rjmp	80006f5c <_dtoa_r+0x9cc>
80006f38:	68 1b       	ld.w	r11,r4[0x4]
80006f3a:	0e 9c       	mov	r12,r7
80006f3c:	e0 a0 08 2e 	rcall	80007f98 <_Balloc>
80006f40:	68 4a       	ld.w	r10,r4[0x10]
80006f42:	18 95       	mov	r5,r12
80006f44:	e8 cb ff f4 	sub	r11,r4,-12
80006f48:	2f ea       	sub	r10,-2
80006f4a:	2f 4c       	sub	r12,-12
80006f4c:	a3 6a       	lsl	r10,0x2
80006f4e:	fe b0 e7 a3 	rcall	80003e94 <memcpy>
80006f52:	0a 9b       	mov	r11,r5
80006f54:	30 1a       	mov	r10,1
80006f56:	0e 9c       	mov	r12,r7
80006f58:	e0 a0 09 10 	rcall	80008178 <__lshift>
80006f5c:	50 44       	stdsp	sp[0x10],r4
80006f5e:	40 3a       	lddsp	r10,sp[0xc]
80006f60:	30 19       	mov	r9,1
80006f62:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80006f66:	18 94       	mov	r4,r12
80006f68:	50 da       	stdsp	sp[0x34],r10
80006f6a:	40 85       	lddsp	r5,sp[0x20]
80006f6c:	50 99       	stdsp	sp[0x24],r9
80006f6e:	50 26       	stdsp	sp[0x8],r6
80006f70:	50 e1       	stdsp	sp[0x38],r1
80006f72:	04 9b       	mov	r11,r2
80006f74:	06 9c       	mov	r12,r3
80006f76:	fe b0 fa 7d 	rcall	80006470 <quorem>
80006f7a:	40 4b       	lddsp	r11,sp[0x10]
80006f7c:	f8 c0 ff d0 	sub	r0,r12,-48
80006f80:	06 9c       	mov	r12,r3
80006f82:	e0 a0 07 d7 	rcall	80007f30 <__mcmp>
80006f86:	08 9a       	mov	r10,r4
80006f88:	50 6c       	stdsp	sp[0x18],r12
80006f8a:	04 9b       	mov	r11,r2
80006f8c:	0e 9c       	mov	r12,r7
80006f8e:	e0 a0 08 8d 	rcall	800080a8 <__mdiff>
80006f92:	18 91       	mov	r1,r12
80006f94:	78 38       	ld.w	r8,r12[0xc]
80006f96:	58 08       	cp.w	r8,0
80006f98:	c0 30       	breq	80006f9e <_dtoa_r+0xa0e>
80006f9a:	30 16       	mov	r6,1
80006f9c:	c0 68       	rjmp	80006fa8 <_dtoa_r+0xa18>
80006f9e:	18 9b       	mov	r11,r12
80006fa0:	06 9c       	mov	r12,r3
80006fa2:	e0 a0 07 c7 	rcall	80007f30 <__mcmp>
80006fa6:	18 96       	mov	r6,r12
80006fa8:	0e 9c       	mov	r12,r7
80006faa:	02 9b       	mov	r11,r1
80006fac:	e0 a0 07 dc 	rcall	80007f64 <_Bfree>
80006fb0:	40 cc       	lddsp	r12,sp[0x30]
80006fb2:	ed ec 10 08 	or	r8,r6,r12
80006fb6:	c0 d1       	brne	80006fd0 <_dtoa_r+0xa40>
80006fb8:	40 db       	lddsp	r11,sp[0x34]
80006fba:	58 0b       	cp.w	r11,0
80006fbc:	c0 a1       	brne	80006fd0 <_dtoa_r+0xa40>
80006fbe:	40 26       	lddsp	r6,sp[0x8]
80006fc0:	e0 40 00 39 	cp.w	r0,57
80006fc4:	c3 00       	breq	80007024 <_dtoa_r+0xa94>
80006fc6:	40 6a       	lddsp	r10,sp[0x18]
80006fc8:	58 0a       	cp.w	r10,0
80006fca:	e0 89 00 24 	brgt	80007012 <_dtoa_r+0xa82>
80006fce:	c2 f8       	rjmp	8000702c <_dtoa_r+0xa9c>
80006fd0:	40 69       	lddsp	r9,sp[0x18]
80006fd2:	58 09       	cp.w	r9,0
80006fd4:	c0 85       	brlt	80006fe4 <_dtoa_r+0xa54>
80006fd6:	12 98       	mov	r8,r9
80006fd8:	40 cc       	lddsp	r12,sp[0x30]
80006fda:	18 48       	or	r8,r12
80006fdc:	c1 d1       	brne	80007016 <_dtoa_r+0xa86>
80006fde:	40 db       	lddsp	r11,sp[0x34]
80006fe0:	58 0b       	cp.w	r11,0
80006fe2:	c1 a1       	brne	80007016 <_dtoa_r+0xa86>
80006fe4:	0c 99       	mov	r9,r6
80006fe6:	40 26       	lddsp	r6,sp[0x8]
80006fe8:	58 09       	cp.w	r9,0
80006fea:	e0 8a 00 21 	brle	8000702c <_dtoa_r+0xa9c>
80006fee:	06 9b       	mov	r11,r3
80006ff0:	30 1a       	mov	r10,1
80006ff2:	0e 9c       	mov	r12,r7
80006ff4:	e0 a0 08 c2 	rcall	80008178 <__lshift>
80006ff8:	04 9b       	mov	r11,r2
80006ffa:	18 93       	mov	r3,r12
80006ffc:	e0 a0 07 9a 	rcall	80007f30 <__mcmp>
80007000:	e0 89 00 06 	brgt	8000700c <_dtoa_r+0xa7c>
80007004:	c1 41       	brne	8000702c <_dtoa_r+0xa9c>
80007006:	ed b0 00 00 	bld	r0,0x0
8000700a:	c1 11       	brne	8000702c <_dtoa_r+0xa9c>
8000700c:	e0 40 00 39 	cp.w	r0,57
80007010:	c0 a0       	breq	80007024 <_dtoa_r+0xa94>
80007012:	2f f0       	sub	r0,-1
80007014:	c0 c8       	rjmp	8000702c <_dtoa_r+0xa9c>
80007016:	58 06       	cp.w	r6,0
80007018:	e0 8a 00 0c 	brle	80007030 <_dtoa_r+0xaa0>
8000701c:	40 26       	lddsp	r6,sp[0x8]
8000701e:	e0 40 00 39 	cp.w	r0,57
80007022:	c0 41       	brne	8000702a <_dtoa_r+0xa9a>
80007024:	33 98       	mov	r8,57
80007026:	0a c8       	st.b	r5++,r8
80007028:	c6 78       	rjmp	800070f6 <_dtoa_r+0xb66>
8000702a:	2f f0       	sub	r0,-1
8000702c:	0a c0       	st.b	r5++,r0
8000702e:	c7 58       	rjmp	80007118 <_dtoa_r+0xb88>
80007030:	0a c0       	st.b	r5++,r0
80007032:	40 9a       	lddsp	r10,sp[0x24]
80007034:	40 e9       	lddsp	r9,sp[0x38]
80007036:	12 3a       	cp.w	r10,r9
80007038:	c4 30       	breq	800070be <_dtoa_r+0xb2e>
8000703a:	06 9b       	mov	r11,r3
8000703c:	30 09       	mov	r9,0
8000703e:	30 aa       	mov	r10,10
80007040:	0e 9c       	mov	r12,r7
80007042:	e0 a0 09 67 	rcall	80008310 <__multadd>
80007046:	40 48       	lddsp	r8,sp[0x10]
80007048:	18 93       	mov	r3,r12
8000704a:	08 38       	cp.w	r8,r4
8000704c:	c0 91       	brne	8000705e <_dtoa_r+0xace>
8000704e:	10 9b       	mov	r11,r8
80007050:	30 09       	mov	r9,0
80007052:	30 aa       	mov	r10,10
80007054:	0e 9c       	mov	r12,r7
80007056:	e0 a0 09 5d 	rcall	80008310 <__multadd>
8000705a:	50 4c       	stdsp	sp[0x10],r12
8000705c:	c0 e8       	rjmp	80007078 <_dtoa_r+0xae8>
8000705e:	40 4b       	lddsp	r11,sp[0x10]
80007060:	30 09       	mov	r9,0
80007062:	30 aa       	mov	r10,10
80007064:	0e 9c       	mov	r12,r7
80007066:	e0 a0 09 55 	rcall	80008310 <__multadd>
8000706a:	08 9b       	mov	r11,r4
8000706c:	50 4c       	stdsp	sp[0x10],r12
8000706e:	30 09       	mov	r9,0
80007070:	30 aa       	mov	r10,10
80007072:	0e 9c       	mov	r12,r7
80007074:	e0 a0 09 4e 	rcall	80008310 <__multadd>
80007078:	18 94       	mov	r4,r12
8000707a:	40 9c       	lddsp	r12,sp[0x24]
8000707c:	2f fc       	sub	r12,-1
8000707e:	50 9c       	stdsp	sp[0x24],r12
80007080:	c7 9b       	rjmp	80006f72 <_dtoa_r+0x9e2>
80007082:	30 18       	mov	r8,1
80007084:	06 90       	mov	r0,r3
80007086:	40 85       	lddsp	r5,sp[0x20]
80007088:	08 93       	mov	r3,r4
8000708a:	0c 94       	mov	r4,r6
8000708c:	10 96       	mov	r6,r8
8000708e:	04 9b       	mov	r11,r2
80007090:	00 9c       	mov	r12,r0
80007092:	fe b0 f9 ef 	rcall	80006470 <quorem>
80007096:	2d 0c       	sub	r12,-48
80007098:	0a cc       	st.b	r5++,r12
8000709a:	02 36       	cp.w	r6,r1
8000709c:	c0 a4       	brge	800070b0 <_dtoa_r+0xb20>
8000709e:	00 9b       	mov	r11,r0
800070a0:	30 09       	mov	r9,0
800070a2:	30 aa       	mov	r10,10
800070a4:	0e 9c       	mov	r12,r7
800070a6:	2f f6       	sub	r6,-1
800070a8:	e0 a0 09 34 	rcall	80008310 <__multadd>
800070ac:	18 90       	mov	r0,r12
800070ae:	cf 0b       	rjmp	8000708e <_dtoa_r+0xafe>
800070b0:	08 96       	mov	r6,r4
800070b2:	30 0b       	mov	r11,0
800070b4:	06 94       	mov	r4,r3
800070b6:	50 4b       	stdsp	sp[0x10],r11
800070b8:	00 93       	mov	r3,r0
800070ba:	18 90       	mov	r0,r12
800070bc:	c0 28       	rjmp	800070c0 <_dtoa_r+0xb30>
800070be:	40 26       	lddsp	r6,sp[0x8]
800070c0:	06 9b       	mov	r11,r3
800070c2:	30 1a       	mov	r10,1
800070c4:	0e 9c       	mov	r12,r7
800070c6:	e0 a0 08 59 	rcall	80008178 <__lshift>
800070ca:	04 9b       	mov	r11,r2
800070cc:	18 93       	mov	r3,r12
800070ce:	e0 a0 07 31 	rcall	80007f30 <__mcmp>
800070d2:	e0 89 00 12 	brgt	800070f6 <_dtoa_r+0xb66>
800070d6:	c1 b1       	brne	8000710c <_dtoa_r+0xb7c>
800070d8:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
800070dc:	c0 d1       	brne	800070f6 <_dtoa_r+0xb66>
800070de:	c1 78       	rjmp	8000710c <_dtoa_r+0xb7c>
800070e0:	40 89       	lddsp	r9,sp[0x20]
800070e2:	12 38       	cp.w	r8,r9
800070e4:	c0 30       	breq	800070ea <_dtoa_r+0xb5a>
800070e6:	10 95       	mov	r5,r8
800070e8:	c0 88       	rjmp	800070f8 <_dtoa_r+0xb68>
800070ea:	2f f6       	sub	r6,-1
800070ec:	50 66       	stdsp	sp[0x18],r6
800070ee:	33 18       	mov	r8,49
800070f0:	40 8c       	lddsp	r12,sp[0x20]
800070f2:	b8 88       	st.b	r12[0x0],r8
800070f4:	c1 38       	rjmp	8000711a <_dtoa_r+0xb8a>
800070f6:	33 9a       	mov	r10,57
800070f8:	0a 98       	mov	r8,r5
800070fa:	11 79       	ld.ub	r9,--r8
800070fc:	f4 09 18 00 	cp.b	r9,r10
80007100:	cf 00       	breq	800070e0 <_dtoa_r+0xb50>
80007102:	2f f9       	sub	r9,-1
80007104:	b0 89       	st.b	r8[0x0],r9
80007106:	c0 98       	rjmp	80007118 <_dtoa_r+0xb88>
80007108:	10 95       	mov	r5,r8
8000710a:	c0 28       	rjmp	8000710e <_dtoa_r+0xb7e>
8000710c:	33 09       	mov	r9,48
8000710e:	0a 98       	mov	r8,r5
80007110:	11 7a       	ld.ub	r10,--r8
80007112:	f2 0a 18 00 	cp.b	r10,r9
80007116:	cf 90       	breq	80007108 <_dtoa_r+0xb78>
80007118:	50 66       	stdsp	sp[0x18],r6
8000711a:	04 9b       	mov	r11,r2
8000711c:	0e 9c       	mov	r12,r7
8000711e:	e0 a0 07 23 	rcall	80007f64 <_Bfree>
80007122:	58 04       	cp.w	r4,0
80007124:	c1 20       	breq	80007148 <_dtoa_r+0xbb8>
80007126:	40 4b       	lddsp	r11,sp[0x10]
80007128:	08 3b       	cp.w	r11,r4
8000712a:	5f 19       	srne	r9
8000712c:	58 0b       	cp.w	r11,0
8000712e:	5f 18       	srne	r8
80007130:	f3 e8 00 08 	and	r8,r9,r8
80007134:	c0 40       	breq	8000713c <_dtoa_r+0xbac>
80007136:	0e 9c       	mov	r12,r7
80007138:	e0 a0 07 16 	rcall	80007f64 <_Bfree>
8000713c:	08 9b       	mov	r11,r4
8000713e:	0e 9c       	mov	r12,r7
80007140:	e0 a0 07 12 	rcall	80007f64 <_Bfree>
80007144:	c0 28       	rjmp	80007148 <_dtoa_r+0xbb8>
80007146:	50 66       	stdsp	sp[0x18],r6
80007148:	0e 9c       	mov	r12,r7
8000714a:	06 9b       	mov	r11,r3
8000714c:	e0 a0 07 0c 	rcall	80007f64 <_Bfree>
80007150:	30 08       	mov	r8,0
80007152:	aa 88       	st.b	r5[0x0],r8
80007154:	40 68       	lddsp	r8,sp[0x18]
80007156:	41 5a       	lddsp	r10,sp[0x54]
80007158:	2f f8       	sub	r8,-1
8000715a:	41 29       	lddsp	r9,sp[0x48]
8000715c:	95 08       	st.w	r10[0x0],r8
8000715e:	40 8c       	lddsp	r12,sp[0x20]
80007160:	58 09       	cp.w	r9,0
80007162:	fb f8 10 12 	ld.wne	r8,sp[0x48]
80007166:	f1 f5 1a 00 	st.wne	r8[0x0],r5
8000716a:	2e 6d       	sub	sp,-104
8000716c:	d8 32       	popm	r0-r7,pc
8000716e:	d7 03       	nop

80007170 <_fflush_r>:
80007170:	d4 21       	pushm	r4-r7,lr
80007172:	16 97       	mov	r7,r11
80007174:	18 96       	mov	r6,r12
80007176:	76 48       	ld.w	r8,r11[0x10]
80007178:	58 08       	cp.w	r8,0
8000717a:	c7 c0       	breq	80007272 <_fflush_r+0x102>
8000717c:	58 0c       	cp.w	r12,0
8000717e:	c0 50       	breq	80007188 <_fflush_r+0x18>
80007180:	78 68       	ld.w	r8,r12[0x18]
80007182:	58 08       	cp.w	r8,0
80007184:	c0 21       	brne	80007188 <_fflush_r+0x18>
80007186:	cd 1c       	rcall	80007328 <__sinit>
80007188:	4b b8       	lddpc	r8,80007274 <_fflush_r+0x104>
8000718a:	10 37       	cp.w	r7,r8
8000718c:	c0 31       	brne	80007192 <_fflush_r+0x22>
8000718e:	6c 07       	ld.w	r7,r6[0x0]
80007190:	c0 a8       	rjmp	800071a4 <_fflush_r+0x34>
80007192:	4b a8       	lddpc	r8,80007278 <_fflush_r+0x108>
80007194:	10 37       	cp.w	r7,r8
80007196:	c0 31       	brne	8000719c <_fflush_r+0x2c>
80007198:	6c 17       	ld.w	r7,r6[0x4]
8000719a:	c0 58       	rjmp	800071a4 <_fflush_r+0x34>
8000719c:	4b 88       	lddpc	r8,8000727c <_fflush_r+0x10c>
8000719e:	10 37       	cp.w	r7,r8
800071a0:	ed f7 00 02 	ld.weq	r7,r6[0x8]
800071a4:	8e 6a       	ld.sh	r10,r7[0xc]
800071a6:	14 98       	mov	r8,r10
800071a8:	ed ba 00 03 	bld	r10,0x3
800071ac:	c4 20       	breq	80007230 <_fflush_r+0xc0>
800071ae:	ab ba       	sbr	r10,0xb
800071b0:	ae 6a       	st.h	r7[0xc],r10
800071b2:	6e 18       	ld.w	r8,r7[0x4]
800071b4:	58 08       	cp.w	r8,0
800071b6:	e0 89 00 06 	brgt	800071c2 <_fflush_r+0x52>
800071ba:	6f 08       	ld.w	r8,r7[0x40]
800071bc:	58 08       	cp.w	r8,0
800071be:	e0 8a 00 5a 	brle	80007272 <_fflush_r+0x102>
800071c2:	6e b8       	ld.w	r8,r7[0x2c]
800071c4:	58 08       	cp.w	r8,0
800071c6:	c5 60       	breq	80007272 <_fflush_r+0x102>
800071c8:	e2 1a 10 00 	andl	r10,0x1000,COH
800071cc:	c0 30       	breq	800071d2 <_fflush_r+0x62>
800071ce:	6f 55       	ld.w	r5,r7[0x54]
800071d0:	c0 f8       	rjmp	800071ee <_fflush_r+0x7e>
800071d2:	30 19       	mov	r9,1
800071d4:	6e 8b       	ld.w	r11,r7[0x20]
800071d6:	0c 9c       	mov	r12,r6
800071d8:	5d 18       	icall	r8
800071da:	18 95       	mov	r5,r12
800071dc:	5b fc       	cp.w	r12,-1
800071de:	c0 81       	brne	800071ee <_fflush_r+0x7e>
800071e0:	6c 38       	ld.w	r8,r6[0xc]
800071e2:	59 d8       	cp.w	r8,29
800071e4:	c4 70       	breq	80007272 <_fflush_r+0x102>
800071e6:	8e 68       	ld.sh	r8,r7[0xc]
800071e8:	a7 a8       	sbr	r8,0x6
800071ea:	ae 68       	st.h	r7[0xc],r8
800071ec:	d8 22       	popm	r4-r7,pc
800071ee:	8e 68       	ld.sh	r8,r7[0xc]
800071f0:	ed b8 00 02 	bld	r8,0x2
800071f4:	c0 91       	brne	80007206 <_fflush_r+0x96>
800071f6:	6e 18       	ld.w	r8,r7[0x4]
800071f8:	10 15       	sub	r5,r8
800071fa:	6e d8       	ld.w	r8,r7[0x34]
800071fc:	58 08       	cp.w	r8,0
800071fe:	ef f8 10 10 	ld.wne	r8,r7[0x40]
80007202:	eb d8 e1 15 	subne	r5,r5,r8
80007206:	6e b8       	ld.w	r8,r7[0x2c]
80007208:	0c 9c       	mov	r12,r6
8000720a:	30 09       	mov	r9,0
8000720c:	0a 9a       	mov	r10,r5
8000720e:	6e 8b       	ld.w	r11,r7[0x20]
80007210:	5d 18       	icall	r8
80007212:	8e 68       	ld.sh	r8,r7[0xc]
80007214:	0a 3c       	cp.w	r12,r5
80007216:	c2 61       	brne	80007262 <_fflush_r+0xf2>
80007218:	ab d8       	cbr	r8,0xb
8000721a:	30 0c       	mov	r12,0
8000721c:	6e 49       	ld.w	r9,r7[0x10]
8000721e:	ae 68       	st.h	r7[0xc],r8
80007220:	8f 1c       	st.w	r7[0x4],r12
80007222:	8f 09       	st.w	r7[0x0],r9
80007224:	ed b8 00 0c 	bld	r8,0xc
80007228:	c2 51       	brne	80007272 <_fflush_r+0x102>
8000722a:	ef 45 00 54 	st.w	r7[84],r5
8000722e:	d8 22       	popm	r4-r7,pc
80007230:	6e 45       	ld.w	r5,r7[0x10]
80007232:	58 05       	cp.w	r5,0
80007234:	c1 f0       	breq	80007272 <_fflush_r+0x102>
80007236:	6e 04       	ld.w	r4,r7[0x0]
80007238:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
8000723c:	8f 05       	st.w	r7[0x0],r5
8000723e:	f9 b8 01 00 	movne	r8,0
80007242:	ef f8 00 05 	ld.weq	r8,r7[0x14]
80007246:	0a 14       	sub	r4,r5
80007248:	8f 28       	st.w	r7[0x8],r8
8000724a:	c1 18       	rjmp	8000726c <_fflush_r+0xfc>
8000724c:	08 99       	mov	r9,r4
8000724e:	0a 9a       	mov	r10,r5
80007250:	6e a8       	ld.w	r8,r7[0x28]
80007252:	6e 8b       	ld.w	r11,r7[0x20]
80007254:	0c 9c       	mov	r12,r6
80007256:	5d 18       	icall	r8
80007258:	18 14       	sub	r4,r12
8000725a:	58 0c       	cp.w	r12,0
8000725c:	e0 89 00 07 	brgt	8000726a <_fflush_r+0xfa>
80007260:	8e 68       	ld.sh	r8,r7[0xc]
80007262:	a7 a8       	sbr	r8,0x6
80007264:	3f fc       	mov	r12,-1
80007266:	ae 68       	st.h	r7[0xc],r8
80007268:	d8 22       	popm	r4-r7,pc
8000726a:	18 05       	add	r5,r12
8000726c:	58 04       	cp.w	r4,0
8000726e:	fe 99 ff ef 	brgt	8000724c <_fflush_r+0xdc>
80007272:	d8 2a       	popm	r4-r7,pc,r12=0
80007274:	80 00       	ld.sh	r0,r0[0x0]
80007276:	9e f0       	ld.uh	r0,pc[0xe]
80007278:	80 00       	ld.sh	r0,r0[0x0]
8000727a:	9f 10       	st.w	pc[0x4],r0
8000727c:	80 00       	ld.sh	r0,r0[0x0]
8000727e:	9f 30       	st.w	pc[0xc],r0

80007280 <__sfp_lock_acquire>:
80007280:	5e fc       	retal	r12

80007282 <__sfp_lock_release>:
80007282:	5e fc       	retal	r12

80007284 <_cleanup_r>:
80007284:	d4 01       	pushm	lr
80007286:	fe cb e8 66 	sub	r11,pc,-6042
8000728a:	e0 a0 03 03 	rcall	80007890 <_fwalk>
8000728e:	d8 02       	popm	pc

80007290 <__sfmoreglue>:
80007290:	d4 21       	pushm	r4-r7,lr
80007292:	16 95       	mov	r5,r11
80007294:	f6 06 10 5c 	mul	r6,r11,92
80007298:	ec cb ff f4 	sub	r11,r6,-12
8000729c:	e0 a0 03 8a 	rcall	800079b0 <_malloc_r>
800072a0:	18 97       	mov	r7,r12
800072a2:	c0 90       	breq	800072b4 <__sfmoreglue+0x24>
800072a4:	99 15       	st.w	r12[0x4],r5
800072a6:	30 0b       	mov	r11,0
800072a8:	2f 4c       	sub	r12,-12
800072aa:	0c 9a       	mov	r10,r6
800072ac:	8f 2c       	st.w	r7[0x8],r12
800072ae:	8f 0b       	st.w	r7[0x0],r11
800072b0:	e0 a0 05 c0 	rcall	80007e30 <memset>
800072b4:	0e 9c       	mov	r12,r7
800072b6:	d8 22       	popm	r4-r7,pc

800072b8 <__sfp>:
800072b8:	d4 21       	pushm	r4-r7,lr
800072ba:	49 b8       	lddpc	r8,80007324 <__sfp+0x6c>
800072bc:	18 96       	mov	r6,r12
800072be:	70 07       	ld.w	r7,r8[0x0]
800072c0:	6e 68       	ld.w	r8,r7[0x18]
800072c2:	58 08       	cp.w	r8,0
800072c4:	c0 31       	brne	800072ca <__sfp+0x12>
800072c6:	0e 9c       	mov	r12,r7
800072c8:	c3 0c       	rcall	80007328 <__sinit>
800072ca:	ee c7 ff 28 	sub	r7,r7,-216
800072ce:	30 05       	mov	r5,0
800072d0:	6e 2c       	ld.w	r12,r7[0x8]
800072d2:	6e 18       	ld.w	r8,r7[0x4]
800072d4:	c0 68       	rjmp	800072e0 <__sfp+0x28>
800072d6:	98 69       	ld.sh	r9,r12[0xc]
800072d8:	ea 09 19 00 	cp.h	r9,r5
800072dc:	c1 10       	breq	800072fe <__sfp+0x46>
800072de:	2a 4c       	sub	r12,-92
800072e0:	20 18       	sub	r8,1
800072e2:	cf a7       	brpl	800072d6 <__sfp+0x1e>
800072e4:	6e 08       	ld.w	r8,r7[0x0]
800072e6:	58 08       	cp.w	r8,0
800072e8:	c0 61       	brne	800072f4 <__sfp+0x3c>
800072ea:	30 4b       	mov	r11,4
800072ec:	0c 9c       	mov	r12,r6
800072ee:	cd 1f       	rcall	80007290 <__sfmoreglue>
800072f0:	8f 0c       	st.w	r7[0x0],r12
800072f2:	c0 30       	breq	800072f8 <__sfp+0x40>
800072f4:	6e 07       	ld.w	r7,r7[0x0]
800072f6:	ce db       	rjmp	800072d0 <__sfp+0x18>
800072f8:	30 c8       	mov	r8,12
800072fa:	8d 38       	st.w	r6[0xc],r8
800072fc:	d8 22       	popm	r4-r7,pc
800072fe:	30 08       	mov	r8,0
80007300:	f9 48 00 4c 	st.w	r12[76],r8
80007304:	99 08       	st.w	r12[0x0],r8
80007306:	99 28       	st.w	r12[0x8],r8
80007308:	99 18       	st.w	r12[0x4],r8
8000730a:	99 48       	st.w	r12[0x10],r8
8000730c:	99 58       	st.w	r12[0x14],r8
8000730e:	99 68       	st.w	r12[0x18],r8
80007310:	99 d8       	st.w	r12[0x34],r8
80007312:	99 e8       	st.w	r12[0x38],r8
80007314:	f9 48 00 48 	st.w	r12[72],r8
80007318:	3f f8       	mov	r8,-1
8000731a:	b8 78       	st.h	r12[0xe],r8
8000731c:	30 18       	mov	r8,1
8000731e:	b8 68       	st.h	r12[0xc],r8
80007320:	d8 22       	popm	r4-r7,pc
80007322:	d7 03       	nop
80007324:	80 00       	ld.sh	r0,r0[0x0]
80007326:	9b 08       	st.w	sp[0x0],r8

80007328 <__sinit>:
80007328:	d4 21       	pushm	r4-r7,lr
8000732a:	18 96       	mov	r6,r12
8000732c:	78 67       	ld.w	r7,r12[0x18]
8000732e:	58 07       	cp.w	r7,0
80007330:	c4 91       	brne	800073c2 <__sinit+0x9a>
80007332:	fe c8 00 ae 	sub	r8,pc,174
80007336:	30 15       	mov	r5,1
80007338:	99 a8       	st.w	r12[0x28],r8
8000733a:	f9 47 00 d8 	st.w	r12[216],r7
8000733e:	f9 47 00 dc 	st.w	r12[220],r7
80007342:	f9 47 00 e0 	st.w	r12[224],r7
80007346:	99 65       	st.w	r12[0x18],r5
80007348:	cb 8f       	rcall	800072b8 <__sfp>
8000734a:	8d 0c       	st.w	r6[0x0],r12
8000734c:	0c 9c       	mov	r12,r6
8000734e:	cb 5f       	rcall	800072b8 <__sfp>
80007350:	8d 1c       	st.w	r6[0x4],r12
80007352:	0c 9c       	mov	r12,r6
80007354:	cb 2f       	rcall	800072b8 <__sfp>
80007356:	6c 09       	ld.w	r9,r6[0x0]
80007358:	30 48       	mov	r8,4
8000735a:	93 07       	st.w	r9[0x0],r7
8000735c:	b2 68       	st.h	r9[0xc],r8
8000735e:	93 17       	st.w	r9[0x4],r7
80007360:	93 27       	st.w	r9[0x8],r7
80007362:	6c 18       	ld.w	r8,r6[0x4]
80007364:	b2 77       	st.h	r9[0xe],r7
80007366:	93 47       	st.w	r9[0x10],r7
80007368:	93 57       	st.w	r9[0x14],r7
8000736a:	93 67       	st.w	r9[0x18],r7
8000736c:	93 89       	st.w	r9[0x20],r9
8000736e:	91 07       	st.w	r8[0x0],r7
80007370:	91 17       	st.w	r8[0x4],r7
80007372:	91 27       	st.w	r8[0x8],r7
80007374:	fe ce eb d8 	sub	lr,pc,-5160
80007378:	fe cb ec 08 	sub	r11,pc,-5112
8000737c:	93 9e       	st.w	r9[0x24],lr
8000737e:	93 ab       	st.w	r9[0x28],r11
80007380:	fe ca ec 30 	sub	r10,pc,-5072
80007384:	fe c4 ec 3c 	sub	r4,pc,-5060
80007388:	93 ba       	st.w	r9[0x2c],r10
8000738a:	93 c4       	st.w	r9[0x30],r4
8000738c:	30 99       	mov	r9,9
8000738e:	b0 69       	st.h	r8[0xc],r9
80007390:	b0 75       	st.h	r8[0xe],r5
80007392:	91 c4       	st.w	r8[0x30],r4
80007394:	91 47       	st.w	r8[0x10],r7
80007396:	91 57       	st.w	r8[0x14],r7
80007398:	91 67       	st.w	r8[0x18],r7
8000739a:	91 88       	st.w	r8[0x20],r8
8000739c:	91 9e       	st.w	r8[0x24],lr
8000739e:	91 ab       	st.w	r8[0x28],r11
800073a0:	91 ba       	st.w	r8[0x2c],r10
800073a2:	8d 2c       	st.w	r6[0x8],r12
800073a4:	31 28       	mov	r8,18
800073a6:	99 07       	st.w	r12[0x0],r7
800073a8:	b8 68       	st.h	r12[0xc],r8
800073aa:	99 17       	st.w	r12[0x4],r7
800073ac:	99 27       	st.w	r12[0x8],r7
800073ae:	30 28       	mov	r8,2
800073b0:	b8 78       	st.h	r12[0xe],r8
800073b2:	99 c4       	st.w	r12[0x30],r4
800073b4:	99 67       	st.w	r12[0x18],r7
800073b6:	99 9e       	st.w	r12[0x24],lr
800073b8:	99 ab       	st.w	r12[0x28],r11
800073ba:	99 ba       	st.w	r12[0x2c],r10
800073bc:	99 47       	st.w	r12[0x10],r7
800073be:	99 57       	st.w	r12[0x14],r7
800073c0:	99 8c       	st.w	r12[0x20],r12
800073c2:	d8 22       	popm	r4-r7,pc

800073c4 <_malloc_trim_r>:
800073c4:	d4 21       	pushm	r4-r7,lr
800073c6:	16 95       	mov	r5,r11
800073c8:	18 97       	mov	r7,r12
800073ca:	e0 a0 05 3a 	rcall	80007e3e <__malloc_lock>
800073ce:	4a 24       	lddpc	r4,80007454 <_malloc_trim_r+0x90>
800073d0:	68 28       	ld.w	r8,r4[0x8]
800073d2:	70 16       	ld.w	r6,r8[0x4]
800073d4:	e0 16 ff fc 	andl	r6,0xfffc
800073d8:	ec c8 ff 91 	sub	r8,r6,-111
800073dc:	f0 05 01 05 	sub	r5,r8,r5
800073e0:	e0 15 ff 80 	andl	r5,0xff80
800073e4:	ea c5 00 80 	sub	r5,r5,128
800073e8:	e0 45 00 7f 	cp.w	r5,127
800073ec:	e0 8a 00 23 	brle	80007432 <_malloc_trim_r+0x6e>
800073f0:	30 0b       	mov	r11,0
800073f2:	0e 9c       	mov	r12,r7
800073f4:	e0 a0 09 9a 	rcall	80008728 <_sbrk_r>
800073f8:	68 28       	ld.w	r8,r4[0x8]
800073fa:	0c 08       	add	r8,r6
800073fc:	10 3c       	cp.w	r12,r8
800073fe:	c1 a1       	brne	80007432 <_malloc_trim_r+0x6e>
80007400:	ea 0b 11 00 	rsub	r11,r5,0
80007404:	0e 9c       	mov	r12,r7
80007406:	e0 a0 09 91 	rcall	80008728 <_sbrk_r>
8000740a:	5b fc       	cp.w	r12,-1
8000740c:	c1 71       	brne	8000743a <_malloc_trim_r+0x76>
8000740e:	30 0b       	mov	r11,0
80007410:	0e 9c       	mov	r12,r7
80007412:	e0 a0 09 8b 	rcall	80008728 <_sbrk_r>
80007416:	68 28       	ld.w	r8,r4[0x8]
80007418:	f8 08 01 09 	sub	r9,r12,r8
8000741c:	58 f9       	cp.w	r9,15
8000741e:	e0 8a 00 0a 	brle	80007432 <_malloc_trim_r+0x6e>
80007422:	a1 a9       	sbr	r9,0x0
80007424:	91 19       	st.w	r8[0x4],r9
80007426:	48 d8       	lddpc	r8,80007458 <_malloc_trim_r+0x94>
80007428:	70 09       	ld.w	r9,r8[0x0]
8000742a:	48 d8       	lddpc	r8,8000745c <_malloc_trim_r+0x98>
8000742c:	f8 09 01 09 	sub	r9,r12,r9
80007430:	91 09       	st.w	r8[0x0],r9
80007432:	0e 9c       	mov	r12,r7
80007434:	e0 a0 05 06 	rcall	80007e40 <__malloc_unlock>
80007438:	d8 2a       	popm	r4-r7,pc,r12=0
8000743a:	68 28       	ld.w	r8,r4[0x8]
8000743c:	0a 16       	sub	r6,r5
8000743e:	a1 a6       	sbr	r6,0x0
80007440:	91 16       	st.w	r8[0x4],r6
80007442:	48 78       	lddpc	r8,8000745c <_malloc_trim_r+0x98>
80007444:	70 09       	ld.w	r9,r8[0x0]
80007446:	0a 19       	sub	r9,r5
80007448:	0e 9c       	mov	r12,r7
8000744a:	91 09       	st.w	r8[0x0],r9
8000744c:	e0 a0 04 fa 	rcall	80007e40 <__malloc_unlock>
80007450:	da 2a       	popm	r4-r7,pc,r12=1
80007452:	d7 03       	nop
80007454:	00 00       	add	r0,r0
80007456:	01 c8       	ld.ub	r8,r0[0x4]
80007458:	00 00       	add	r0,r0
8000745a:	05 d4       	ld.ub	r4,r2[0x5]
8000745c:	00 00       	add	r0,r0
8000745e:	0c 6c       	and	r12,r6

80007460 <_free_r>:
80007460:	d4 21       	pushm	r4-r7,lr
80007462:	16 96       	mov	r6,r11
80007464:	18 97       	mov	r7,r12
80007466:	58 0b       	cp.w	r11,0
80007468:	e0 80 00 c2 	breq	800075ec <_free_r+0x18c>
8000746c:	e0 a0 04 e9 	rcall	80007e3e <__malloc_lock>
80007470:	20 86       	sub	r6,8
80007472:	4c ba       	lddpc	r10,8000759c <_free_r+0x13c>
80007474:	6c 18       	ld.w	r8,r6[0x4]
80007476:	74 2e       	ld.w	lr,r10[0x8]
80007478:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
8000747c:	a1 c8       	cbr	r8,0x0
8000747e:	ec 08 00 09 	add	r9,r6,r8
80007482:	72 1b       	ld.w	r11,r9[0x4]
80007484:	e0 1b ff fc 	andl	r11,0xfffc
80007488:	1c 39       	cp.w	r9,lr
8000748a:	c1 c1       	brne	800074c2 <_free_r+0x62>
8000748c:	f6 08 00 08 	add	r8,r11,r8
80007490:	58 0c       	cp.w	r12,0
80007492:	c0 81       	brne	800074a2 <_free_r+0x42>
80007494:	6c 09       	ld.w	r9,r6[0x0]
80007496:	12 16       	sub	r6,r9
80007498:	12 08       	add	r8,r9
8000749a:	6c 3b       	ld.w	r11,r6[0xc]
8000749c:	6c 29       	ld.w	r9,r6[0x8]
8000749e:	97 29       	st.w	r11[0x8],r9
800074a0:	93 3b       	st.w	r9[0xc],r11
800074a2:	10 99       	mov	r9,r8
800074a4:	95 26       	st.w	r10[0x8],r6
800074a6:	a1 a9       	sbr	r9,0x0
800074a8:	8d 19       	st.w	r6[0x4],r9
800074aa:	4b e9       	lddpc	r9,800075a0 <_free_r+0x140>
800074ac:	72 09       	ld.w	r9,r9[0x0]
800074ae:	12 38       	cp.w	r8,r9
800074b0:	c0 53       	brcs	800074ba <_free_r+0x5a>
800074b2:	4b d8       	lddpc	r8,800075a4 <_free_r+0x144>
800074b4:	0e 9c       	mov	r12,r7
800074b6:	70 0b       	ld.w	r11,r8[0x0]
800074b8:	c8 6f       	rcall	800073c4 <_malloc_trim_r>
800074ba:	0e 9c       	mov	r12,r7
800074bc:	e0 a0 04 c2 	rcall	80007e40 <__malloc_unlock>
800074c0:	d8 22       	popm	r4-r7,pc
800074c2:	93 1b       	st.w	r9[0x4],r11
800074c4:	58 0c       	cp.w	r12,0
800074c6:	c0 30       	breq	800074cc <_free_r+0x6c>
800074c8:	30 0c       	mov	r12,0
800074ca:	c1 08       	rjmp	800074ea <_free_r+0x8a>
800074cc:	6c 0e       	ld.w	lr,r6[0x0]
800074ce:	f4 c5 ff f8 	sub	r5,r10,-8
800074d2:	1c 16       	sub	r6,lr
800074d4:	1c 08       	add	r8,lr
800074d6:	6c 2e       	ld.w	lr,r6[0x8]
800074d8:	0a 3e       	cp.w	lr,r5
800074da:	f9 bc 00 01 	moveq	r12,1
800074de:	ed f5 10 03 	ld.wne	r5,r6[0xc]
800074e2:	eb fe 1a 02 	st.wne	r5[0x8],lr
800074e6:	fd f5 1a 03 	st.wne	lr[0xc],r5
800074ea:	f2 0b 00 0e 	add	lr,r9,r11
800074ee:	7c 1e       	ld.w	lr,lr[0x4]
800074f0:	ed be 00 00 	bld	lr,0x0
800074f4:	c1 30       	breq	8000751a <_free_r+0xba>
800074f6:	16 08       	add	r8,r11
800074f8:	58 0c       	cp.w	r12,0
800074fa:	c0 c1       	brne	80007512 <_free_r+0xb2>
800074fc:	4a 8e       	lddpc	lr,8000759c <_free_r+0x13c>
800074fe:	72 2b       	ld.w	r11,r9[0x8]
80007500:	2f 8e       	sub	lr,-8
80007502:	1c 3b       	cp.w	r11,lr
80007504:	c0 71       	brne	80007512 <_free_r+0xb2>
80007506:	97 36       	st.w	r11[0xc],r6
80007508:	97 26       	st.w	r11[0x8],r6
8000750a:	8d 2b       	st.w	r6[0x8],r11
8000750c:	8d 3b       	st.w	r6[0xc],r11
8000750e:	30 1c       	mov	r12,1
80007510:	c0 58       	rjmp	8000751a <_free_r+0xba>
80007512:	72 2b       	ld.w	r11,r9[0x8]
80007514:	72 39       	ld.w	r9,r9[0xc]
80007516:	93 2b       	st.w	r9[0x8],r11
80007518:	97 39       	st.w	r11[0xc],r9
8000751a:	10 99       	mov	r9,r8
8000751c:	ec 08 09 08 	st.w	r6[r8],r8
80007520:	a1 a9       	sbr	r9,0x0
80007522:	8d 19       	st.w	r6[0x4],r9
80007524:	58 0c       	cp.w	r12,0
80007526:	c6 01       	brne	800075e6 <_free_r+0x186>
80007528:	e0 48 01 ff 	cp.w	r8,511
8000752c:	e0 8b 00 13 	brhi	80007552 <_free_r+0xf2>
80007530:	a3 98       	lsr	r8,0x3
80007532:	f4 08 00 39 	add	r9,r10,r8<<0x3
80007536:	72 2b       	ld.w	r11,r9[0x8]
80007538:	8d 39       	st.w	r6[0xc],r9
8000753a:	8d 2b       	st.w	r6[0x8],r11
8000753c:	97 36       	st.w	r11[0xc],r6
8000753e:	93 26       	st.w	r9[0x8],r6
80007540:	a3 48       	asr	r8,0x2
80007542:	74 19       	ld.w	r9,r10[0x4]
80007544:	30 1b       	mov	r11,1
80007546:	f6 08 09 48 	lsl	r8,r11,r8
8000754a:	f3 e8 10 08 	or	r8,r9,r8
8000754e:	95 18       	st.w	r10[0x4],r8
80007550:	c4 b8       	rjmp	800075e6 <_free_r+0x186>
80007552:	f0 0b 16 09 	lsr	r11,r8,0x9
80007556:	58 4b       	cp.w	r11,4
80007558:	e0 8b 00 06 	brhi	80007564 <_free_r+0x104>
8000755c:	f0 0b 16 06 	lsr	r11,r8,0x6
80007560:	2c 8b       	sub	r11,-56
80007562:	c2 68       	rjmp	800075ae <_free_r+0x14e>
80007564:	59 4b       	cp.w	r11,20
80007566:	e0 8b 00 04 	brhi	8000756e <_free_r+0x10e>
8000756a:	2a 5b       	sub	r11,-91
8000756c:	c2 18       	rjmp	800075ae <_free_r+0x14e>
8000756e:	e0 4b 00 54 	cp.w	r11,84
80007572:	e0 8b 00 06 	brhi	8000757e <_free_r+0x11e>
80007576:	f0 0b 16 0c 	lsr	r11,r8,0xc
8000757a:	29 2b       	sub	r11,-110
8000757c:	c1 98       	rjmp	800075ae <_free_r+0x14e>
8000757e:	e0 4b 01 54 	cp.w	r11,340
80007582:	e0 8b 00 06 	brhi	8000758e <_free_r+0x12e>
80007586:	f0 0b 16 0f 	lsr	r11,r8,0xf
8000758a:	28 9b       	sub	r11,-119
8000758c:	c1 18       	rjmp	800075ae <_free_r+0x14e>
8000758e:	e0 4b 05 54 	cp.w	r11,1364
80007592:	e0 88 00 0b 	brls	800075a8 <_free_r+0x148>
80007596:	37 eb       	mov	r11,126
80007598:	c0 b8       	rjmp	800075ae <_free_r+0x14e>
8000759a:	d7 03       	nop
8000759c:	00 00       	add	r0,r0
8000759e:	01 c8       	ld.ub	r8,r0[0x4]
800075a0:	00 00       	add	r0,r0
800075a2:	05 d0       	ld.ub	r0,r2[0x5]
800075a4:	00 00       	add	r0,r0
800075a6:	0c 68       	and	r8,r6
800075a8:	f0 0b 16 12 	lsr	r11,r8,0x12
800075ac:	28 4b       	sub	r11,-124
800075ae:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
800075b2:	78 29       	ld.w	r9,r12[0x8]
800075b4:	18 39       	cp.w	r9,r12
800075b6:	c0 e1       	brne	800075d2 <_free_r+0x172>
800075b8:	74 18       	ld.w	r8,r10[0x4]
800075ba:	a3 4b       	asr	r11,0x2
800075bc:	30 1c       	mov	r12,1
800075be:	f8 0b 09 4b 	lsl	r11,r12,r11
800075c2:	f1 eb 10 0b 	or	r11,r8,r11
800075c6:	12 98       	mov	r8,r9
800075c8:	95 1b       	st.w	r10[0x4],r11
800075ca:	c0 a8       	rjmp	800075de <_free_r+0x17e>
800075cc:	72 29       	ld.w	r9,r9[0x8]
800075ce:	18 39       	cp.w	r9,r12
800075d0:	c0 60       	breq	800075dc <_free_r+0x17c>
800075d2:	72 1a       	ld.w	r10,r9[0x4]
800075d4:	e0 1a ff fc 	andl	r10,0xfffc
800075d8:	14 38       	cp.w	r8,r10
800075da:	cf 93       	brcs	800075cc <_free_r+0x16c>
800075dc:	72 38       	ld.w	r8,r9[0xc]
800075de:	8d 38       	st.w	r6[0xc],r8
800075e0:	8d 29       	st.w	r6[0x8],r9
800075e2:	93 36       	st.w	r9[0xc],r6
800075e4:	91 26       	st.w	r8[0x8],r6
800075e6:	0e 9c       	mov	r12,r7
800075e8:	e0 a0 04 2c 	rcall	80007e40 <__malloc_unlock>
800075ec:	d8 22       	popm	r4-r7,pc
800075ee:	d7 03       	nop

800075f0 <__sfvwrite_r>:
800075f0:	d4 31       	pushm	r0-r7,lr
800075f2:	20 3d       	sub	sp,12
800075f4:	14 94       	mov	r4,r10
800075f6:	18 95       	mov	r5,r12
800075f8:	16 97       	mov	r7,r11
800075fa:	74 28       	ld.w	r8,r10[0x8]
800075fc:	58 08       	cp.w	r8,0
800075fe:	e0 80 01 45 	breq	80007888 <__sfvwrite_r+0x298>
80007602:	96 68       	ld.sh	r8,r11[0xc]
80007604:	ed b8 00 03 	bld	r8,0x3
80007608:	c0 41       	brne	80007610 <__sfvwrite_r+0x20>
8000760a:	76 48       	ld.w	r8,r11[0x10]
8000760c:	58 08       	cp.w	r8,0
8000760e:	c0 c1       	brne	80007626 <__sfvwrite_r+0x36>
80007610:	0e 9b       	mov	r11,r7
80007612:	0a 9c       	mov	r12,r5
80007614:	fe b0 f6 c0 	rcall	80006394 <__swsetup_r>
80007618:	c0 70       	breq	80007626 <__sfvwrite_r+0x36>
8000761a:	8e 68       	ld.sh	r8,r7[0xc]
8000761c:	a7 a8       	sbr	r8,0x6
8000761e:	ae 68       	st.h	r7[0xc],r8
80007620:	30 98       	mov	r8,9
80007622:	8b 38       	st.w	r5[0xc],r8
80007624:	c3 09       	rjmp	80007884 <__sfvwrite_r+0x294>
80007626:	8e 63       	ld.sh	r3,r7[0xc]
80007628:	68 00       	ld.w	r0,r4[0x0]
8000762a:	06 96       	mov	r6,r3
8000762c:	e2 16 00 02 	andl	r6,0x2,COH
80007630:	c2 10       	breq	80007672 <__sfvwrite_r+0x82>
80007632:	30 03       	mov	r3,0
80007634:	e0 62 04 00 	mov	r2,1024
80007638:	06 96       	mov	r6,r3
8000763a:	c0 48       	rjmp	80007642 <__sfvwrite_r+0x52>
8000763c:	60 03       	ld.w	r3,r0[0x0]
8000763e:	60 16       	ld.w	r6,r0[0x4]
80007640:	2f 80       	sub	r0,-8
80007642:	58 06       	cp.w	r6,0
80007644:	cf c0       	breq	8000763c <__sfvwrite_r+0x4c>
80007646:	e0 46 04 00 	cp.w	r6,1024
8000764a:	ec 09 17 80 	movls	r9,r6
8000764e:	e4 09 17 b0 	movhi	r9,r2
80007652:	06 9a       	mov	r10,r3
80007654:	6e a8       	ld.w	r8,r7[0x28]
80007656:	6e 8b       	ld.w	r11,r7[0x20]
80007658:	0a 9c       	mov	r12,r5
8000765a:	5d 18       	icall	r8
8000765c:	18 16       	sub	r6,r12
8000765e:	58 0c       	cp.w	r12,0
80007660:	e0 8a 01 0f 	brle	8000787e <__sfvwrite_r+0x28e>
80007664:	68 28       	ld.w	r8,r4[0x8]
80007666:	18 18       	sub	r8,r12
80007668:	89 28       	st.w	r4[0x8],r8
8000766a:	e0 80 01 0f 	breq	80007888 <__sfvwrite_r+0x298>
8000766e:	18 03       	add	r3,r12
80007670:	ce 9b       	rjmp	80007642 <__sfvwrite_r+0x52>
80007672:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
80007676:	c0 70       	breq	80007684 <__sfvwrite_r+0x94>
80007678:	50 06       	stdsp	sp[0x0],r6
8000767a:	0c 93       	mov	r3,r6
8000767c:	0c 91       	mov	r1,r6
8000767e:	50 15       	stdsp	sp[0x4],r5
80007680:	08 92       	mov	r2,r4
80007682:	c9 e8       	rjmp	800077be <__sfvwrite_r+0x1ce>
80007684:	06 96       	mov	r6,r3
80007686:	08 91       	mov	r1,r4
80007688:	c0 48       	rjmp	80007690 <__sfvwrite_r+0xa0>
8000768a:	60 03       	ld.w	r3,r0[0x0]
8000768c:	60 16       	ld.w	r6,r0[0x4]
8000768e:	2f 80       	sub	r0,-8
80007690:	58 06       	cp.w	r6,0
80007692:	cf c0       	breq	8000768a <__sfvwrite_r+0x9a>
80007694:	8e 68       	ld.sh	r8,r7[0xc]
80007696:	6e 24       	ld.w	r4,r7[0x8]
80007698:	10 99       	mov	r9,r8
8000769a:	e2 19 02 00 	andl	r9,0x200,COH
8000769e:	c5 50       	breq	80007748 <__sfvwrite_r+0x158>
800076a0:	08 36       	cp.w	r6,r4
800076a2:	c4 33       	brcs	80007728 <__sfvwrite_r+0x138>
800076a4:	10 99       	mov	r9,r8
800076a6:	e2 19 04 80 	andl	r9,0x480,COH
800076aa:	c3 f0       	breq	80007728 <__sfvwrite_r+0x138>
800076ac:	6e 4b       	ld.w	r11,r7[0x10]
800076ae:	6e 09       	ld.w	r9,r7[0x0]
800076b0:	16 19       	sub	r9,r11
800076b2:	50 09       	stdsp	sp[0x0],r9
800076b4:	6e 59       	ld.w	r9,r7[0x14]
800076b6:	10 9c       	mov	r12,r8
800076b8:	f2 09 00 1a 	add	r10,r9,r9<<0x1
800076bc:	30 28       	mov	r8,2
800076be:	f4 08 0c 08 	divs	r8,r10,r8
800076c2:	fa e9 00 04 	st.d	sp[4],r8
800076c6:	10 94       	mov	r4,r8
800076c8:	40 09       	lddsp	r9,sp[0x0]
800076ca:	e2 1c 04 00 	andl	r12,0x400,COH
800076ce:	2f f9       	sub	r9,-1
800076d0:	0c 09       	add	r9,r6
800076d2:	12 38       	cp.w	r8,r9
800076d4:	f2 04 17 30 	movlo	r4,r9
800076d8:	58 0c       	cp.w	r12,0
800076da:	c1 00       	breq	800076fa <__sfvwrite_r+0x10a>
800076dc:	08 9b       	mov	r11,r4
800076de:	0a 9c       	mov	r12,r5
800076e0:	c6 8d       	rcall	800079b0 <_malloc_r>
800076e2:	18 92       	mov	r2,r12
800076e4:	c1 40       	breq	8000770c <__sfvwrite_r+0x11c>
800076e6:	40 0a       	lddsp	r10,sp[0x0]
800076e8:	6e 4b       	ld.w	r11,r7[0x10]
800076ea:	fe b0 e3 d5 	rcall	80003e94 <memcpy>
800076ee:	8e 68       	ld.sh	r8,r7[0xc]
800076f0:	e0 18 fb 7f 	andl	r8,0xfb7f
800076f4:	a7 b8       	sbr	r8,0x7
800076f6:	ae 68       	st.h	r7[0xc],r8
800076f8:	c0 d8       	rjmp	80007712 <__sfvwrite_r+0x122>
800076fa:	08 9a       	mov	r10,r4
800076fc:	0a 9c       	mov	r12,r5
800076fe:	e0 a0 06 8f 	rcall	8000841c <_realloc_r>
80007702:	18 92       	mov	r2,r12
80007704:	c0 71       	brne	80007712 <__sfvwrite_r+0x122>
80007706:	6e 4b       	ld.w	r11,r7[0x10]
80007708:	0a 9c       	mov	r12,r5
8000770a:	ca be       	rcall	80007460 <_free_r>
8000770c:	30 c8       	mov	r8,12
8000770e:	8b 38       	st.w	r5[0xc],r8
80007710:	cb 78       	rjmp	8000787e <__sfvwrite_r+0x28e>
80007712:	40 0a       	lddsp	r10,sp[0x0]
80007714:	40 09       	lddsp	r9,sp[0x0]
80007716:	e8 0a 01 0a 	sub	r10,r4,r10
8000771a:	e4 09 00 08 	add	r8,r2,r9
8000771e:	8f 54       	st.w	r7[0x14],r4
80007720:	8f 2a       	st.w	r7[0x8],r10
80007722:	8f 08       	st.w	r7[0x0],r8
80007724:	8f 42       	st.w	r7[0x10],r2
80007726:	0c 94       	mov	r4,r6
80007728:	08 36       	cp.w	r6,r4
8000772a:	ec 04 17 30 	movlo	r4,r6
8000772e:	06 9b       	mov	r11,r3
80007730:	08 9a       	mov	r10,r4
80007732:	6e 0c       	ld.w	r12,r7[0x0]
80007734:	e0 a0 03 5f 	rcall	80007df2 <memmove>
80007738:	6e 08       	ld.w	r8,r7[0x0]
8000773a:	08 08       	add	r8,r4
8000773c:	8f 08       	st.w	r7[0x0],r8
8000773e:	6e 28       	ld.w	r8,r7[0x8]
80007740:	08 18       	sub	r8,r4
80007742:	0c 94       	mov	r4,r6
80007744:	8f 28       	st.w	r7[0x8],r8
80007746:	c3 08       	rjmp	800077a6 <__sfvwrite_r+0x1b6>
80007748:	08 36       	cp.w	r6,r4
8000774a:	5f ba       	srhi	r10
8000774c:	6e 0c       	ld.w	r12,r7[0x0]
8000774e:	6e 48       	ld.w	r8,r7[0x10]
80007750:	10 3c       	cp.w	r12,r8
80007752:	5f b8       	srhi	r8
80007754:	f5 e8 00 08 	and	r8,r10,r8
80007758:	f2 08 18 00 	cp.b	r8,r9
8000775c:	c0 e0       	breq	80007778 <__sfvwrite_r+0x188>
8000775e:	06 9b       	mov	r11,r3
80007760:	08 9a       	mov	r10,r4
80007762:	e0 a0 03 48 	rcall	80007df2 <memmove>
80007766:	6e 08       	ld.w	r8,r7[0x0]
80007768:	08 08       	add	r8,r4
8000776a:	0e 9b       	mov	r11,r7
8000776c:	8f 08       	st.w	r7[0x0],r8
8000776e:	0a 9c       	mov	r12,r5
80007770:	fe b0 fd 00 	rcall	80007170 <_fflush_r>
80007774:	c1 90       	breq	800077a6 <__sfvwrite_r+0x1b6>
80007776:	c8 48       	rjmp	8000787e <__sfvwrite_r+0x28e>
80007778:	6e 59       	ld.w	r9,r7[0x14]
8000777a:	12 36       	cp.w	r6,r9
8000777c:	c0 a3       	brcs	80007790 <__sfvwrite_r+0x1a0>
8000777e:	6e a8       	ld.w	r8,r7[0x28]
80007780:	06 9a       	mov	r10,r3
80007782:	6e 8b       	ld.w	r11,r7[0x20]
80007784:	0a 9c       	mov	r12,r5
80007786:	5d 18       	icall	r8
80007788:	18 94       	mov	r4,r12
8000778a:	e0 89 00 0e 	brgt	800077a6 <__sfvwrite_r+0x1b6>
8000778e:	c7 88       	rjmp	8000787e <__sfvwrite_r+0x28e>
80007790:	0c 9a       	mov	r10,r6
80007792:	06 9b       	mov	r11,r3
80007794:	e0 a0 03 2f 	rcall	80007df2 <memmove>
80007798:	6e 08       	ld.w	r8,r7[0x0]
8000779a:	0c 08       	add	r8,r6
8000779c:	0c 94       	mov	r4,r6
8000779e:	8f 08       	st.w	r7[0x0],r8
800077a0:	6e 28       	ld.w	r8,r7[0x8]
800077a2:	0c 18       	sub	r8,r6
800077a4:	8f 28       	st.w	r7[0x8],r8
800077a6:	62 28       	ld.w	r8,r1[0x8]
800077a8:	08 18       	sub	r8,r4
800077aa:	83 28       	st.w	r1[0x8],r8
800077ac:	c6 e0       	breq	80007888 <__sfvwrite_r+0x298>
800077ae:	08 16       	sub	r6,r4
800077b0:	08 03       	add	r3,r4
800077b2:	c6 fb       	rjmp	80007690 <__sfvwrite_r+0xa0>
800077b4:	60 03       	ld.w	r3,r0[0x0]
800077b6:	60 11       	ld.w	r1,r0[0x4]
800077b8:	30 08       	mov	r8,0
800077ba:	2f 80       	sub	r0,-8
800077bc:	50 08       	stdsp	sp[0x0],r8
800077be:	58 01       	cp.w	r1,0
800077c0:	cf a0       	breq	800077b4 <__sfvwrite_r+0x1c4>
800077c2:	40 0a       	lddsp	r10,sp[0x0]
800077c4:	58 0a       	cp.w	r10,0
800077c6:	c1 51       	brne	800077f0 <__sfvwrite_r+0x200>
800077c8:	e2 c6 ff ff 	sub	r6,r1,-1
800077cc:	02 9a       	mov	r10,r1
800077ce:	30 ab       	mov	r11,10
800077d0:	06 9c       	mov	r12,r3
800077d2:	e0 a0 03 05 	rcall	80007ddc <memchr>
800077d6:	f8 c8 ff ff 	sub	r8,r12,-1
800077da:	58 0c       	cp.w	r12,0
800077dc:	f1 d3 e1 16 	subne	r6,r8,r3
800077e0:	f9 b9 01 01 	movne	r9,1
800077e4:	fb f9 1a 00 	st.wne	sp[0x0],r9
800077e8:	f9 b8 00 01 	moveq	r8,1
800077ec:	fb f8 0a 00 	st.weq	sp[0x0],r8
800077f0:	02 36       	cp.w	r6,r1
800077f2:	ec 04 17 80 	movls	r4,r6
800077f6:	e2 04 17 b0 	movhi	r4,r1
800077fa:	6e 59       	ld.w	r9,r7[0x14]
800077fc:	6e 25       	ld.w	r5,r7[0x8]
800077fe:	f2 05 00 05 	add	r5,r9,r5
80007802:	0a 34       	cp.w	r4,r5
80007804:	5f 9a       	srgt	r10
80007806:	6e 0c       	ld.w	r12,r7[0x0]
80007808:	6e 48       	ld.w	r8,r7[0x10]
8000780a:	10 3c       	cp.w	r12,r8
8000780c:	5f b8       	srhi	r8
8000780e:	f5 e8 00 08 	and	r8,r10,r8
80007812:	30 0a       	mov	r10,0
80007814:	f4 08 18 00 	cp.b	r8,r10
80007818:	c0 e0       	breq	80007834 <__sfvwrite_r+0x244>
8000781a:	06 9b       	mov	r11,r3
8000781c:	0a 9a       	mov	r10,r5
8000781e:	e0 a0 02 ea 	rcall	80007df2 <memmove>
80007822:	6e 08       	ld.w	r8,r7[0x0]
80007824:	0a 08       	add	r8,r5
80007826:	0e 9b       	mov	r11,r7
80007828:	8f 08       	st.w	r7[0x0],r8
8000782a:	40 1c       	lddsp	r12,sp[0x4]
8000782c:	fe b0 fc a2 	rcall	80007170 <_fflush_r>
80007830:	c1 80       	breq	80007860 <__sfvwrite_r+0x270>
80007832:	c2 68       	rjmp	8000787e <__sfvwrite_r+0x28e>
80007834:	12 34       	cp.w	r4,r9
80007836:	c0 a5       	brlt	8000784a <__sfvwrite_r+0x25a>
80007838:	6e a8       	ld.w	r8,r7[0x28]
8000783a:	06 9a       	mov	r10,r3
8000783c:	6e 8b       	ld.w	r11,r7[0x20]
8000783e:	40 1c       	lddsp	r12,sp[0x4]
80007840:	5d 18       	icall	r8
80007842:	18 95       	mov	r5,r12
80007844:	e0 89 00 0e 	brgt	80007860 <__sfvwrite_r+0x270>
80007848:	c1 b8       	rjmp	8000787e <__sfvwrite_r+0x28e>
8000784a:	08 9a       	mov	r10,r4
8000784c:	06 9b       	mov	r11,r3
8000784e:	e0 a0 02 d2 	rcall	80007df2 <memmove>
80007852:	6e 08       	ld.w	r8,r7[0x0]
80007854:	08 08       	add	r8,r4
80007856:	08 95       	mov	r5,r4
80007858:	8f 08       	st.w	r7[0x0],r8
8000785a:	6e 28       	ld.w	r8,r7[0x8]
8000785c:	08 18       	sub	r8,r4
8000785e:	8f 28       	st.w	r7[0x8],r8
80007860:	0a 16       	sub	r6,r5
80007862:	c0 71       	brne	80007870 <__sfvwrite_r+0x280>
80007864:	0e 9b       	mov	r11,r7
80007866:	40 1c       	lddsp	r12,sp[0x4]
80007868:	fe b0 fc 84 	rcall	80007170 <_fflush_r>
8000786c:	c0 91       	brne	8000787e <__sfvwrite_r+0x28e>
8000786e:	50 06       	stdsp	sp[0x0],r6
80007870:	64 28       	ld.w	r8,r2[0x8]
80007872:	0a 18       	sub	r8,r5
80007874:	85 28       	st.w	r2[0x8],r8
80007876:	c0 90       	breq	80007888 <__sfvwrite_r+0x298>
80007878:	0a 11       	sub	r1,r5
8000787a:	0a 03       	add	r3,r5
8000787c:	ca 1b       	rjmp	800077be <__sfvwrite_r+0x1ce>
8000787e:	8e 68       	ld.sh	r8,r7[0xc]
80007880:	a7 a8       	sbr	r8,0x6
80007882:	ae 68       	st.h	r7[0xc],r8
80007884:	3f fc       	mov	r12,-1
80007886:	c0 28       	rjmp	8000788a <__sfvwrite_r+0x29a>
80007888:	30 0c       	mov	r12,0
8000788a:	2f dd       	sub	sp,-12
8000788c:	d8 32       	popm	r0-r7,pc
8000788e:	d7 03       	nop

80007890 <_fwalk>:
80007890:	d4 31       	pushm	r0-r7,lr
80007892:	30 05       	mov	r5,0
80007894:	16 91       	mov	r1,r11
80007896:	f8 c7 ff 28 	sub	r7,r12,-216
8000789a:	0a 92       	mov	r2,r5
8000789c:	fe b0 fc f2 	rcall	80007280 <__sfp_lock_acquire>
800078a0:	3f f3       	mov	r3,-1
800078a2:	c1 68       	rjmp	800078ce <_fwalk+0x3e>
800078a4:	6e 26       	ld.w	r6,r7[0x8]
800078a6:	6e 14       	ld.w	r4,r7[0x4]
800078a8:	2f 46       	sub	r6,-12
800078aa:	c0 c8       	rjmp	800078c2 <_fwalk+0x32>
800078ac:	8c 08       	ld.sh	r8,r6[0x0]
800078ae:	e4 08 19 00 	cp.h	r8,r2
800078b2:	c0 70       	breq	800078c0 <_fwalk+0x30>
800078b4:	8c 18       	ld.sh	r8,r6[0x2]
800078b6:	e6 08 19 00 	cp.h	r8,r3
800078ba:	c0 30       	breq	800078c0 <_fwalk+0x30>
800078bc:	5d 11       	icall	r1
800078be:	18 45       	or	r5,r12
800078c0:	2a 46       	sub	r6,-92
800078c2:	20 14       	sub	r4,1
800078c4:	ec cc 00 0c 	sub	r12,r6,12
800078c8:	58 04       	cp.w	r4,0
800078ca:	cf 14       	brge	800078ac <_fwalk+0x1c>
800078cc:	6e 07       	ld.w	r7,r7[0x0]
800078ce:	58 07       	cp.w	r7,0
800078d0:	ce a1       	brne	800078a4 <_fwalk+0x14>
800078d2:	fe b0 fc d8 	rcall	80007282 <__sfp_lock_release>
800078d6:	0a 9c       	mov	r12,r5
800078d8:	d8 32       	popm	r0-r7,pc
800078da:	d7 03       	nop

800078dc <_localeconv_r>:
800078dc:	48 1c       	lddpc	r12,800078e0 <_localeconv_r+0x4>
800078de:	5e fc       	retal	r12
800078e0:	80 00       	ld.sh	r0,r0[0x0]
800078e2:	9f 50       	st.w	pc[0x14],r0

800078e4 <__smakebuf_r>:
800078e4:	d4 21       	pushm	r4-r7,lr
800078e6:	20 fd       	sub	sp,60
800078e8:	96 68       	ld.sh	r8,r11[0xc]
800078ea:	16 97       	mov	r7,r11
800078ec:	18 96       	mov	r6,r12
800078ee:	e2 18 00 02 	andl	r8,0x2,COH
800078f2:	c3 c1       	brne	8000796a <__smakebuf_r+0x86>
800078f4:	96 7b       	ld.sh	r11,r11[0xe]
800078f6:	f0 0b 19 00 	cp.h	r11,r8
800078fa:	c0 55       	brlt	80007904 <__smakebuf_r+0x20>
800078fc:	1a 9a       	mov	r10,sp
800078fe:	e0 a0 08 99 	rcall	80008a30 <_fstat_r>
80007902:	c0 f4       	brge	80007920 <__smakebuf_r+0x3c>
80007904:	8e 65       	ld.sh	r5,r7[0xc]
80007906:	0a 98       	mov	r8,r5
80007908:	ab b8       	sbr	r8,0xb
8000790a:	e2 15 00 80 	andl	r5,0x80,COH
8000790e:	ae 68       	st.h	r7[0xc],r8
80007910:	30 04       	mov	r4,0
80007912:	e0 68 04 00 	mov	r8,1024
80007916:	f9 b5 01 40 	movne	r5,64
8000791a:	f0 05 17 00 	moveq	r5,r8
8000791e:	c1 c8       	rjmp	80007956 <__smakebuf_r+0x72>
80007920:	40 18       	lddsp	r8,sp[0x4]
80007922:	e2 18 f0 00 	andl	r8,0xf000,COH
80007926:	e0 48 20 00 	cp.w	r8,8192
8000792a:	5f 04       	sreq	r4
8000792c:	e0 48 80 00 	cp.w	r8,32768
80007930:	c0 e1       	brne	8000794c <__smakebuf_r+0x68>
80007932:	6e b9       	ld.w	r9,r7[0x2c]
80007934:	fe c8 f1 e4 	sub	r8,pc,-3612
80007938:	10 39       	cp.w	r9,r8
8000793a:	c0 91       	brne	8000794c <__smakebuf_r+0x68>
8000793c:	8e 68       	ld.sh	r8,r7[0xc]
8000793e:	e0 65 04 00 	mov	r5,1024
80007942:	ab a8       	sbr	r8,0xa
80007944:	ef 45 00 50 	st.w	r7[80],r5
80007948:	ae 68       	st.h	r7[0xc],r8
8000794a:	c0 68       	rjmp	80007956 <__smakebuf_r+0x72>
8000794c:	8e 68       	ld.sh	r8,r7[0xc]
8000794e:	e0 65 04 00 	mov	r5,1024
80007952:	ab b8       	sbr	r8,0xb
80007954:	ae 68       	st.h	r7[0xc],r8
80007956:	0a 9b       	mov	r11,r5
80007958:	0c 9c       	mov	r12,r6
8000795a:	c2 bc       	rcall	800079b0 <_malloc_r>
8000795c:	8e 68       	ld.sh	r8,r7[0xc]
8000795e:	c0 d1       	brne	80007978 <__smakebuf_r+0x94>
80007960:	ed b8 00 09 	bld	r8,0x9
80007964:	c1 b0       	breq	8000799a <__smakebuf_r+0xb6>
80007966:	a1 b8       	sbr	r8,0x1
80007968:	ae 68       	st.h	r7[0xc],r8
8000796a:	ee c8 ff b9 	sub	r8,r7,-71
8000796e:	8f 48       	st.w	r7[0x10],r8
80007970:	8f 08       	st.w	r7[0x0],r8
80007972:	30 18       	mov	r8,1
80007974:	8f 58       	st.w	r7[0x14],r8
80007976:	c1 28       	rjmp	8000799a <__smakebuf_r+0xb6>
80007978:	a7 b8       	sbr	r8,0x7
8000797a:	8f 4c       	st.w	r7[0x10],r12
8000797c:	ae 68       	st.h	r7[0xc],r8
8000797e:	8f 55       	st.w	r7[0x14],r5
80007980:	fe c8 06 fc 	sub	r8,pc,1788
80007984:	8f 0c       	st.w	r7[0x0],r12
80007986:	8d a8       	st.w	r6[0x28],r8
80007988:	58 04       	cp.w	r4,0
8000798a:	c0 80       	breq	8000799a <__smakebuf_r+0xb6>
8000798c:	8e 7c       	ld.sh	r12,r7[0xe]
8000798e:	e0 a0 07 39 	rcall	80008800 <isatty>
80007992:	c0 40       	breq	8000799a <__smakebuf_r+0xb6>
80007994:	8e 68       	ld.sh	r8,r7[0xc]
80007996:	a1 a8       	sbr	r8,0x0
80007998:	ae 68       	st.h	r7[0xc],r8
8000799a:	2f 1d       	sub	sp,-60
8000799c:	d8 22       	popm	r4-r7,pc
8000799e:	d7 03       	nop

800079a0 <malloc>:
800079a0:	d4 01       	pushm	lr
800079a2:	48 38       	lddpc	r8,800079ac <malloc+0xc>
800079a4:	18 9b       	mov	r11,r12
800079a6:	70 0c       	ld.w	r12,r8[0x0]
800079a8:	c0 4c       	rcall	800079b0 <_malloc_r>
800079aa:	d8 02       	popm	pc
800079ac:	00 00       	add	r0,r0
800079ae:	01 c4       	ld.ub	r4,r0[0x4]

800079b0 <_malloc_r>:
800079b0:	d4 31       	pushm	r0-r7,lr
800079b2:	f6 c8 ff f5 	sub	r8,r11,-11
800079b6:	18 95       	mov	r5,r12
800079b8:	10 97       	mov	r7,r8
800079ba:	e0 17 ff f8 	andl	r7,0xfff8
800079be:	59 68       	cp.w	r8,22
800079c0:	f9 b7 08 10 	movls	r7,16
800079c4:	16 37       	cp.w	r7,r11
800079c6:	5f 38       	srlo	r8
800079c8:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
800079cc:	c0 50       	breq	800079d6 <_malloc_r+0x26>
800079ce:	30 c8       	mov	r8,12
800079d0:	99 38       	st.w	r12[0xc],r8
800079d2:	e0 8f 01 ec 	bral	80007daa <_malloc_r+0x3fa>
800079d6:	e0 a0 02 34 	rcall	80007e3e <__malloc_lock>
800079da:	e0 47 01 f7 	cp.w	r7,503
800079de:	e0 8b 00 1c 	brhi	80007a16 <_malloc_r+0x66>
800079e2:	ee 03 16 03 	lsr	r3,r7,0x3
800079e6:	4c c8       	lddpc	r8,80007b14 <_malloc_r+0x164>
800079e8:	f0 03 00 38 	add	r8,r8,r3<<0x3
800079ec:	70 36       	ld.w	r6,r8[0xc]
800079ee:	10 36       	cp.w	r6,r8
800079f0:	c0 61       	brne	800079fc <_malloc_r+0x4c>
800079f2:	ec c8 ff f8 	sub	r8,r6,-8
800079f6:	70 36       	ld.w	r6,r8[0xc]
800079f8:	10 36       	cp.w	r6,r8
800079fa:	c0 c0       	breq	80007a12 <_malloc_r+0x62>
800079fc:	6c 18       	ld.w	r8,r6[0x4]
800079fe:	e0 18 ff fc 	andl	r8,0xfffc
80007a02:	6c 3a       	ld.w	r10,r6[0xc]
80007a04:	ec 08 00 09 	add	r9,r6,r8
80007a08:	0a 9c       	mov	r12,r5
80007a0a:	6c 28       	ld.w	r8,r6[0x8]
80007a0c:	95 28       	st.w	r10[0x8],r8
80007a0e:	91 3a       	st.w	r8[0xc],r10
80007a10:	c4 68       	rjmp	80007a9c <_malloc_r+0xec>
80007a12:	2f e3       	sub	r3,-2
80007a14:	c4 c8       	rjmp	80007aac <_malloc_r+0xfc>
80007a16:	ee 03 16 09 	lsr	r3,r7,0x9
80007a1a:	c0 41       	brne	80007a22 <_malloc_r+0x72>
80007a1c:	ee 03 16 03 	lsr	r3,r7,0x3
80007a20:	c2 68       	rjmp	80007a6c <_malloc_r+0xbc>
80007a22:	58 43       	cp.w	r3,4
80007a24:	e0 8b 00 06 	brhi	80007a30 <_malloc_r+0x80>
80007a28:	ee 03 16 06 	lsr	r3,r7,0x6
80007a2c:	2c 83       	sub	r3,-56
80007a2e:	c1 f8       	rjmp	80007a6c <_malloc_r+0xbc>
80007a30:	59 43       	cp.w	r3,20
80007a32:	e0 8b 00 04 	brhi	80007a3a <_malloc_r+0x8a>
80007a36:	2a 53       	sub	r3,-91
80007a38:	c1 a8       	rjmp	80007a6c <_malloc_r+0xbc>
80007a3a:	e0 43 00 54 	cp.w	r3,84
80007a3e:	e0 8b 00 06 	brhi	80007a4a <_malloc_r+0x9a>
80007a42:	ee 03 16 0c 	lsr	r3,r7,0xc
80007a46:	29 23       	sub	r3,-110
80007a48:	c1 28       	rjmp	80007a6c <_malloc_r+0xbc>
80007a4a:	e0 43 01 54 	cp.w	r3,340
80007a4e:	e0 8b 00 06 	brhi	80007a5a <_malloc_r+0xaa>
80007a52:	ee 03 16 0f 	lsr	r3,r7,0xf
80007a56:	28 93       	sub	r3,-119
80007a58:	c0 a8       	rjmp	80007a6c <_malloc_r+0xbc>
80007a5a:	e0 43 05 54 	cp.w	r3,1364
80007a5e:	e0 88 00 04 	brls	80007a66 <_malloc_r+0xb6>
80007a62:	37 e3       	mov	r3,126
80007a64:	c0 48       	rjmp	80007a6c <_malloc_r+0xbc>
80007a66:	ee 03 16 12 	lsr	r3,r7,0x12
80007a6a:	28 43       	sub	r3,-124
80007a6c:	4a aa       	lddpc	r10,80007b14 <_malloc_r+0x164>
80007a6e:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80007a72:	74 36       	ld.w	r6,r10[0xc]
80007a74:	c1 98       	rjmp	80007aa6 <_malloc_r+0xf6>
80007a76:	6c 19       	ld.w	r9,r6[0x4]
80007a78:	e0 19 ff fc 	andl	r9,0xfffc
80007a7c:	f2 07 01 0b 	sub	r11,r9,r7
80007a80:	58 fb       	cp.w	r11,15
80007a82:	e0 8a 00 04 	brle	80007a8a <_malloc_r+0xda>
80007a86:	20 13       	sub	r3,1
80007a88:	c1 18       	rjmp	80007aaa <_malloc_r+0xfa>
80007a8a:	6c 38       	ld.w	r8,r6[0xc]
80007a8c:	58 0b       	cp.w	r11,0
80007a8e:	c0 b5       	brlt	80007aa4 <_malloc_r+0xf4>
80007a90:	6c 2a       	ld.w	r10,r6[0x8]
80007a92:	ec 09 00 09 	add	r9,r6,r9
80007a96:	0a 9c       	mov	r12,r5
80007a98:	91 2a       	st.w	r8[0x8],r10
80007a9a:	95 38       	st.w	r10[0xc],r8
80007a9c:	72 18       	ld.w	r8,r9[0x4]
80007a9e:	a1 a8       	sbr	r8,0x0
80007aa0:	93 18       	st.w	r9[0x4],r8
80007aa2:	cb a8       	rjmp	80007c16 <_malloc_r+0x266>
80007aa4:	10 96       	mov	r6,r8
80007aa6:	14 36       	cp.w	r6,r10
80007aa8:	ce 71       	brne	80007a76 <_malloc_r+0xc6>
80007aaa:	2f f3       	sub	r3,-1
80007aac:	49 aa       	lddpc	r10,80007b14 <_malloc_r+0x164>
80007aae:	f4 cc ff f8 	sub	r12,r10,-8
80007ab2:	78 26       	ld.w	r6,r12[0x8]
80007ab4:	18 36       	cp.w	r6,r12
80007ab6:	c6 c0       	breq	80007b8e <_malloc_r+0x1de>
80007ab8:	6c 19       	ld.w	r9,r6[0x4]
80007aba:	e0 19 ff fc 	andl	r9,0xfffc
80007abe:	f2 07 01 08 	sub	r8,r9,r7
80007ac2:	58 f8       	cp.w	r8,15
80007ac4:	e0 89 00 8e 	brgt	80007be0 <_malloc_r+0x230>
80007ac8:	99 3c       	st.w	r12[0xc],r12
80007aca:	99 2c       	st.w	r12[0x8],r12
80007acc:	58 08       	cp.w	r8,0
80007ace:	c0 55       	brlt	80007ad8 <_malloc_r+0x128>
80007ad0:	ec 09 00 09 	add	r9,r6,r9
80007ad4:	0a 9c       	mov	r12,r5
80007ad6:	ce 3b       	rjmp	80007a9c <_malloc_r+0xec>
80007ad8:	e0 49 01 ff 	cp.w	r9,511
80007adc:	e0 8b 00 13 	brhi	80007b02 <_malloc_r+0x152>
80007ae0:	a3 99       	lsr	r9,0x3
80007ae2:	f4 09 00 38 	add	r8,r10,r9<<0x3
80007ae6:	70 2b       	ld.w	r11,r8[0x8]
80007ae8:	8d 38       	st.w	r6[0xc],r8
80007aea:	8d 2b       	st.w	r6[0x8],r11
80007aec:	97 36       	st.w	r11[0xc],r6
80007aee:	91 26       	st.w	r8[0x8],r6
80007af0:	a3 49       	asr	r9,0x2
80007af2:	74 18       	ld.w	r8,r10[0x4]
80007af4:	30 1b       	mov	r11,1
80007af6:	f6 09 09 49 	lsl	r9,r11,r9
80007afa:	f1 e9 10 09 	or	r9,r8,r9
80007afe:	95 19       	st.w	r10[0x4],r9
80007b00:	c4 78       	rjmp	80007b8e <_malloc_r+0x1de>
80007b02:	f2 0a 16 09 	lsr	r10,r9,0x9
80007b06:	58 4a       	cp.w	r10,4
80007b08:	e0 8b 00 08 	brhi	80007b18 <_malloc_r+0x168>
80007b0c:	f2 0a 16 06 	lsr	r10,r9,0x6
80007b10:	2c 8a       	sub	r10,-56
80007b12:	c2 18       	rjmp	80007b54 <_malloc_r+0x1a4>
80007b14:	00 00       	add	r0,r0
80007b16:	01 c8       	ld.ub	r8,r0[0x4]
80007b18:	59 4a       	cp.w	r10,20
80007b1a:	e0 8b 00 04 	brhi	80007b22 <_malloc_r+0x172>
80007b1e:	2a 5a       	sub	r10,-91
80007b20:	c1 a8       	rjmp	80007b54 <_malloc_r+0x1a4>
80007b22:	e0 4a 00 54 	cp.w	r10,84
80007b26:	e0 8b 00 06 	brhi	80007b32 <_malloc_r+0x182>
80007b2a:	f2 0a 16 0c 	lsr	r10,r9,0xc
80007b2e:	29 2a       	sub	r10,-110
80007b30:	c1 28       	rjmp	80007b54 <_malloc_r+0x1a4>
80007b32:	e0 4a 01 54 	cp.w	r10,340
80007b36:	e0 8b 00 06 	brhi	80007b42 <_malloc_r+0x192>
80007b3a:	f2 0a 16 0f 	lsr	r10,r9,0xf
80007b3e:	28 9a       	sub	r10,-119
80007b40:	c0 a8       	rjmp	80007b54 <_malloc_r+0x1a4>
80007b42:	e0 4a 05 54 	cp.w	r10,1364
80007b46:	e0 88 00 04 	brls	80007b4e <_malloc_r+0x19e>
80007b4a:	37 ea       	mov	r10,126
80007b4c:	c0 48       	rjmp	80007b54 <_malloc_r+0x1a4>
80007b4e:	f2 0a 16 12 	lsr	r10,r9,0x12
80007b52:	28 4a       	sub	r10,-124
80007b54:	4c 7b       	lddpc	r11,80007c70 <_malloc_r+0x2c0>
80007b56:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80007b5a:	68 28       	ld.w	r8,r4[0x8]
80007b5c:	08 38       	cp.w	r8,r4
80007b5e:	c0 e1       	brne	80007b7a <_malloc_r+0x1ca>
80007b60:	76 19       	ld.w	r9,r11[0x4]
80007b62:	a3 4a       	asr	r10,0x2
80007b64:	30 1e       	mov	lr,1
80007b66:	fc 0a 09 4a 	lsl	r10,lr,r10
80007b6a:	f3 ea 10 0a 	or	r10,r9,r10
80007b6e:	10 99       	mov	r9,r8
80007b70:	97 1a       	st.w	r11[0x4],r10
80007b72:	c0 a8       	rjmp	80007b86 <_malloc_r+0x1d6>
80007b74:	70 28       	ld.w	r8,r8[0x8]
80007b76:	08 38       	cp.w	r8,r4
80007b78:	c0 60       	breq	80007b84 <_malloc_r+0x1d4>
80007b7a:	70 1a       	ld.w	r10,r8[0x4]
80007b7c:	e0 1a ff fc 	andl	r10,0xfffc
80007b80:	14 39       	cp.w	r9,r10
80007b82:	cf 93       	brcs	80007b74 <_malloc_r+0x1c4>
80007b84:	70 39       	ld.w	r9,r8[0xc]
80007b86:	8d 39       	st.w	r6[0xc],r9
80007b88:	8d 28       	st.w	r6[0x8],r8
80007b8a:	91 36       	st.w	r8[0xc],r6
80007b8c:	93 26       	st.w	r9[0x8],r6
80007b8e:	e6 08 14 02 	asr	r8,r3,0x2
80007b92:	30 1b       	mov	r11,1
80007b94:	4b 74       	lddpc	r4,80007c70 <_malloc_r+0x2c0>
80007b96:	f6 08 09 4b 	lsl	r11,r11,r8
80007b9a:	68 18       	ld.w	r8,r4[0x4]
80007b9c:	10 3b       	cp.w	r11,r8
80007b9e:	e0 8b 00 6b 	brhi	80007c74 <_malloc_r+0x2c4>
80007ba2:	f7 e8 00 09 	and	r9,r11,r8
80007ba6:	c0 b1       	brne	80007bbc <_malloc_r+0x20c>
80007ba8:	e0 13 ff fc 	andl	r3,0xfffc
80007bac:	a1 7b       	lsl	r11,0x1
80007bae:	2f c3       	sub	r3,-4
80007bb0:	c0 38       	rjmp	80007bb6 <_malloc_r+0x206>
80007bb2:	2f c3       	sub	r3,-4
80007bb4:	a1 7b       	lsl	r11,0x1
80007bb6:	f7 e8 00 09 	and	r9,r11,r8
80007bba:	cf c0       	breq	80007bb2 <_malloc_r+0x202>
80007bbc:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80007bc0:	06 92       	mov	r2,r3
80007bc2:	1c 91       	mov	r1,lr
80007bc4:	62 36       	ld.w	r6,r1[0xc]
80007bc6:	c2 d8       	rjmp	80007c20 <_malloc_r+0x270>
80007bc8:	6c 1a       	ld.w	r10,r6[0x4]
80007bca:	e0 1a ff fc 	andl	r10,0xfffc
80007bce:	f4 07 01 08 	sub	r8,r10,r7
80007bd2:	58 f8       	cp.w	r8,15
80007bd4:	e0 8a 00 15 	brle	80007bfe <_malloc_r+0x24e>
80007bd8:	6c 3a       	ld.w	r10,r6[0xc]
80007bda:	6c 29       	ld.w	r9,r6[0x8]
80007bdc:	95 29       	st.w	r10[0x8],r9
80007bde:	93 3a       	st.w	r9[0xc],r10
80007be0:	0e 99       	mov	r9,r7
80007be2:	ec 07 00 07 	add	r7,r6,r7
80007be6:	a1 a9       	sbr	r9,0x0
80007be8:	99 37       	st.w	r12[0xc],r7
80007bea:	99 27       	st.w	r12[0x8],r7
80007bec:	8d 19       	st.w	r6[0x4],r9
80007bee:	ee 08 09 08 	st.w	r7[r8],r8
80007bf2:	8f 2c       	st.w	r7[0x8],r12
80007bf4:	8f 3c       	st.w	r7[0xc],r12
80007bf6:	a1 a8       	sbr	r8,0x0
80007bf8:	0a 9c       	mov	r12,r5
80007bfa:	8f 18       	st.w	r7[0x4],r8
80007bfc:	c0 d8       	rjmp	80007c16 <_malloc_r+0x266>
80007bfe:	6c 39       	ld.w	r9,r6[0xc]
80007c00:	58 08       	cp.w	r8,0
80007c02:	c0 e5       	brlt	80007c1e <_malloc_r+0x26e>
80007c04:	ec 0a 00 0a 	add	r10,r6,r10
80007c08:	74 18       	ld.w	r8,r10[0x4]
80007c0a:	a1 a8       	sbr	r8,0x0
80007c0c:	0a 9c       	mov	r12,r5
80007c0e:	95 18       	st.w	r10[0x4],r8
80007c10:	6c 28       	ld.w	r8,r6[0x8]
80007c12:	93 28       	st.w	r9[0x8],r8
80007c14:	91 39       	st.w	r8[0xc],r9
80007c16:	c1 5d       	rcall	80007e40 <__malloc_unlock>
80007c18:	ec cc ff f8 	sub	r12,r6,-8
80007c1c:	d8 32       	popm	r0-r7,pc
80007c1e:	12 96       	mov	r6,r9
80007c20:	02 36       	cp.w	r6,r1
80007c22:	cd 31       	brne	80007bc8 <_malloc_r+0x218>
80007c24:	2f f2       	sub	r2,-1
80007c26:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80007c2a:	c0 30       	breq	80007c30 <_malloc_r+0x280>
80007c2c:	2f 81       	sub	r1,-8
80007c2e:	cc bb       	rjmp	80007bc4 <_malloc_r+0x214>
80007c30:	1c 98       	mov	r8,lr
80007c32:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80007c36:	c0 81       	brne	80007c46 <_malloc_r+0x296>
80007c38:	68 19       	ld.w	r9,r4[0x4]
80007c3a:	f6 08 11 ff 	rsub	r8,r11,-1
80007c3e:	f3 e8 00 08 	and	r8,r9,r8
80007c42:	89 18       	st.w	r4[0x4],r8
80007c44:	c0 78       	rjmp	80007c52 <_malloc_r+0x2a2>
80007c46:	f0 c9 00 08 	sub	r9,r8,8
80007c4a:	20 13       	sub	r3,1
80007c4c:	70 08       	ld.w	r8,r8[0x0]
80007c4e:	12 38       	cp.w	r8,r9
80007c50:	cf 10       	breq	80007c32 <_malloc_r+0x282>
80007c52:	a1 7b       	lsl	r11,0x1
80007c54:	68 18       	ld.w	r8,r4[0x4]
80007c56:	10 3b       	cp.w	r11,r8
80007c58:	e0 8b 00 0e 	brhi	80007c74 <_malloc_r+0x2c4>
80007c5c:	58 0b       	cp.w	r11,0
80007c5e:	c0 b0       	breq	80007c74 <_malloc_r+0x2c4>
80007c60:	04 93       	mov	r3,r2
80007c62:	c0 38       	rjmp	80007c68 <_malloc_r+0x2b8>
80007c64:	2f c3       	sub	r3,-4
80007c66:	a1 7b       	lsl	r11,0x1
80007c68:	f7 e8 00 09 	and	r9,r11,r8
80007c6c:	ca 81       	brne	80007bbc <_malloc_r+0x20c>
80007c6e:	cf bb       	rjmp	80007c64 <_malloc_r+0x2b4>
80007c70:	00 00       	add	r0,r0
80007c72:	01 c8       	ld.ub	r8,r0[0x4]
80007c74:	68 23       	ld.w	r3,r4[0x8]
80007c76:	66 12       	ld.w	r2,r3[0x4]
80007c78:	e0 12 ff fc 	andl	r2,0xfffc
80007c7c:	0e 32       	cp.w	r2,r7
80007c7e:	5f 39       	srlo	r9
80007c80:	e4 07 01 08 	sub	r8,r2,r7
80007c84:	58 f8       	cp.w	r8,15
80007c86:	5f aa       	srle	r10
80007c88:	f5 e9 10 09 	or	r9,r10,r9
80007c8c:	e0 80 00 9a 	breq	80007dc0 <_malloc_r+0x410>
80007c90:	4c 78       	lddpc	r8,80007dac <_malloc_r+0x3fc>
80007c92:	70 01       	ld.w	r1,r8[0x0]
80007c94:	4c 78       	lddpc	r8,80007db0 <_malloc_r+0x400>
80007c96:	2f 01       	sub	r1,-16
80007c98:	70 08       	ld.w	r8,r8[0x0]
80007c9a:	0e 01       	add	r1,r7
80007c9c:	5b f8       	cp.w	r8,-1
80007c9e:	c0 40       	breq	80007ca6 <_malloc_r+0x2f6>
80007ca0:	28 11       	sub	r1,-127
80007ca2:	e0 11 ff 80 	andl	r1,0xff80
80007ca6:	02 9b       	mov	r11,r1
80007ca8:	0a 9c       	mov	r12,r5
80007caa:	e0 a0 05 3f 	rcall	80008728 <_sbrk_r>
80007cae:	18 96       	mov	r6,r12
80007cb0:	5b fc       	cp.w	r12,-1
80007cb2:	c6 e0       	breq	80007d8e <_malloc_r+0x3de>
80007cb4:	e6 02 00 08 	add	r8,r3,r2
80007cb8:	10 3c       	cp.w	r12,r8
80007cba:	c0 32       	brcc	80007cc0 <_malloc_r+0x310>
80007cbc:	08 33       	cp.w	r3,r4
80007cbe:	c6 81       	brne	80007d8e <_malloc_r+0x3de>
80007cc0:	4b da       	lddpc	r10,80007db4 <_malloc_r+0x404>
80007cc2:	74 09       	ld.w	r9,r10[0x0]
80007cc4:	e2 09 00 09 	add	r9,r1,r9
80007cc8:	95 09       	st.w	r10[0x0],r9
80007cca:	10 36       	cp.w	r6,r8
80007ccc:	c0 a1       	brne	80007ce0 <_malloc_r+0x330>
80007cce:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80007cd2:	c0 71       	brne	80007ce0 <_malloc_r+0x330>
80007cd4:	e2 02 00 02 	add	r2,r1,r2
80007cd8:	68 28       	ld.w	r8,r4[0x8]
80007cda:	a1 a2       	sbr	r2,0x0
80007cdc:	91 12       	st.w	r8[0x4],r2
80007cde:	c4 c8       	rjmp	80007d76 <_malloc_r+0x3c6>
80007ce0:	4b 4a       	lddpc	r10,80007db0 <_malloc_r+0x400>
80007ce2:	74 0b       	ld.w	r11,r10[0x0]
80007ce4:	5b fb       	cp.w	r11,-1
80007ce6:	c0 31       	brne	80007cec <_malloc_r+0x33c>
80007ce8:	95 06       	st.w	r10[0x0],r6
80007cea:	c0 68       	rjmp	80007cf6 <_malloc_r+0x346>
80007cec:	ec 09 00 09 	add	r9,r6,r9
80007cf0:	4b 1a       	lddpc	r10,80007db4 <_malloc_r+0x404>
80007cf2:	10 19       	sub	r9,r8
80007cf4:	95 09       	st.w	r10[0x0],r9
80007cf6:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80007cfa:	f0 09 11 08 	rsub	r9,r8,8
80007cfe:	58 08       	cp.w	r8,0
80007d00:	f2 08 17 10 	movne	r8,r9
80007d04:	ed d8 e1 06 	addne	r6,r6,r8
80007d08:	28 08       	sub	r8,-128
80007d0a:	ec 01 00 01 	add	r1,r6,r1
80007d0e:	0a 9c       	mov	r12,r5
80007d10:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80007d14:	f0 01 01 01 	sub	r1,r8,r1
80007d18:	02 9b       	mov	r11,r1
80007d1a:	e0 a0 05 07 	rcall	80008728 <_sbrk_r>
80007d1e:	4a 68       	lddpc	r8,80007db4 <_malloc_r+0x404>
80007d20:	5b fc       	cp.w	r12,-1
80007d22:	ec 0c 17 00 	moveq	r12,r6
80007d26:	f9 b1 00 00 	moveq	r1,0
80007d2a:	70 09       	ld.w	r9,r8[0x0]
80007d2c:	0c 1c       	sub	r12,r6
80007d2e:	89 26       	st.w	r4[0x8],r6
80007d30:	02 0c       	add	r12,r1
80007d32:	12 01       	add	r1,r9
80007d34:	a1 ac       	sbr	r12,0x0
80007d36:	91 01       	st.w	r8[0x0],r1
80007d38:	8d 1c       	st.w	r6[0x4],r12
80007d3a:	08 33       	cp.w	r3,r4
80007d3c:	c1 d0       	breq	80007d76 <_malloc_r+0x3c6>
80007d3e:	58 f2       	cp.w	r2,15
80007d40:	e0 8b 00 05 	brhi	80007d4a <_malloc_r+0x39a>
80007d44:	30 18       	mov	r8,1
80007d46:	8d 18       	st.w	r6[0x4],r8
80007d48:	c2 38       	rjmp	80007d8e <_malloc_r+0x3de>
80007d4a:	30 59       	mov	r9,5
80007d4c:	20 c2       	sub	r2,12
80007d4e:	e0 12 ff f8 	andl	r2,0xfff8
80007d52:	e6 02 00 08 	add	r8,r3,r2
80007d56:	91 29       	st.w	r8[0x8],r9
80007d58:	91 19       	st.w	r8[0x4],r9
80007d5a:	66 18       	ld.w	r8,r3[0x4]
80007d5c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007d60:	e5 e8 10 08 	or	r8,r2,r8
80007d64:	87 18       	st.w	r3[0x4],r8
80007d66:	58 f2       	cp.w	r2,15
80007d68:	e0 88 00 07 	brls	80007d76 <_malloc_r+0x3c6>
80007d6c:	e6 cb ff f8 	sub	r11,r3,-8
80007d70:	0a 9c       	mov	r12,r5
80007d72:	fe b0 fb 77 	rcall	80007460 <_free_r>
80007d76:	49 19       	lddpc	r9,80007db8 <_malloc_r+0x408>
80007d78:	72 0a       	ld.w	r10,r9[0x0]
80007d7a:	48 f8       	lddpc	r8,80007db4 <_malloc_r+0x404>
80007d7c:	70 08       	ld.w	r8,r8[0x0]
80007d7e:	14 38       	cp.w	r8,r10
80007d80:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80007d84:	48 e9       	lddpc	r9,80007dbc <_malloc_r+0x40c>
80007d86:	72 0a       	ld.w	r10,r9[0x0]
80007d88:	14 38       	cp.w	r8,r10
80007d8a:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80007d8e:	68 28       	ld.w	r8,r4[0x8]
80007d90:	70 18       	ld.w	r8,r8[0x4]
80007d92:	e0 18 ff fc 	andl	r8,0xfffc
80007d96:	0e 38       	cp.w	r8,r7
80007d98:	5f 39       	srlo	r9
80007d9a:	0e 18       	sub	r8,r7
80007d9c:	58 f8       	cp.w	r8,15
80007d9e:	5f aa       	srle	r10
80007da0:	f5 e9 10 09 	or	r9,r10,r9
80007da4:	c0 e0       	breq	80007dc0 <_malloc_r+0x410>
80007da6:	0a 9c       	mov	r12,r5
80007da8:	c4 cc       	rcall	80007e40 <__malloc_unlock>
80007daa:	d8 3a       	popm	r0-r7,pc,r12=0
80007dac:	00 00       	add	r0,r0
80007dae:	0c 68       	and	r8,r6
80007db0:	00 00       	add	r0,r0
80007db2:	05 d4       	ld.ub	r4,r2[0x5]
80007db4:	00 00       	add	r0,r0
80007db6:	0c 6c       	and	r12,r6
80007db8:	00 00       	add	r0,r0
80007dba:	0c 64       	and	r4,r6
80007dbc:	00 00       	add	r0,r0
80007dbe:	0c 60       	and	r0,r6
80007dc0:	68 26       	ld.w	r6,r4[0x8]
80007dc2:	a1 a8       	sbr	r8,0x0
80007dc4:	0e 99       	mov	r9,r7
80007dc6:	a1 a9       	sbr	r9,0x0
80007dc8:	8d 19       	st.w	r6[0x4],r9
80007dca:	ec 07 00 07 	add	r7,r6,r7
80007dce:	0a 9c       	mov	r12,r5
80007dd0:	89 27       	st.w	r4[0x8],r7
80007dd2:	8f 18       	st.w	r7[0x4],r8
80007dd4:	c3 6c       	rcall	80007e40 <__malloc_unlock>
80007dd6:	ec cc ff f8 	sub	r12,r6,-8
80007dda:	d8 32       	popm	r0-r7,pc

80007ddc <memchr>:
80007ddc:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
80007de0:	c0 68       	rjmp	80007dec <memchr+0x10>
80007de2:	20 1a       	sub	r10,1
80007de4:	19 88       	ld.ub	r8,r12[0x0]
80007de6:	16 38       	cp.w	r8,r11
80007de8:	5e 0c       	reteq	r12
80007dea:	2f fc       	sub	r12,-1
80007dec:	58 0a       	cp.w	r10,0
80007dee:	cf a1       	brne	80007de2 <memchr+0x6>
80007df0:	5e fa       	retal	r10

80007df2 <memmove>:
80007df2:	d4 01       	pushm	lr
80007df4:	18 3b       	cp.w	r11,r12
80007df6:	c1 92       	brcc	80007e28 <memmove+0x36>
80007df8:	f6 0a 00 09 	add	r9,r11,r10
80007dfc:	12 3c       	cp.w	r12,r9
80007dfe:	c1 52       	brcc	80007e28 <memmove+0x36>
80007e00:	f8 0a 00 0b 	add	r11,r12,r10
80007e04:	30 08       	mov	r8,0
80007e06:	c0 68       	rjmp	80007e12 <memmove+0x20>
80007e08:	f2 08 07 0e 	ld.ub	lr,r9[r8]
80007e0c:	20 1a       	sub	r10,1
80007e0e:	f6 08 0b 0e 	st.b	r11[r8],lr
80007e12:	20 18       	sub	r8,1
80007e14:	58 0a       	cp.w	r10,0
80007e16:	cf 91       	brne	80007e08 <memmove+0x16>
80007e18:	d8 02       	popm	pc
80007e1a:	f6 08 07 09 	ld.ub	r9,r11[r8]
80007e1e:	20 1a       	sub	r10,1
80007e20:	f8 08 0b 09 	st.b	r12[r8],r9
80007e24:	2f f8       	sub	r8,-1
80007e26:	c0 28       	rjmp	80007e2a <memmove+0x38>
80007e28:	30 08       	mov	r8,0
80007e2a:	58 0a       	cp.w	r10,0
80007e2c:	cf 71       	brne	80007e1a <memmove+0x28>
80007e2e:	d8 02       	popm	pc

80007e30 <memset>:
80007e30:	18 98       	mov	r8,r12
80007e32:	c0 38       	rjmp	80007e38 <memset+0x8>
80007e34:	10 cb       	st.b	r8++,r11
80007e36:	20 1a       	sub	r10,1
80007e38:	58 0a       	cp.w	r10,0
80007e3a:	cf d1       	brne	80007e34 <memset+0x4>
80007e3c:	5e fc       	retal	r12

80007e3e <__malloc_lock>:
80007e3e:	5e fc       	retal	r12

80007e40 <__malloc_unlock>:
80007e40:	5e fc       	retal	r12

80007e42 <__hi0bits>:
80007e42:	18 98       	mov	r8,r12
80007e44:	e0 1c 00 00 	andl	r12,0x0
80007e48:	f0 09 15 10 	lsl	r9,r8,0x10
80007e4c:	58 0c       	cp.w	r12,0
80007e4e:	f2 08 17 00 	moveq	r8,r9
80007e52:	f9 bc 00 10 	moveq	r12,16
80007e56:	f9 bc 01 00 	movne	r12,0
80007e5a:	10 9a       	mov	r10,r8
80007e5c:	f0 09 15 08 	lsl	r9,r8,0x8
80007e60:	e6 1a ff 00 	andh	r10,0xff00,COH
80007e64:	f7 bc 00 f8 	subeq	r12,-8
80007e68:	f2 08 17 00 	moveq	r8,r9
80007e6c:	10 9a       	mov	r10,r8
80007e6e:	f0 09 15 04 	lsl	r9,r8,0x4
80007e72:	e6 1a f0 00 	andh	r10,0xf000,COH
80007e76:	f7 bc 00 fc 	subeq	r12,-4
80007e7a:	f2 08 17 00 	moveq	r8,r9
80007e7e:	10 9a       	mov	r10,r8
80007e80:	f0 09 15 02 	lsl	r9,r8,0x2
80007e84:	e6 1a c0 00 	andh	r10,0xc000,COH
80007e88:	f7 bc 00 fe 	subeq	r12,-2
80007e8c:	f2 08 17 00 	moveq	r8,r9
80007e90:	58 08       	cp.w	r8,0
80007e92:	5e 5c       	retlt	r12
80007e94:	ed b8 00 1e 	bld	r8,0x1e
80007e98:	f9 bc 01 20 	movne	r12,32
80007e9c:	f7 bc 00 ff 	subeq	r12,-1
80007ea0:	5e fc       	retal	r12

80007ea2 <__lo0bits>:
80007ea2:	18 99       	mov	r9,r12
80007ea4:	78 08       	ld.w	r8,r12[0x0]
80007ea6:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
80007eaa:	c1 50       	breq	80007ed4 <__lo0bits+0x32>
80007eac:	ed b8 00 00 	bld	r8,0x0
80007eb0:	c0 21       	brne	80007eb4 <__lo0bits+0x12>
80007eb2:	5e fd       	retal	0
80007eb4:	10 9b       	mov	r11,r8
80007eb6:	f0 0a 16 01 	lsr	r10,r8,0x1
80007eba:	e2 1b 00 02 	andl	r11,0x2,COH
80007ebe:	a3 88       	lsr	r8,0x2
80007ec0:	58 0b       	cp.w	r11,0
80007ec2:	f3 fa 1a 00 	st.wne	r9[0x0],r10
80007ec6:	f9 bc 01 01 	movne	r12,1
80007eca:	f3 f8 0a 00 	st.weq	r9[0x0],r8
80007ece:	f9 bc 00 02 	moveq	r12,2
80007ed2:	5e fc       	retal	r12
80007ed4:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80007ed8:	f0 0b 16 10 	lsr	r11,r8,0x10
80007edc:	58 0a       	cp.w	r10,0
80007ede:	f6 08 17 00 	moveq	r8,r11
80007ee2:	f9 bc 00 10 	moveq	r12,16
80007ee6:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80007eea:	f0 0a 16 08 	lsr	r10,r8,0x8
80007eee:	58 0b       	cp.w	r11,0
80007ef0:	f7 bc 00 f8 	subeq	r12,-8
80007ef4:	f4 08 17 00 	moveq	r8,r10
80007ef8:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
80007efc:	f0 0a 16 04 	lsr	r10,r8,0x4
80007f00:	58 0b       	cp.w	r11,0
80007f02:	f7 bc 00 fc 	subeq	r12,-4
80007f06:	f4 08 17 00 	moveq	r8,r10
80007f0a:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
80007f0e:	f0 0a 16 02 	lsr	r10,r8,0x2
80007f12:	58 0b       	cp.w	r11,0
80007f14:	f7 bc 00 fe 	subeq	r12,-2
80007f18:	f4 08 17 00 	moveq	r8,r10
80007f1c:	ed b8 00 00 	bld	r8,0x0
80007f20:	c0 60       	breq	80007f2c <__lo0bits+0x8a>
80007f22:	a1 98       	lsr	r8,0x1
80007f24:	c0 31       	brne	80007f2a <__lo0bits+0x88>
80007f26:	32 0c       	mov	r12,32
80007f28:	5e fc       	retal	r12
80007f2a:	2f fc       	sub	r12,-1
80007f2c:	93 08       	st.w	r9[0x0],r8
80007f2e:	5e fc       	retal	r12

80007f30 <__mcmp>:
80007f30:	d4 01       	pushm	lr
80007f32:	18 98       	mov	r8,r12
80007f34:	76 49       	ld.w	r9,r11[0x10]
80007f36:	78 4c       	ld.w	r12,r12[0x10]
80007f38:	12 1c       	sub	r12,r9
80007f3a:	c1 31       	brne	80007f60 <__mcmp+0x30>
80007f3c:	2f b9       	sub	r9,-5
80007f3e:	a3 69       	lsl	r9,0x2
80007f40:	12 0b       	add	r11,r9
80007f42:	f0 09 00 09 	add	r9,r8,r9
80007f46:	2e c8       	sub	r8,-20
80007f48:	13 4e       	ld.w	lr,--r9
80007f4a:	17 4a       	ld.w	r10,--r11
80007f4c:	14 3e       	cp.w	lr,r10
80007f4e:	c0 60       	breq	80007f5a <__mcmp+0x2a>
80007f50:	f9 bc 03 ff 	movlo	r12,-1
80007f54:	f9 bc 02 01 	movhs	r12,1
80007f58:	d8 02       	popm	pc
80007f5a:	10 39       	cp.w	r9,r8
80007f5c:	fe 9b ff f6 	brhi	80007f48 <__mcmp+0x18>
80007f60:	d8 02       	popm	pc
80007f62:	d7 03       	nop

80007f64 <_Bfree>:
80007f64:	d4 21       	pushm	r4-r7,lr
80007f66:	18 97       	mov	r7,r12
80007f68:	16 95       	mov	r5,r11
80007f6a:	78 96       	ld.w	r6,r12[0x24]
80007f6c:	58 06       	cp.w	r6,0
80007f6e:	c0 91       	brne	80007f80 <_Bfree+0x1c>
80007f70:	31 0c       	mov	r12,16
80007f72:	fe b0 fd 17 	rcall	800079a0 <malloc>
80007f76:	99 36       	st.w	r12[0xc],r6
80007f78:	8f 9c       	st.w	r7[0x24],r12
80007f7a:	99 16       	st.w	r12[0x4],r6
80007f7c:	99 26       	st.w	r12[0x8],r6
80007f7e:	99 06       	st.w	r12[0x0],r6
80007f80:	58 05       	cp.w	r5,0
80007f82:	c0 90       	breq	80007f94 <_Bfree+0x30>
80007f84:	6a 19       	ld.w	r9,r5[0x4]
80007f86:	6e 98       	ld.w	r8,r7[0x24]
80007f88:	70 38       	ld.w	r8,r8[0xc]
80007f8a:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
80007f8e:	8b 0a       	st.w	r5[0x0],r10
80007f90:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
80007f94:	d8 22       	popm	r4-r7,pc
80007f96:	d7 03       	nop

80007f98 <_Balloc>:
80007f98:	d4 21       	pushm	r4-r7,lr
80007f9a:	18 97       	mov	r7,r12
80007f9c:	16 96       	mov	r6,r11
80007f9e:	78 95       	ld.w	r5,r12[0x24]
80007fa0:	58 05       	cp.w	r5,0
80007fa2:	c0 91       	brne	80007fb4 <_Balloc+0x1c>
80007fa4:	31 0c       	mov	r12,16
80007fa6:	fe b0 fc fd 	rcall	800079a0 <malloc>
80007faa:	99 35       	st.w	r12[0xc],r5
80007fac:	8f 9c       	st.w	r7[0x24],r12
80007fae:	99 15       	st.w	r12[0x4],r5
80007fb0:	99 25       	st.w	r12[0x8],r5
80007fb2:	99 05       	st.w	r12[0x0],r5
80007fb4:	6e 95       	ld.w	r5,r7[0x24]
80007fb6:	6a 38       	ld.w	r8,r5[0xc]
80007fb8:	58 08       	cp.w	r8,0
80007fba:	c0 b1       	brne	80007fd0 <_Balloc+0x38>
80007fbc:	31 0a       	mov	r10,16
80007fbe:	30 4b       	mov	r11,4
80007fc0:	0e 9c       	mov	r12,r7
80007fc2:	e0 a0 04 8f 	rcall	800088e0 <_calloc_r>
80007fc6:	8b 3c       	st.w	r5[0xc],r12
80007fc8:	6e 98       	ld.w	r8,r7[0x24]
80007fca:	70 3c       	ld.w	r12,r8[0xc]
80007fcc:	58 0c       	cp.w	r12,0
80007fce:	c1 b0       	breq	80008004 <_Balloc+0x6c>
80007fd0:	6e 98       	ld.w	r8,r7[0x24]
80007fd2:	70 38       	ld.w	r8,r8[0xc]
80007fd4:	f0 06 00 28 	add	r8,r8,r6<<0x2
80007fd8:	70 0c       	ld.w	r12,r8[0x0]
80007fda:	58 0c       	cp.w	r12,0
80007fdc:	c0 40       	breq	80007fe4 <_Balloc+0x4c>
80007fde:	78 09       	ld.w	r9,r12[0x0]
80007fe0:	91 09       	st.w	r8[0x0],r9
80007fe2:	c0 e8       	rjmp	80007ffe <_Balloc+0x66>
80007fe4:	0e 9c       	mov	r12,r7
80007fe6:	30 17       	mov	r7,1
80007fe8:	0e 9b       	mov	r11,r7
80007fea:	ee 06 09 47 	lsl	r7,r7,r6
80007fee:	ee ca ff fb 	sub	r10,r7,-5
80007ff2:	a3 6a       	lsl	r10,0x2
80007ff4:	e0 a0 04 76 	rcall	800088e0 <_calloc_r>
80007ff8:	c0 60       	breq	80008004 <_Balloc+0x6c>
80007ffa:	99 16       	st.w	r12[0x4],r6
80007ffc:	99 27       	st.w	r12[0x8],r7
80007ffe:	30 08       	mov	r8,0
80008000:	99 38       	st.w	r12[0xc],r8
80008002:	99 48       	st.w	r12[0x10],r8
80008004:	d8 22       	popm	r4-r7,pc
80008006:	d7 03       	nop

80008008 <__d2b>:
80008008:	d4 31       	pushm	r0-r7,lr
8000800a:	20 2d       	sub	sp,8
8000800c:	16 93       	mov	r3,r11
8000800e:	12 96       	mov	r6,r9
80008010:	10 95       	mov	r5,r8
80008012:	14 92       	mov	r2,r10
80008014:	30 1b       	mov	r11,1
80008016:	cc 1f       	rcall	80007f98 <_Balloc>
80008018:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
8000801c:	50 09       	stdsp	sp[0x0],r9
8000801e:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
80008022:	b5 a9       	sbr	r9,0x14
80008024:	f0 01 16 14 	lsr	r1,r8,0x14
80008028:	fb f9 1a 00 	st.wne	sp[0x0],r9
8000802c:	18 94       	mov	r4,r12
8000802e:	58 02       	cp.w	r2,0
80008030:	c1 d0       	breq	8000806a <__d2b+0x62>
80008032:	fa cc ff f8 	sub	r12,sp,-8
80008036:	18 d2       	st.w	--r12,r2
80008038:	c3 5f       	rcall	80007ea2 <__lo0bits>
8000803a:	40 18       	lddsp	r8,sp[0x4]
8000803c:	c0 d0       	breq	80008056 <__d2b+0x4e>
8000803e:	40 09       	lddsp	r9,sp[0x0]
80008040:	f8 0a 11 20 	rsub	r10,r12,32
80008044:	f2 0a 09 4a 	lsl	r10,r9,r10
80008048:	f5 e8 10 08 	or	r8,r10,r8
8000804c:	89 58       	st.w	r4[0x14],r8
8000804e:	f2 0c 0a 49 	lsr	r9,r9,r12
80008052:	50 09       	stdsp	sp[0x0],r9
80008054:	c0 28       	rjmp	80008058 <__d2b+0x50>
80008056:	89 58       	st.w	r4[0x14],r8
80008058:	40 08       	lddsp	r8,sp[0x0]
8000805a:	58 08       	cp.w	r8,0
8000805c:	f9 b3 01 02 	movne	r3,2
80008060:	f9 b3 00 01 	moveq	r3,1
80008064:	89 68       	st.w	r4[0x18],r8
80008066:	89 43       	st.w	r4[0x10],r3
80008068:	c0 88       	rjmp	80008078 <__d2b+0x70>
8000806a:	1a 9c       	mov	r12,sp
8000806c:	c1 bf       	rcall	80007ea2 <__lo0bits>
8000806e:	30 13       	mov	r3,1
80008070:	40 08       	lddsp	r8,sp[0x0]
80008072:	2e 0c       	sub	r12,-32
80008074:	89 43       	st.w	r4[0x10],r3
80008076:	89 58       	st.w	r4[0x14],r8
80008078:	58 01       	cp.w	r1,0
8000807a:	c0 90       	breq	8000808c <__d2b+0x84>
8000807c:	e2 c1 04 33 	sub	r1,r1,1075
80008080:	18 01       	add	r1,r12
80008082:	8d 01       	st.w	r6[0x0],r1
80008084:	f8 0c 11 35 	rsub	r12,r12,53
80008088:	8b 0c       	st.w	r5[0x0],r12
8000808a:	c0 c8       	rjmp	800080a2 <__d2b+0x9a>
8000808c:	e6 c8 ff fc 	sub	r8,r3,-4
80008090:	f8 cc 04 32 	sub	r12,r12,1074
80008094:	a5 73       	lsl	r3,0x5
80008096:	8d 0c       	st.w	r6[0x0],r12
80008098:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
8000809c:	cd 3e       	rcall	80007e42 <__hi0bits>
8000809e:	18 13       	sub	r3,r12
800080a0:	8b 03       	st.w	r5[0x0],r3
800080a2:	08 9c       	mov	r12,r4
800080a4:	2f ed       	sub	sp,-8
800080a6:	d8 32       	popm	r0-r7,pc

800080a8 <__mdiff>:
800080a8:	d4 31       	pushm	r0-r7,lr
800080aa:	74 48       	ld.w	r8,r10[0x10]
800080ac:	76 45       	ld.w	r5,r11[0x10]
800080ae:	16 97       	mov	r7,r11
800080b0:	14 96       	mov	r6,r10
800080b2:	10 15       	sub	r5,r8
800080b4:	c1 31       	brne	800080da <__mdiff+0x32>
800080b6:	2f b8       	sub	r8,-5
800080b8:	ee ce ff ec 	sub	lr,r7,-20
800080bc:	a3 68       	lsl	r8,0x2
800080be:	f4 08 00 0b 	add	r11,r10,r8
800080c2:	ee 08 00 08 	add	r8,r7,r8
800080c6:	11 4a       	ld.w	r10,--r8
800080c8:	17 49       	ld.w	r9,--r11
800080ca:	12 3a       	cp.w	r10,r9
800080cc:	c0 30       	breq	800080d2 <__mdiff+0x2a>
800080ce:	c0 e2       	brcc	800080ea <__mdiff+0x42>
800080d0:	c0 78       	rjmp	800080de <__mdiff+0x36>
800080d2:	1c 38       	cp.w	r8,lr
800080d4:	fe 9b ff f9 	brhi	800080c6 <__mdiff+0x1e>
800080d8:	c4 98       	rjmp	8000816a <__mdiff+0xc2>
800080da:	58 05       	cp.w	r5,0
800080dc:	c0 64       	brge	800080e8 <__mdiff+0x40>
800080de:	0e 98       	mov	r8,r7
800080e0:	30 15       	mov	r5,1
800080e2:	0c 97       	mov	r7,r6
800080e4:	10 96       	mov	r6,r8
800080e6:	c0 28       	rjmp	800080ea <__mdiff+0x42>
800080e8:	30 05       	mov	r5,0
800080ea:	6e 1b       	ld.w	r11,r7[0x4]
800080ec:	c5 6f       	rcall	80007f98 <_Balloc>
800080ee:	6e 49       	ld.w	r9,r7[0x10]
800080f0:	6c 44       	ld.w	r4,r6[0x10]
800080f2:	99 35       	st.w	r12[0xc],r5
800080f4:	2f b4       	sub	r4,-5
800080f6:	f2 c5 ff fb 	sub	r5,r9,-5
800080fa:	ec 04 00 24 	add	r4,r6,r4<<0x2
800080fe:	ee 05 00 25 	add	r5,r7,r5<<0x2
80008102:	2e c6       	sub	r6,-20
80008104:	2e c7       	sub	r7,-20
80008106:	f8 c8 ff ec 	sub	r8,r12,-20
8000810a:	30 0a       	mov	r10,0
8000810c:	0f 0e       	ld.w	lr,r7++
8000810e:	0d 0b       	ld.w	r11,r6++
80008110:	fc 02 16 10 	lsr	r2,lr,0x10
80008114:	f6 03 16 10 	lsr	r3,r11,0x10
80008118:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000811c:	e4 03 01 03 	sub	r3,r2,r3
80008120:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80008124:	fc 0b 01 0b 	sub	r11,lr,r11
80008128:	f6 0a 00 0a 	add	r10,r11,r10
8000812c:	b0 1a       	st.h	r8[0x2],r10
8000812e:	b1 4a       	asr	r10,0x10
80008130:	e6 0a 00 0a 	add	r10,r3,r10
80008134:	b0 0a       	st.h	r8[0x0],r10
80008136:	2f c8       	sub	r8,-4
80008138:	b1 4a       	asr	r10,0x10
8000813a:	08 36       	cp.w	r6,r4
8000813c:	ce 83       	brcs	8000810c <__mdiff+0x64>
8000813e:	c0 d8       	rjmp	80008158 <__mdiff+0xb0>
80008140:	0f 0b       	ld.w	r11,r7++
80008142:	f6 0e 16 10 	lsr	lr,r11,0x10
80008146:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000814a:	16 0a       	add	r10,r11
8000814c:	b0 1a       	st.h	r8[0x2],r10
8000814e:	b1 4a       	asr	r10,0x10
80008150:	1c 0a       	add	r10,lr
80008152:	b0 0a       	st.h	r8[0x0],r10
80008154:	2f c8       	sub	r8,-4
80008156:	b1 4a       	asr	r10,0x10
80008158:	0a 37       	cp.w	r7,r5
8000815a:	cf 33       	brcs	80008140 <__mdiff+0x98>
8000815c:	c0 28       	rjmp	80008160 <__mdiff+0xb8>
8000815e:	20 19       	sub	r9,1
80008160:	11 4a       	ld.w	r10,--r8
80008162:	58 0a       	cp.w	r10,0
80008164:	cf d0       	breq	8000815e <__mdiff+0xb6>
80008166:	99 49       	st.w	r12[0x10],r9
80008168:	d8 32       	popm	r0-r7,pc
8000816a:	30 0b       	mov	r11,0
8000816c:	c1 6f       	rcall	80007f98 <_Balloc>
8000816e:	30 18       	mov	r8,1
80008170:	99 48       	st.w	r12[0x10],r8
80008172:	30 08       	mov	r8,0
80008174:	99 58       	st.w	r12[0x14],r8
80008176:	d8 32       	popm	r0-r7,pc

80008178 <__lshift>:
80008178:	d4 31       	pushm	r0-r7,lr
8000817a:	16 97       	mov	r7,r11
8000817c:	76 46       	ld.w	r6,r11[0x10]
8000817e:	f4 02 14 05 	asr	r2,r10,0x5
80008182:	2f f6       	sub	r6,-1
80008184:	14 93       	mov	r3,r10
80008186:	18 94       	mov	r4,r12
80008188:	04 06       	add	r6,r2
8000818a:	76 1b       	ld.w	r11,r11[0x4]
8000818c:	6e 28       	ld.w	r8,r7[0x8]
8000818e:	c0 38       	rjmp	80008194 <__lshift+0x1c>
80008190:	2f fb       	sub	r11,-1
80008192:	a1 78       	lsl	r8,0x1
80008194:	10 36       	cp.w	r6,r8
80008196:	fe 99 ff fd 	brgt	80008190 <__lshift+0x18>
8000819a:	08 9c       	mov	r12,r4
8000819c:	cf ee       	rcall	80007f98 <_Balloc>
8000819e:	30 09       	mov	r9,0
800081a0:	18 95       	mov	r5,r12
800081a2:	f8 c8 ff ec 	sub	r8,r12,-20
800081a6:	12 9a       	mov	r10,r9
800081a8:	c0 38       	rjmp	800081ae <__lshift+0x36>
800081aa:	10 aa       	st.w	r8++,r10
800081ac:	2f f9       	sub	r9,-1
800081ae:	04 39       	cp.w	r9,r2
800081b0:	cf d5       	brlt	800081aa <__lshift+0x32>
800081b2:	6e 4b       	ld.w	r11,r7[0x10]
800081b4:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
800081b8:	2f bb       	sub	r11,-5
800081ba:	ee c9 ff ec 	sub	r9,r7,-20
800081be:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
800081c2:	58 03       	cp.w	r3,0
800081c4:	c1 30       	breq	800081ea <__lshift+0x72>
800081c6:	e6 0c 11 20 	rsub	r12,r3,32
800081ca:	30 0a       	mov	r10,0
800081cc:	72 02       	ld.w	r2,r9[0x0]
800081ce:	e4 03 09 42 	lsl	r2,r2,r3
800081d2:	04 4a       	or	r10,r2
800081d4:	10 aa       	st.w	r8++,r10
800081d6:	13 0a       	ld.w	r10,r9++
800081d8:	f4 0c 0a 4a 	lsr	r10,r10,r12
800081dc:	16 39       	cp.w	r9,r11
800081de:	cf 73       	brcs	800081cc <__lshift+0x54>
800081e0:	91 0a       	st.w	r8[0x0],r10
800081e2:	58 0a       	cp.w	r10,0
800081e4:	c0 70       	breq	800081f2 <__lshift+0x7a>
800081e6:	2f f6       	sub	r6,-1
800081e8:	c0 58       	rjmp	800081f2 <__lshift+0x7a>
800081ea:	13 0a       	ld.w	r10,r9++
800081ec:	10 aa       	st.w	r8++,r10
800081ee:	16 39       	cp.w	r9,r11
800081f0:	cf d3       	brcs	800081ea <__lshift+0x72>
800081f2:	08 9c       	mov	r12,r4
800081f4:	20 16       	sub	r6,1
800081f6:	0e 9b       	mov	r11,r7
800081f8:	8b 46       	st.w	r5[0x10],r6
800081fa:	cb 5e       	rcall	80007f64 <_Bfree>
800081fc:	0a 9c       	mov	r12,r5
800081fe:	d8 32       	popm	r0-r7,pc

80008200 <__multiply>:
80008200:	d4 31       	pushm	r0-r7,lr
80008202:	20 2d       	sub	sp,8
80008204:	76 49       	ld.w	r9,r11[0x10]
80008206:	74 48       	ld.w	r8,r10[0x10]
80008208:	16 96       	mov	r6,r11
8000820a:	14 95       	mov	r5,r10
8000820c:	10 39       	cp.w	r9,r8
8000820e:	ec 08 17 50 	movlt	r8,r6
80008212:	ea 06 17 50 	movlt	r6,r5
80008216:	f0 05 17 50 	movlt	r5,r8
8000821a:	6c 28       	ld.w	r8,r6[0x8]
8000821c:	76 43       	ld.w	r3,r11[0x10]
8000821e:	74 42       	ld.w	r2,r10[0x10]
80008220:	76 1b       	ld.w	r11,r11[0x4]
80008222:	e4 03 00 07 	add	r7,r2,r3
80008226:	10 37       	cp.w	r7,r8
80008228:	f7 bb 09 ff 	subgt	r11,-1
8000822c:	cb 6e       	rcall	80007f98 <_Balloc>
8000822e:	ee c4 ff fb 	sub	r4,r7,-5
80008232:	f8 c9 ff ec 	sub	r9,r12,-20
80008236:	f8 04 00 24 	add	r4,r12,r4<<0x2
8000823a:	30 0a       	mov	r10,0
8000823c:	12 98       	mov	r8,r9
8000823e:	c0 28       	rjmp	80008242 <__multiply+0x42>
80008240:	10 aa       	st.w	r8++,r10
80008242:	08 38       	cp.w	r8,r4
80008244:	cf e3       	brcs	80008240 <__multiply+0x40>
80008246:	2f b3       	sub	r3,-5
80008248:	2f b2       	sub	r2,-5
8000824a:	ec 03 00 23 	add	r3,r6,r3<<0x2
8000824e:	ea 02 00 22 	add	r2,r5,r2<<0x2
80008252:	ec cb ff ec 	sub	r11,r6,-20
80008256:	50 12       	stdsp	sp[0x4],r2
80008258:	ea ca ff ec 	sub	r10,r5,-20
8000825c:	c4 48       	rjmp	800082e4 <__multiply+0xe4>
8000825e:	94 95       	ld.uh	r5,r10[0x2]
80008260:	58 05       	cp.w	r5,0
80008262:	c2 00       	breq	800082a2 <__multiply+0xa2>
80008264:	12 98       	mov	r8,r9
80008266:	16 96       	mov	r6,r11
80008268:	30 0e       	mov	lr,0
8000826a:	50 09       	stdsp	sp[0x0],r9
8000826c:	0d 02       	ld.w	r2,r6++
8000826e:	e4 00 16 10 	lsr	r0,r2,0x10
80008272:	70 01       	ld.w	r1,r8[0x0]
80008274:	70 09       	ld.w	r9,r8[0x0]
80008276:	b1 81       	lsr	r1,0x10
80008278:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
8000827c:	e0 05 03 41 	mac	r1,r0,r5
80008280:	ab 32       	mul	r2,r5
80008282:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
80008286:	00 02       	add	r2,r0
80008288:	e4 0e 00 0e 	add	lr,r2,lr
8000828c:	b0 1e       	st.h	r8[0x2],lr
8000828e:	b1 8e       	lsr	lr,0x10
80008290:	1c 01       	add	r1,lr
80008292:	b0 01       	st.h	r8[0x0],r1
80008294:	e2 0e 16 10 	lsr	lr,r1,0x10
80008298:	2f c8       	sub	r8,-4
8000829a:	06 36       	cp.w	r6,r3
8000829c:	ce 83       	brcs	8000826c <__multiply+0x6c>
8000829e:	40 09       	lddsp	r9,sp[0x0]
800082a0:	91 0e       	st.w	r8[0x0],lr
800082a2:	94 86       	ld.uh	r6,r10[0x0]
800082a4:	58 06       	cp.w	r6,0
800082a6:	c1 d0       	breq	800082e0 <__multiply+0xe0>
800082a8:	72 02       	ld.w	r2,r9[0x0]
800082aa:	12 98       	mov	r8,r9
800082ac:	16 9e       	mov	lr,r11
800082ae:	30 05       	mov	r5,0
800082b0:	b0 12       	st.h	r8[0x2],r2
800082b2:	1d 01       	ld.w	r1,lr++
800082b4:	90 82       	ld.uh	r2,r8[0x0]
800082b6:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
800082ba:	ad 30       	mul	r0,r6
800082bc:	e0 02 00 02 	add	r2,r0,r2
800082c0:	e4 05 00 05 	add	r5,r2,r5
800082c4:	b0 05       	st.h	r8[0x0],r5
800082c6:	b1 85       	lsr	r5,0x10
800082c8:	b1 81       	lsr	r1,0x10
800082ca:	2f c8       	sub	r8,-4
800082cc:	ad 31       	mul	r1,r6
800082ce:	90 92       	ld.uh	r2,r8[0x2]
800082d0:	e2 02 00 02 	add	r2,r1,r2
800082d4:	0a 02       	add	r2,r5
800082d6:	e4 05 16 10 	lsr	r5,r2,0x10
800082da:	06 3e       	cp.w	lr,r3
800082dc:	ce a3       	brcs	800082b0 <__multiply+0xb0>
800082de:	91 02       	st.w	r8[0x0],r2
800082e0:	2f ca       	sub	r10,-4
800082e2:	2f c9       	sub	r9,-4
800082e4:	40 18       	lddsp	r8,sp[0x4]
800082e6:	10 3a       	cp.w	r10,r8
800082e8:	cb b3       	brcs	8000825e <__multiply+0x5e>
800082ea:	c0 28       	rjmp	800082ee <__multiply+0xee>
800082ec:	20 17       	sub	r7,1
800082ee:	58 07       	cp.w	r7,0
800082f0:	e0 8a 00 05 	brle	800082fa <__multiply+0xfa>
800082f4:	09 48       	ld.w	r8,--r4
800082f6:	58 08       	cp.w	r8,0
800082f8:	cf a0       	breq	800082ec <__multiply+0xec>
800082fa:	99 47       	st.w	r12[0x10],r7
800082fc:	2f ed       	sub	sp,-8
800082fe:	d8 32       	popm	r0-r7,pc

80008300 <__i2b>:
80008300:	d4 21       	pushm	r4-r7,lr
80008302:	16 97       	mov	r7,r11
80008304:	30 1b       	mov	r11,1
80008306:	c4 9e       	rcall	80007f98 <_Balloc>
80008308:	30 19       	mov	r9,1
8000830a:	99 57       	st.w	r12[0x14],r7
8000830c:	99 49       	st.w	r12[0x10],r9
8000830e:	d8 22       	popm	r4-r7,pc

80008310 <__multadd>:
80008310:	d4 31       	pushm	r0-r7,lr
80008312:	30 08       	mov	r8,0
80008314:	12 95       	mov	r5,r9
80008316:	16 97       	mov	r7,r11
80008318:	18 96       	mov	r6,r12
8000831a:	76 44       	ld.w	r4,r11[0x10]
8000831c:	f6 c9 ff ec 	sub	r9,r11,-20
80008320:	72 0b       	ld.w	r11,r9[0x0]
80008322:	f6 0c 16 10 	lsr	r12,r11,0x10
80008326:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000832a:	f4 0c 02 4c 	mul	r12,r10,r12
8000832e:	f4 0b 03 45 	mac	r5,r10,r11
80008332:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
80008336:	b1 85       	lsr	r5,0x10
80008338:	18 05       	add	r5,r12
8000833a:	ea 0c 15 10 	lsl	r12,r5,0x10
8000833e:	f8 0b 00 0b 	add	r11,r12,r11
80008342:	12 ab       	st.w	r9++,r11
80008344:	2f f8       	sub	r8,-1
80008346:	b1 85       	lsr	r5,0x10
80008348:	08 38       	cp.w	r8,r4
8000834a:	ce b5       	brlt	80008320 <__multadd+0x10>
8000834c:	58 05       	cp.w	r5,0
8000834e:	c1 c0       	breq	80008386 <__multadd+0x76>
80008350:	6e 28       	ld.w	r8,r7[0x8]
80008352:	10 34       	cp.w	r4,r8
80008354:	c1 35       	brlt	8000837a <__multadd+0x6a>
80008356:	6e 1b       	ld.w	r11,r7[0x4]
80008358:	0c 9c       	mov	r12,r6
8000835a:	2f fb       	sub	r11,-1
8000835c:	c1 ee       	rcall	80007f98 <_Balloc>
8000835e:	6e 4a       	ld.w	r10,r7[0x10]
80008360:	ee cb ff f4 	sub	r11,r7,-12
80008364:	18 93       	mov	r3,r12
80008366:	2f ea       	sub	r10,-2
80008368:	2f 4c       	sub	r12,-12
8000836a:	a3 6a       	lsl	r10,0x2
8000836c:	fe b0 dd 94 	rcall	80003e94 <memcpy>
80008370:	0e 9b       	mov	r11,r7
80008372:	0c 9c       	mov	r12,r6
80008374:	fe b0 fd f8 	rcall	80007f64 <_Bfree>
80008378:	06 97       	mov	r7,r3
8000837a:	e8 c8 ff ff 	sub	r8,r4,-1
8000837e:	2f b4       	sub	r4,-5
80008380:	8f 48       	st.w	r7[0x10],r8
80008382:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
80008386:	0e 9c       	mov	r12,r7
80008388:	d8 32       	popm	r0-r7,pc
8000838a:	d7 03       	nop

8000838c <__pow5mult>:
8000838c:	d4 31       	pushm	r0-r7,lr
8000838e:	14 96       	mov	r6,r10
80008390:	18 97       	mov	r7,r12
80008392:	16 94       	mov	r4,r11
80008394:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
80008398:	c0 80       	breq	800083a8 <__pow5mult+0x1c>
8000839a:	20 18       	sub	r8,1
8000839c:	49 f9       	lddpc	r9,80008418 <__pow5mult+0x8c>
8000839e:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
800083a2:	30 09       	mov	r9,0
800083a4:	cb 6f       	rcall	80008310 <__multadd>
800083a6:	18 94       	mov	r4,r12
800083a8:	a3 46       	asr	r6,0x2
800083aa:	c3 40       	breq	80008412 <__pow5mult+0x86>
800083ac:	6e 95       	ld.w	r5,r7[0x24]
800083ae:	58 05       	cp.w	r5,0
800083b0:	c0 91       	brne	800083c2 <__pow5mult+0x36>
800083b2:	31 0c       	mov	r12,16
800083b4:	fe b0 fa f6 	rcall	800079a0 <malloc>
800083b8:	99 35       	st.w	r12[0xc],r5
800083ba:	8f 9c       	st.w	r7[0x24],r12
800083bc:	99 15       	st.w	r12[0x4],r5
800083be:	99 25       	st.w	r12[0x8],r5
800083c0:	99 05       	st.w	r12[0x0],r5
800083c2:	6e 93       	ld.w	r3,r7[0x24]
800083c4:	66 25       	ld.w	r5,r3[0x8]
800083c6:	58 05       	cp.w	r5,0
800083c8:	c0 c1       	brne	800083e0 <__pow5mult+0x54>
800083ca:	e0 6b 02 71 	mov	r11,625
800083ce:	0e 9c       	mov	r12,r7
800083d0:	c9 8f       	rcall	80008300 <__i2b>
800083d2:	87 2c       	st.w	r3[0x8],r12
800083d4:	30 08       	mov	r8,0
800083d6:	18 95       	mov	r5,r12
800083d8:	99 08       	st.w	r12[0x0],r8
800083da:	c0 38       	rjmp	800083e0 <__pow5mult+0x54>
800083dc:	06 9c       	mov	r12,r3
800083de:	18 95       	mov	r5,r12
800083e0:	ed b6 00 00 	bld	r6,0x0
800083e4:	c0 b1       	brne	800083fa <__pow5mult+0x6e>
800083e6:	08 9b       	mov	r11,r4
800083e8:	0a 9a       	mov	r10,r5
800083ea:	0e 9c       	mov	r12,r7
800083ec:	c0 af       	rcall	80008200 <__multiply>
800083ee:	08 9b       	mov	r11,r4
800083f0:	18 93       	mov	r3,r12
800083f2:	0e 9c       	mov	r12,r7
800083f4:	06 94       	mov	r4,r3
800083f6:	fe b0 fd b7 	rcall	80007f64 <_Bfree>
800083fa:	a1 56       	asr	r6,0x1
800083fc:	c0 b0       	breq	80008412 <__pow5mult+0x86>
800083fe:	6a 03       	ld.w	r3,r5[0x0]
80008400:	58 03       	cp.w	r3,0
80008402:	ce d1       	brne	800083dc <__pow5mult+0x50>
80008404:	0a 9a       	mov	r10,r5
80008406:	0a 9b       	mov	r11,r5
80008408:	0e 9c       	mov	r12,r7
8000840a:	cf be       	rcall	80008200 <__multiply>
8000840c:	8b 0c       	st.w	r5[0x0],r12
8000840e:	99 03       	st.w	r12[0x0],r3
80008410:	ce 7b       	rjmp	800083de <__pow5mult+0x52>
80008412:	08 9c       	mov	r12,r4
80008414:	d8 32       	popm	r0-r7,pc
80008416:	d7 03       	nop
80008418:	80 00       	ld.sh	r0,r0[0x0]
8000841a:	9f 90       	st.w	pc[0x24],r0

8000841c <_realloc_r>:
8000841c:	d4 31       	pushm	r0-r7,lr
8000841e:	20 1d       	sub	sp,4
80008420:	16 94       	mov	r4,r11
80008422:	18 92       	mov	r2,r12
80008424:	14 9b       	mov	r11,r10
80008426:	58 04       	cp.w	r4,0
80008428:	c0 51       	brne	80008432 <_realloc_r+0x16>
8000842a:	fe b0 fa c3 	rcall	800079b0 <_malloc_r>
8000842e:	18 95       	mov	r5,r12
80008430:	c5 59       	rjmp	800086da <_realloc_r+0x2be>
80008432:	50 0a       	stdsp	sp[0x0],r10
80008434:	fe b0 fd 05 	rcall	80007e3e <__malloc_lock>
80008438:	40 0b       	lddsp	r11,sp[0x0]
8000843a:	f6 c8 ff f5 	sub	r8,r11,-11
8000843e:	e8 c1 00 08 	sub	r1,r4,8
80008442:	10 96       	mov	r6,r8
80008444:	62 1c       	ld.w	r12,r1[0x4]
80008446:	e0 16 ff f8 	andl	r6,0xfff8
8000844a:	59 68       	cp.w	r8,22
8000844c:	f9 b6 08 10 	movls	r6,16
80008450:	16 36       	cp.w	r6,r11
80008452:	5f 38       	srlo	r8
80008454:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
80008458:	c0 50       	breq	80008462 <_realloc_r+0x46>
8000845a:	30 c8       	mov	r8,12
8000845c:	30 05       	mov	r5,0
8000845e:	85 38       	st.w	r2[0xc],r8
80008460:	c3 d9       	rjmp	800086da <_realloc_r+0x2be>
80008462:	18 90       	mov	r0,r12
80008464:	e0 10 ff fc 	andl	r0,0xfffc
80008468:	0c 30       	cp.w	r0,r6
8000846a:	e0 84 01 0d 	brge	80008684 <_realloc_r+0x268>
8000846e:	4c a8       	lddpc	r8,80008594 <_realloc_r+0x178>
80008470:	e2 00 00 09 	add	r9,r1,r0
80008474:	70 25       	ld.w	r5,r8[0x8]
80008476:	0a 39       	cp.w	r9,r5
80008478:	c0 90       	breq	8000848a <_realloc_r+0x6e>
8000847a:	72 1a       	ld.w	r10,r9[0x4]
8000847c:	a1 ca       	cbr	r10,0x0
8000847e:	f2 0a 00 0a 	add	r10,r9,r10
80008482:	74 1a       	ld.w	r10,r10[0x4]
80008484:	ed ba 00 00 	bld	r10,0x0
80008488:	c2 20       	breq	800084cc <_realloc_r+0xb0>
8000848a:	72 1a       	ld.w	r10,r9[0x4]
8000848c:	e0 1a ff fc 	andl	r10,0xfffc
80008490:	f4 00 00 03 	add	r3,r10,r0
80008494:	0a 39       	cp.w	r9,r5
80008496:	c1 31       	brne	800084bc <_realloc_r+0xa0>
80008498:	ec c7 ff f0 	sub	r7,r6,-16
8000849c:	0e 33       	cp.w	r3,r7
8000849e:	c1 95       	brlt	800084d0 <_realloc_r+0xb4>
800084a0:	e2 06 00 09 	add	r9,r1,r6
800084a4:	0c 13       	sub	r3,r6
800084a6:	a1 a3       	sbr	r3,0x0
800084a8:	93 13       	st.w	r9[0x4],r3
800084aa:	91 29       	st.w	r8[0x8],r9
800084ac:	04 9c       	mov	r12,r2
800084ae:	62 18       	ld.w	r8,r1[0x4]
800084b0:	08 95       	mov	r5,r4
800084b2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800084b6:	10 46       	or	r6,r8
800084b8:	83 16       	st.w	r1[0x4],r6
800084ba:	c0 e9       	rjmp	800086d6 <_realloc_r+0x2ba>
800084bc:	0c 33       	cp.w	r3,r6
800084be:	c0 95       	brlt	800084d0 <_realloc_r+0xb4>
800084c0:	72 28       	ld.w	r8,r9[0x8]
800084c2:	02 97       	mov	r7,r1
800084c4:	72 39       	ld.w	r9,r9[0xc]
800084c6:	93 28       	st.w	r9[0x8],r8
800084c8:	91 39       	st.w	r8[0xc],r9
800084ca:	cd f8       	rjmp	80008688 <_realloc_r+0x26c>
800084cc:	30 0a       	mov	r10,0
800084ce:	14 99       	mov	r9,r10
800084d0:	ed bc 00 00 	bld	r12,0x0
800084d4:	e0 80 00 98 	breq	80008604 <_realloc_r+0x1e8>
800084d8:	62 07       	ld.w	r7,r1[0x0]
800084da:	e2 07 01 07 	sub	r7,r1,r7
800084de:	6e 1c       	ld.w	r12,r7[0x4]
800084e0:	e0 1c ff fc 	andl	r12,0xfffc
800084e4:	58 09       	cp.w	r9,0
800084e6:	c5 90       	breq	80008598 <_realloc_r+0x17c>
800084e8:	f8 00 00 03 	add	r3,r12,r0
800084ec:	0a 39       	cp.w	r9,r5
800084ee:	c4 81       	brne	8000857e <_realloc_r+0x162>
800084f0:	14 03       	add	r3,r10
800084f2:	ec c9 ff f0 	sub	r9,r6,-16
800084f6:	12 33       	cp.w	r3,r9
800084f8:	c5 05       	brlt	80008598 <_realloc_r+0x17c>
800084fa:	6e 3a       	ld.w	r10,r7[0xc]
800084fc:	6e 29       	ld.w	r9,r7[0x8]
800084fe:	95 29       	st.w	r10[0x8],r9
80008500:	93 3a       	st.w	r9[0xc],r10
80008502:	ee c5 ff f8 	sub	r5,r7,-8
80008506:	e0 ca 00 04 	sub	r10,r0,4
8000850a:	e0 4a 00 24 	cp.w	r10,36
8000850e:	e0 8b 00 25 	brhi	80008558 <_realloc_r+0x13c>
80008512:	0a 99       	mov	r9,r5
80008514:	59 3a       	cp.w	r10,19
80008516:	e0 88 00 1a 	brls	8000854a <_realloc_r+0x12e>
8000851a:	09 09       	ld.w	r9,r4++
8000851c:	8b 09       	st.w	r5[0x0],r9
8000851e:	09 09       	ld.w	r9,r4++
80008520:	8f 39       	st.w	r7[0xc],r9
80008522:	ee c9 ff f0 	sub	r9,r7,-16
80008526:	59 ba       	cp.w	r10,27
80008528:	e0 88 00 11 	brls	8000854a <_realloc_r+0x12e>
8000852c:	09 0b       	ld.w	r11,r4++
8000852e:	93 0b       	st.w	r9[0x0],r11
80008530:	09 09       	ld.w	r9,r4++
80008532:	8f 59       	st.w	r7[0x14],r9
80008534:	ee c9 ff e8 	sub	r9,r7,-24
80008538:	e0 4a 00 24 	cp.w	r10,36
8000853c:	c0 71       	brne	8000854a <_realloc_r+0x12e>
8000853e:	09 0a       	ld.w	r10,r4++
80008540:	93 0a       	st.w	r9[0x0],r10
80008542:	ee c9 ff e0 	sub	r9,r7,-32
80008546:	09 0a       	ld.w	r10,r4++
80008548:	8f 7a       	st.w	r7[0x1c],r10
8000854a:	09 0a       	ld.w	r10,r4++
8000854c:	12 aa       	st.w	r9++,r10
8000854e:	68 0a       	ld.w	r10,r4[0x0]
80008550:	93 0a       	st.w	r9[0x0],r10
80008552:	68 1a       	ld.w	r10,r4[0x4]
80008554:	93 1a       	st.w	r9[0x4],r10
80008556:	c0 78       	rjmp	80008564 <_realloc_r+0x148>
80008558:	50 08       	stdsp	sp[0x0],r8
8000855a:	08 9b       	mov	r11,r4
8000855c:	0a 9c       	mov	r12,r5
8000855e:	fe b0 fc 4a 	rcall	80007df2 <memmove>
80008562:	40 08       	lddsp	r8,sp[0x0]
80008564:	ee 06 00 09 	add	r9,r7,r6
80008568:	0c 13       	sub	r3,r6
8000856a:	a1 a3       	sbr	r3,0x0
8000856c:	93 13       	st.w	r9[0x4],r3
8000856e:	91 29       	st.w	r8[0x8],r9
80008570:	04 9c       	mov	r12,r2
80008572:	6e 18       	ld.w	r8,r7[0x4]
80008574:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008578:	10 46       	or	r6,r8
8000857a:	8f 16       	st.w	r7[0x4],r6
8000857c:	ca d8       	rjmp	800086d6 <_realloc_r+0x2ba>
8000857e:	14 03       	add	r3,r10
80008580:	0c 33       	cp.w	r3,r6
80008582:	c0 b5       	brlt	80008598 <_realloc_r+0x17c>
80008584:	72 28       	ld.w	r8,r9[0x8]
80008586:	72 39       	ld.w	r9,r9[0xc]
80008588:	93 28       	st.w	r9[0x8],r8
8000858a:	91 39       	st.w	r8[0xc],r9
8000858c:	6e 28       	ld.w	r8,r7[0x8]
8000858e:	6e 39       	ld.w	r9,r7[0xc]
80008590:	c0 a8       	rjmp	800085a4 <_realloc_r+0x188>
80008592:	d7 03       	nop
80008594:	00 00       	add	r0,r0
80008596:	01 c8       	ld.ub	r8,r0[0x4]
80008598:	f8 00 00 03 	add	r3,r12,r0
8000859c:	0c 33       	cp.w	r3,r6
8000859e:	c3 35       	brlt	80008604 <_realloc_r+0x1e8>
800085a0:	6e 39       	ld.w	r9,r7[0xc]
800085a2:	6e 28       	ld.w	r8,r7[0x8]
800085a4:	93 28       	st.w	r9[0x8],r8
800085a6:	91 39       	st.w	r8[0xc],r9
800085a8:	e0 ca 00 04 	sub	r10,r0,4
800085ac:	ee cc ff f8 	sub	r12,r7,-8
800085b0:	e0 4a 00 24 	cp.w	r10,36
800085b4:	e0 8b 00 24 	brhi	800085fc <_realloc_r+0x1e0>
800085b8:	59 3a       	cp.w	r10,19
800085ba:	e0 88 00 1a 	brls	800085ee <_realloc_r+0x1d2>
800085be:	09 08       	ld.w	r8,r4++
800085c0:	99 08       	st.w	r12[0x0],r8
800085c2:	09 08       	ld.w	r8,r4++
800085c4:	8f 38       	st.w	r7[0xc],r8
800085c6:	ee cc ff f0 	sub	r12,r7,-16
800085ca:	59 ba       	cp.w	r10,27
800085cc:	e0 88 00 11 	brls	800085ee <_realloc_r+0x1d2>
800085d0:	09 08       	ld.w	r8,r4++
800085d2:	99 08       	st.w	r12[0x0],r8
800085d4:	09 08       	ld.w	r8,r4++
800085d6:	8f 58       	st.w	r7[0x14],r8
800085d8:	ee cc ff e8 	sub	r12,r7,-24
800085dc:	e0 4a 00 24 	cp.w	r10,36
800085e0:	c0 71       	brne	800085ee <_realloc_r+0x1d2>
800085e2:	09 08       	ld.w	r8,r4++
800085e4:	99 08       	st.w	r12[0x0],r8
800085e6:	ee cc ff e0 	sub	r12,r7,-32
800085ea:	09 08       	ld.w	r8,r4++
800085ec:	8f 78       	st.w	r7[0x1c],r8
800085ee:	09 08       	ld.w	r8,r4++
800085f0:	18 a8       	st.w	r12++,r8
800085f2:	68 08       	ld.w	r8,r4[0x0]
800085f4:	99 08       	st.w	r12[0x0],r8
800085f6:	68 18       	ld.w	r8,r4[0x4]
800085f8:	99 18       	st.w	r12[0x4],r8
800085fa:	c4 78       	rjmp	80008688 <_realloc_r+0x26c>
800085fc:	08 9b       	mov	r11,r4
800085fe:	fe b0 fb fa 	rcall	80007df2 <memmove>
80008602:	c4 38       	rjmp	80008688 <_realloc_r+0x26c>
80008604:	04 9c       	mov	r12,r2
80008606:	fe b0 f9 d5 	rcall	800079b0 <_malloc_r>
8000860a:	18 95       	mov	r5,r12
8000860c:	c3 a0       	breq	80008680 <_realloc_r+0x264>
8000860e:	62 18       	ld.w	r8,r1[0x4]
80008610:	f8 c9 00 08 	sub	r9,r12,8
80008614:	a1 c8       	cbr	r8,0x0
80008616:	e2 08 00 08 	add	r8,r1,r8
8000861a:	10 39       	cp.w	r9,r8
8000861c:	c0 71       	brne	8000862a <_realloc_r+0x20e>
8000861e:	72 13       	ld.w	r3,r9[0x4]
80008620:	02 97       	mov	r7,r1
80008622:	e0 13 ff fc 	andl	r3,0xfffc
80008626:	00 03       	add	r3,r0
80008628:	c3 08       	rjmp	80008688 <_realloc_r+0x26c>
8000862a:	e0 ca 00 04 	sub	r10,r0,4
8000862e:	e0 4a 00 24 	cp.w	r10,36
80008632:	e0 8b 00 20 	brhi	80008672 <_realloc_r+0x256>
80008636:	08 99       	mov	r9,r4
80008638:	18 98       	mov	r8,r12
8000863a:	59 3a       	cp.w	r10,19
8000863c:	e0 88 00 14 	brls	80008664 <_realloc_r+0x248>
80008640:	13 0b       	ld.w	r11,r9++
80008642:	10 ab       	st.w	r8++,r11
80008644:	13 0b       	ld.w	r11,r9++
80008646:	10 ab       	st.w	r8++,r11
80008648:	59 ba       	cp.w	r10,27
8000864a:	e0 88 00 0d 	brls	80008664 <_realloc_r+0x248>
8000864e:	13 0b       	ld.w	r11,r9++
80008650:	10 ab       	st.w	r8++,r11
80008652:	13 0b       	ld.w	r11,r9++
80008654:	10 ab       	st.w	r8++,r11
80008656:	e0 4a 00 24 	cp.w	r10,36
8000865a:	c0 51       	brne	80008664 <_realloc_r+0x248>
8000865c:	13 0a       	ld.w	r10,r9++
8000865e:	10 aa       	st.w	r8++,r10
80008660:	13 0a       	ld.w	r10,r9++
80008662:	10 aa       	st.w	r8++,r10
80008664:	13 0a       	ld.w	r10,r9++
80008666:	10 aa       	st.w	r8++,r10
80008668:	72 0a       	ld.w	r10,r9[0x0]
8000866a:	91 0a       	st.w	r8[0x0],r10
8000866c:	72 19       	ld.w	r9,r9[0x4]
8000866e:	91 19       	st.w	r8[0x4],r9
80008670:	c0 48       	rjmp	80008678 <_realloc_r+0x25c>
80008672:	08 9b       	mov	r11,r4
80008674:	fe b0 fb bf 	rcall	80007df2 <memmove>
80008678:	08 9b       	mov	r11,r4
8000867a:	04 9c       	mov	r12,r2
8000867c:	fe b0 f6 f2 	rcall	80007460 <_free_r>
80008680:	04 9c       	mov	r12,r2
80008682:	c2 a8       	rjmp	800086d6 <_realloc_r+0x2ba>
80008684:	00 93       	mov	r3,r0
80008686:	02 97       	mov	r7,r1
80008688:	e6 06 01 09 	sub	r9,r3,r6
8000868c:	6e 18       	ld.w	r8,r7[0x4]
8000868e:	58 f9       	cp.w	r9,15
80008690:	e0 88 00 16 	brls	800086bc <_realloc_r+0x2a0>
80008694:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008698:	ed e8 10 08 	or	r8,r6,r8
8000869c:	8f 18       	st.w	r7[0x4],r8
8000869e:	12 98       	mov	r8,r9
800086a0:	a1 a8       	sbr	r8,0x0
800086a2:	ee 06 00 0b 	add	r11,r7,r6
800086a6:	f6 09 00 09 	add	r9,r11,r9
800086aa:	97 18       	st.w	r11[0x4],r8
800086ac:	72 18       	ld.w	r8,r9[0x4]
800086ae:	a1 a8       	sbr	r8,0x0
800086b0:	2f 8b       	sub	r11,-8
800086b2:	93 18       	st.w	r9[0x4],r8
800086b4:	04 9c       	mov	r12,r2
800086b6:	fe b0 f6 d5 	rcall	80007460 <_free_r>
800086ba:	c0 b8       	rjmp	800086d0 <_realloc_r+0x2b4>
800086bc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800086c0:	e7 e8 10 08 	or	r8,r3,r8
800086c4:	8f 18       	st.w	r7[0x4],r8
800086c6:	ee 03 00 03 	add	r3,r7,r3
800086ca:	66 18       	ld.w	r8,r3[0x4]
800086cc:	a1 a8       	sbr	r8,0x0
800086ce:	87 18       	st.w	r3[0x4],r8
800086d0:	04 9c       	mov	r12,r2
800086d2:	ee c5 ff f8 	sub	r5,r7,-8
800086d6:	fe b0 fb b5 	rcall	80007e40 <__malloc_unlock>
800086da:	0a 9c       	mov	r12,r5
800086dc:	2f fd       	sub	sp,-4
800086de:	d8 32       	popm	r0-r7,pc

800086e0 <__isinfd>:
800086e0:	14 98       	mov	r8,r10
800086e2:	fc 19 7f f0 	movh	r9,0x7ff0
800086e6:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
800086ea:	f0 0b 11 00 	rsub	r11,r8,0
800086ee:	f7 e8 10 08 	or	r8,r11,r8
800086f2:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
800086f6:	f2 08 01 08 	sub	r8,r9,r8
800086fa:	f0 0c 11 00 	rsub	r12,r8,0
800086fe:	f9 e8 10 08 	or	r8,r12,r8
80008702:	f0 0c 14 1f 	asr	r12,r8,0x1f
80008706:	2f fc       	sub	r12,-1
80008708:	5e fc       	retal	r12

8000870a <__isnand>:
8000870a:	14 98       	mov	r8,r10
8000870c:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80008710:	f0 0c 11 00 	rsub	r12,r8,0
80008714:	10 4c       	or	r12,r8
80008716:	fc 18 7f f0 	movh	r8,0x7ff0
8000871a:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
8000871e:	f0 0c 01 0c 	sub	r12,r8,r12
80008722:	bf 9c       	lsr	r12,0x1f
80008724:	5e fc       	retal	r12
80008726:	d7 03       	nop

80008728 <_sbrk_r>:
80008728:	d4 21       	pushm	r4-r7,lr
8000872a:	30 08       	mov	r8,0
8000872c:	18 97       	mov	r7,r12
8000872e:	48 66       	lddpc	r6,80008744 <_sbrk_r+0x1c>
80008730:	16 9c       	mov	r12,r11
80008732:	8d 08       	st.w	r6[0x0],r8
80008734:	ca 4c       	rcall	8000887c <_sbrk>
80008736:	5b fc       	cp.w	r12,-1
80008738:	c0 51       	brne	80008742 <_sbrk_r+0x1a>
8000873a:	6c 08       	ld.w	r8,r6[0x0]
8000873c:	58 08       	cp.w	r8,0
8000873e:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008742:	d8 22       	popm	r4-r7,pc
80008744:	00 00       	add	r0,r0
80008746:	0c c4       	st.b	r6++,r4

80008748 <__sclose>:
80008748:	d4 01       	pushm	lr
8000874a:	96 7b       	ld.sh	r11,r11[0xe]
8000874c:	cf 6c       	rcall	80008938 <_close_r>
8000874e:	d8 02       	popm	pc

80008750 <__sseek>:
80008750:	d4 21       	pushm	r4-r7,lr
80008752:	16 97       	mov	r7,r11
80008754:	96 7b       	ld.sh	r11,r11[0xe]
80008756:	c7 fd       	rcall	80008a54 <_lseek_r>
80008758:	8e 68       	ld.sh	r8,r7[0xc]
8000875a:	10 99       	mov	r9,r8
8000875c:	ad c8       	cbr	r8,0xc
8000875e:	ad a9       	sbr	r9,0xc
80008760:	5b fc       	cp.w	r12,-1
80008762:	ef f8 0c 06 	st.heq	r7[0xc],r8
80008766:	ef f9 1c 06 	st.hne	r7[0xc],r9
8000876a:	ef fc 1a 15 	st.wne	r7[0x54],r12
8000876e:	d8 22       	popm	r4-r7,pc

80008770 <__swrite>:
80008770:	d4 21       	pushm	r4-r7,lr
80008772:	96 68       	ld.sh	r8,r11[0xc]
80008774:	16 97       	mov	r7,r11
80008776:	14 95       	mov	r5,r10
80008778:	12 94       	mov	r4,r9
8000877a:	e2 18 01 00 	andl	r8,0x100,COH
8000877e:	18 96       	mov	r6,r12
80008780:	c0 50       	breq	8000878a <__swrite+0x1a>
80008782:	30 29       	mov	r9,2
80008784:	30 0a       	mov	r10,0
80008786:	96 7b       	ld.sh	r11,r11[0xe]
80008788:	c6 6d       	rcall	80008a54 <_lseek_r>
8000878a:	8e 68       	ld.sh	r8,r7[0xc]
8000878c:	ad c8       	cbr	r8,0xc
8000878e:	08 99       	mov	r9,r4
80008790:	0a 9a       	mov	r10,r5
80008792:	8e 7b       	ld.sh	r11,r7[0xe]
80008794:	0c 9c       	mov	r12,r6
80008796:	ae 68       	st.h	r7[0xc],r8
80008798:	c9 0c       	rcall	800088b8 <_write_r>
8000879a:	d8 22       	popm	r4-r7,pc

8000879c <__sread>:
8000879c:	d4 21       	pushm	r4-r7,lr
8000879e:	16 97       	mov	r7,r11
800087a0:	96 7b       	ld.sh	r11,r11[0xe]
800087a2:	c6 dd       	rcall	80008a7c <_read_r>
800087a4:	c0 65       	brlt	800087b0 <__sread+0x14>
800087a6:	6f 58       	ld.w	r8,r7[0x54]
800087a8:	18 08       	add	r8,r12
800087aa:	ef 48 00 54 	st.w	r7[84],r8
800087ae:	d8 22       	popm	r4-r7,pc
800087b0:	8e 68       	ld.sh	r8,r7[0xc]
800087b2:	ad c8       	cbr	r8,0xc
800087b4:	ae 68       	st.h	r7[0xc],r8
800087b6:	d8 22       	popm	r4-r7,pc

800087b8 <strlen>:
800087b8:	30 09       	mov	r9,0
800087ba:	18 98       	mov	r8,r12
800087bc:	c0 28       	rjmp	800087c0 <strlen+0x8>
800087be:	2f f8       	sub	r8,-1
800087c0:	11 8a       	ld.ub	r10,r8[0x0]
800087c2:	f2 0a 18 00 	cp.b	r10,r9
800087c6:	cf c1       	brne	800087be <strlen+0x6>
800087c8:	f0 0c 01 0c 	sub	r12,r8,r12
800087cc:	5e fc       	retal	r12
800087ce:	d7 03       	nop

800087d0 <_close>:
800087d0:	30 28       	mov	r8,2
800087d2:	d6 73       	breakpoint
800087d4:	3f fc       	mov	r12,-1
800087d6:	35 8b       	mov	r11,88
800087d8:	58 0c       	cp.w	r12,0
800087da:	5e 4c       	retge	r12
800087dc:	48 2a       	lddpc	r10,800087e4 <_close+0x14>
800087de:	95 0b       	st.w	r10[0x0],r11
800087e0:	5e fc       	retal	r12
800087e2:	d7 03       	nop
800087e4:	00 00       	add	r0,r0
800087e6:	0c c4       	st.b	r6++,r4

800087e8 <_lseek>:
800087e8:	30 58       	mov	r8,5
800087ea:	d6 73       	breakpoint
800087ec:	3f fc       	mov	r12,-1
800087ee:	35 8b       	mov	r11,88
800087f0:	58 0c       	cp.w	r12,0
800087f2:	5e 4c       	retge	r12
800087f4:	48 2a       	lddpc	r10,800087fc <_lseek+0x14>
800087f6:	95 0b       	st.w	r10[0x0],r11
800087f8:	5e fc       	retal	r12
800087fa:	d7 03       	nop
800087fc:	00 00       	add	r0,r0
800087fe:	0c c4       	st.b	r6++,r4

80008800 <isatty>:
80008800:	30 b8       	mov	r8,11
80008802:	d6 73       	breakpoint
80008804:	3f fc       	mov	r12,-1
80008806:	35 8b       	mov	r11,88
80008808:	58 0c       	cp.w	r12,0
8000880a:	5e 4c       	retge	r12
8000880c:	48 2a       	lddpc	r10,80008814 <isatty+0x14>
8000880e:	95 0b       	st.w	r10[0x0],r11
80008810:	5e fc       	retal	r12
80008812:	d7 03       	nop
80008814:	00 00       	add	r0,r0
80008816:	0c c4       	st.b	r6++,r4

80008818 <_fstat_host>:
80008818:	30 98       	mov	r8,9
8000881a:	d6 73       	breakpoint
8000881c:	3f fc       	mov	r12,-1
8000881e:	35 8b       	mov	r11,88
80008820:	58 0c       	cp.w	r12,0
80008822:	5e 4c       	retge	r12
80008824:	48 2a       	lddpc	r10,8000882c <_fstat_host+0x14>
80008826:	95 0b       	st.w	r10[0x0],r11
80008828:	5e fc       	retal	r12
8000882a:	d7 03       	nop
8000882c:	00 00       	add	r0,r0
8000882e:	0c c4       	st.b	r6++,r4

80008830 <_fstat>:
80008830:	d4 21       	pushm	r4-r7,lr
80008832:	21 0d       	sub	sp,64
80008834:	16 97       	mov	r7,r11
80008836:	1a 9b       	mov	r11,sp
80008838:	cf 0f       	rcall	80008818 <_fstat_host>
8000883a:	c0 34       	brge	80008840 <_fstat+0x10>
8000883c:	3f fc       	mov	r12,-1
8000883e:	c1 c8       	rjmp	80008876 <_fstat+0x46>
80008840:	40 08       	lddsp	r8,sp[0x0]
80008842:	ae 08       	st.h	r7[0x0],r8
80008844:	40 18       	lddsp	r8,sp[0x4]
80008846:	ae 18       	st.h	r7[0x2],r8
80008848:	40 28       	lddsp	r8,sp[0x8]
8000884a:	8f 18       	st.w	r7[0x4],r8
8000884c:	40 38       	lddsp	r8,sp[0xc]
8000884e:	ae 48       	st.h	r7[0x8],r8
80008850:	40 48       	lddsp	r8,sp[0x10]
80008852:	ae 58       	st.h	r7[0xa],r8
80008854:	40 58       	lddsp	r8,sp[0x14]
80008856:	ae 68       	st.h	r7[0xc],r8
80008858:	40 68       	lddsp	r8,sp[0x18]
8000885a:	ae 78       	st.h	r7[0xe],r8
8000885c:	40 88       	lddsp	r8,sp[0x20]
8000885e:	8f 48       	st.w	r7[0x10],r8
80008860:	40 a8       	lddsp	r8,sp[0x28]
80008862:	8f b8       	st.w	r7[0x2c],r8
80008864:	40 c8       	lddsp	r8,sp[0x30]
80008866:	8f c8       	st.w	r7[0x30],r8
80008868:	40 d8       	lddsp	r8,sp[0x34]
8000886a:	8f 58       	st.w	r7[0x14],r8
8000886c:	40 e8       	lddsp	r8,sp[0x38]
8000886e:	30 0c       	mov	r12,0
80008870:	8f 78       	st.w	r7[0x1c],r8
80008872:	40 f8       	lddsp	r8,sp[0x3c]
80008874:	8f 98       	st.w	r7[0x24],r8
80008876:	2f 0d       	sub	sp,-64
80008878:	d8 22       	popm	r4-r7,pc
8000887a:	d7 03       	nop

8000887c <_sbrk>:
8000887c:	d4 01       	pushm	lr
8000887e:	48 c8       	lddpc	r8,800088ac <_sbrk+0x30>
80008880:	70 09       	ld.w	r9,r8[0x0]
80008882:	58 09       	cp.w	r9,0
80008884:	c0 31       	brne	8000888a <_sbrk+0xe>
80008886:	48 b9       	lddpc	r9,800088b0 <_sbrk+0x34>
80008888:	91 09       	st.w	r8[0x0],r9
8000888a:	48 99       	lddpc	r9,800088ac <_sbrk+0x30>
8000888c:	48 aa       	lddpc	r10,800088b4 <_sbrk+0x38>
8000888e:	72 08       	ld.w	r8,r9[0x0]
80008890:	f0 0c 00 0c 	add	r12,r8,r12
80008894:	14 3c       	cp.w	r12,r10
80008896:	e0 8b 00 04 	brhi	8000889e <_sbrk+0x22>
8000889a:	93 0c       	st.w	r9[0x0],r12
8000889c:	c0 58       	rjmp	800088a6 <_sbrk+0x2a>
8000889e:	c5 dc       	rcall	80008958 <__errno>
800088a0:	30 c8       	mov	r8,12
800088a2:	99 08       	st.w	r12[0x0],r8
800088a4:	3f f8       	mov	r8,-1
800088a6:	10 9c       	mov	r12,r8
800088a8:	d8 02       	popm	pc
800088aa:	d7 03       	nop
800088ac:	00 00       	add	r0,r0
800088ae:	0c 94       	mov	r4,r6
800088b0:	00 00       	add	r0,r0
800088b2:	0c c8       	st.b	r6++,r8
800088b4:	00 00       	add	r0,r0
800088b6:	f0 00       	*unknown*

800088b8 <_write_r>:
800088b8:	d4 21       	pushm	r4-r7,lr
800088ba:	16 98       	mov	r8,r11
800088bc:	18 97       	mov	r7,r12
800088be:	10 9c       	mov	r12,r8
800088c0:	30 08       	mov	r8,0
800088c2:	14 9b       	mov	r11,r10
800088c4:	48 66       	lddpc	r6,800088dc <_write_r+0x24>
800088c6:	12 9a       	mov	r10,r9
800088c8:	8d 08       	st.w	r6[0x0],r8
800088ca:	fe b0 d9 0d 	rcall	80003ae4 <_write>
800088ce:	5b fc       	cp.w	r12,-1
800088d0:	c0 51       	brne	800088da <_write_r+0x22>
800088d2:	6c 08       	ld.w	r8,r6[0x0]
800088d4:	58 08       	cp.w	r8,0
800088d6:	ef f8 1a 03 	st.wne	r7[0xc],r8
800088da:	d8 22       	popm	r4-r7,pc
800088dc:	00 00       	add	r0,r0
800088de:	0c c4       	st.b	r6++,r4

800088e0 <_calloc_r>:
800088e0:	d4 21       	pushm	r4-r7,lr
800088e2:	f4 0b 02 4b 	mul	r11,r10,r11
800088e6:	fe b0 f8 65 	rcall	800079b0 <_malloc_r>
800088ea:	18 97       	mov	r7,r12
800088ec:	c2 30       	breq	80008932 <_calloc_r+0x52>
800088ee:	f8 fa ff fc 	ld.w	r10,r12[-4]
800088f2:	e0 1a ff fc 	andl	r10,0xfffc
800088f6:	20 4a       	sub	r10,4
800088f8:	e0 4a 00 24 	cp.w	r10,36
800088fc:	e0 8b 00 18 	brhi	8000892c <_calloc_r+0x4c>
80008900:	18 98       	mov	r8,r12
80008902:	59 3a       	cp.w	r10,19
80008904:	e0 88 00 0f 	brls	80008922 <_calloc_r+0x42>
80008908:	30 09       	mov	r9,0
8000890a:	10 a9       	st.w	r8++,r9
8000890c:	10 a9       	st.w	r8++,r9
8000890e:	59 ba       	cp.w	r10,27
80008910:	e0 88 00 09 	brls	80008922 <_calloc_r+0x42>
80008914:	10 a9       	st.w	r8++,r9
80008916:	10 a9       	st.w	r8++,r9
80008918:	e0 4a 00 24 	cp.w	r10,36
8000891c:	c0 31       	brne	80008922 <_calloc_r+0x42>
8000891e:	10 a9       	st.w	r8++,r9
80008920:	10 a9       	st.w	r8++,r9
80008922:	30 09       	mov	r9,0
80008924:	10 a9       	st.w	r8++,r9
80008926:	91 19       	st.w	r8[0x4],r9
80008928:	91 09       	st.w	r8[0x0],r9
8000892a:	c0 48       	rjmp	80008932 <_calloc_r+0x52>
8000892c:	30 0b       	mov	r11,0
8000892e:	fe b0 fa 81 	rcall	80007e30 <memset>
80008932:	0e 9c       	mov	r12,r7
80008934:	d8 22       	popm	r4-r7,pc
80008936:	d7 03       	nop

80008938 <_close_r>:
80008938:	d4 21       	pushm	r4-r7,lr
8000893a:	30 08       	mov	r8,0
8000893c:	18 97       	mov	r7,r12
8000893e:	48 66       	lddpc	r6,80008954 <_close_r+0x1c>
80008940:	16 9c       	mov	r12,r11
80008942:	8d 08       	st.w	r6[0x0],r8
80008944:	c4 6f       	rcall	800087d0 <_close>
80008946:	5b fc       	cp.w	r12,-1
80008948:	c0 51       	brne	80008952 <_close_r+0x1a>
8000894a:	6c 08       	ld.w	r8,r6[0x0]
8000894c:	58 08       	cp.w	r8,0
8000894e:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008952:	d8 22       	popm	r4-r7,pc
80008954:	00 00       	add	r0,r0
80008956:	0c c4       	st.b	r6++,r4

80008958 <__errno>:
80008958:	48 28       	lddpc	r8,80008960 <__errno+0x8>
8000895a:	70 0c       	ld.w	r12,r8[0x0]
8000895c:	2f 4c       	sub	r12,-12
8000895e:	5e fc       	retal	r12
80008960:	00 00       	add	r0,r0
80008962:	01 c4       	ld.ub	r4,r0[0x4]

80008964 <_fclose_r>:
80008964:	d4 21       	pushm	r4-r7,lr
80008966:	18 96       	mov	r6,r12
80008968:	16 97       	mov	r7,r11
8000896a:	58 0b       	cp.w	r11,0
8000896c:	c0 31       	brne	80008972 <_fclose_r+0xe>
8000896e:	16 95       	mov	r5,r11
80008970:	c5 08       	rjmp	80008a10 <_fclose_r+0xac>
80008972:	fe b0 f4 87 	rcall	80007280 <__sfp_lock_acquire>
80008976:	58 06       	cp.w	r6,0
80008978:	c0 70       	breq	80008986 <_fclose_r+0x22>
8000897a:	6c 68       	ld.w	r8,r6[0x18]
8000897c:	58 08       	cp.w	r8,0
8000897e:	c0 41       	brne	80008986 <_fclose_r+0x22>
80008980:	0c 9c       	mov	r12,r6
80008982:	fe b0 f4 d3 	rcall	80007328 <__sinit>
80008986:	4a 48       	lddpc	r8,80008a14 <_fclose_r+0xb0>
80008988:	10 37       	cp.w	r7,r8
8000898a:	c0 31       	brne	80008990 <_fclose_r+0x2c>
8000898c:	6c 07       	ld.w	r7,r6[0x0]
8000898e:	c0 a8       	rjmp	800089a2 <_fclose_r+0x3e>
80008990:	4a 28       	lddpc	r8,80008a18 <_fclose_r+0xb4>
80008992:	10 37       	cp.w	r7,r8
80008994:	c0 31       	brne	8000899a <_fclose_r+0x36>
80008996:	6c 17       	ld.w	r7,r6[0x4]
80008998:	c0 58       	rjmp	800089a2 <_fclose_r+0x3e>
8000899a:	4a 18       	lddpc	r8,80008a1c <_fclose_r+0xb8>
8000899c:	10 37       	cp.w	r7,r8
8000899e:	ed f7 00 02 	ld.weq	r7,r6[0x8]
800089a2:	8e 69       	ld.sh	r9,r7[0xc]
800089a4:	30 08       	mov	r8,0
800089a6:	f0 09 19 00 	cp.h	r9,r8
800089aa:	c0 51       	brne	800089b4 <_fclose_r+0x50>
800089ac:	fe b0 f4 6b 	rcall	80007282 <__sfp_lock_release>
800089b0:	30 05       	mov	r5,0
800089b2:	c2 f8       	rjmp	80008a10 <_fclose_r+0xac>
800089b4:	0e 9b       	mov	r11,r7
800089b6:	0c 9c       	mov	r12,r6
800089b8:	fe b0 f3 dc 	rcall	80007170 <_fflush_r>
800089bc:	6e c8       	ld.w	r8,r7[0x30]
800089be:	18 95       	mov	r5,r12
800089c0:	58 08       	cp.w	r8,0
800089c2:	c0 60       	breq	800089ce <_fclose_r+0x6a>
800089c4:	6e 8b       	ld.w	r11,r7[0x20]
800089c6:	0c 9c       	mov	r12,r6
800089c8:	5d 18       	icall	r8
800089ca:	f9 b5 05 ff 	movlt	r5,-1
800089ce:	8e 68       	ld.sh	r8,r7[0xc]
800089d0:	ed b8 00 07 	bld	r8,0x7
800089d4:	c0 51       	brne	800089de <_fclose_r+0x7a>
800089d6:	6e 4b       	ld.w	r11,r7[0x10]
800089d8:	0c 9c       	mov	r12,r6
800089da:	fe b0 f5 43 	rcall	80007460 <_free_r>
800089de:	6e db       	ld.w	r11,r7[0x34]
800089e0:	58 0b       	cp.w	r11,0
800089e2:	c0 a0       	breq	800089f6 <_fclose_r+0x92>
800089e4:	ee c8 ff bc 	sub	r8,r7,-68
800089e8:	10 3b       	cp.w	r11,r8
800089ea:	c0 40       	breq	800089f2 <_fclose_r+0x8e>
800089ec:	0c 9c       	mov	r12,r6
800089ee:	fe b0 f5 39 	rcall	80007460 <_free_r>
800089f2:	30 08       	mov	r8,0
800089f4:	8f d8       	st.w	r7[0x34],r8
800089f6:	6f 2b       	ld.w	r11,r7[0x48]
800089f8:	58 0b       	cp.w	r11,0
800089fa:	c0 70       	breq	80008a08 <_fclose_r+0xa4>
800089fc:	0c 9c       	mov	r12,r6
800089fe:	fe b0 f5 31 	rcall	80007460 <_free_r>
80008a02:	30 08       	mov	r8,0
80008a04:	ef 48 00 48 	st.w	r7[72],r8
80008a08:	30 08       	mov	r8,0
80008a0a:	ae 68       	st.h	r7[0xc],r8
80008a0c:	fe b0 f4 3b 	rcall	80007282 <__sfp_lock_release>
80008a10:	0a 9c       	mov	r12,r5
80008a12:	d8 22       	popm	r4-r7,pc
80008a14:	80 00       	ld.sh	r0,r0[0x0]
80008a16:	9e f0       	ld.uh	r0,pc[0xe]
80008a18:	80 00       	ld.sh	r0,r0[0x0]
80008a1a:	9f 10       	st.w	pc[0x4],r0
80008a1c:	80 00       	ld.sh	r0,r0[0x0]
80008a1e:	9f 30       	st.w	pc[0xc],r0

80008a20 <fclose>:
80008a20:	d4 01       	pushm	lr
80008a22:	48 38       	lddpc	r8,80008a2c <fclose+0xc>
80008a24:	18 9b       	mov	r11,r12
80008a26:	70 0c       	ld.w	r12,r8[0x0]
80008a28:	c9 ef       	rcall	80008964 <_fclose_r>
80008a2a:	d8 02       	popm	pc
80008a2c:	00 00       	add	r0,r0
80008a2e:	01 c4       	ld.ub	r4,r0[0x4]

80008a30 <_fstat_r>:
80008a30:	d4 21       	pushm	r4-r7,lr
80008a32:	16 98       	mov	r8,r11
80008a34:	18 97       	mov	r7,r12
80008a36:	10 9c       	mov	r12,r8
80008a38:	30 08       	mov	r8,0
80008a3a:	48 66       	lddpc	r6,80008a50 <_fstat_r+0x20>
80008a3c:	14 9b       	mov	r11,r10
80008a3e:	8d 08       	st.w	r6[0x0],r8
80008a40:	cf 8e       	rcall	80008830 <_fstat>
80008a42:	5b fc       	cp.w	r12,-1
80008a44:	c0 51       	brne	80008a4e <_fstat_r+0x1e>
80008a46:	6c 08       	ld.w	r8,r6[0x0]
80008a48:	58 08       	cp.w	r8,0
80008a4a:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008a4e:	d8 22       	popm	r4-r7,pc
80008a50:	00 00       	add	r0,r0
80008a52:	0c c4       	st.b	r6++,r4

80008a54 <_lseek_r>:
80008a54:	d4 21       	pushm	r4-r7,lr
80008a56:	16 98       	mov	r8,r11
80008a58:	18 97       	mov	r7,r12
80008a5a:	10 9c       	mov	r12,r8
80008a5c:	30 08       	mov	r8,0
80008a5e:	14 9b       	mov	r11,r10
80008a60:	48 66       	lddpc	r6,80008a78 <_lseek_r+0x24>
80008a62:	12 9a       	mov	r10,r9
80008a64:	8d 08       	st.w	r6[0x0],r8
80008a66:	cc 1e       	rcall	800087e8 <_lseek>
80008a68:	5b fc       	cp.w	r12,-1
80008a6a:	c0 51       	brne	80008a74 <_lseek_r+0x20>
80008a6c:	6c 08       	ld.w	r8,r6[0x0]
80008a6e:	58 08       	cp.w	r8,0
80008a70:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008a74:	d8 22       	popm	r4-r7,pc
80008a76:	d7 03       	nop
80008a78:	00 00       	add	r0,r0
80008a7a:	0c c4       	st.b	r6++,r4

80008a7c <_read_r>:
80008a7c:	d4 21       	pushm	r4-r7,lr
80008a7e:	16 98       	mov	r8,r11
80008a80:	18 97       	mov	r7,r12
80008a82:	10 9c       	mov	r12,r8
80008a84:	30 08       	mov	r8,0
80008a86:	14 9b       	mov	r11,r10
80008a88:	48 66       	lddpc	r6,80008aa0 <_read_r+0x24>
80008a8a:	12 9a       	mov	r10,r9
80008a8c:	8d 08       	st.w	r6[0x0],r8
80008a8e:	fe b0 d7 b3 	rcall	800039f4 <_read>
80008a92:	5b fc       	cp.w	r12,-1
80008a94:	c0 51       	brne	80008a9e <_read_r+0x22>
80008a96:	6c 08       	ld.w	r8,r6[0x0]
80008a98:	58 08       	cp.w	r8,0
80008a9a:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008a9e:	d8 22       	popm	r4-r7,pc
80008aa0:	00 00       	add	r0,r0
80008aa2:	0c c4       	st.b	r6++,r4

80008aa4 <__avr32_f64_mul>:
80008aa4:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
80008aa8:	e0 80 00 dc 	breq	80008c60 <__avr32_f64_mul_op1_zero>
80008aac:	d4 21       	pushm	r4-r7,lr
80008aae:	f7 e9 20 0e 	eor	lr,r11,r9
80008ab2:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80008ab6:	30 15       	mov	r5,1
80008ab8:	c4 30       	breq	80008b3e <__avr32_f64_mul_op1_subnormal>
80008aba:	ab 6b       	lsl	r11,0xa
80008abc:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80008ac0:	ab 6a       	lsl	r10,0xa
80008ac2:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
80008ac6:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80008aca:	c5 c0       	breq	80008b82 <__avr32_f64_mul_op2_subnormal>
80008acc:	a1 78       	lsl	r8,0x1
80008ace:	5c f9       	rol	r9
80008ad0:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80008ad4:	e0 47 07 ff 	cp.w	r7,2047
80008ad8:	c7 70       	breq	80008bc6 <__avr32_f64_mul_op_nan_or_inf>
80008ada:	e0 46 07 ff 	cp.w	r6,2047
80008ade:	c7 40       	breq	80008bc6 <__avr32_f64_mul_op_nan_or_inf>
80008ae0:	ee 06 00 0c 	add	r12,r7,r6
80008ae4:	e0 2c 03 fe 	sub	r12,1022
80008ae8:	f6 08 06 44 	mulu.d	r4,r11,r8
80008aec:	f4 09 07 44 	macu.d	r4,r10,r9
80008af0:	f4 08 06 46 	mulu.d	r6,r10,r8
80008af4:	f6 09 06 4a 	mulu.d	r10,r11,r9
80008af8:	08 07       	add	r7,r4
80008afa:	f4 05 00 4a 	adc	r10,r10,r5
80008afe:	5c 0b       	acr	r11
80008b00:	ed bb 00 14 	bld	r11,0x14
80008b04:	c0 50       	breq	80008b0e <__avr32_f64_mul+0x6a>
80008b06:	a1 77       	lsl	r7,0x1
80008b08:	5c fa       	rol	r10
80008b0a:	5c fb       	rol	r11
80008b0c:	20 1c       	sub	r12,1
80008b0e:	58 0c       	cp.w	r12,0
80008b10:	e0 8a 00 6f 	brle	80008bee <__avr32_f64_mul_res_subnormal>
80008b14:	e0 4c 07 ff 	cp.w	r12,2047
80008b18:	e0 84 00 9c 	brge	80008c50 <__avr32_f64_mul_res_inf>
80008b1c:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80008b20:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
80008b24:	ef e6 12 17 	or	r7,r7,r6>>0x1
80008b28:	ee 17 80 00 	eorh	r7,0x8000
80008b2c:	f1 b7 04 20 	satu	r7,0x1
80008b30:	0e 0a       	add	r10,r7
80008b32:	5c 0b       	acr	r11
80008b34:	ed be 00 1f 	bld	lr,0x1f
80008b38:	ef bb 00 1f 	bst	r11,0x1f
80008b3c:	d8 22       	popm	r4-r7,pc

80008b3e <__avr32_f64_mul_op1_subnormal>:
80008b3e:	e4 1b 00 0f 	andh	r11,0xf
80008b42:	f4 0c 12 00 	clz	r12,r10
80008b46:	f6 06 12 00 	clz	r6,r11
80008b4a:	f7 bc 03 e1 	sublo	r12,-31
80008b4e:	f8 06 17 30 	movlo	r6,r12
80008b52:	f7 b6 02 01 	subhs	r6,1
80008b56:	e0 46 00 20 	cp.w	r6,32
80008b5a:	c0 d4       	brge	80008b74 <__avr32_f64_mul_op1_subnormal+0x36>
80008b5c:	ec 0c 11 20 	rsub	r12,r6,32
80008b60:	f6 06 09 4b 	lsl	r11,r11,r6
80008b64:	f4 0c 0a 4c 	lsr	r12,r10,r12
80008b68:	18 4b       	or	r11,r12
80008b6a:	f4 06 09 4a 	lsl	r10,r10,r6
80008b6e:	20 b6       	sub	r6,11
80008b70:	0c 17       	sub	r7,r6
80008b72:	ca ab       	rjmp	80008ac6 <__avr32_f64_mul+0x22>
80008b74:	f4 06 09 4b 	lsl	r11,r10,r6
80008b78:	c6 40       	breq	80008c40 <__avr32_f64_mul_res_zero>
80008b7a:	30 0a       	mov	r10,0
80008b7c:	20 b6       	sub	r6,11
80008b7e:	0c 17       	sub	r7,r6
80008b80:	ca 3b       	rjmp	80008ac6 <__avr32_f64_mul+0x22>

80008b82 <__avr32_f64_mul_op2_subnormal>:
80008b82:	e4 19 00 0f 	andh	r9,0xf
80008b86:	f0 0c 12 00 	clz	r12,r8
80008b8a:	f2 05 12 00 	clz	r5,r9
80008b8e:	f7 bc 03 ea 	sublo	r12,-22
80008b92:	f8 05 17 30 	movlo	r5,r12
80008b96:	f7 b5 02 0a 	subhs	r5,10
80008b9a:	e0 45 00 20 	cp.w	r5,32
80008b9e:	c0 d4       	brge	80008bb8 <__avr32_f64_mul_op2_subnormal+0x36>
80008ba0:	ea 0c 11 20 	rsub	r12,r5,32
80008ba4:	f2 05 09 49 	lsl	r9,r9,r5
80008ba8:	f0 0c 0a 4c 	lsr	r12,r8,r12
80008bac:	18 49       	or	r9,r12
80008bae:	f0 05 09 48 	lsl	r8,r8,r5
80008bb2:	20 25       	sub	r5,2
80008bb4:	0a 16       	sub	r6,r5
80008bb6:	c8 fb       	rjmp	80008ad4 <__avr32_f64_mul+0x30>
80008bb8:	f0 05 09 49 	lsl	r9,r8,r5
80008bbc:	c4 20       	breq	80008c40 <__avr32_f64_mul_res_zero>
80008bbe:	30 08       	mov	r8,0
80008bc0:	20 25       	sub	r5,2
80008bc2:	0a 16       	sub	r6,r5
80008bc4:	c8 8b       	rjmp	80008ad4 <__avr32_f64_mul+0x30>

80008bc6 <__avr32_f64_mul_op_nan_or_inf>:
80008bc6:	e4 19 00 0f 	andh	r9,0xf
80008bca:	e4 1b 00 0f 	andh	r11,0xf
80008bce:	14 4b       	or	r11,r10
80008bd0:	10 49       	or	r9,r8
80008bd2:	e0 47 07 ff 	cp.w	r7,2047
80008bd6:	c0 91       	brne	80008be8 <__avr32_f64_mul_op1_not_naninf>
80008bd8:	58 0b       	cp.w	r11,0
80008bda:	c3 81       	brne	80008c4a <__avr32_f64_mul_res_nan>
80008bdc:	e0 46 07 ff 	cp.w	r6,2047
80008be0:	c3 81       	brne	80008c50 <__avr32_f64_mul_res_inf>
80008be2:	58 09       	cp.w	r9,0
80008be4:	c3 60       	breq	80008c50 <__avr32_f64_mul_res_inf>
80008be6:	c3 28       	rjmp	80008c4a <__avr32_f64_mul_res_nan>

80008be8 <__avr32_f64_mul_op1_not_naninf>:
80008be8:	58 09       	cp.w	r9,0
80008bea:	c3 30       	breq	80008c50 <__avr32_f64_mul_res_inf>
80008bec:	c2 f8       	rjmp	80008c4a <__avr32_f64_mul_res_nan>

80008bee <__avr32_f64_mul_res_subnormal>:
80008bee:	5c 3c       	neg	r12
80008bf0:	2f fc       	sub	r12,-1
80008bf2:	f1 bc 04 c0 	satu	r12,0x6
80008bf6:	e0 4c 00 20 	cp.w	r12,32
80008bfa:	c1 14       	brge	80008c1c <__avr32_f64_mul_res_subnormal+0x2e>
80008bfc:	f8 08 11 20 	rsub	r8,r12,32
80008c00:	0e 46       	or	r6,r7
80008c02:	ee 0c 0a 47 	lsr	r7,r7,r12
80008c06:	f4 08 09 49 	lsl	r9,r10,r8
80008c0a:	12 47       	or	r7,r9
80008c0c:	f4 0c 0a 4a 	lsr	r10,r10,r12
80008c10:	f6 08 09 49 	lsl	r9,r11,r8
80008c14:	12 4a       	or	r10,r9
80008c16:	f6 0c 0a 4b 	lsr	r11,r11,r12
80008c1a:	c8 3b       	rjmp	80008b20 <__avr32_f64_mul+0x7c>
80008c1c:	f8 08 11 20 	rsub	r8,r12,32
80008c20:	f9 b9 00 00 	moveq	r9,0
80008c24:	c0 30       	breq	80008c2a <__avr32_f64_mul_res_subnormal+0x3c>
80008c26:	f6 08 09 49 	lsl	r9,r11,r8
80008c2a:	0e 46       	or	r6,r7
80008c2c:	ed ea 10 16 	or	r6,r6,r10<<0x1
80008c30:	f4 0c 0a 4a 	lsr	r10,r10,r12
80008c34:	f3 ea 10 07 	or	r7,r9,r10
80008c38:	f6 0c 0a 4a 	lsr	r10,r11,r12
80008c3c:	30 0b       	mov	r11,0
80008c3e:	c7 1b       	rjmp	80008b20 <__avr32_f64_mul+0x7c>

80008c40 <__avr32_f64_mul_res_zero>:
80008c40:	1c 9b       	mov	r11,lr
80008c42:	e6 1b 80 00 	andh	r11,0x8000,COH
80008c46:	30 0a       	mov	r10,0
80008c48:	d8 22       	popm	r4-r7,pc

80008c4a <__avr32_f64_mul_res_nan>:
80008c4a:	3f fb       	mov	r11,-1
80008c4c:	3f fa       	mov	r10,-1
80008c4e:	d8 22       	popm	r4-r7,pc

80008c50 <__avr32_f64_mul_res_inf>:
80008c50:	f0 6b 00 00 	mov	r11,-1048576
80008c54:	ed be 00 1f 	bld	lr,0x1f
80008c58:	ef bb 00 1f 	bst	r11,0x1f
80008c5c:	30 0a       	mov	r10,0
80008c5e:	d8 22       	popm	r4-r7,pc

80008c60 <__avr32_f64_mul_op1_zero>:
80008c60:	f7 e9 20 0b 	eor	r11,r11,r9
80008c64:	e6 1b 80 00 	andh	r11,0x8000,COH
80008c68:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
80008c6c:	e0 4c 07 ff 	cp.w	r12,2047
80008c70:	5e 1c       	retne	r12
80008c72:	3f fa       	mov	r10,-1
80008c74:	3f fb       	mov	r11,-1
80008c76:	5e fc       	retal	r12

80008c78 <__avr32_f64_sub_from_add>:
80008c78:	ee 19 80 00 	eorh	r9,0x8000

80008c7c <__avr32_f64_sub>:
80008c7c:	f7 e9 20 0c 	eor	r12,r11,r9
80008c80:	e0 86 00 ca 	brmi	80008e14 <__avr32_f64_add_from_sub>
80008c84:	eb cd 40 e0 	pushm	r5-r7,lr
80008c88:	16 9c       	mov	r12,r11
80008c8a:	e6 1c 80 00 	andh	r12,0x8000,COH
80008c8e:	bf db       	cbr	r11,0x1f
80008c90:	bf d9       	cbr	r9,0x1f
80008c92:	10 3a       	cp.w	r10,r8
80008c94:	f2 0b 13 00 	cpc	r11,r9
80008c98:	c0 92       	brcc	80008caa <__avr32_f64_sub+0x2e>
80008c9a:	16 97       	mov	r7,r11
80008c9c:	12 9b       	mov	r11,r9
80008c9e:	0e 99       	mov	r9,r7
80008ca0:	14 97       	mov	r7,r10
80008ca2:	10 9a       	mov	r10,r8
80008ca4:	0e 98       	mov	r8,r7
80008ca6:	ee 1c 80 00 	eorh	r12,0x8000
80008caa:	f6 07 16 14 	lsr	r7,r11,0x14
80008cae:	ab 7b       	lsl	r11,0xb
80008cb0:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80008cb4:	ab 7a       	lsl	r10,0xb
80008cb6:	bf bb       	sbr	r11,0x1f
80008cb8:	f2 06 16 14 	lsr	r6,r9,0x14
80008cbc:	c4 40       	breq	80008d44 <__avr32_f64_sub_opL_subnormal>
80008cbe:	ab 79       	lsl	r9,0xb
80008cc0:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80008cc4:	ab 78       	lsl	r8,0xb
80008cc6:	bf b9       	sbr	r9,0x1f

80008cc8 <__avr32_f64_sub_opL_subnormal_done>:
80008cc8:	e0 47 07 ff 	cp.w	r7,2047
80008ccc:	c4 f0       	breq	80008d6a <__avr32_f64_sub_opH_nan_or_inf>
80008cce:	0e 26       	rsub	r6,r7
80008cd0:	c1 20       	breq	80008cf4 <__avr32_f64_sub_shift_done>
80008cd2:	ec 05 11 20 	rsub	r5,r6,32
80008cd6:	e0 46 00 20 	cp.w	r6,32
80008cda:	c7 c2       	brcc	80008dd2 <__avr32_f64_sub_longshift>
80008cdc:	f0 05 09 4e 	lsl	lr,r8,r5
80008ce0:	f2 05 09 45 	lsl	r5,r9,r5
80008ce4:	f0 06 0a 48 	lsr	r8,r8,r6
80008ce8:	f2 06 0a 49 	lsr	r9,r9,r6
80008cec:	0a 48       	or	r8,r5
80008cee:	58 0e       	cp.w	lr,0
80008cf0:	5f 1e       	srne	lr
80008cf2:	1c 48       	or	r8,lr

80008cf4 <__avr32_f64_sub_shift_done>:
80008cf4:	10 1a       	sub	r10,r8
80008cf6:	f6 09 01 4b 	sbc	r11,r11,r9
80008cfa:	f6 06 12 00 	clz	r6,r11
80008cfe:	c0 e0       	breq	80008d1a <__avr32_f64_sub_longnormalize_done>
80008d00:	c7 83       	brcs	80008df0 <__avr32_f64_sub_longnormalize>
80008d02:	ec 0e 11 20 	rsub	lr,r6,32
80008d06:	f6 06 09 4b 	lsl	r11,r11,r6
80008d0a:	f4 0e 0a 4e 	lsr	lr,r10,lr
80008d0e:	1c 4b       	or	r11,lr
80008d10:	f4 06 09 4a 	lsl	r10,r10,r6
80008d14:	0c 17       	sub	r7,r6
80008d16:	e0 8a 00 39 	brle	80008d88 <__avr32_f64_sub_subnormal_result>

80008d1a <__avr32_f64_sub_longnormalize_done>:
80008d1a:	f4 09 15 15 	lsl	r9,r10,0x15
80008d1e:	ab 9a       	lsr	r10,0xb
80008d20:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80008d24:	ab 9b       	lsr	r11,0xb
80008d26:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80008d2a:	18 4b       	or	r11,r12

80008d2c <__avr32_f64_sub_round>:
80008d2c:	fc 17 80 00 	movh	r7,0x8000
80008d30:	ed ba 00 00 	bld	r10,0x0
80008d34:	f7 b7 01 ff 	subne	r7,-1
80008d38:	0e 39       	cp.w	r9,r7
80008d3a:	5f 29       	srhs	r9
80008d3c:	12 0a       	add	r10,r9
80008d3e:	5c 0b       	acr	r11
80008d40:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008d44 <__avr32_f64_sub_opL_subnormal>:
80008d44:	ab 79       	lsl	r9,0xb
80008d46:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80008d4a:	ab 78       	lsl	r8,0xb
80008d4c:	f3 e8 10 0e 	or	lr,r9,r8
80008d50:	f9 b6 01 01 	movne	r6,1
80008d54:	ee 0e 11 00 	rsub	lr,r7,0
80008d58:	f9 b7 00 01 	moveq	r7,1
80008d5c:	ef bb 00 1f 	bst	r11,0x1f
80008d60:	f7 ea 10 0e 	or	lr,r11,r10
80008d64:	f9 b7 00 00 	moveq	r7,0
80008d68:	cb 0b       	rjmp	80008cc8 <__avr32_f64_sub_opL_subnormal_done>

80008d6a <__avr32_f64_sub_opH_nan_or_inf>:
80008d6a:	bf db       	cbr	r11,0x1f
80008d6c:	f7 ea 10 0e 	or	lr,r11,r10
80008d70:	c0 81       	brne	80008d80 <__avr32_f64_sub_return_nan>
80008d72:	e0 46 07 ff 	cp.w	r6,2047
80008d76:	c0 50       	breq	80008d80 <__avr32_f64_sub_return_nan>
80008d78:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
80008d7c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008d80 <__avr32_f64_sub_return_nan>:
80008d80:	3f fa       	mov	r10,-1
80008d82:	3f fb       	mov	r11,-1
80008d84:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008d88 <__avr32_f64_sub_subnormal_result>:
80008d88:	5c 37       	neg	r7
80008d8a:	2f f7       	sub	r7,-1
80008d8c:	f1 b7 04 c0 	satu	r7,0x6
80008d90:	e0 47 00 20 	cp.w	r7,32
80008d94:	c1 14       	brge	80008db6 <__avr32_f64_sub_subnormal_result+0x2e>
80008d96:	ee 08 11 20 	rsub	r8,r7,32
80008d9a:	f4 08 09 49 	lsl	r9,r10,r8
80008d9e:	5f 16       	srne	r6
80008da0:	f4 07 0a 4a 	lsr	r10,r10,r7
80008da4:	0c 4a       	or	r10,r6
80008da6:	f6 08 09 49 	lsl	r9,r11,r8
80008daa:	f5 e9 10 0a 	or	r10,r10,r9
80008dae:	f4 07 0a 4b 	lsr	r11,r10,r7
80008db2:	30 07       	mov	r7,0
80008db4:	cb 3b       	rjmp	80008d1a <__avr32_f64_sub_longnormalize_done>
80008db6:	ee 08 11 40 	rsub	r8,r7,64
80008dba:	f6 08 09 49 	lsl	r9,r11,r8
80008dbe:	14 49       	or	r9,r10
80008dc0:	5f 16       	srne	r6
80008dc2:	f6 07 0a 4a 	lsr	r10,r11,r7
80008dc6:	0c 4a       	or	r10,r6
80008dc8:	30 0b       	mov	r11,0
80008dca:	30 07       	mov	r7,0
80008dcc:	ca 7b       	rjmp	80008d1a <__avr32_f64_sub_longnormalize_done>
80008dce:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008dd2 <__avr32_f64_sub_longshift>:
80008dd2:	f1 b6 04 c0 	satu	r6,0x6
80008dd6:	f0 0e 17 00 	moveq	lr,r8
80008dda:	c0 40       	breq	80008de2 <__avr32_f64_sub_longshift+0x10>
80008ddc:	f2 05 09 4e 	lsl	lr,r9,r5
80008de0:	10 4e       	or	lr,r8
80008de2:	f2 06 0a 48 	lsr	r8,r9,r6
80008de6:	30 09       	mov	r9,0
80008de8:	58 0e       	cp.w	lr,0
80008dea:	5f 1e       	srne	lr
80008dec:	1c 48       	or	r8,lr
80008dee:	c8 3b       	rjmp	80008cf4 <__avr32_f64_sub_shift_done>

80008df0 <__avr32_f64_sub_longnormalize>:
80008df0:	f4 06 12 00 	clz	r6,r10
80008df4:	f9 b7 03 00 	movlo	r7,0
80008df8:	f9 b6 03 00 	movlo	r6,0
80008dfc:	f9 bc 03 00 	movlo	r12,0
80008e00:	f7 b6 02 e0 	subhs	r6,-32
80008e04:	f4 06 09 4b 	lsl	r11,r10,r6
80008e08:	30 0a       	mov	r10,0
80008e0a:	0c 17       	sub	r7,r6
80008e0c:	fe 9a ff be 	brle	80008d88 <__avr32_f64_sub_subnormal_result>
80008e10:	c8 5b       	rjmp	80008d1a <__avr32_f64_sub_longnormalize_done>
80008e12:	d7 03       	nop

80008e14 <__avr32_f64_add_from_sub>:
80008e14:	ee 19 80 00 	eorh	r9,0x8000

80008e18 <__avr32_f64_add>:
80008e18:	f7 e9 20 0c 	eor	r12,r11,r9
80008e1c:	fe 96 ff 2e 	brmi	80008c78 <__avr32_f64_sub_from_add>
80008e20:	eb cd 40 e0 	pushm	r5-r7,lr
80008e24:	16 9c       	mov	r12,r11
80008e26:	e6 1c 80 00 	andh	r12,0x8000,COH
80008e2a:	bf db       	cbr	r11,0x1f
80008e2c:	bf d9       	cbr	r9,0x1f
80008e2e:	12 3b       	cp.w	r11,r9
80008e30:	c0 72       	brcc	80008e3e <__avr32_f64_add+0x26>
80008e32:	16 97       	mov	r7,r11
80008e34:	12 9b       	mov	r11,r9
80008e36:	0e 99       	mov	r9,r7
80008e38:	14 97       	mov	r7,r10
80008e3a:	10 9a       	mov	r10,r8
80008e3c:	0e 98       	mov	r8,r7
80008e3e:	30 0e       	mov	lr,0
80008e40:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80008e44:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
80008e48:	b5 ab       	sbr	r11,0x14
80008e4a:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80008e4e:	c6 20       	breq	80008f12 <__avr32_f64_add_op2_subnormal>
80008e50:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
80008e54:	b5 a9       	sbr	r9,0x14
80008e56:	e0 47 07 ff 	cp.w	r7,2047
80008e5a:	c2 80       	breq	80008eaa <__avr32_f64_add_opH_nan_or_inf>
80008e5c:	0e 26       	rsub	r6,r7
80008e5e:	c1 20       	breq	80008e82 <__avr32_f64_add_shift_done>
80008e60:	e0 46 00 36 	cp.w	r6,54
80008e64:	c1 52       	brcc	80008e8e <__avr32_f64_add_res_of_done>
80008e66:	ec 05 11 20 	rsub	r5,r6,32
80008e6a:	e0 46 00 20 	cp.w	r6,32
80008e6e:	c3 52       	brcc	80008ed8 <__avr32_f64_add_longshift>
80008e70:	f0 05 09 4e 	lsl	lr,r8,r5
80008e74:	f2 05 09 45 	lsl	r5,r9,r5
80008e78:	f0 06 0a 48 	lsr	r8,r8,r6
80008e7c:	f2 06 0a 49 	lsr	r9,r9,r6
80008e80:	0a 48       	or	r8,r5

80008e82 <__avr32_f64_add_shift_done>:
80008e82:	10 0a       	add	r10,r8
80008e84:	f6 09 00 4b 	adc	r11,r11,r9
80008e88:	ed bb 00 15 	bld	r11,0x15
80008e8c:	c3 40       	breq	80008ef4 <__avr32_f64_add_res_of>

80008e8e <__avr32_f64_add_res_of_done>:
80008e8e:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80008e92:	18 4b       	or	r11,r12

80008e94 <__avr32_f64_add_round>:
80008e94:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
80008e98:	18 4e       	or	lr,r12
80008e9a:	ee 1e 80 00 	eorh	lr,0x8000
80008e9e:	f1 be 04 20 	satu	lr,0x1
80008ea2:	1c 0a       	add	r10,lr
80008ea4:	5c 0b       	acr	r11
80008ea6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008eaa <__avr32_f64_add_opH_nan_or_inf>:
80008eaa:	b5 cb       	cbr	r11,0x14
80008eac:	f7 ea 10 0e 	or	lr,r11,r10
80008eb0:	c1 01       	brne	80008ed0 <__avr32_f64_add_return_nan>
80008eb2:	e0 46 07 ff 	cp.w	r6,2047
80008eb6:	c0 30       	breq	80008ebc <__avr32_f64_add_opL_nan_or_inf>
80008eb8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008ebc <__avr32_f64_add_opL_nan_or_inf>:
80008ebc:	b5 c9       	cbr	r9,0x14
80008ebe:	f3 e8 10 0e 	or	lr,r9,r8
80008ec2:	c0 71       	brne	80008ed0 <__avr32_f64_add_return_nan>
80008ec4:	30 0a       	mov	r10,0
80008ec6:	fc 1b 7f f0 	movh	r11,0x7ff0
80008eca:	18 4b       	or	r11,r12
80008ecc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008ed0 <__avr32_f64_add_return_nan>:
80008ed0:	3f fa       	mov	r10,-1
80008ed2:	3f fb       	mov	r11,-1
80008ed4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008ed8 <__avr32_f64_add_longshift>:
80008ed8:	f1 b6 04 c0 	satu	r6,0x6
80008edc:	f0 0e 17 00 	moveq	lr,r8
80008ee0:	c0 60       	breq	80008eec <__avr32_f64_add_longshift+0x14>
80008ee2:	f2 05 09 4e 	lsl	lr,r9,r5
80008ee6:	58 08       	cp.w	r8,0
80008ee8:	5f 18       	srne	r8
80008eea:	10 4e       	or	lr,r8
80008eec:	f2 06 0a 48 	lsr	r8,r9,r6
80008ef0:	30 09       	mov	r9,0
80008ef2:	cc 8b       	rjmp	80008e82 <__avr32_f64_add_shift_done>

80008ef4 <__avr32_f64_add_res_of>:
80008ef4:	fd ee 10 1e 	or	lr,lr,lr<<0x1
80008ef8:	a1 9b       	lsr	r11,0x1
80008efa:	5d 0a       	ror	r10
80008efc:	5d 0e       	ror	lr
80008efe:	2f f7       	sub	r7,-1
80008f00:	e0 47 07 ff 	cp.w	r7,2047
80008f04:	f9 ba 00 00 	moveq	r10,0
80008f08:	f9 bb 00 00 	moveq	r11,0
80008f0c:	f9 be 00 00 	moveq	lr,0
80008f10:	cb fb       	rjmp	80008e8e <__avr32_f64_add_res_of_done>

80008f12 <__avr32_f64_add_op2_subnormal>:
80008f12:	30 16       	mov	r6,1
80008f14:	58 07       	cp.w	r7,0
80008f16:	ca 01       	brne	80008e56 <__avr32_f64_add+0x3e>
80008f18:	b5 cb       	cbr	r11,0x14
80008f1a:	10 0a       	add	r10,r8
80008f1c:	f6 09 00 4b 	adc	r11,r11,r9
80008f20:	18 4b       	or	r11,r12
80008f22:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80008f26:	d7 03       	nop

80008f28 <__avr32_f64_to_u32>:
80008f28:	58 0b       	cp.w	r11,0
80008f2a:	5e 6d       	retmi	0

80008f2c <__avr32_f64_to_s32>:
80008f2c:	f6 0c 15 01 	lsl	r12,r11,0x1
80008f30:	b5 9c       	lsr	r12,0x15
80008f32:	e0 2c 03 ff 	sub	r12,1023
80008f36:	5e 3d       	retlo	0
80008f38:	f8 0c 11 1f 	rsub	r12,r12,31
80008f3c:	16 99       	mov	r9,r11
80008f3e:	ab 7b       	lsl	r11,0xb
80008f40:	bf bb       	sbr	r11,0x1f
80008f42:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80008f46:	f6 0c 0a 4b 	lsr	r11,r11,r12
80008f4a:	a1 79       	lsl	r9,0x1
80008f4c:	5e 2b       	reths	r11
80008f4e:	5c 3b       	neg	r11
80008f50:	5e fb       	retal	r11

80008f52 <__avr32_u32_to_f64>:
80008f52:	f8 cb 00 00 	sub	r11,r12,0
80008f56:	30 0c       	mov	r12,0
80008f58:	c0 38       	rjmp	80008f5e <__avr32_s32_to_f64+0x4>

80008f5a <__avr32_s32_to_f64>:
80008f5a:	18 9b       	mov	r11,r12
80008f5c:	5c 4b       	abs	r11
80008f5e:	30 0a       	mov	r10,0
80008f60:	5e 0b       	reteq	r11
80008f62:	d4 01       	pushm	lr
80008f64:	e0 69 04 1e 	mov	r9,1054
80008f68:	f6 08 12 00 	clz	r8,r11
80008f6c:	c1 70       	breq	80008f9a <__avr32_s32_to_f64+0x40>
80008f6e:	c0 c3       	brcs	80008f86 <__avr32_s32_to_f64+0x2c>
80008f70:	f0 0e 11 20 	rsub	lr,r8,32
80008f74:	f6 08 09 4b 	lsl	r11,r11,r8
80008f78:	f4 0e 0a 4e 	lsr	lr,r10,lr
80008f7c:	1c 4b       	or	r11,lr
80008f7e:	f4 08 09 4a 	lsl	r10,r10,r8
80008f82:	10 19       	sub	r9,r8
80008f84:	c0 b8       	rjmp	80008f9a <__avr32_s32_to_f64+0x40>
80008f86:	f4 08 12 00 	clz	r8,r10
80008f8a:	f9 b8 03 00 	movlo	r8,0
80008f8e:	f7 b8 02 e0 	subhs	r8,-32
80008f92:	f4 08 09 4b 	lsl	r11,r10,r8
80008f96:	30 0a       	mov	r10,0
80008f98:	10 19       	sub	r9,r8
80008f9a:	58 09       	cp.w	r9,0
80008f9c:	e0 89 00 30 	brgt	80008ffc <__avr32_s32_to_f64+0xa2>
80008fa0:	5c 39       	neg	r9
80008fa2:	2f f9       	sub	r9,-1
80008fa4:	e0 49 00 36 	cp.w	r9,54
80008fa8:	c0 43       	brcs	80008fb0 <__avr32_s32_to_f64+0x56>
80008faa:	30 0b       	mov	r11,0
80008fac:	30 0a       	mov	r10,0
80008fae:	c2 68       	rjmp	80008ffa <__avr32_s32_to_f64+0xa0>
80008fb0:	2f 69       	sub	r9,-10
80008fb2:	f2 08 11 20 	rsub	r8,r9,32
80008fb6:	e0 49 00 20 	cp.w	r9,32
80008fba:	c0 b2       	brcc	80008fd0 <__avr32_s32_to_f64+0x76>
80008fbc:	f4 08 09 4e 	lsl	lr,r10,r8
80008fc0:	f6 08 09 48 	lsl	r8,r11,r8
80008fc4:	f4 09 0a 4a 	lsr	r10,r10,r9
80008fc8:	f6 09 0a 4b 	lsr	r11,r11,r9
80008fcc:	10 4b       	or	r11,r8
80008fce:	c0 88       	rjmp	80008fde <__avr32_s32_to_f64+0x84>
80008fd0:	f6 08 09 4e 	lsl	lr,r11,r8
80008fd4:	14 4e       	or	lr,r10
80008fd6:	16 9a       	mov	r10,r11
80008fd8:	30 0b       	mov	r11,0
80008fda:	f4 09 0a 4a 	lsr	r10,r10,r9
80008fde:	ed ba 00 00 	bld	r10,0x0
80008fe2:	c0 92       	brcc	80008ff4 <__avr32_s32_to_f64+0x9a>
80008fe4:	1c 7e       	tst	lr,lr
80008fe6:	c0 41       	brne	80008fee <__avr32_s32_to_f64+0x94>
80008fe8:	ed ba 00 01 	bld	r10,0x1
80008fec:	c0 42       	brcc	80008ff4 <__avr32_s32_to_f64+0x9a>
80008fee:	2f fa       	sub	r10,-1
80008ff0:	f7 bb 02 ff 	subhs	r11,-1
80008ff4:	5c fc       	rol	r12
80008ff6:	5d 0b       	ror	r11
80008ff8:	5d 0a       	ror	r10
80008ffa:	d8 02       	popm	pc
80008ffc:	e0 68 03 ff 	mov	r8,1023
80009000:	ed ba 00 0b 	bld	r10,0xb
80009004:	f7 b8 00 ff 	subeq	r8,-1
80009008:	10 0a       	add	r10,r8
8000900a:	5c 0b       	acr	r11
8000900c:	f7 b9 03 fe 	sublo	r9,-2
80009010:	e0 49 07 ff 	cp.w	r9,2047
80009014:	c0 55       	brlt	8000901e <__avr32_s32_to_f64+0xc4>
80009016:	30 0a       	mov	r10,0
80009018:	fc 1b ff e0 	movh	r11,0xffe0
8000901c:	c0 c8       	rjmp	80009034 <__floatsidf_return_op1>
8000901e:	ed bb 00 1f 	bld	r11,0x1f
80009022:	f7 b9 01 01 	subne	r9,1
80009026:	ab 9a       	lsr	r10,0xb
80009028:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000902c:	a1 7b       	lsl	r11,0x1
8000902e:	ab 9b       	lsr	r11,0xb
80009030:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80009034 <__floatsidf_return_op1>:
80009034:	a1 7c       	lsl	r12,0x1
80009036:	5d 0b       	ror	r11
80009038:	d8 02       	popm	pc

8000903a <__avr32_f64_cmp_eq>:
8000903a:	10 3a       	cp.w	r10,r8
8000903c:	f2 0b 13 00 	cpc	r11,r9
80009040:	c0 80       	breq	80009050 <__avr32_f64_cmp_eq+0x16>
80009042:	a1 7b       	lsl	r11,0x1
80009044:	a1 79       	lsl	r9,0x1
80009046:	14 4b       	or	r11,r10
80009048:	12 4b       	or	r11,r9
8000904a:	10 4b       	or	r11,r8
8000904c:	5e 0f       	reteq	1
8000904e:	5e fd       	retal	0
80009050:	a1 7b       	lsl	r11,0x1
80009052:	fc 1c ff e0 	movh	r12,0xffe0
80009056:	58 0a       	cp.w	r10,0
80009058:	f8 0b 13 00 	cpc	r11,r12
8000905c:	5e 8f       	retls	1
8000905e:	5e fd       	retal	0

80009060 <__avr32_f64_cmp_ge>:
80009060:	1a de       	st.w	--sp,lr
80009062:	1a d7       	st.w	--sp,r7
80009064:	a1 7b       	lsl	r11,0x1
80009066:	5f 3c       	srlo	r12
80009068:	a1 79       	lsl	r9,0x1
8000906a:	5f 37       	srlo	r7
8000906c:	5c fc       	rol	r12
8000906e:	fc 1e ff e0 	movh	lr,0xffe0
80009072:	58 0a       	cp.w	r10,0
80009074:	fc 0b 13 00 	cpc	r11,lr
80009078:	e0 8b 00 1d 	brhi	800090b2 <__avr32_f64_cmp_ge+0x52>
8000907c:	58 08       	cp.w	r8,0
8000907e:	fc 09 13 00 	cpc	r9,lr
80009082:	e0 8b 00 18 	brhi	800090b2 <__avr32_f64_cmp_ge+0x52>
80009086:	58 0b       	cp.w	r11,0
80009088:	f5 ba 00 00 	subfeq	r10,0
8000908c:	c1 50       	breq	800090b6 <__avr32_f64_cmp_ge+0x56>
8000908e:	1b 07       	ld.w	r7,sp++
80009090:	1b 0e       	ld.w	lr,sp++
80009092:	58 3c       	cp.w	r12,3
80009094:	c0 a0       	breq	800090a8 <__avr32_f64_cmp_ge+0x48>
80009096:	58 1c       	cp.w	r12,1
80009098:	c0 33       	brcs	8000909e <__avr32_f64_cmp_ge+0x3e>
8000909a:	5e 0f       	reteq	1
8000909c:	5e 1d       	retne	0
8000909e:	10 3a       	cp.w	r10,r8
800090a0:	f2 0b 13 00 	cpc	r11,r9
800090a4:	5e 2f       	reths	1
800090a6:	5e 3d       	retlo	0
800090a8:	14 38       	cp.w	r8,r10
800090aa:	f6 09 13 00 	cpc	r9,r11
800090ae:	5e 2f       	reths	1
800090b0:	5e 3d       	retlo	0
800090b2:	1b 07       	ld.w	r7,sp++
800090b4:	d8 0a       	popm	pc,r12=0
800090b6:	58 17       	cp.w	r7,1
800090b8:	5f 0c       	sreq	r12
800090ba:	58 09       	cp.w	r9,0
800090bc:	f5 b8 00 00 	subfeq	r8,0
800090c0:	1b 07       	ld.w	r7,sp++
800090c2:	1b 0e       	ld.w	lr,sp++
800090c4:	5e 0f       	reteq	1
800090c6:	5e fc       	retal	r12

800090c8 <__avr32_f64_cmp_lt>:
800090c8:	1a de       	st.w	--sp,lr
800090ca:	1a d7       	st.w	--sp,r7
800090cc:	a1 7b       	lsl	r11,0x1
800090ce:	5f 3c       	srlo	r12
800090d0:	a1 79       	lsl	r9,0x1
800090d2:	5f 37       	srlo	r7
800090d4:	5c fc       	rol	r12
800090d6:	fc 1e ff e0 	movh	lr,0xffe0
800090da:	58 0a       	cp.w	r10,0
800090dc:	fc 0b 13 00 	cpc	r11,lr
800090e0:	e0 8b 00 1d 	brhi	8000911a <__avr32_f64_cmp_lt+0x52>
800090e4:	58 08       	cp.w	r8,0
800090e6:	fc 09 13 00 	cpc	r9,lr
800090ea:	e0 8b 00 18 	brhi	8000911a <__avr32_f64_cmp_lt+0x52>
800090ee:	58 0b       	cp.w	r11,0
800090f0:	f5 ba 00 00 	subfeq	r10,0
800090f4:	c1 50       	breq	8000911e <__avr32_f64_cmp_lt+0x56>
800090f6:	1b 07       	ld.w	r7,sp++
800090f8:	1b 0e       	ld.w	lr,sp++
800090fa:	58 3c       	cp.w	r12,3
800090fc:	c0 a0       	breq	80009110 <__avr32_f64_cmp_lt+0x48>
800090fe:	58 1c       	cp.w	r12,1
80009100:	c0 33       	brcs	80009106 <__avr32_f64_cmp_lt+0x3e>
80009102:	5e 0d       	reteq	0
80009104:	5e 1f       	retne	1
80009106:	10 3a       	cp.w	r10,r8
80009108:	f2 0b 13 00 	cpc	r11,r9
8000910c:	5e 2d       	reths	0
8000910e:	5e 3f       	retlo	1
80009110:	14 38       	cp.w	r8,r10
80009112:	f6 09 13 00 	cpc	r9,r11
80009116:	5e 2d       	reths	0
80009118:	5e 3f       	retlo	1
8000911a:	1b 07       	ld.w	r7,sp++
8000911c:	d8 0a       	popm	pc,r12=0
8000911e:	58 17       	cp.w	r7,1
80009120:	5f 1c       	srne	r12
80009122:	58 09       	cp.w	r9,0
80009124:	f5 b8 00 00 	subfeq	r8,0
80009128:	1b 07       	ld.w	r7,sp++
8000912a:	1b 0e       	ld.w	lr,sp++
8000912c:	5e 0d       	reteq	0
8000912e:	5e fc       	retal	r12

80009130 <__avr32_f64_div>:
80009130:	eb cd 40 ff 	pushm	r0-r7,lr
80009134:	f7 e9 20 0e 	eor	lr,r11,r9
80009138:	f6 07 16 14 	lsr	r7,r11,0x14
8000913c:	a9 7b       	lsl	r11,0x9
8000913e:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
80009142:	a9 7a       	lsl	r10,0x9
80009144:	bd bb       	sbr	r11,0x1d
80009146:	e4 1b 3f ff 	andh	r11,0x3fff
8000914a:	ab d7       	cbr	r7,0xb
8000914c:	e0 80 00 cc 	breq	800092e4 <__avr32_f64_div_round_subnormal+0x54>
80009150:	e0 47 07 ff 	cp.w	r7,2047
80009154:	e0 84 00 b5 	brge	800092be <__avr32_f64_div_round_subnormal+0x2e>
80009158:	f2 06 16 14 	lsr	r6,r9,0x14
8000915c:	a9 79       	lsl	r9,0x9
8000915e:	f3 e8 13 79 	or	r9,r9,r8>>0x17
80009162:	a9 78       	lsl	r8,0x9
80009164:	bd b9       	sbr	r9,0x1d
80009166:	e4 19 3f ff 	andh	r9,0x3fff
8000916a:	ab d6       	cbr	r6,0xb
8000916c:	e0 80 00 e2 	breq	80009330 <__avr32_f64_div_round_subnormal+0xa0>
80009170:	e0 46 07 ff 	cp.w	r6,2047
80009174:	e0 84 00 b2 	brge	800092d8 <__avr32_f64_div_round_subnormal+0x48>
80009178:	0c 17       	sub	r7,r6
8000917a:	fe 37 fc 01 	sub	r7,-1023
8000917e:	fc 1c 80 00 	movh	r12,0x8000
80009182:	f8 03 16 01 	lsr	r3,r12,0x1
80009186:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
8000918a:	5c d4       	com	r4
8000918c:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
80009190:	e6 09 06 44 	mulu.d	r4,r3,r9
80009194:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80009198:	e6 05 06 44 	mulu.d	r4,r3,r5
8000919c:	ea 03 15 02 	lsl	r3,r5,0x2
800091a0:	e6 09 06 44 	mulu.d	r4,r3,r9
800091a4:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800091a8:	e6 05 06 44 	mulu.d	r4,r3,r5
800091ac:	ea 03 15 02 	lsl	r3,r5,0x2
800091b0:	e6 09 06 44 	mulu.d	r4,r3,r9
800091b4:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800091b8:	e6 05 06 44 	mulu.d	r4,r3,r5
800091bc:	ea 03 15 02 	lsl	r3,r5,0x2
800091c0:	e6 08 06 40 	mulu.d	r0,r3,r8
800091c4:	e4 09 07 40 	macu.d	r0,r2,r9
800091c8:	e6 09 06 44 	mulu.d	r4,r3,r9
800091cc:	02 04       	add	r4,r1
800091ce:	5c 05       	acr	r5
800091d0:	a3 65       	lsl	r5,0x2
800091d2:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
800091d6:	a3 64       	lsl	r4,0x2
800091d8:	5c 34       	neg	r4
800091da:	f8 05 01 45 	sbc	r5,r12,r5
800091de:	e6 04 06 40 	mulu.d	r0,r3,r4
800091e2:	e4 05 07 40 	macu.d	r0,r2,r5
800091e6:	e6 05 06 44 	mulu.d	r4,r3,r5
800091ea:	02 04       	add	r4,r1
800091ec:	5c 05       	acr	r5
800091ee:	ea 03 15 02 	lsl	r3,r5,0x2
800091f2:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
800091f6:	e8 02 15 02 	lsl	r2,r4,0x2
800091fa:	e6 08 06 40 	mulu.d	r0,r3,r8
800091fe:	e4 09 07 40 	macu.d	r0,r2,r9
80009202:	e6 09 06 44 	mulu.d	r4,r3,r9
80009206:	02 04       	add	r4,r1
80009208:	5c 05       	acr	r5
8000920a:	a3 65       	lsl	r5,0x2
8000920c:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80009210:	a3 64       	lsl	r4,0x2
80009212:	5c 34       	neg	r4
80009214:	f8 05 01 45 	sbc	r5,r12,r5
80009218:	e6 04 06 40 	mulu.d	r0,r3,r4
8000921c:	e4 05 07 40 	macu.d	r0,r2,r5
80009220:	e6 05 06 44 	mulu.d	r4,r3,r5
80009224:	02 04       	add	r4,r1
80009226:	5c 05       	acr	r5
80009228:	ea 03 15 02 	lsl	r3,r5,0x2
8000922c:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80009230:	e8 02 15 02 	lsl	r2,r4,0x2
80009234:	e6 0a 06 40 	mulu.d	r0,r3,r10
80009238:	e4 0b 07 40 	macu.d	r0,r2,r11
8000923c:	e6 0b 06 42 	mulu.d	r2,r3,r11
80009240:	02 02       	add	r2,r1
80009242:	5c 03       	acr	r3
80009244:	ed b3 00 1c 	bld	r3,0x1c
80009248:	c0 90       	breq	8000925a <__avr32_f64_div+0x12a>
8000924a:	a1 72       	lsl	r2,0x1
8000924c:	5c f3       	rol	r3
8000924e:	20 17       	sub	r7,1
80009250:	a3 9a       	lsr	r10,0x3
80009252:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
80009256:	a3 9b       	lsr	r11,0x3
80009258:	c0 58       	rjmp	80009262 <__avr32_f64_div+0x132>
8000925a:	a5 8a       	lsr	r10,0x4
8000925c:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
80009260:	a5 8b       	lsr	r11,0x4
80009262:	58 07       	cp.w	r7,0
80009264:	e0 8a 00 8b 	brle	8000937a <__avr32_f64_div_res_subnormal>
80009268:	e0 12 ff 00 	andl	r2,0xff00
8000926c:	e8 12 00 80 	orl	r2,0x80
80009270:	e6 08 06 40 	mulu.d	r0,r3,r8
80009274:	e4 09 07 40 	macu.d	r0,r2,r9
80009278:	e4 08 06 44 	mulu.d	r4,r2,r8
8000927c:	e6 09 06 48 	mulu.d	r8,r3,r9
80009280:	00 05       	add	r5,r0
80009282:	f0 01 00 48 	adc	r8,r8,r1
80009286:	5c 09       	acr	r9
80009288:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000928c:	58 04       	cp.w	r4,0
8000928e:	5c 25       	cpc	r5

80009290 <__avr32_f64_div_round_subnormal>:
80009290:	f4 08 13 00 	cpc	r8,r10
80009294:	f6 09 13 00 	cpc	r9,r11
80009298:	5f 36       	srlo	r6
8000929a:	f8 06 17 00 	moveq	r6,r12
8000929e:	e4 0a 16 08 	lsr	r10,r2,0x8
800092a2:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
800092a6:	e6 0b 16 08 	lsr	r11,r3,0x8
800092aa:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800092ae:	ed be 00 1f 	bld	lr,0x1f
800092b2:	ef bb 00 1f 	bst	r11,0x1f
800092b6:	0c 0a       	add	r10,r6
800092b8:	5c 0b       	acr	r11
800092ba:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800092be:	e4 1b 00 0f 	andh	r11,0xf
800092c2:	14 4b       	or	r11,r10
800092c4:	e0 81 00 a7 	brne	80009412 <__avr32_f64_div_res_subnormal+0x98>
800092c8:	f2 06 16 14 	lsr	r6,r9,0x14
800092cc:	ab d6       	cbr	r6,0xb
800092ce:	e0 46 07 ff 	cp.w	r6,2047
800092d2:	e0 81 00 a4 	brne	8000941a <__avr32_f64_div_res_subnormal+0xa0>
800092d6:	c9 e8       	rjmp	80009412 <__avr32_f64_div_res_subnormal+0x98>
800092d8:	e4 19 00 0f 	andh	r9,0xf
800092dc:	10 49       	or	r9,r8
800092de:	e0 81 00 9a 	brne	80009412 <__avr32_f64_div_res_subnormal+0x98>
800092e2:	c9 28       	rjmp	80009406 <__avr32_f64_div_res_subnormal+0x8c>
800092e4:	a3 7b       	lsl	r11,0x3
800092e6:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
800092ea:	a3 7a       	lsl	r10,0x3
800092ec:	f5 eb 10 04 	or	r4,r10,r11
800092f0:	e0 80 00 a0 	breq	80009430 <__avr32_f64_div_op1_zero>
800092f4:	f6 04 12 00 	clz	r4,r11
800092f8:	c1 70       	breq	80009326 <__avr32_f64_div_round_subnormal+0x96>
800092fa:	c0 c3       	brcs	80009312 <__avr32_f64_div_round_subnormal+0x82>
800092fc:	e8 05 11 20 	rsub	r5,r4,32
80009300:	f6 04 09 4b 	lsl	r11,r11,r4
80009304:	f4 05 0a 45 	lsr	r5,r10,r5
80009308:	0a 4b       	or	r11,r5
8000930a:	f4 04 09 4a 	lsl	r10,r10,r4
8000930e:	08 17       	sub	r7,r4
80009310:	c0 b8       	rjmp	80009326 <__avr32_f64_div_round_subnormal+0x96>
80009312:	f4 04 12 00 	clz	r4,r10
80009316:	f9 b4 03 00 	movlo	r4,0
8000931a:	f7 b4 02 e0 	subhs	r4,-32
8000931e:	f4 04 09 4b 	lsl	r11,r10,r4
80009322:	30 0a       	mov	r10,0
80009324:	08 17       	sub	r7,r4
80009326:	a3 8a       	lsr	r10,0x2
80009328:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
8000932c:	a3 8b       	lsr	r11,0x2
8000932e:	c1 1b       	rjmp	80009150 <__avr32_f64_div+0x20>
80009330:	a3 79       	lsl	r9,0x3
80009332:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
80009336:	a3 78       	lsl	r8,0x3
80009338:	f3 e8 10 04 	or	r4,r9,r8
8000933c:	c6 f0       	breq	8000941a <__avr32_f64_div_res_subnormal+0xa0>
8000933e:	f2 04 12 00 	clz	r4,r9
80009342:	c1 70       	breq	80009370 <__avr32_f64_div_round_subnormal+0xe0>
80009344:	c0 c3       	brcs	8000935c <__avr32_f64_div_round_subnormal+0xcc>
80009346:	e8 05 11 20 	rsub	r5,r4,32
8000934a:	f2 04 09 49 	lsl	r9,r9,r4
8000934e:	f0 05 0a 45 	lsr	r5,r8,r5
80009352:	0a 49       	or	r9,r5
80009354:	f0 04 09 48 	lsl	r8,r8,r4
80009358:	08 16       	sub	r6,r4
8000935a:	c0 b8       	rjmp	80009370 <__avr32_f64_div_round_subnormal+0xe0>
8000935c:	f0 04 12 00 	clz	r4,r8
80009360:	f9 b4 03 00 	movlo	r4,0
80009364:	f7 b4 02 e0 	subhs	r4,-32
80009368:	f0 04 09 49 	lsl	r9,r8,r4
8000936c:	30 08       	mov	r8,0
8000936e:	08 16       	sub	r6,r4
80009370:	a3 88       	lsr	r8,0x2
80009372:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
80009376:	a3 89       	lsr	r9,0x2
80009378:	cf ca       	rjmp	80009170 <__avr32_f64_div+0x40>

8000937a <__avr32_f64_div_res_subnormal>:
8000937a:	5c 37       	neg	r7
8000937c:	2f f7       	sub	r7,-1
8000937e:	f1 b7 04 c0 	satu	r7,0x6
80009382:	e0 47 00 20 	cp.w	r7,32
80009386:	c1 54       	brge	800093b0 <__avr32_f64_div_res_subnormal+0x36>
80009388:	ee 06 11 20 	rsub	r6,r7,32
8000938c:	e4 07 0a 42 	lsr	r2,r2,r7
80009390:	e6 06 09 4c 	lsl	r12,r3,r6
80009394:	18 42       	or	r2,r12
80009396:	e6 07 0a 43 	lsr	r3,r3,r7
8000939a:	f4 06 09 41 	lsl	r1,r10,r6
8000939e:	f4 07 0a 4a 	lsr	r10,r10,r7
800093a2:	f6 06 09 4c 	lsl	r12,r11,r6
800093a6:	18 4a       	or	r10,r12
800093a8:	f6 07 0a 4b 	lsr	r11,r11,r7
800093ac:	30 00       	mov	r0,0
800093ae:	c1 58       	rjmp	800093d8 <__avr32_f64_div_res_subnormal+0x5e>
800093b0:	ee 06 11 20 	rsub	r6,r7,32
800093b4:	f9 b0 00 00 	moveq	r0,0
800093b8:	f9 bc 00 00 	moveq	r12,0
800093bc:	c0 50       	breq	800093c6 <__avr32_f64_div_res_subnormal+0x4c>
800093be:	f4 06 09 40 	lsl	r0,r10,r6
800093c2:	f6 06 09 4c 	lsl	r12,r11,r6
800093c6:	e6 07 0a 42 	lsr	r2,r3,r7
800093ca:	30 03       	mov	r3,0
800093cc:	f4 07 0a 41 	lsr	r1,r10,r7
800093d0:	18 41       	or	r1,r12
800093d2:	f6 07 0a 4a 	lsr	r10,r11,r7
800093d6:	30 0b       	mov	r11,0
800093d8:	e0 12 ff 00 	andl	r2,0xff00
800093dc:	e8 12 00 80 	orl	r2,0x80
800093e0:	e6 08 06 46 	mulu.d	r6,r3,r8
800093e4:	e4 09 07 46 	macu.d	r6,r2,r9
800093e8:	e4 08 06 44 	mulu.d	r4,r2,r8
800093ec:	e6 09 06 48 	mulu.d	r8,r3,r9
800093f0:	0c 05       	add	r5,r6
800093f2:	f0 07 00 48 	adc	r8,r8,r7
800093f6:	5c 09       	acr	r9
800093f8:	30 07       	mov	r7,0
800093fa:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
800093fe:	00 34       	cp.w	r4,r0
80009400:	e2 05 13 00 	cpc	r5,r1
80009404:	c4 6b       	rjmp	80009290 <__avr32_f64_div_round_subnormal>
80009406:	1c 9b       	mov	r11,lr
80009408:	e6 1b 80 00 	andh	r11,0x8000,COH
8000940c:	30 0a       	mov	r10,0
8000940e:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80009412:	3f fb       	mov	r11,-1
80009414:	30 0a       	mov	r10,0
80009416:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000941a:	f5 eb 10 04 	or	r4,r10,r11
8000941e:	c0 90       	breq	80009430 <__avr32_f64_div_op1_zero>
80009420:	1c 9b       	mov	r11,lr
80009422:	e6 1b 80 00 	andh	r11,0x8000,COH
80009426:	ea 1b 7f f0 	orh	r11,0x7ff0
8000942a:	30 0a       	mov	r10,0
8000942c:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

80009430 <__avr32_f64_div_op1_zero>:
80009430:	f1 e9 10 15 	or	r5,r8,r9<<0x1
80009434:	ce f0       	breq	80009412 <__avr32_f64_div_res_subnormal+0x98>
80009436:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
8000943a:	e0 44 07 ff 	cp.w	r4,2047
8000943e:	ce 41       	brne	80009406 <__avr32_f64_div_res_subnormal+0x8c>
80009440:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
80009444:	ce 10       	breq	80009406 <__avr32_f64_div_res_subnormal+0x8c>
80009446:	ce 6b       	rjmp	80009412 <__avr32_f64_div_res_subnormal+0x98>

80009448 <__avr32_umod64>:
80009448:	d4 31       	pushm	r0-r7,lr
8000944a:	1a 97       	mov	r7,sp
8000944c:	20 3d       	sub	sp,12
8000944e:	10 9c       	mov	r12,r8
80009450:	12 95       	mov	r5,r9
80009452:	14 9e       	mov	lr,r10
80009454:	16 91       	mov	r1,r11
80009456:	16 96       	mov	r6,r11
80009458:	58 09       	cp.w	r9,0
8000945a:	e0 81 00 81 	brne	8000955c <__avr32_umod64+0x114>
8000945e:	16 38       	cp.w	r8,r11
80009460:	e0 88 00 12 	brls	80009484 <__avr32_umod64+0x3c>
80009464:	f0 08 12 00 	clz	r8,r8
80009468:	c4 e0       	breq	80009504 <__avr32_umod64+0xbc>
8000946a:	f6 08 09 46 	lsl	r6,r11,r8
8000946e:	f8 08 09 4c 	lsl	r12,r12,r8
80009472:	f0 0b 11 20 	rsub	r11,r8,32
80009476:	f4 08 09 4e 	lsl	lr,r10,r8
8000947a:	f4 0b 0a 4b 	lsr	r11,r10,r11
8000947e:	f7 e6 10 06 	or	r6,r11,r6
80009482:	c4 18       	rjmp	80009504 <__avr32_umod64+0xbc>
80009484:	58 08       	cp.w	r8,0
80009486:	c0 51       	brne	80009490 <__avr32_umod64+0x48>
80009488:	30 19       	mov	r9,1
8000948a:	f2 08 0d 08 	divu	r8,r9,r8
8000948e:	10 9c       	mov	r12,r8
80009490:	f8 08 12 00 	clz	r8,r12
80009494:	c0 31       	brne	8000949a <__avr32_umod64+0x52>
80009496:	18 16       	sub	r6,r12
80009498:	c3 68       	rjmp	80009504 <__avr32_umod64+0xbc>
8000949a:	f0 03 11 20 	rsub	r3,r8,32
8000949e:	f4 03 0a 4b 	lsr	r11,r10,r3
800094a2:	f8 08 09 4c 	lsl	r12,r12,r8
800094a6:	ec 08 09 49 	lsl	r9,r6,r8
800094aa:	ec 03 0a 43 	lsr	r3,r6,r3
800094ae:	f7 e9 10 09 	or	r9,r11,r9
800094b2:	f8 05 16 10 	lsr	r5,r12,0x10
800094b6:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
800094ba:	e6 05 0d 02 	divu	r2,r3,r5
800094be:	f2 0e 16 10 	lsr	lr,r9,0x10
800094c2:	ec 02 02 4b 	mul	r11,r6,r2
800094c6:	fd e3 11 0e 	or	lr,lr,r3<<0x10
800094ca:	16 3e       	cp.w	lr,r11
800094cc:	c0 72       	brcc	800094da <__avr32_umod64+0x92>
800094ce:	18 0e       	add	lr,r12
800094d0:	18 3e       	cp.w	lr,r12
800094d2:	c0 43       	brcs	800094da <__avr32_umod64+0x92>
800094d4:	16 3e       	cp.w	lr,r11
800094d6:	fd dc e3 0e 	addcs	lr,lr,r12
800094da:	fc 0b 01 03 	sub	r3,lr,r11
800094de:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
800094e2:	e6 05 0d 02 	divu	r2,r3,r5
800094e6:	f3 e3 11 09 	or	r9,r9,r3<<0x10
800094ea:	a5 36       	mul	r6,r2
800094ec:	0c 39       	cp.w	r9,r6
800094ee:	c0 72       	brcc	800094fc <__avr32_umod64+0xb4>
800094f0:	18 09       	add	r9,r12
800094f2:	18 39       	cp.w	r9,r12
800094f4:	c0 43       	brcs	800094fc <__avr32_umod64+0xb4>
800094f6:	0c 39       	cp.w	r9,r6
800094f8:	f3 dc e3 09 	addcs	r9,r9,r12
800094fc:	f2 06 01 06 	sub	r6,r9,r6
80009500:	f4 08 09 4e 	lsl	lr,r10,r8
80009504:	f8 0a 16 10 	lsr	r10,r12,0x10
80009508:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000950c:	ec 0a 0d 02 	divu	r2,r6,r10
80009510:	fc 09 16 10 	lsr	r9,lr,0x10
80009514:	ea 02 02 4b 	mul	r11,r5,r2
80009518:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000951c:	16 39       	cp.w	r9,r11
8000951e:	c0 72       	brcc	8000952c <__avr32_umod64+0xe4>
80009520:	18 09       	add	r9,r12
80009522:	18 39       	cp.w	r9,r12
80009524:	c0 43       	brcs	8000952c <__avr32_umod64+0xe4>
80009526:	16 39       	cp.w	r9,r11
80009528:	f3 dc e3 09 	addcs	r9,r9,r12
8000952c:	f2 0b 01 0b 	sub	r11,r9,r11
80009530:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80009534:	f6 0a 0d 0a 	divu	r10,r11,r10
80009538:	fd eb 11 0e 	or	lr,lr,r11<<0x10
8000953c:	ea 0a 02 4a 	mul	r10,r5,r10
80009540:	14 3e       	cp.w	lr,r10
80009542:	c0 72       	brcc	80009550 <__avr32_umod64+0x108>
80009544:	18 0e       	add	lr,r12
80009546:	18 3e       	cp.w	lr,r12
80009548:	c0 43       	brcs	80009550 <__avr32_umod64+0x108>
8000954a:	14 3e       	cp.w	lr,r10
8000954c:	fd dc e3 0e 	addcs	lr,lr,r12
80009550:	fc 0a 01 0a 	sub	r10,lr,r10
80009554:	30 0b       	mov	r11,0
80009556:	f4 08 0a 4a 	lsr	r10,r10,r8
8000955a:	c7 b8       	rjmp	80009650 <__avr32_umod64+0x208>
8000955c:	16 39       	cp.w	r9,r11
8000955e:	e0 8b 00 79 	brhi	80009650 <__avr32_umod64+0x208>
80009562:	f2 09 12 00 	clz	r9,r9
80009566:	c1 21       	brne	8000958a <__avr32_umod64+0x142>
80009568:	10 3a       	cp.w	r10,r8
8000956a:	5f 2b       	srhs	r11
8000956c:	0a 31       	cp.w	r1,r5
8000956e:	5f ba       	srhi	r10
80009570:	f7 ea 10 0a 	or	r10,r11,r10
80009574:	f2 0a 18 00 	cp.b	r10,r9
80009578:	c0 60       	breq	80009584 <__avr32_umod64+0x13c>
8000957a:	fc 08 01 0c 	sub	r12,lr,r8
8000957e:	e2 05 01 46 	sbc	r6,r1,r5
80009582:	18 9e       	mov	lr,r12
80009584:	0c 9b       	mov	r11,r6
80009586:	1c 9a       	mov	r10,lr
80009588:	c6 48       	rjmp	80009650 <__avr32_umod64+0x208>
8000958a:	ea 09 09 4c 	lsl	r12,r5,r9
8000958e:	f2 06 11 20 	rsub	r6,r9,32
80009592:	f6 09 09 4b 	lsl	r11,r11,r9
80009596:	f0 09 09 42 	lsl	r2,r8,r9
8000959a:	ef 46 ff f4 	st.w	r7[-12],r6
8000959e:	f0 06 0a 48 	lsr	r8,r8,r6
800095a2:	18 48       	or	r8,r12
800095a4:	e2 06 0a 4c 	lsr	r12,r1,r6
800095a8:	f4 09 09 43 	lsl	r3,r10,r9
800095ac:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
800095b0:	f4 06 0a 4a 	lsr	r10,r10,r6
800095b4:	16 4a       	or	r10,r11
800095b6:	f0 0b 16 10 	lsr	r11,r8,0x10
800095ba:	f8 0b 0d 04 	divu	r4,r12,r11
800095be:	f4 0c 16 10 	lsr	r12,r10,0x10
800095c2:	08 91       	mov	r1,r4
800095c4:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
800095c8:	e8 0e 02 46 	mul	r6,r4,lr
800095cc:	0c 3c       	cp.w	r12,r6
800095ce:	c0 a2       	brcc	800095e2 <__avr32_umod64+0x19a>
800095d0:	20 11       	sub	r1,1
800095d2:	10 0c       	add	r12,r8
800095d4:	10 3c       	cp.w	r12,r8
800095d6:	c0 63       	brcs	800095e2 <__avr32_umod64+0x19a>
800095d8:	0c 3c       	cp.w	r12,r6
800095da:	f7 b1 03 01 	sublo	r1,1
800095de:	f9 d8 e3 0c 	addcs	r12,r12,r8
800095e2:	0c 1c       	sub	r12,r6
800095e4:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
800095e8:	f8 0b 0d 04 	divu	r4,r12,r11
800095ec:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
800095f0:	08 96       	mov	r6,r4
800095f2:	e8 0e 02 4e 	mul	lr,r4,lr
800095f6:	1c 3b       	cp.w	r11,lr
800095f8:	c0 a2       	brcc	8000960c <__avr32_umod64+0x1c4>
800095fa:	20 16       	sub	r6,1
800095fc:	10 0b       	add	r11,r8
800095fe:	10 3b       	cp.w	r11,r8
80009600:	c0 63       	brcs	8000960c <__avr32_umod64+0x1c4>
80009602:	1c 3b       	cp.w	r11,lr
80009604:	f7 b6 03 01 	sublo	r6,1
80009608:	f7 d8 e3 0b 	addcs	r11,r11,r8
8000960c:	ed e1 11 01 	or	r1,r6,r1<<0x10
80009610:	1c 1b       	sub	r11,lr
80009612:	e2 02 06 40 	mulu.d	r0,r1,r2
80009616:	00 9e       	mov	lr,r0
80009618:	02 9c       	mov	r12,r1
8000961a:	16 3c       	cp.w	r12,r11
8000961c:	e0 8b 00 08 	brhi	8000962c <__avr32_umod64+0x1e4>
80009620:	5f 06       	sreq	r6
80009622:	06 30       	cp.w	r0,r3
80009624:	5f ba       	srhi	r10
80009626:	ed ea 00 0a 	and	r10,r6,r10
8000962a:	c0 60       	breq	80009636 <__avr32_umod64+0x1ee>
8000962c:	fc 02 01 04 	sub	r4,lr,r2
80009630:	f8 08 01 4c 	sbc	r12,r12,r8
80009634:	08 9e       	mov	lr,r4
80009636:	e6 0e 01 0a 	sub	r10,r3,lr
8000963a:	f6 0c 01 4c 	sbc	r12,r11,r12
8000963e:	ee f1 ff f4 	ld.w	r1,r7[-12]
80009642:	f8 09 0a 4b 	lsr	r11,r12,r9
80009646:	f4 09 0a 4a 	lsr	r10,r10,r9
8000964a:	f8 01 09 4c 	lsl	r12,r12,r1
8000964e:	18 4a       	or	r10,r12
80009650:	2f dd       	sub	sp,-12
80009652:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80009800 <_evba>:
80009800:	c0 08       	rjmp	80009800 <_evba>
	...

80009804 <_handle_TLB_Multiple_Hit>:
80009804:	c0 08       	rjmp	80009804 <_handle_TLB_Multiple_Hit>
	...

80009808 <_handle_Bus_Error_Data_Fetch>:
80009808:	c0 08       	rjmp	80009808 <_handle_Bus_Error_Data_Fetch>
	...

8000980c <_handle_Bus_Error_Instruction_Fetch>:
8000980c:	c0 08       	rjmp	8000980c <_handle_Bus_Error_Instruction_Fetch>
	...

80009810 <_handle_NMI>:
80009810:	c0 08       	rjmp	80009810 <_handle_NMI>
	...

80009814 <_handle_Instruction_Address>:
80009814:	c0 08       	rjmp	80009814 <_handle_Instruction_Address>
	...

80009818 <_handle_ITLB_Protection>:
80009818:	c0 08       	rjmp	80009818 <_handle_ITLB_Protection>
	...

8000981c <_handle_Breakpoint>:
8000981c:	c0 08       	rjmp	8000981c <_handle_Breakpoint>
	...

80009820 <_handle_Illegal_Opcode>:
80009820:	c0 08       	rjmp	80009820 <_handle_Illegal_Opcode>
	...

80009824 <_handle_Unimplemented_Instruction>:
80009824:	c0 08       	rjmp	80009824 <_handle_Unimplemented_Instruction>
	...

80009828 <_handle_Privilege_Violation>:
80009828:	c0 08       	rjmp	80009828 <_handle_Privilege_Violation>
	...

8000982c <_handle_Floating_Point>:
8000982c:	c0 08       	rjmp	8000982c <_handle_Floating_Point>
	...

80009830 <_handle_Coprocessor_Absent>:
80009830:	c0 08       	rjmp	80009830 <_handle_Coprocessor_Absent>
	...

80009834 <_handle_Data_Address_Read>:
80009834:	c0 08       	rjmp	80009834 <_handle_Data_Address_Read>
	...

80009838 <_handle_Data_Address_Write>:
80009838:	c0 08       	rjmp	80009838 <_handle_Data_Address_Write>
	...

8000983c <_handle_DTLB_Protection_Read>:
8000983c:	c0 08       	rjmp	8000983c <_handle_DTLB_Protection_Read>
	...

80009840 <_handle_DTLB_Protection_Write>:
80009840:	c0 08       	rjmp	80009840 <_handle_DTLB_Protection_Write>
	...

80009844 <_handle_DTLB_Modified>:
80009844:	c0 08       	rjmp	80009844 <_handle_DTLB_Modified>
	...

80009850 <_handle_ITLB_Miss>:
80009850:	c0 08       	rjmp	80009850 <_handle_ITLB_Miss>
	...

80009860 <_handle_DTLB_Miss_Read>:
80009860:	c0 08       	rjmp	80009860 <_handle_DTLB_Miss_Read>
	...

80009870 <_handle_DTLB_Miss_Write>:
80009870:	c0 08       	rjmp	80009870 <_handle_DTLB_Miss_Write>
	...

80009900 <_handle_Supervisor_Call>:
80009900:	c0 08       	rjmp	80009900 <_handle_Supervisor_Call>
80009902:	d7 03       	nop

80009904 <_int0>:
80009904:	30 0c       	mov	r12,0
80009906:	fe b0 c4 67 	rcall	800021d4 <_get_interrupt_handler>
8000990a:	58 0c       	cp.w	r12,0
8000990c:	f8 0f 17 10 	movne	pc,r12
80009910:	d6 03       	rete

80009912 <_int1>:
80009912:	30 1c       	mov	r12,1
80009914:	fe b0 c4 60 	rcall	800021d4 <_get_interrupt_handler>
80009918:	58 0c       	cp.w	r12,0
8000991a:	f8 0f 17 10 	movne	pc,r12
8000991e:	d6 03       	rete

80009920 <_int2>:
80009920:	30 2c       	mov	r12,2
80009922:	fe b0 c4 59 	rcall	800021d4 <_get_interrupt_handler>
80009926:	58 0c       	cp.w	r12,0
80009928:	f8 0f 17 10 	movne	pc,r12
8000992c:	d6 03       	rete

8000992e <_int3>:
8000992e:	30 3c       	mov	r12,3
80009930:	fe b0 c4 52 	rcall	800021d4 <_get_interrupt_handler>
80009934:	58 0c       	cp.w	r12,0
80009936:	f8 0f 17 10 	movne	pc,r12
8000993a:	d6 03       	rete

8000993c <ipr_val>:
8000993c:	00 00 01 04 40 00 01 12 80 00 01 20 c0 00 01 2e     ....@...... ....
8000994c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8000995c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8000996c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8000997c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8000998c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8000999c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800099ac:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800099bc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800099cc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800099dc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800099ec:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800099fc:	d7 03 d7 03                                         ....
