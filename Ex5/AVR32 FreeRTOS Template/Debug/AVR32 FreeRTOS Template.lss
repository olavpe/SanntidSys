
AVR32 FreeRTOS Template.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init         0000001c  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         00008964  80002024  80002024  00002424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .exception    00000200  8000aa00  8000aa00  0000ae00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .fini         00000018  8000ac00  8000ac00  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .rodata       0000068c  8000ac18  8000ac18  0000b018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .lalign       00000004  8000b2a4  8000b2a4  0000b6a4  2**0
                  ALLOC
  8 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  9 .ctors        00000008  00000008  8000b2a8  0000b808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .dtors        00000008  00000010  8000b2b0  0000b810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .jcr          00000004  00000018  8000b2b8  0000b818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .got          0000000c  0000001c  8000b2bc  0000b81c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .data         000005d8  00000028  8000b2c8  0000b828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .bss          00000430  00000600  00000600  00000000  2**2
                  ALLOC
 15 .heap         0000e5d0  00000a30  00000a30  00000000  2**0
                  ALLOC
 16 .comment      00000030  00000000  00000000  0000be00  2**0
                  CONTENTS, READONLY
 17 .debug_aranges 00000ff0  00000000  00000000  0000be30  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_pubnames 00001df2  00000000  00000000  0000ce20  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_info   0002f460  00000000  00000000  0000ec12  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00006477  00000000  00000000  0003e072  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   00013178  00000000  00000000  000444e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_frame  0000267c  00000000  00000000  00057664  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    00008d6c  00000000  00000000  00059ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_loc    0000aa42  00000000  00000000  00062a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_macinfo 014ad906  00000000  00000000  0006d48e  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 27 .debug_ranges 00001180  00000000  00000000  0151ad94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	48 1f       	lddpc	pc,80002004 <program_start+0x4>
80002002:	00 00       	add	r0,r0
80002004:	80 00       	ld.sh	r0,r0[0x0]
80002006:	20 24       	sub	r4,2

Disassembly of section .init:

80002008 <_init>:
80002008:	eb cd 40 40 	pushm	r6,lr
8000200c:	48 26       	lddpc	r6,80002014 <_init+0xc>
8000200e:	1e 26       	rsub	r6,pc
80002010:	c0 48       	rjmp	80002018 <_init+0x10>
80002012:	00 00       	add	r0,r0
80002014:	80 00       	ld.sh	r0,r0[0x0]
80002016:	1f f2       	ld.ub	r2,pc[0x7]
80002018:	f0 16 00 01 	mcall	r6[4]
8000201c:	f0 16 00 00 	mcall	r6[0]
80002020:	e3 cd 80 40 	ldm	sp++,r6,pc

Disassembly of section .text:

80002024 <_stext>:
80002024:	30 07       	mov	r7,0
80002026:	49 5a       	lddpc	r10,80002078 <_stext+0x54>
80002028:	5b fa       	cp.w	r10,-1
8000202a:	f4 0d 17 10 	movne	sp,r10
8000202e:	49 4b       	lddpc	r11,8000207c <_stext+0x58>
80002030:	49 4c       	lddpc	r12,80002080 <_stext+0x5c>
80002032:	18 3b       	cp.w	r11,r12
80002034:	c0 60       	breq	80002040 <_stext+0x1c>
80002036:	49 4a       	lddpc	r10,80002084 <_stext+0x60>
80002038:	b7 09       	ld.d	r8,r11++
8000203a:	b9 28       	st.d	r12++,r8
8000203c:	14 3c       	cp.w	r12,r10
8000203e:	cf d5       	brlt	80002038 <_stext+0x14>
80002040:	49 2a       	lddpc	r10,80002088 <_stext+0x64>
80002042:	49 1c       	lddpc	r12,80002084 <_stext+0x60>
80002044:	30 08       	mov	r8,0
80002046:	30 09       	mov	r9,0
80002048:	b9 28       	st.d	r12++,r8
8000204a:	14 3c       	cp.w	r12,r10
8000204c:	cf e5       	brlt	80002048 <_stext+0x24>
8000204e:	f0 1f 00 10 	mcall	8000208c <_stext+0x68>
80002052:	49 0c       	lddpc	r12,80002090 <_stext+0x6c>
80002054:	f0 1f 00 10 	mcall	80002094 <_stext+0x70>
80002058:	f0 1f 00 10 	mcall	80002098 <_stext+0x74>
8000205c:	1a 9c       	mov	r12,sp
8000205e:	30 0b       	mov	r11,0
80002060:	f0 1f 00 0f 	mcall	8000209c <_stext+0x78>
80002064:	5b fc       	cp.w	r12,-1
80002066:	f9 bc 00 00 	moveq	r12,0
8000206a:	f9 ba 00 00 	moveq	r10,0
8000206e:	14 1d       	sub	sp,r10
80002070:	f0 1f 00 0c 	mcall	800020a0 <_stext+0x7c>
80002074:	f0 1f 00 0c 	mcall	800020a4 <_stext+0x80>
80002078:	00 01       	add	r1,r0
8000207a:	00 00       	add	r0,r0
8000207c:	80 00       	ld.sh	r0,r0[0x0]
8000207e:	b2 a8       	st.b	r9[0x2],r8
80002080:	00 00       	add	r0,r0
80002082:	00 08       	add	r8,r0
80002084:	00 00       	add	r0,r0
80002086:	06 00       	add	r0,r3
80002088:	00 00       	add	r0,r0
8000208a:	0a 30       	cp.w	r0,r5
8000208c:	80 00       	ld.sh	r0,r0[0x0]
8000208e:	42 f0       	lddsp	r0,sp[0xbc]
80002090:	80 00       	ld.sh	r0,r0[0x0]
80002092:	ac 00       	st.h	r6[0x0],r0
80002094:	80 00       	ld.sh	r0,r0[0x0]
80002096:	4a 34       	lddpc	r4,80002120 <board_init+0x14>
80002098:	80 00       	ld.sh	r0,r0[0x0]
8000209a:	20 08       	sub	r8,0
8000209c:	80 00       	ld.sh	r0,r0[0x0]
8000209e:	54 e4       	stdsp	sp[0x138],r4
800020a0:	80 00       	ld.sh	r0,r0[0x0]
800020a2:	49 f4       	lddpc	r4,8000211c <board_init+0x10>
800020a4:	80 00       	ld.sh	r0,r0[0x0]
800020a6:	4a 48       	lddpc	r8,80002134 <board_init+0x28>

800020a8 <__do_global_dtors_aux>:
800020a8:	d4 21       	pushm	r4-r7,lr
800020aa:	48 e8       	lddpc	r8,800020e0 <__do_global_dtors_aux+0x38>
800020ac:	11 89       	ld.ub	r9,r8[0x0]
800020ae:	30 08       	mov	r8,0
800020b0:	f0 09 18 00 	cp.b	r9,r8
800020b4:	c1 41       	brne	800020dc <__do_global_dtors_aux+0x34>
800020b6:	48 c8       	lddpc	r8,800020e4 <__do_global_dtors_aux+0x3c>
800020b8:	48 c6       	lddpc	r6,800020e8 <__do_global_dtors_aux+0x40>
800020ba:	10 95       	mov	r5,r8
800020bc:	10 16       	sub	r6,r8
800020be:	48 c7       	lddpc	r7,800020ec <__do_global_dtors_aux+0x44>
800020c0:	a3 46       	asr	r6,0x2
800020c2:	20 16       	sub	r6,1
800020c4:	c0 68       	rjmp	800020d0 <__do_global_dtors_aux+0x28>
800020c6:	2f f8       	sub	r8,-1
800020c8:	8f 08       	st.w	r7[0x0],r8
800020ca:	ea 08 03 28 	ld.w	r8,r5[r8<<0x2]
800020ce:	5d 18       	icall	r8
800020d0:	6e 08       	ld.w	r8,r7[0x0]
800020d2:	0c 38       	cp.w	r8,r6
800020d4:	cf 93       	brcs	800020c6 <__do_global_dtors_aux+0x1e>
800020d6:	30 19       	mov	r9,1
800020d8:	48 28       	lddpc	r8,800020e0 <__do_global_dtors_aux+0x38>
800020da:	b0 89       	st.b	r8[0x0],r9
800020dc:	d8 22       	popm	r4-r7,pc
800020de:	00 00       	add	r0,r0
800020e0:	00 00       	add	r0,r0
800020e2:	06 00       	add	r0,r3
800020e4:	00 00       	add	r0,r0
800020e6:	00 10       	sub	r0,r0
800020e8:	00 00       	add	r0,r0
800020ea:	00 14       	sub	r4,r0
800020ec:	00 00       	add	r0,r0
800020ee:	06 04       	add	r4,r3

800020f0 <frame_dummy>:
800020f0:	d4 01       	pushm	lr
800020f2:	48 5c       	lddpc	r12,80002104 <frame_dummy+0x14>
800020f4:	78 08       	ld.w	r8,r12[0x0]
800020f6:	58 08       	cp.w	r8,0
800020f8:	c0 50       	breq	80002102 <frame_dummy+0x12>
800020fa:	48 48       	lddpc	r8,80002108 <frame_dummy+0x18>
800020fc:	58 08       	cp.w	r8,0
800020fe:	c0 20       	breq	80002102 <frame_dummy+0x12>
80002100:	5d 18       	icall	r8
80002102:	d8 02       	popm	pc
80002104:	00 00       	add	r0,r0
80002106:	00 18       	sub	r8,r0
80002108:	00 00       	add	r0,r0
	...

8000210c <board_init>:
#endif



void board_init (void)
{
8000210c:	d4 01       	pushm	lr
    gpio_configure_pin (LED0_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000210e:	30 3b       	mov	r11,3
80002110:	32 3c       	mov	r12,35
80002112:	f0 1f 00 0a 	mcall	80002138 <board_init+0x2c>
    gpio_configure_pin (LED1_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002116:	30 3b       	mov	r11,3
80002118:	34 9c       	mov	r12,73
8000211a:	f0 1f 00 08 	mcall	80002138 <board_init+0x2c>
    gpio_configure_pin (LED2_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000211e:	30 3b       	mov	r11,3
80002120:	32 2c       	mov	r12,34
80002122:	f0 1f 00 06 	mcall	80002138 <board_init+0x2c>
    gpio_configure_pin (LED3_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002126:	30 3b       	mov	r11,3
80002128:	32 6c       	mov	r12,38
8000212a:	f0 1f 00 04 	mcall	80002138 <board_init+0x2c>

    gpio_configure_pin (GPIO_PUSH_BUTTON_0, (GPIO_DIR_INPUT | GPIO_PULL_UP));
8000212e:	30 4b       	mov	r11,4
80002130:	32 1c       	mov	r12,33
80002132:	f0 1f 00 02 	mcall	80002138 <board_init+0x2c>
     * the platform Xplained board has configured basic clock settings,
     * GPIO pin mapping, interrupt controller options, etc.
     */
    sensor_board_init ();
#endif
}
80002136:	d8 02       	popm	pc
80002138:	80 00       	ld.sh	r0,r0[0x0]
8000213a:	21 3c       	sub	r12,19

8000213c <gpio_configure_pin>:

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{  
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];  
8000213c:	f8 08 16 05 	lsr	r8,r12,0x5
80002140:	a9 68       	lsl	r8,0x8
80002142:	e0 28 f0 00 	sub	r8,61440
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif    
    if (flags & GPIO_PULL_UP)
80002146:	16 99       	mov	r9,r11
80002148:	e2 19 00 04 	andl	r9,0x4,COH
8000214c:	c0 70       	breq	8000215a <gpio_configure_pin+0x1e>
            gpio_port->puers = 1 << (pin & 0x1F);
8000214e:	30 19       	mov	r9,1
80002150:	f2 0c 09 49 	lsl	r9,r9,r12
80002154:	f1 49 00 74 	st.w	r8[116],r9
80002158:	c0 68       	rjmp	80002164 <gpio_configure_pin+0x28>
    else
            gpio_port->puerc = 1 << (pin & 0x1F);
8000215a:	30 19       	mov	r9,1
8000215c:	f2 0c 09 49 	lsl	r9,r9,r12
80002160:	f1 49 00 78 	st.w	r8[120],r9
            else
                    gpio_port->odcr1c = 1 << (pin & 0x1F);
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
80002164:	16 99       	mov	r9,r11
80002166:	e2 19 00 80 	andl	r9,0x80,COH
8000216a:	c2 40       	breq	800021b2 <gpio_configure_pin+0x76>
            if (flags & GPIO_BOTHEDGES)
8000216c:	16 99       	mov	r9,r11
8000216e:	e2 19 01 80 	andl	r9,0x180,COH
80002172:	c0 90       	breq	80002184 <gpio_configure_pin+0x48>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80002174:	30 19       	mov	r9,1
80002176:	f2 0c 09 49 	lsl	r9,r9,r12
8000217a:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
8000217e:	f1 49 00 b8 	st.w	r8[184],r9
80002182:	c1 88       	rjmp	800021b2 <gpio_configure_pin+0x76>
            }
            else if (flags & GPIO_RISING)
80002184:	16 99       	mov	r9,r11
80002186:	e2 19 02 80 	andl	r9,0x280,COH
8000218a:	c0 90       	breq	8000219c <gpio_configure_pin+0x60>
            {
                   gpio_port->imr0s = 1 << (pin & 0x1F);
8000218c:	30 19       	mov	r9,1
8000218e:	f2 0c 09 49 	lsl	r9,r9,r12
80002192:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80002196:	f1 49 00 b8 	st.w	r8[184],r9
8000219a:	c0 c8       	rjmp	800021b2 <gpio_configure_pin+0x76>
            }
            else if (flags & GPIO_FALLING)
8000219c:	16 99       	mov	r9,r11
8000219e:	e2 19 03 80 	andl	r9,0x380,COH
800021a2:	c0 80       	breq	800021b2 <gpio_configure_pin+0x76>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
800021a4:	30 19       	mov	r9,1
800021a6:	f2 0c 09 49 	lsl	r9,r9,r12
800021aa:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = 1 << (pin & 0x1F);
800021ae:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
800021b2:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
800021b6:	c1 50       	breq	800021e0 <gpio_configure_pin+0xa4>
            if (flags & GPIO_INIT_HIGH)
800021b8:	e2 1b 00 02 	andl	r11,0x2,COH
800021bc:	c0 70       	breq	800021ca <gpio_configure_pin+0x8e>
                    gpio_port->ovrs = 1 << (pin & 0x1F);
800021be:	30 19       	mov	r9,1
800021c0:	f2 0c 09 49 	lsl	r9,r9,r12
800021c4:	f1 49 00 54 	st.w	r8[84],r9
800021c8:	c0 68       	rjmp	800021d4 <gpio_configure_pin+0x98>
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
800021ca:	30 19       	mov	r9,1
800021cc:	f2 0c 09 49 	lsl	r9,r9,r12
800021d0:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = 1 << (pin & 0x1F);
800021d4:	30 19       	mov	r9,1
800021d6:	f2 0c 09 49 	lsl	r9,r9,r12
800021da:	f1 49 00 44 	st.w	r8[68],r9
800021de:	c0 68       	rjmp	800021ea <gpio_configure_pin+0xae>
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
800021e0:	30 19       	mov	r9,1
800021e2:	f2 0c 09 49 	lsl	r9,r9,r12
800021e6:	f1 49 00 48 	st.w	r8[72],r9
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
800021ea:	30 19       	mov	r9,1
800021ec:	f2 0c 09 4c 	lsl	r12,r9,r12
800021f0:	91 1c       	st.w	r8[0x4],r12
}
800021f2:	5e fc       	retal	r12

800021f4 <gpio_toggle_pin>:
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
}

void gpio_toggle_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800021f4:	f8 08 16 05 	lsr	r8,r12,0x5
800021f8:	a9 68       	lsl	r8,0x8
800021fa:	e0 28 f0 00 	sub	r8,61440
  gpio_port->ovrt  = 1 << (pin & 0x1F); // Toggle the I/O line.
800021fe:	30 19       	mov	r9,1
80002200:	f2 0c 09 4c 	lsl	r12,r9,r12
80002204:	f1 4c 00 5c 	st.w	r8[92],r12
}
80002208:	5e fc       	retal	r12

8000220a <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
8000220a:	c0 08       	rjmp	8000220a <_unhandled_interrupt>

8000220c <INTC_register_interrupt>:


void INTC_register_interrupt(__int_handler handler, unsigned int irq, unsigned int int_level)
{
  // Determine the group of the IRQ.
  unsigned int int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
8000220c:	f6 08 16 05 	lsr	r8,r11,0x5

  // Store in _int_line_handler_table_x the pointer to the interrupt handler, so
  // that _get_interrupt_handler can retrieve it when the interrupt is vectored.
  _int_handler_table[int_grp]._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP] = handler;
80002210:	48 99       	lddpc	r9,80002234 <INTC_register_interrupt+0x28>
80002212:	f2 08 00 39 	add	r9,r9,r8<<0x3
80002216:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
8000221a:	72 19       	ld.w	r9,r9[0x4]
8000221c:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
  // Program the corresponding IPRX register to set the interrupt priority level
  // and the interrupt vector offset that will be fetched by the core interrupt
  // system.
  // NOTE: The _intx functions are intermediate assembly functions between the
  // core interrupt system and the user interrupt handler.
  AVR32_INTC.ipr[int_grp] = ipr_val[int_level & (AVR32_INTC_IPR_INTLEVEL_MASK >> AVR32_INTC_IPR_INTLEVEL_OFFSET)];
80002220:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
80002224:	48 59       	lddpc	r9,80002238 <INTC_register_interrupt+0x2c>
80002226:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
8000222a:	fe 79 08 00 	mov	r9,-63488
8000222e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
}
80002232:	5e fc       	retal	r12
80002234:	80 00       	ld.sh	r0,r0[0x0]
80002236:	ac 18       	st.h	r6[0x2],r8
80002238:	80 00       	ld.sh	r0,r0[0x0]
8000223a:	ab 3c       	mul	r12,r5

8000223c <INTC_init_interrupts>:
{
  Set_system_register(AVR32_EVBA, (int)&_evba );
}

void INTC_init_interrupts(void)
{
8000223c:	d4 21       	pushm	r4-r7,lr
}

//! Init EVBA address. This sequence might also be done in the utils/startup/startup_uc3.S file.
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int)&_evba );
8000223e:	49 18       	lddpc	r8,80002280 <INTC_init_interrupts+0x44>
80002240:	e3 b8 00 01 	mtsr	0x4,r8
80002244:	49 0e       	lddpc	lr,80002284 <INTC_init_interrupts+0x48>
80002246:	30 07       	mov	r7,0
80002248:	0e 94       	mov	r4,r7
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
8000224a:	49 0c       	lddpc	r12,80002288 <INTC_init_interrupts+0x4c>
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
8000224c:	49 08       	lddpc	r8,8000228c <INTC_init_interrupts+0x50>
8000224e:	70 05       	ld.w	r5,r8[0x0]
80002250:	fe 76 08 00 	mov	r6,-63488
80002254:	c1 08       	rjmp	80002274 <INTC_init_interrupts+0x38>
}

//! Init EVBA address. This sequence might also be done in the utils/startup/startup_uc3.S file.
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int)&_evba );
80002256:	08 98       	mov	r8,r4
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
80002258:	7c 1b       	ld.w	r11,lr[0x4]

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
8000225a:	7c 0a       	ld.w	r10,lr[0x0]
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
8000225c:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
80002260:	2f f8       	sub	r8,-1
80002262:	10 3a       	cp.w	r10,r8
80002264:	fe 9b ff fc 	brhi	8000225c <INTC_init_interrupts+0x20>
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
80002268:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
  unsigned int int_grp, int_req;

  INTC_init_evba();

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
8000226c:	2f f7       	sub	r7,-1
8000226e:	2f 8e       	sub	lr,-8
80002270:	59 e7       	cp.w	r7,30
80002272:	c0 50       	breq	8000227c <INTC_init_interrupts+0x40>
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
80002274:	7c 08       	ld.w	r8,lr[0x0]
80002276:	58 08       	cp.w	r8,0
80002278:	ce f1       	brne	80002256 <INTC_init_interrupts+0x1a>
8000227a:	cf 7b       	rjmp	80002268 <INTC_init_interrupts+0x2c>
8000227c:	d8 22       	popm	r4-r7,pc
8000227e:	00 00       	add	r0,r0
80002280:	80 00       	ld.sh	r0,r0[0x0]
80002282:	aa 00       	st.h	r5[0x0],r0
80002284:	80 00       	ld.sh	r0,r0[0x0]
80002286:	ac 18       	st.h	r6[0x2],r8
80002288:	80 00       	ld.sh	r0,r0[0x0]
8000228a:	22 0a       	sub	r10,32
8000228c:	80 00       	ld.sh	r0,r0[0x0]
8000228e:	ab 3c       	mul	r12,r5

80002290 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(unsigned int int_level)
{
  // ICR3 is mapped first, ICR0 last.
  // Code in exception.S puts int_level in R12 which is used by AVR32-GCC to
  // pass a single argument to a function.
  unsigned int int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002290:	fe 78 08 00 	mov	r8,-63488
80002294:	e0 69 00 83 	mov	r9,131
80002298:	f2 0c 01 0c 	sub	r12,r9,r12
8000229c:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
  unsigned int int_req = AVR32_INTC.irr[int_grp];
800022a0:	f2 ca ff c0 	sub	r10,r9,-64
800022a4:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
  // exception.S will provide the interrupt handler with a clean interrupt stack
  // frame, with nothing more pushed onto the stack. The interrupt handler must
  // manage the `rete' instruction, what can be done thanks to pure assembly,
  // inline assembly or the `__attribute__((__interrupt__))' C function
  // attribute.
  return (int_req) ? _int_handler_table[int_grp]._int_line_handler_table[32 - clz(int_req) - 1] : NULL;
800022a8:	58 08       	cp.w	r8,0
800022aa:	c0 21       	brne	800022ae <_get_interrupt_handler+0x1e>
800022ac:	5e fd       	retal	0
800022ae:	f0 08 12 00 	clz	r8,r8
800022b2:	48 5a       	lddpc	r10,800022c4 <_get_interrupt_handler+0x34>
800022b4:	f4 09 00 39 	add	r9,r10,r9<<0x3
800022b8:	f0 08 11 1f 	rsub	r8,r8,31
800022bc:	72 19       	ld.w	r9,r9[0x4]
800022be:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
}
800022c2:	5e fc       	retal	r12
800022c4:	80 00       	ld.sh	r0,r0[0x0]
800022c6:	ac 18       	st.h	r6[0x2],r8

800022c8 <pm_set_osc0_mode>:
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
800022c8:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
800022ca:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
800022ce:	99 a8       	st.w	r12[0x28],r8
}
800022d0:	5e fc       	retal	r12
800022d2:	d7 03       	nop

800022d4 <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
800022d4:	d4 01       	pushm	lr
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
800022d6:	ec 5b bb 9f 	cp.w	r11,899999
800022da:	e0 8b 00 04 	brhi	800022e2 <pm_enable_osc0_crystal+0xe>
800022de:	30 4b       	mov	r11,4
800022e0:	c1 38       	rjmp	80002306 <pm_enable_osc0_crystal+0x32>
800022e2:	e0 68 c6 bf 	mov	r8,50879
800022e6:	ea 18 00 2d 	orh	r8,0x2d
800022ea:	10 3b       	cp.w	r11,r8
800022ec:	e0 8b 00 04 	brhi	800022f4 <pm_enable_osc0_crystal+0x20>
800022f0:	30 5b       	mov	r11,5
800022f2:	c0 a8       	rjmp	80002306 <pm_enable_osc0_crystal+0x32>
800022f4:	e0 68 12 00 	mov	r8,4608
800022f8:	ea 18 00 7a 	orh	r8,0x7a
800022fc:	10 3b       	cp.w	r11,r8
800022fe:	f9 bb 03 06 	movlo	r11,6
80002302:	f9 bb 02 07 	movhs	r11,7
80002306:	f0 1f 00 02 	mcall	8000230c <pm_enable_osc0_crystal+0x38>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
8000230a:	d8 02       	popm	pc
8000230c:	80 00       	ld.sh	r0,r0[0x0]
8000230e:	22 c8       	sub	r8,44

80002310 <pm_enable_clk0_no_wait>:


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002310:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
80002312:	f1 db d1 03 	bfins	r8,r11,0x8,0x3
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002316:	99 a8       	st.w	r12[0x28],r8

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
80002318:	78 08       	ld.w	r8,r12[0x0]
8000231a:	a3 a8       	sbr	r8,0x2
8000231c:	99 08       	st.w	r12[0x0],r8
}
8000231e:	5e fc       	retal	r12

80002320 <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
80002320:	79 58       	ld.w	r8,r12[0x54]
80002322:	e2 18 00 80 	andl	r8,0x80,COH
80002326:	cf d0       	breq	80002320 <pm_wait_for_clk0_ready>
}
80002328:	5e fc       	retal	r12
8000232a:	d7 03       	nop

8000232c <pm_enable_clk0>:
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
8000232c:	eb cd 40 80 	pushm	r7,lr
80002330:	18 97       	mov	r7,r12
  pm_enable_clk0_no_wait(pm, startup);
80002332:	f0 1f 00 04 	mcall	80002340 <pm_enable_clk0+0x14>
  pm_wait_for_clk0_ready(pm);
80002336:	0e 9c       	mov	r12,r7
80002338:	f0 1f 00 03 	mcall	80002344 <pm_enable_clk0+0x18>
}
8000233c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002340:	80 00       	ld.sh	r0,r0[0x0]
80002342:	23 10       	sub	r0,49
80002344:	80 00       	ld.sh	r0,r0[0x0]
80002346:	23 20       	sub	r0,50

80002348 <pm_switch_to_clock>:


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
80002348:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
8000234a:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
8000234e:	99 08       	st.w	r12[0x0],r8
}
80002350:	5e fc       	retal	r12
80002352:	d7 03       	nop

80002354 <pm_switch_to_osc0>:


void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
80002354:	eb cd 40 c0 	pushm	r6-r7,lr
80002358:	18 97       	mov	r7,r12
8000235a:	14 96       	mov	r6,r10
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
8000235c:	f0 1f 00 06 	mcall	80002374 <pm_switch_to_osc0+0x20>
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
80002360:	0c 9b       	mov	r11,r6
80002362:	0e 9c       	mov	r12,r7
80002364:	f0 1f 00 05 	mcall	80002378 <pm_switch_to_osc0+0x24>
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
80002368:	30 1b       	mov	r11,1
8000236a:	0e 9c       	mov	r12,r7
8000236c:	f0 1f 00 04 	mcall	8000237c <pm_switch_to_osc0+0x28>
}
80002370:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002374:	80 00       	ld.sh	r0,r0[0x0]
80002376:	22 d4       	sub	r4,45
80002378:	80 00       	ld.sh	r0,r0[0x0]
8000237a:	23 2c       	sub	r12,50
8000237c:	80 00       	ld.sh	r0,r0[0x0]
8000237e:	23 48       	sub	r8,52

80002380 <pcl_switch_to_osc>:
        return PASS;
}
#endif // UC3C device-specific implementation

long int pcl_switch_to_osc(pcl_osc_t osc, unsigned int fcrystal, unsigned int startup)
{
80002380:	d4 01       	pushm	lr
#ifndef AVR32_PM_VERSION_RESETVALUE
// Implementation for UC3A, UC3A3, UC3B parts.
  if(PCL_OSC0 == osc)
80002382:	58 0c       	cp.w	r12,0
80002384:	c0 40       	breq	8000238c <pcl_switch_to_osc+0xc>
80002386:	fe 7c d8 f0 	mov	r12,-10000
8000238a:	d8 02       	popm	pc
  {
    // Configure OSC0 in crystal mode, external crystal with a FOSC0 Hz frequency,
    // enable the OSC0, set the main clock source as being OSC0.
    pm_switch_to_osc0(&AVR32_PM, fcrystal, startup);
8000238c:	fe 7c 0c 00 	mov	r12,-62464
80002390:	f0 1f 00 02 	mcall	80002398 <pcl_switch_to_osc+0x18>
80002394:	d8 0a       	popm	pc,r12=0
80002396:	00 00       	add	r0,r0
80002398:	80 00       	ld.sh	r0,r0[0x0]
8000239a:	23 54       	sub	r4,53

8000239c <udd_include_vbus_monitoring>:


bool udd_include_vbus_monitoring(void)
{
	return true;
}
8000239c:	5e ff       	retal	1

8000239e <udd_is_high_speed>:
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
#else
	return false;
#endif
}
8000239e:	5e fd       	retal	0

800023a0 <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address();
800023a0:	fe 68 00 00 	mov	r8,-131072
800023a4:	70 09       	ld.w	r9,r8[0x0]
800023a6:	a7 d9       	cbr	r9,0x7
800023a8:	91 09       	st.w	r8[0x0],r9
	udd_configure_address(address);
800023aa:	70 09       	ld.w	r9,r8[0x0]
800023ac:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800023b0:	e0 19 ff 80 	andl	r9,0xff80
800023b4:	f9 e9 10 09 	or	r9,r12,r9
800023b8:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
800023ba:	70 09       	ld.w	r9,r8[0x0]
800023bc:	a7 b9       	sbr	r9,0x7
800023be:	91 09       	st.w	r8[0x0],r9
}
800023c0:	5e fc       	retal	r12

800023c2 <udd_getaddress>:


uint8_t udd_getaddress(void)
{
	return udd_get_configured_address();
800023c2:	fe 68 00 00 	mov	r8,-131072
800023c6:	70 0c       	ld.w	r12,r8[0x0]
}
800023c8:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800023cc:	5e fc       	retal	r12

800023ce <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
800023ce:	fe 68 00 00 	mov	r8,-131072
800023d2:	70 8c       	ld.w	r12,r8[0x20]
}
800023d4:	f9 dc c0 6b 	bfextu	r12,r12,0x3,0xb
800023d8:	5e fc       	retal	r12

800023da <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
	return udd_micro_frame_number();
800023da:	fe 68 00 00 	mov	r8,-131072
800023de:	70 8c       	ld.w	r12,r8[0x20]
}
800023e0:	f9 dc c0 0e 	bfextu	r12,r12,0x0,0xe
800023e4:	5e fc       	retal	r12
800023e6:	d7 03       	nop

800023e8 <udd_set_setup_payload>:
}


void udd_set_setup_payload( uint8_t *payload,	uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
800023e8:	48 28       	lddpc	r8,800023f0 <udd_set_setup_payload+0x8>
800023ea:	91 2c       	st.w	r8[0x8],r12
	udd_g_ctrlreq.payload_size = payload_size;
800023ec:	b0 6b       	st.h	r8[0xc],r11
}
800023ee:	5e fc       	retal	r12
800023f0:	00 00       	add	r0,r0
800023f2:	0a 00       	add	r0,r5

800023f4 <udd_ep_is_halted>:
}


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
800023f4:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
800023f8:	a3 68       	lsl	r8,0x2
800023fa:	e0 38 fe 40 	sub	r8,130624
800023fe:	70 0c       	ld.w	r12,r8[0x0]
}
80002400:	f9 dc c2 61 	bfextu	r12,r12,0x13,0x1
80002404:	5e fc       	retal	r12
80002406:	d7 03       	nop

80002408 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job;
	uint8_t index = ep & USB_EP_ADDR_MASK;
80002408:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4

	if (USB_DEVICE_MAX_EP < index)
8000240c:	30 38       	mov	r8,3
8000240e:	f0 0c 18 00 	cp.b	r12,r8
80002412:	e0 8b 00 35 	brhi	8000247c <udd_ep_set_halt+0x74>
		return false;

	ptr_job = &udd_ep_job[index - 1];
80002416:	18 99       	mov	r9,r12
80002418:	f8 c8 00 01 	sub	r8,r12,1
8000241c:	a5 68       	lsl	r8,0x4
8000241e:	49 9a       	lddpc	r10,80002480 <udd_ep_set_halt+0x78>
80002420:	f4 08 00 08 	add	r8,r10,r8
	if (ptr_job->busy == true) {
80002424:	70 0a       	ld.w	r10,r8[0x0]
80002426:	58 0a       	cp.w	r10,0
80002428:	c2 a5       	brlt	8000247c <udd_ep_set_halt+0x74>
		return false;	// Job on going, stall impossible
	}
	
	if (0 != udd_nb_busy_bank(index)) {
8000242a:	a3 69       	lsl	r9,0x2
8000242c:	fe 6b 01 30 	mov	r11,-130768
80002430:	f2 0b 00 0a 	add	r10,r9,r11
80002434:	74 0a       	ld.w	r10,r10[0x0]
80002436:	f5 da c1 82 	bfextu	r10,r10,0xc,0x2
8000243a:	c1 10       	breq	8000245c <udd_ep_set_halt+0x54>
		// Wait end of transfer on USB line before stall endpoint
		// Flag a stall requested
		ptr_job->stall_requested = true;
8000243c:	70 0b       	ld.w	r11,r8[0x0]
8000243e:	30 1a       	mov	r10,1
80002440:	f7 da d3 81 	bfins	r11,r10,0x1c,0x1
80002444:	91 0b       	st.w	r8[0x0],r11
		udd_enable_bank_interrupt(index);
80002446:	e0 39 fe 10 	sub	r9,130576
8000244a:	e0 68 10 00 	mov	r8,4096
8000244e:	93 08       	st.w	r9[0x0],r8
		udd_enable_endpoint_interrupt(index);
80002450:	f0 0c 09 4c 	lsl	r12,r8,r12
80002454:	fe 69 00 00 	mov	r9,-131072
80002458:	93 6c       	st.w	r9[0x18],r12
8000245a:	5e fa       	retal	r10
	} else {
		// Stall endpoint
		udd_disable_endpoint_bank_autoswitch(index);
8000245c:	fe 6a 01 00 	mov	r10,-130816
80002460:	f2 0a 00 08 	add	r8,r9,r10
80002464:	70 0a       	ld.w	r10,r8[0x0]
80002466:	a9 da       	cbr	r10,0x9
80002468:	91 0a       	st.w	r8[0x0],r10
		udd_enable_stall_handshake(index);
8000246a:	e0 39 fe 10 	sub	r9,130576
8000246e:	e8 68 00 00 	mov	r8,524288
80002472:	93 08       	st.w	r9[0x0],r8
		udd_reset_data_toggle(index);
80002474:	e4 68 00 00 	mov	r8,262144
80002478:	93 08       	st.w	r9[0x0],r8
8000247a:	5e ff       	retal	1
8000247c:	5e fd       	retal	0
8000247e:	00 00       	add	r0,r0
80002480:	00 00       	add	r0,r0
80002482:	07 18       	ld.sh	r8,r3++

80002484 <udd_ep_clear_halt>:
	return true;
}


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
80002484:	d4 01       	pushm	lr
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
80002486:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep)
8000248a:	30 38       	mov	r8,3
8000248c:	f0 0c 18 00 	cp.b	r12,r8
80002490:	e0 88 00 03 	brls	80002496 <udd_ep_clear_halt+0x12>
80002494:	d8 0a       	popm	pc,r12=0
		return false;
	ptr_job = &udd_ep_job[ep - 1];
80002496:	f8 c8 00 01 	sub	r8,r12,1
8000249a:	a5 68       	lsl	r8,0x4
8000249c:	49 69       	lddpc	r9,800024f4 <udd_ep_clear_halt+0x70>
8000249e:	f2 08 00 08 	add	r8,r9,r8

	if (Is_udd_endpoint_stall_requested(ep)	// Endpoint stalled
800024a2:	a3 6c       	lsl	r12,0x2
800024a4:	fe 6a 01 c0 	mov	r10,-130624
800024a8:	f8 0a 00 09 	add	r9,r12,r10
800024ac:	72 09       	ld.w	r9,r9[0x0]
800024ae:	e6 19 00 08 	andh	r9,0x8,COH
800024b2:	c0 51       	brne	800024bc <udd_ep_clear_halt+0x38>
			|| ptr_job->stall_requested) {	// Endpoint stall is requested
800024b4:	70 09       	ld.w	r9,r8[0x0]
800024b6:	e6 19 10 00 	andh	r9,0x1000,COH
800024ba:	c1 c0       	breq	800024f2 <udd_ep_clear_halt+0x6e>
		// Remove request to stall
		ptr_job->stall_requested = false;
800024bc:	70 09       	ld.w	r9,r8[0x0]
800024be:	30 0a       	mov	r10,0
800024c0:	f3 da d3 81 	bfins	r9,r10,0x1c,0x1
800024c4:	91 09       	st.w	r8[0x0],r9
		// Remove stall
		udd_disable_stall_handshake(ep);
800024c6:	fe 6a 02 20 	mov	r10,-130528
800024ca:	f8 0a 00 09 	add	r9,r12,r10
800024ce:	e8 6a 00 00 	mov	r10,524288
800024d2:	93 0a       	st.w	r9[0x0],r10
		udd_enable_endpoint_bank_autoswitch(ep);	
800024d4:	e0 3c ff 00 	sub	r12,130816
800024d8:	78 09       	ld.w	r9,r12[0x0]
800024da:	a9 b9       	sbr	r9,0x9
800024dc:	99 09       	st.w	r12[0x0],r9
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
800024de:	70 09       	ld.w	r9,r8[0x0]
800024e0:	58 09       	cp.w	r9,0
800024e2:	c0 84       	brge	800024f2 <udd_ep_clear_halt+0x6e>
			ptr_job->busy = false;
800024e4:	30 0a       	mov	r10,0
800024e6:	f3 da d3 e1 	bfins	r9,r10,0x1f,0x1
800024ea:	91 09       	st.w	r8[0x0],r9
			ptr_job->call_nohalt();
800024ec:	70 38       	ld.w	r8,r8[0xc]
800024ee:	5d 18       	icall	r8
800024f0:	da 0a       	popm	pc,r12=1
800024f2:	da 0a       	popm	pc,r12=1
800024f4:	00 00       	add	r0,r0
800024f6:	07 18       	ld.sh	r8,r3++

800024f8 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
800024f8:	30 59       	mov	r9,5
800024fa:	48 58       	lddpc	r8,8000250c <udd_ctrl_stall_data+0x14>
800024fc:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(0);
800024fe:	e8 69 00 00 	mov	r9,524288
80002502:	fe 68 01 f0 	mov	r8,-130576
80002506:	91 09       	st.w	r8[0x0],r9
}
80002508:	5e fc       	retal	r12
8000250a:	00 00       	add	r0,r0
8000250c:	00 00       	add	r0,r0
8000250e:	07 4c       	ld.w	r12,--r3

80002510 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
80002510:	d4 01       	pushm	lr
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
80002512:	48 48       	lddpc	r8,80002520 <udd_ctrl_endofrequest+0x10>
80002514:	70 48       	ld.w	r8,r8[0x10]
80002516:	58 08       	cp.w	r8,0
80002518:	c0 20       	breq	8000251c <udd_ctrl_endofrequest+0xc>
		udd_g_ctrlreq.callback();
8000251a:	5d 18       	icall	r8
8000251c:	d8 02       	popm	pc
8000251e:	00 00       	add	r0,r0
80002520:	00 00       	add	r0,r0
80002522:	0a 00       	add	r0,r5

80002524 <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort)
{
80002524:	d4 01       	pushm	lr
80002526:	16 99       	mov	r9,r11
	if (ptr_job->busy == false)
80002528:	78 08       	ld.w	r8,r12[0x0]
8000252a:	58 08       	cp.w	r8,0
8000252c:	c0 b4       	brge	80002542 <udd_ep_finish_job+0x1e>
		return;	// No on-going job
	ptr_job->busy = false;
8000252e:	30 0a       	mov	r10,0
80002530:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80002534:	99 08       	st.w	r12[0x0],r8
	if (NULL == ptr_job->call_trans)
80002536:	78 38       	ld.w	r8,r12[0xc]
80002538:	58 08       	cp.w	r8,0
8000253a:	c0 40       	breq	80002542 <udd_ep_finish_job+0x1e>
		return;	// No callback linked to job
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
8000253c:	78 2b       	ld.w	r11,r12[0x8]
8000253e:	12 9c       	mov	r12,r9
80002540:	5d 18       	icall	r8
80002542:	d8 02       	popm	pc

80002544 <udd_ep_abort_job>:
	}
}


static void udd_ep_abort_job(udd_ep_id_t ep)
{
80002544:	d4 01       	pushm	lr
	ep &= USB_EP_ADDR_MASK;
	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true);
80002546:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
8000254a:	20 18       	sub	r8,1
8000254c:	a5 68       	lsl	r8,0x4
8000254e:	30 1b       	mov	r11,1
80002550:	48 3c       	lddpc	r12,8000255c <udd_ep_abort_job+0x18>
80002552:	10 0c       	add	r12,r8
80002554:	f0 1f 00 03 	mcall	80002560 <udd_ep_abort_job+0x1c>
}
80002558:	d8 02       	popm	pc
8000255a:	00 00       	add	r0,r0
8000255c:	00 00       	add	r0,r0
8000255e:	07 18       	ld.sh	r8,r3++
80002560:	80 00       	ld.sh	r0,r0[0x0]
80002562:	25 24       	sub	r4,82

80002564 <udd_ep_free>:
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
80002564:	d4 01       	pushm	lr
	udd_disable_endpoint(ep & USB_EP_ADDR_MASK);
80002566:	fe 69 00 00 	mov	r9,-131072
8000256a:	72 7b       	ld.w	r11,r9[0x1c]
8000256c:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
80002570:	30 1a       	mov	r10,1
80002572:	f4 08 09 4a 	lsl	r10,r10,r8
80002576:	5c da       	com	r10
80002578:	16 6a       	and	r10,r11
8000257a:	93 7a       	st.w	r9[0x1c],r10
	udd_unallocate_memory(ep & USB_EP_ADDR_MASK);
8000257c:	a3 68       	lsl	r8,0x2
8000257e:	e0 38 ff 00 	sub	r8,130816
80002582:	70 09       	ld.w	r9,r8[0x0]
80002584:	a1 d9       	cbr	r9,0x1
80002586:	91 09       	st.w	r8[0x0],r9
	udd_ep_abort_job(ep);
80002588:	f0 1f 00 02 	mcall	80002590 <udd_ep_free+0x2c>
}
8000258c:	d8 02       	popm	pc
8000258e:	00 00       	add	r0,r0
80002590:	80 00       	ld.sh	r0,r0[0x0]
80002592:	25 44       	sub	r4,84

80002594 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
80002594:	eb cd 40 fc 	pushm	r2-r7,lr
	uint32_t udd_dma_ctrl = 0;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	b_dir_in = (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN));
	ep &= USB_EP_ADDR_MASK;
80002598:	fd dc c0 04 	bfextu	lr,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep)
8000259c:	30 37       	mov	r7,3
8000259e:	ee 0e 18 00 	cp.b	lr,r7
800025a2:	e0 8b 00 99 	brhi	800026d4 <udd_ep_run+0x140>
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
800025a6:	fe 67 00 00 	mov	r7,-131072
800025aa:	6e 76       	ld.w	r6,r7[0x1c]
800025ac:	1c 95       	mov	r5,lr
800025ae:	30 17       	mov	r7,1
800025b0:	ee 0e 09 47 	lsl	r7,r7,lr
800025b4:	0c 67       	and	r7,r6
800025b6:	e0 80 00 8f 	breq	800026d4 <udd_ep_run+0x140>
			|| Is_udd_endpoint_stall_requested(ep)
800025ba:	fc 06 15 02 	lsl	r6,lr,0x2
800025be:	fe 64 01 c0 	mov	r4,-130624
800025c2:	ec 04 00 07 	add	r7,r6,r4
800025c6:	6e 07       	ld.w	r7,r7[0x0]
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
800025c8:	e6 17 00 08 	andh	r7,0x8,COH
800025cc:	e0 81 00 84 	brne	800026d4 <udd_ep_run+0x140>
	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
800025d0:	fc c7 00 01 	sub	r7,lr,1
800025d4:	a5 67       	lsl	r7,0x4
800025d6:	4c 14       	lddpc	r4,800026d8 <udd_ep_run+0x144>
800025d8:	e8 07 00 07 	add	r7,r4,r7

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested)
800025dc:	6e 04       	ld.w	r4,r7[0x0]
800025de:	e6 14 10 00 	andh	r4,0x1000,COH
800025e2:	c7 91       	brne	800026d4 <udd_ep_run+0x140>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800025e4:	e1 b4 00 00 	mfsr	r4,0x0
	cpu_irq_disable();
800025e8:	d3 03       	ssrf	0x10
		return false;	// Endpoint is halted

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
800025ea:	6e 03       	ld.w	r3,r7[0x0]
800025ec:	58 03       	cp.w	r3,0
800025ee:	c0 54       	brge	800025f8 <udd_ep_run+0x64>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800025f0:	e3 b4 00 00 	mtsr	0x0,r4
#endif
	barrier();
800025f4:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
	bool b_dir_in;
	uint32_t udd_dma_ctrl = 0;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	b_dir_in = (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN));
800025f8:	f9 dc c0 e8 	bfextu	r12,r12,0x7,0x8
	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false;	// Job already on going
	}
	ptr_job->busy = true;
800025fc:	6e 03       	ld.w	r3,r7[0x0]
800025fe:	30 12       	mov	r2,1
80002600:	e7 d2 d3 e1 	bfins	r3,r2,0x1f,0x1
80002604:	8f 03       	st.w	r7[0x0],r3
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002606:	e3 b4 00 00 	mtsr	0x0,r4
	cpu_irq_restore(flags);
	ptr_job->buf = buf;
8000260a:	8f 1a       	st.w	r7[0x4],r10
	ptr_job->call_trans = callback;
8000260c:	8f 38       	st.w	r7[0xc],r8
	ptr_job->b_raise_dma = false;
8000260e:	6e 08       	ld.w	r8,r7[0x0]
80002610:	30 04       	mov	r4,0
80002612:	f1 d4 d3 a1 	bfins	r8,r4,0x1d,0x1
80002616:	8f 08       	st.w	r7[0x0],r8

	// The USBB supports a maximum transfer size of 64KB
	if (0x10000 <= buf_size) {
80002618:	e0 49 ff ff 	cp.w	r9,65535
8000261c:	e0 88 00 07 	brls	8000262a <udd_ep_run+0x96>
		// Transfer size = 64KB
		ptr_job->buf_size = 0x10000;
80002620:	e0 78 00 00 	mov	r8,65536
80002624:	8f 28       	st.w	r7[0x8],r8
80002626:	08 99       	mov	r9,r4
80002628:	c3 58       	rjmp	80002692 <udd_ep_run+0xfe>
		buf_size = 0;
	} else {
		ptr_job->buf_size = buf_size;
8000262a:	8f 29       	st.w	r7[0x8],r9
		if (b_dir_in) {
8000262c:	58 0c       	cp.w	r12,0
8000262e:	c3 20       	breq	80002692 <udd_ep_run+0xfe>
			if (buf_size==0) {
80002630:	58 09       	cp.w	r9,0
80002632:	c1 71       	brne	80002660 <udd_ep_run+0xcc>
				// The USB DMA can't send a empty buffer
				// thus we raise the DMA interrupt end of transfert 
				// to execute ZLP process
				ptr_job->b_raise_dma = true;
80002634:	6e 08       	ld.w	r8,r7[0x0]
80002636:	30 1c       	mov	r12,1
				ptr_job->b_send_zlp = true;
80002638:	bd b8       	sbr	r8,0x1d
8000263a:	f1 dc d3 c1 	bfins	r8,r12,0x1e,0x1
8000263e:	8f 08       	st.w	r7[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002640:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80002644:	d3 03       	ssrf	0x10
				flags = cpu_irq_save();
				udd_enable_endpoint_dma_interrupt(ep);
80002646:	20 15       	sub	r5,1
80002648:	fc 19 02 00 	movh	r9,0x200
8000264c:	f2 05 09 49 	lsl	r9,r9,r5
80002650:	fe 68 00 00 	mov	r8,-131072
80002654:	91 69       	st.w	r8[0x18],r9
				udd_raise_endpoint_dma_interrupt(ep);
80002656:	91 39       	st.w	r8[0xc],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002658:	e3 ba 00 00 	mtsr	0x0,r10
				cpu_irq_restore(flags);
				return true;
8000265c:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
			}
			if (0 != buf_size % udd_get_endpoint_size(ep)) {
80002660:	e0 36 ff 00 	sub	r6,130816
80002664:	6c 08       	ld.w	r8,r6[0x0]
80002666:	f1 d8 c0 83 	bfextu	r8,r8,0x4,0x3
8000266a:	30 86       	mov	r6,8
8000266c:	ec 08 09 48 	lsl	r8,r6,r8
80002670:	20 18       	sub	r8,1
80002672:	12 68       	and	r8,r9
80002674:	c0 b0       	breq	8000268a <udd_ep_run+0xf6>
				// Force short packet option to send a shortpacket on IN,
				// else the DMA transfer is accepted and interrupt DMA valid but nothing is sent.
				b_shortpacket = true;
				ptr_job->b_send_zlp = false;
80002676:	6e 08       	ld.w	r8,r7[0x0]
80002678:	30 0b       	mov	r11,0
8000267a:	f1 db d3 c1 	bfins	r8,r11,0x1e,0x1
8000267e:	8f 08       	st.w	r7[0x0],r8
			}
		}
	}

	// Start USB DMA to fill or read fifo of the selected endpoint
	udd_endpoint_dma_set_addr(ep, (U32) buf);
80002680:	a5 6e       	lsl	lr,0x4
80002682:	e0 3e fd 00 	sub	lr,130304
80002686:	9d 1a       	st.w	lr[0x4],r10
80002688:	c1 18       	rjmp	800026aa <udd_ep_run+0x116>
				// Force short packet option to send a shortpacket on IN,
				// else the DMA transfer is accepted and interrupt DMA valid but nothing is sent.
				b_shortpacket = true;
				ptr_job->b_send_zlp = false;
			}else{
				ptr_job->b_send_zlp = b_shortpacket;
8000268a:	6e 08       	ld.w	r8,r7[0x0]
8000268c:	f1 db d3 c1 	bfins	r8,r11,0x1e,0x1
80002690:	8f 08       	st.w	r7[0x0],r8
			}
		}
	}

	// Start USB DMA to fill or read fifo of the selected endpoint
	udd_endpoint_dma_set_addr(ep, (U32) buf);
80002692:	a5 6e       	lsl	lr,0x4
80002694:	e0 3e fd 00 	sub	lr,130304
80002698:	9d 1a       	st.w	lr[0x4],r10
	if (b_shortpacket) {
8000269a:	58 0b       	cp.w	r11,0
8000269c:	c0 31       	brne	800026a2 <udd_ep_run+0x10e>
8000269e:	30 08       	mov	r8,0
800026a0:	c0 68       	rjmp	800026ac <udd_ep_run+0x118>
		if (b_dir_in) {
800026a2:	58 0c       	cp.w	r12,0
800026a4:	c0 31       	brne	800026aa <udd_ep_run+0x116>
800026a6:	31 48       	mov	r8,20
800026a8:	c0 28       	rjmp	800026ac <udd_ep_run+0x118>
800026aa:	30 88       	mov	r8,8
		} else {
			udd_dma_ctrl = AVR32_USBB_UDDMA1_CONTROL_EOT_IRQ_EN_MASK
					| AVR32_USBB_UDDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
		}
	}
	udd_dma_ctrl |= (buf_size <<
800026ac:	e8 18 00 21 	orl	r8,0x21
			AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
			& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
	udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
800026b0:	f1 e9 11 09 	or	r9,r8,r9<<0x10
			AVR32_USBB_UDDMA1_CONTROL_CH_EN_MASK;
	udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
800026b4:	9d 29       	st.w	lr[0x8],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800026b6:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800026ba:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_endpoint_dma_interrupt(ep);
800026bc:	20 15       	sub	r5,1
800026be:	fc 19 02 00 	movh	r9,0x200
800026c2:	f2 05 09 45 	lsl	r5,r9,r5
800026c6:	fe 69 00 00 	mov	r9,-131072
800026ca:	93 65       	st.w	r9[0x18],r5
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800026cc:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
800026d0:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
	cpu_irq_restore(flags);

	return true;
800026d4:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
800026d8:	00 00       	add	r0,r0
800026da:	07 18       	ld.sh	r8,r3++

800026dc <udd_sleep_mode>:
 * 
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
800026dc:	58 0c       	cp.w	r12,0
800026de:	c1 11       	brne	80002700 <udd_sleep_mode+0x24>
800026e0:	49 18       	lddpc	r8,80002724 <udd_sleep_mode+0x48>
800026e2:	11 89       	ld.ub	r9,r8[0x0]
800026e4:	30 08       	mov	r8,0
800026e6:	f0 09 18 00 	cp.b	r9,r8
800026ea:	c1 a0       	breq	8000271e <udd_sleep_mode+0x42>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800026ec:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800026f0:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
800026f2:	48 e8       	lddpc	r8,80002728 <udd_sleep_mode+0x4c>
800026f4:	11 9a       	ld.ub	r10,r8[0x1]
800026f6:	2f fa       	sub	r10,-1
800026f8:	b0 9a       	st.b	r8[0x1],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800026fa:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
800026fe:	c1 08       	rjmp	8000271e <udd_sleep_mode+0x42>
		sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
80002700:	48 98       	lddpc	r8,80002724 <udd_sleep_mode+0x48>
80002702:	11 89       	ld.ub	r9,r8[0x0]
80002704:	30 08       	mov	r8,0
80002706:	f0 09 18 00 	cp.b	r9,r8
8000270a:	c0 a1       	brne	8000271e <udd_sleep_mode+0x42>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000270c:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002710:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
80002712:	48 68       	lddpc	r8,80002728 <udd_sleep_mode+0x4c>
80002714:	11 9a       	ld.ub	r10,r8[0x1]
80002716:	20 1a       	sub	r10,1
80002718:	b0 9a       	st.b	r8[0x1],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000271a:	e3 b9 00 00 	mtsr	0x0,r9
		sleepmgr_unlock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
8000271e:	48 28       	lddpc	r8,80002724 <udd_sleep_mode+0x48>
80002720:	b0 8c       	st.b	r8[0x0],r12
}
80002722:	5e fc       	retal	r12
80002724:	00 00       	add	r0,r0
80002726:	07 48       	ld.w	r8,--r3
80002728:	00 00       	add	r0,r0
8000272a:	0a 18       	sub	r8,r5

8000272c <udd_detach>:
	cpu_irq_restore(flags);
}


void udd_detach(void)
{
8000272c:	d4 01       	pushm	lr
	otg_unfreeze_clock();
8000272e:	fe 68 00 00 	mov	r8,-131072
80002732:	f0 f9 08 00 	ld.w	r9,r8[2048]
80002736:	af c9       	cbr	r9,0xe
80002738:	f1 49 08 00 	st.w	r8[2048],r9
	// Detach device from the bus
	udd_detach_device();
8000273c:	70 09       	ld.w	r9,r8[0x0]
8000273e:	a9 a9       	sbr	r9,0x8
80002740:	91 09       	st.w	r8[0x0],r9
	udd_sleep_mode(false);
80002742:	30 0c       	mov	r12,0
80002744:	f0 1f 00 02 	mcall	8000274c <udd_detach+0x20>
}
80002748:	d8 02       	popm	pc
8000274a:	00 00       	add	r0,r0
8000274c:	80 00       	ld.sh	r0,r0[0x0]
8000274e:	26 dc       	sub	r12,109

80002750 <udd_ctrl_init>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002750:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002754:	d3 03       	ssrf	0x10
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI), 
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI 
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
80002756:	30 1a       	mov	r10,1
80002758:	fe 69 02 20 	mov	r9,-130528
8000275c:	93 0a       	st.w	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000275e:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);
	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
80002762:	30 29       	mov	r9,2
80002764:	fe 68 01 60 	mov	r8,-130720
80002768:	91 09       	st.w	r8[0x0],r9

	udd_g_ctrlreq.callback = NULL;
8000276a:	48 59       	lddpc	r9,8000277c <udd_ctrl_init+0x2c>
8000276c:	30 08       	mov	r8,0
8000276e:	93 48       	st.w	r9[0x10],r8
	udd_g_ctrlreq.over_under_run = NULL;
80002770:	93 58       	st.w	r9[0x14],r8
	udd_g_ctrlreq.payload_size = 0;
80002772:	b2 68       	st.h	r9[0xc],r8
	udd_ep_control_state = UDD_EPCTRL_SETUP;
80002774:	48 39       	lddpc	r9,80002780 <udd_ctrl_init+0x30>
80002776:	93 08       	st.w	r9[0x0],r8
}
80002778:	5e fc       	retal	r12
8000277a:	00 00       	add	r0,r0
8000277c:	00 00       	add	r0,r0
8000277e:	0a 00       	add	r0,r5
80002780:	00 00       	add	r0,r0
80002782:	07 4c       	ld.w	r12,--r3

80002784 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
80002784:	30 39       	mov	r9,3
80002786:	48 a8       	lddpc	r8,800027ac <udd_ctrl_send_zlp_in+0x28>
80002788:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000278a:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
8000278e:	d3 03       	ssrf	0x10
	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
80002790:	fe 6a 01 60 	mov	r10,-130720
80002794:	30 19       	mov	r9,1
80002796:	95 09       	st.w	r10[0x0],r9
	udd_enable_in_send_interrupt(0);
80002798:	fe 68 01 f0 	mov	r8,-130576
8000279c:	91 09       	st.w	r8[0x0],r9
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
8000279e:	30 89       	mov	r9,8
800027a0:	95 09       	st.w	r10[0x0],r9
	udd_enable_nak_out_interrupt(0);
800027a2:	91 09       	st.w	r8[0x0],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800027a4:	e3 bb 00 00 	mtsr	0x0,r11
	cpu_irq_restore(flags);
}
800027a8:	5e fc       	retal	r12
800027aa:	00 00       	add	r0,r0
800027ac:	00 00       	add	r0,r0
800027ae:	07 4c       	ld.w	r12,--r3

800027b0 <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
800027b0:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800027b4:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800027b8:	d3 03       	ssrf	0x10
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
	udd_disable_in_send_interrupt(0);
800027ba:	30 1a       	mov	r10,1
800027bc:	fe 69 02 20 	mov	r9,-130528
800027c0:	93 0a       	st.w	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800027c2:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
800027c6:	4c 38       	lddpc	r8,800028d0 <udd_ctrl_in_sent+0x120>
800027c8:	70 08       	ld.w	r8,r8[0x0]
800027ca:	58 38       	cp.w	r8,3
800027cc:	c0 71       	brne	800027da <udd_ctrl_in_sent+0x2a>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
800027ce:	f0 1f 00 42 	mcall	800028d4 <udd_ctrl_in_sent+0x124>
		// Reinitializes control endpoint management
		udd_ctrl_init();
800027d2:	f0 1f 00 42 	mcall	800028d8 <udd_ctrl_in_sent+0x128>
		return;
800027d6:	e3 cd 80 80 	ldm	sp++,r7,pc
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
800027da:	4c 18       	lddpc	r8,800028dc <udd_ctrl_in_sent+0x12c>
800027dc:	90 68       	ld.sh	r8,r8[0xc]
800027de:	4c 19       	lddpc	r9,800028e0 <udd_ctrl_in_sent+0x130>
800027e0:	92 07       	ld.sh	r7,r9[0x0]
800027e2:	f0 07 01 07 	sub	r7,r8,r7
800027e6:	5c 87       	casts.h	r7
	if (0 == nb_remain) {
800027e8:	c3 b1       	brne	8000285e <udd_ctrl_in_sent+0xae>
		// All content of current buffer payload are sent
		if (!udd_ctrl_payload_need_in_zlp) {
800027ea:	4b f9       	lddpc	r9,800028e4 <udd_ctrl_in_sent+0x134>
800027ec:	13 8a       	ld.ub	r10,r9[0x0]
800027ee:	30 09       	mov	r9,0
800027f0:	f2 0a 18 00 	cp.b	r10,r9
800027f4:	c1 21       	brne	80002818 <udd_ctrl_in_sent+0x68>

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
800027f6:	30 49       	mov	r9,4
800027f8:	4b 68       	lddpc	r8,800028d0 <udd_ctrl_in_sent+0x120>
800027fa:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800027fc:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002800:	d3 03       	ssrf	0x10
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
80002802:	31 08       	mov	r8,16
80002804:	fe 6a 01 60 	mov	r10,-130720
80002808:	95 08       	st.w	r10[0x0],r8
	udd_enable_nak_in_interrupt(0);
8000280a:	fe 6a 01 f0 	mov	r10,-130576
8000280e:	95 08       	st.w	r10[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002810:	e3 b9 00 00 	mtsr	0x0,r9
		// All content of current buffer payload are sent
		if (!udd_ctrl_payload_need_in_zlp) {
			// It is the end of data phase, because the last data packet is a short packet
			// then generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
80002814:	e3 cd 80 80 	ldm	sp++,r7,pc
		}
		if ((udd_g_ctrlreq.req.wLength > (udd_ctrl_prev_payload_nb_trans
80002818:	4b 19       	lddpc	r9,800028dc <udd_ctrl_in_sent+0x12c>
8000281a:	92 b9       	ld.uh	r9,r9[0x6]
8000281c:	5c 78       	castu.h	r8
8000281e:	4b 3a       	lddpc	r10,800028e8 <udd_ctrl_in_sent+0x138>
80002820:	94 8a       	ld.uh	r10,r10[0x0]
80002822:	14 08       	add	r8,r10
80002824:	10 39       	cp.w	r9,r8
80002826:	e0 89 00 08 	brgt	80002836 <udd_ctrl_in_sent+0x86>
								+
								udd_g_ctrlreq.
								payload_size))
				|| (!udd_g_ctrlreq.over_under_run)
8000282a:	4a d8       	lddpc	r8,800028dc <udd_ctrl_in_sent+0x12c>
8000282c:	70 5c       	ld.w	r12,r8[0x14]
			// It is the end of data phase, because the last data packet is a short packet
			// then generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		if ((udd_g_ctrlreq.req.wLength > (udd_ctrl_prev_payload_nb_trans
8000282e:	58 0c       	cp.w	r12,0
80002830:	c0 30       	breq	80002836 <udd_ctrl_in_sent+0x86>
80002832:	5d 1c       	icall	r12
80002834:	c0 51       	brne	8000283e <udd_ctrl_in_sent+0x8e>
								udd_g_ctrlreq.
								payload_size))
				|| (!udd_g_ctrlreq.over_under_run)
				|| (!udd_g_ctrlreq.over_under_run())) {
			// Underrun or data packet complette than send zlp on IN (note don't change DataToggle)
			udd_ctrl_payload_need_in_zlp = false;
80002836:	30 09       	mov	r9,0
80002838:	4a b8       	lddpc	r8,800028e4 <udd_ctrl_in_sent+0x134>
8000283a:	b0 89       	st.b	r8[0x0],r9
			// It is the end of data phase, because the last data packet is a short packet
			// then generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		if ((udd_g_ctrlreq.req.wLength > (udd_ctrl_prev_payload_nb_trans
8000283c:	c1 18       	rjmp	8000285e <udd_ctrl_in_sent+0xae>
			udd_ctrl_payload_need_in_zlp = false;
			// nb_remain==0 allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			// Update number of total data sending by previous playlaod buffer
			udd_ctrl_prev_payload_nb_trans +=
8000283e:	4a b9       	lddpc	r9,800028e8 <udd_ctrl_in_sent+0x138>
80002840:	4a 88       	lddpc	r8,800028e0 <udd_ctrl_in_sent+0x130>
80002842:	90 0b       	ld.sh	r11,r8[0x0]
80002844:	92 0a       	ld.sh	r10,r9[0x0]
80002846:	f6 0a 00 0a 	add	r10,r11,r10
8000284a:	b2 0a       	st.h	r9[0x0],r10
					udd_ctrl_payload_nb_trans;
			// Update maangement of current playoad transfer
			udd_ctrl_payload_nb_trans = 0;
8000284c:	30 09       	mov	r9,0
8000284e:	b0 09       	st.h	r8[0x0],r9
			nb_remain = udd_g_ctrlreq.payload_size;
80002850:	4a 38       	lddpc	r8,800028dc <udd_ctrl_in_sent+0x12c>
80002852:	90 67       	ld.sh	r7,r8[0xc]
			// Compute if an IN ZLP must be send after IN data
			udd_ctrl_payload_need_in_zlp =
80002854:	f1 d7 c0 06 	bfextu	r8,r7,0x0,0x6
80002858:	5f 09       	sreq	r9
8000285a:	4a 38       	lddpc	r8,800028e4 <udd_ctrl_in_sent+0x134>
8000285c:	b0 89       	st.b	r8[0x0],r9
	if (nb_remain > USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
8000285e:	4a 08       	lddpc	r8,800028dc <udd_ctrl_in_sent+0x12c>
80002860:	70 2a       	ld.w	r10,r8[0x8]
80002862:	4a 08       	lddpc	r8,800028e0 <udd_ctrl_in_sent+0x130>
80002864:	90 09       	ld.sh	r9,r8[0x0]

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002866:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
8000286a:	d3 03       	ssrf	0x10
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write 
	// and if no OUT ZLP is recevied the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
8000286c:	fe 68 01 30 	mov	r8,-130768
80002870:	70 08       	ld.w	r8,r8[0x0]
80002872:	e2 18 00 02 	andl	r8,0x2,COH
80002876:	c0 91       	brne	80002888 <udd_ctrl_in_sent+0xd8>
80002878:	34 08       	mov	r8,64
8000287a:	f0 07 19 00 	cp.h	r7,r8
8000287e:	f9 b7 0b 40 	movhi	r7,64
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return;	// Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
80002882:	58 07       	cp.w	r7,0
80002884:	c0 91       	brne	80002896 <udd_ctrl_in_sent+0xe6>
80002886:	c1 48       	rjmp	800028ae <udd_ctrl_in_sent+0xfe>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002888:	e3 bb 00 00 	mtsr	0x0,r11
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
8000288c:	30 49       	mov	r9,4
8000288e:	49 18       	lddpc	r8,800028d0 <udd_ctrl_in_sent+0x120>
80002890:	91 09       	st.w	r8[0x0],r9
		return;	// Exit of IN DATA phase
80002892:	e3 cd 80 80 	ldm	sp++,r7,pc
	if (nb_remain > USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80002896:	5c 79       	castu.h	r9
80002898:	f4 09 00 09 	add	r9,r10,r9
8000289c:	fc 18 e0 00 	movh	r8,0xe000
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return;	// Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
800028a0:	13 3a       	ld.ub	r10,r9++
800028a2:	10 ca       	st.b	r8++,r10
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return;	// Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
800028a4:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
800028a8:	ee 0a 19 00 	cp.h	r10,r7
800028ac:	cf a3       	brcs	800028a0 <udd_ctrl_in_sent+0xf0>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_remain;
800028ae:	48 d8       	lddpc	r8,800028e0 <udd_ctrl_in_sent+0x130>
800028b0:	90 09       	ld.sh	r9,r8[0x0]
800028b2:	f2 07 00 07 	add	r7,r9,r7
800028b6:	b0 07       	st.h	r8[0x0],r7

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
800028b8:	30 18       	mov	r8,1
800028ba:	fe 69 01 60 	mov	r9,-130720
800028be:	93 08       	st.w	r9[0x0],r8
	udd_enable_in_send_interrupt(0);
800028c0:	fe 69 01 f0 	mov	r9,-130576
800028c4:	93 08       	st.w	r9[0x0],r8
800028c6:	e3 bb 00 00 	mtsr	0x0,r11
#endif
	barrier();
800028ca:	e3 cd 80 80 	ldm	sp++,r7,pc
800028ce:	00 00       	add	r0,r0
800028d0:	00 00       	add	r0,r0
800028d2:	07 4c       	ld.w	r12,--r3
800028d4:	80 00       	ld.sh	r0,r0[0x0]
800028d6:	25 10       	sub	r0,81
800028d8:	80 00       	ld.sh	r0,r0[0x0]
800028da:	27 50       	sub	r0,117
800028dc:	00 00       	add	r0,r0
800028de:	0a 00       	add	r0,r5
800028e0:	00 00       	add	r0,r0
800028e2:	07 4a       	ld.w	r10,--r3
800028e4:	00 00       	add	r0,r0
800028e6:	07 50       	ld.sh	r0,--r3
800028e8:	00 00       	add	r0,r0
800028ea:	07 14       	ld.sh	r4,r3++

800028ec <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
800028ec:	eb cd 40 e0 	pushm	r5-r7,lr
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;
800028f0:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4

	if (ep > USB_DEVICE_MAX_EP)
800028f4:	30 39       	mov	r9,3
800028f6:	f2 08 18 00 	cp.b	r8,r9
800028fa:	e0 8b 00 88 	brhi	80002a0a <udd_ep_alloc+0x11e>
		return false;
	if (Is_udd_endpoint_enabled(ep))
800028fe:	fe 69 00 00 	mov	r9,-131072
80002902:	72 79       	ld.w	r9,r9[0x1c]
80002904:	30 17       	mov	r7,1
80002906:	ee 08 09 47 	lsl	r7,r7,r8
8000290a:	ef e9 00 09 	and	r9,r7,r9
8000290e:	c7 e1       	brne	80002a0a <udd_ep_alloc+0x11e>
		return false;

	// Bank choise
	switch(bmAttributes&USB_EP_TYPE_MASK) {
80002910:	f3 db c0 02 	bfextu	r9,r11,0x0,0x2
80002914:	58 19       	cp.w	r9,1
80002916:	c7 a5       	brlt	80002a0a <udd_ep_alloc+0x11e>
80002918:	58 29       	cp.w	r9,2
8000291a:	e0 8a 00 06 	brle	80002926 <udd_ep_alloc+0x3a>
8000291e:	58 39       	cp.w	r9,3
80002920:	c7 51       	brne	80002a0a <udd_ep_alloc+0x11e>
80002922:	30 06       	mov	r6,0
80002924:	c0 28       	rjmp	80002928 <udd_ep_alloc+0x3c>
80002926:	30 16       	mov	r6,1
	Assert(MaxEndpointSize < 1024);
	Assert((MaxEndpointSize == 1023) || !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);
		   
	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
80002928:	f0 09 15 02 	lsl	r9,r8,0x2
8000292c:	e0 39 ff 00 	sub	r9,130816
80002930:	72 0e       	ld.w	lr,r9[0x0]
80002932:	5c 7a       	castu.h	r10
80002934:	30 85       	mov	r5,8
80002936:	f4 05 0c 4a 	max	r10,r10,r5
8000293a:	e0 65 04 00 	mov	r5,1024
8000293e:	f4 05 0d 4a 	min	r10,r10,r5
80002942:	a1 7a       	lsl	r10,0x1
80002944:	20 1a       	sub	r10,1
80002946:	f4 0a 12 00 	clz	r10,r10
8000294a:	f9 dc c0 e1 	bfextu	r12,r12,0x7,0x1
8000294e:	ab 7b       	lsl	r11,0xb
80002950:	e2 1b 18 00 	andl	r11,0x1800,COH
80002954:	f7 ec 10 8c 	or	r12,r11,r12<<0x8
80002958:	f4 0b 11 1c 	rsub	r11,r10,28
8000295c:	f9 eb 10 4b 	or	r11,r12,r11<<0x4
80002960:	f7 e6 10 2b 	or	r11,r11,r6<<0x2
80002964:	e2 1b 19 7c 	andl	r11,0x197c,COH
80002968:	1c 9a       	mov	r10,lr
8000296a:	e0 1a e6 83 	andl	r10,0xe683
8000296e:	f7 ea 10 0a 	or	r10,r11,r10
80002972:	93 0a       	st.w	r9[0x0],r10
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
80002974:	5c 87       	casts.h	r7

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
80002976:	30 29       	mov	r9,2
80002978:	f2 08 18 00 	cp.b	r8,r9
8000297c:	e0 8b 00 1d 	brhi	800029b6 <udd_ep_alloc+0xca>
80002980:	fe 6a 01 0c 	mov	r10,-130804
80002984:	30 39       	mov	r9,3
		if (Is_udd_endpoint_enabled(i)) {
80002986:	fe 6c 00 00 	mov	r12,-131072
8000298a:	30 16       	mov	r6,1
8000298c:	78 7e       	ld.w	lr,r12[0x1c]
8000298e:	ec 09 09 4b 	lsl	r11,r6,r9
80002992:	f7 ee 00 0e 	and	lr,r11,lr
80002996:	c0 b0       	breq	800029ac <udd_ep_alloc+0xc0>
			ep_allocated |= 1 << i;
80002998:	f7 e7 10 07 	or	r7,r11,r7
8000299c:	5c 87       	casts.h	r7
			udd_disable_endpoint(i);
8000299e:	78 7e       	ld.w	lr,r12[0x1c]
800029a0:	5c db       	com	r11
800029a2:	1c 6b       	and	r11,lr
800029a4:	99 7b       	st.w	r12[0x1c],r11
			udd_unallocate_memory(i);
800029a6:	74 0b       	ld.w	r11,r10[0x0]
800029a8:	a1 db       	cbr	r11,0x1
800029aa:	95 0b       	st.w	r10[0x0],r11
800029ac:	20 19       	sub	r9,1
800029ae:	20 4a       	sub	r10,4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
800029b0:	f2 08 18 00 	cp.b	r8,r9
800029b4:	ce c3       	brcs	8000298c <udd_ep_alloc+0xa0>
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
800029b6:	0e 9c       	mov	r12,r7
800029b8:	5c 7c       	castu.h	r12
			udd_allocate_memory(i);
			udd_enable_endpoint(i);
800029ba:	fe 6e 00 00 	mov	lr,-131072
800029be:	30 16       	mov	r6,1
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
800029c0:	30 37       	mov	r7,3
		if (ep_allocated & (1 << i)) {
800029c2:	f8 08 08 49 	asr	r9,r12,r8
800029c6:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
800029ca:	c1 80       	breq	800029fa <udd_ep_alloc+0x10e>
			udd_allocate_memory(i);
800029cc:	f0 0b 15 02 	lsl	r11,r8,0x2
800029d0:	fe 65 01 00 	mov	r5,-130816
800029d4:	f6 05 00 09 	add	r9,r11,r5
800029d8:	72 05       	ld.w	r5,r9[0x0]
800029da:	a1 b5       	sbr	r5,0x1
800029dc:	93 05       	st.w	r9[0x0],r5
			udd_enable_endpoint(i);
800029de:	7c 75       	ld.w	r5,lr[0x1c]
800029e0:	ec 08 09 4a 	lsl	r10,r6,r8
800029e4:	0a 4a       	or	r10,r5
800029e6:	9d 7a       	st.w	lr[0x1c],r10
			if (!Is_udd_endpoint_configured(i))
800029e8:	e0 3b fe d0 	sub	r11,130768
800029ec:	76 0a       	ld.w	r10,r11[0x0]
800029ee:	e6 1a 00 04 	andh	r10,0x4,COH
800029f2:	c0 c0       	breq	80002a0a <udd_ep_alloc+0x11e>
				return false;
			udd_enable_endpoint_bank_autoswitch(i);	
800029f4:	72 0a       	ld.w	r10,r9[0x0]
800029f6:	a9 ba       	sbr	r10,0x9
800029f8:	93 0a       	st.w	r9[0x0],r10
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
800029fa:	2f f8       	sub	r8,-1
800029fc:	5c 58       	castu.b	r8
800029fe:	ee 08 18 00 	cp.b	r8,r7
80002a02:	fe 98 ff e0 	brls	800029c2 <udd_ep_alloc+0xd6>
80002a06:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80002a0a:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0

80002a0e <udd_reset_ep_ctrl>:

static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;
	// Reset USB address to 0
	udd_configure_address(0);
80002a0e:	fe 68 00 00 	mov	r8,-131072
80002a12:	70 09       	ld.w	r9,r8[0x0]
80002a14:	e0 19 ff 80 	andl	r9,0xff80
80002a18:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
80002a1a:	70 09       	ld.w	r9,r8[0x0]
80002a1c:	a7 b9       	sbr	r9,0x7
80002a1e:	91 09       	st.w	r8[0x0],r9
	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
80002a20:	fe 69 01 00 	mov	r9,-130816
80002a24:	72 0b       	ld.w	r11,r9[0x0]
80002a26:	30 8c       	mov	r12,8
80002a28:	34 0a       	mov	r10,64
80002a2a:	f4 0c 0c 4a 	max	r10,r10,r12
80002a2e:	e0 6c 04 00 	mov	r12,1024
80002a32:	f4 0c 0d 4a 	min	r10,r10,r12
80002a36:	a1 7a       	lsl	r10,0x1
80002a38:	20 1a       	sub	r10,1
80002a3a:	f4 0a 12 00 	clz	r10,r10
80002a3e:	f4 0a 11 1c 	rsub	r10,r10,28
80002a42:	a5 6a       	lsl	r10,0x4
80002a44:	e2 1a 19 7c 	andl	r10,0x197c,COH
80002a48:	e0 1b e6 83 	andl	r11,0xe683
80002a4c:	16 4a       	or	r10,r11
80002a4e:	93 0a       	st.w	r9[0x0],r10
			USB_EP_TYPE_CONTROL,
			0,
			USB_DEVICE_EP_CTRL_SIZE, AVR32_USBB_UECFG0_EPBK_SINGLE);

	udd_allocate_memory(0);
80002a50:	72 0a       	ld.w	r10,r9[0x0]
80002a52:	a1 ba       	sbr	r10,0x1
80002a54:	93 0a       	st.w	r9[0x0],r10
	udd_enable_endpoint(0);
80002a56:	70 79       	ld.w	r9,r8[0x1c]
80002a58:	a1 a9       	sbr	r9,0x0
80002a5a:	91 79       	st.w	r8[0x1c],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002a5c:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80002a60:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
80002a62:	fe 69 01 f0 	mov	r9,-130576
80002a66:	30 4b       	mov	r11,4
80002a68:	93 0b       	st.w	r9[0x0],r11
	udd_enable_out_received_interrupt(0);
80002a6a:	30 2b       	mov	r11,2
80002a6c:	93 0b       	st.w	r9[0x0],r11
	udd_enable_endpoint_interrupt(0);
80002a6e:	e0 69 10 00 	mov	r9,4096
80002a72:	91 69       	st.w	r8[0x18],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002a74:	e3 ba 00 00 	mtsr	0x0,r10
	cpu_irq_restore(flags);
}
80002a78:	5e fc       	retal	r12
80002a7a:	d7 03       	nop

80002a7c <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
80002a7c:	eb cd 40 c0 	pushm	r6-r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002a80:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80002a84:	d3 03       	ssrf	0x10
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown, 
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
80002a86:	30 1c       	mov	r12,1
80002a88:	f0 1f 00 15 	mcall	80002adc <udd_attach+0x60>
	otg_unfreeze_clock();
80002a8c:	fe 67 00 00 	mov	r7,-131072
80002a90:	ee f8 08 00 	ld.w	r8,r7[2048]
80002a94:	af c8       	cbr	r8,0xe
80002a96:	ef 48 08 00 	st.w	r7[2048],r8
#else
	// Check USB clock because the source can be a PLL
	while( !Is_clock_usable() );
#endif
	// Authorize attach if VBus is present
	udd_attach_device();
80002a9a:	6e 08       	ld.w	r8,r7[0x0]
80002a9c:	a9 c8       	cbr	r8,0x8
80002a9e:	8f 08       	st.w	r7[0x0],r8

	// (RESET_AND_WAKEUP)
	// After the attach and the first USB suspend, the following USB Reset time can be inferior to CPU restart clock time.
	// Thus, the USB Reset state is not detected and endpoint control is not allocated
	// In this case, a Reset is do automatically after attach.
	udc_reset();	// Reset USB Device Stack Core
80002aa0:	f0 1f 00 10 	mcall	80002ae0 <udd_attach+0x64>
	udd_reset_ep_ctrl();	// Reset endpoint control
80002aa4:	f0 1f 00 10 	mcall	80002ae4 <udd_attach+0x68>
	udd_ctrl_init();	// Reset endpoint control management
80002aa8:	f0 1f 00 10 	mcall	80002ae8 <udd_attach+0x6c>

	// Enable USB line events
	udd_enable_reset_interrupt();
80002aac:	30 8b       	mov	r11,8
80002aae:	8f 6b       	st.w	r7[0x18],r11
	udd_enable_suspend_interrupt();
80002ab0:	30 19       	mov	r9,1
80002ab2:	8f 69       	st.w	r7[0x18],r9
	udd_enable_wake_up_interrupt();
80002ab4:	31 08       	mov	r8,16
80002ab6:	8f 68       	st.w	r7[0x18],r8
	udd_enable_sof_interrupt();
80002ab8:	30 4a       	mov	r10,4
80002aba:	8f 6a       	st.w	r7[0x18],r10
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
#endif
	// Reset following interupts flag
	udd_ack_reset();
80002abc:	8f 2b       	st.w	r7[0x8],r11
	udd_ack_sof();
80002abe:	8f 2a       	st.w	r7[0x8],r10
	udd_ack_msof();
80002ac0:	30 2a       	mov	r10,2
80002ac2:	8f 2a       	st.w	r7[0x8],r10

	// The first suspend interrupt must be forced
#if UC3A3
	// With UTMI, the first suspend is detected but must be cleared to reoccur interrupt
	udd_ack_suspend();
80002ac4:	8f 29       	st.w	r7[0x8],r9
#else
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
#endif
	udd_ack_wake_up();
80002ac6:	8f 28       	st.w	r7[0x8],r8
	otg_freeze_clock();
80002ac8:	ee f8 08 00 	ld.w	r8,r7[2048]
80002acc:	af a8       	sbr	r8,0xe
80002ace:	ef 48 08 00 	st.w	r7[2048],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002ad2:	e3 b6 00 00 	mtsr	0x0,r6
	cpu_irq_restore(flags);
}
80002ad6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002ada:	00 00       	add	r0,r0
80002adc:	80 00       	ld.sh	r0,r0[0x0]
80002ade:	26 dc       	sub	r12,109
80002ae0:	80 00       	ld.sh	r0,r0[0x0]
80002ae2:	39 b0       	mov	r0,-101
80002ae4:	80 00       	ld.sh	r0,r0[0x0]
80002ae6:	2a 0e       	sub	lr,-96
80002ae8:	80 00       	ld.sh	r0,r0[0x0]
80002aea:	27 50       	sub	r0,117

80002aec <udd_enable>:
	return true;
}


void udd_enable(void)
{
80002aec:	eb cd 40 c0 	pushm	r6-r7,lr
	irqflags_t flags;
	sysclk_enable_usb();
80002af0:	f0 1f 00 39 	mcall	80002bd4 <udd_enable+0xe8>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002af4:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80002af8:	d3 03       	ssrf	0x10

	flags = cpu_irq_save();

	//** Enable USB hardware
	otg_disable();
80002afa:	fe 67 00 00 	mov	r7,-131072
80002afe:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b02:	af d8       	cbr	r8,0xf
80002b04:	ef 48 08 00 	st.w	r7[2048],r8
	(void)Is_otg_enabled();
80002b08:	ee f8 08 00 	ld.w	r8,r7[2048]
	// Check UID pin state before enter in USB device mode
	if (!Is_otg_id_device())
		return false;
#else
	// Here, only the Device mode is possible, then link USBB interrupt to UDD interrupt
	irq_register_handler(udd_interrupt, AVR32_USBB_IRQ, UDD_USB_INT_LEVEL);
80002b0c:	30 0a       	mov	r10,0
80002b0e:	e0 6b 02 20 	mov	r11,544
80002b12:	4b 2c       	lddpc	r12,80002bd8 <udd_enable+0xec>
80002b14:	f0 1f 00 32 	mcall	80002bdc <udd_enable+0xf0>
	otg_force_device_mode();
80002b18:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b1c:	b9 b8       	sbr	r8,0x19
80002b1e:	ef 48 08 00 	st.w	r7[2048],r8
80002b22:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b26:	b9 c8       	cbr	r8,0x18
80002b28:	ef 48 08 00 	st.w	r7[2048],r8
#endif
	otg_disable_pad();
80002b2c:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b30:	ad c8       	cbr	r8,0xc
80002b32:	ef 48 08 00 	st.w	r7[2048],r8
	otg_enable_pad();
80002b36:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b3a:	ad a8       	sbr	r8,0xc
80002b3c:	ef 48 08 00 	st.w	r7[2048],r8
	otg_enable();
80002b40:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b44:	af b8       	sbr	r8,0xf
80002b46:	ef 48 08 00 	st.w	r7[2048],r8
	otg_unfreeze_clock();
80002b4a:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b4e:	af c8       	cbr	r8,0xe
80002b50:	ef 48 08 00 	st.w	r7[2048],r8
	(void)Is_otg_clock_frozen();
80002b54:	ee f8 08 00 	ld.w	r8,r7[2048]

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80002b58:	4a 28       	lddpc	r8,80002be0 <udd_enable+0xf4>
80002b5a:	70 0a       	ld.w	r10,r8[0x0]
80002b5c:	30 09       	mov	r9,0
		udd_ep_job[i].stall_requested = false;
80002b5e:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
80002b62:	f5 d9 d3 81 	bfins	r10,r9,0x1c,0x1
80002b66:	91 0a       	st.w	r8[0x0],r10

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80002b68:	70 4a       	ld.w	r10,r8[0x10]
		udd_ep_job[i].stall_requested = false;
80002b6a:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
80002b6e:	f5 d9 d3 81 	bfins	r10,r9,0x1c,0x1
80002b72:	91 4a       	st.w	r8[0x10],r10

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80002b74:	70 8a       	ld.w	r10,r8[0x20]
		udd_ep_job[i].stall_requested = false;
80002b76:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
80002b7a:	f5 d9 d3 81 	bfins	r10,r9,0x1c,0x1
80002b7e:	91 8a       	st.w	r8[0x20],r10

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
80002b80:	6e 08       	ld.w	r8,r7[0x0]
80002b82:	ad c8       	cbr	r8,0xc
80002b84:	8f 08       	st.w	r7[0x0],r8
#  ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
#  else
	udd_high_speed_disable();
80002b86:	6e 08       	ld.w	r8,r7[0x0]
80002b88:	e8 18 0c 00 	orl	r8,0xc00
80002b8c:	8f 08       	st.w	r7[0x0],r8
#  endif
#endif
	udd_enable_vbus_interrupt();
80002b8e:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b92:	a1 b8       	sbr	r8,0x1
80002b94:	ef 48 08 00 	st.w	r7[2048],r8
	otg_freeze_clock();
80002b98:	ee f8 08 00 	ld.w	r8,r7[2048]
80002b9c:	af a8       	sbr	r8,0xe
80002b9e:	ef 48 08 00 	st.w	r7[2048],r8
	// Always authorize asynchrone USB interrupts to exit of sleep mode
	AVR32_PM.AWEN.usb_waken = 1;
80002ba2:	fe 78 0c 00 	mov	r8,-62464
80002ba6:	f0 fa 01 44 	ld.w	r10,r8[324]
80002baa:	30 1b       	mov	r11,1
80002bac:	f5 db d0 01 	bfins	r10,r11,0x0,0x1
80002bb0:	f1 4a 01 44 	st.w	r8[324],r10

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
80002bb4:	48 c8       	lddpc	r8,80002be4 <udd_enable+0xf8>
80002bb6:	b0 89       	st.b	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002bb8:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002bbc:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
80002bbe:	48 b8       	lddpc	r8,80002be8 <udd_enable+0xfc>
80002bc0:	11 ba       	ld.ub	r10,r8[0x3]
80002bc2:	2f fa       	sub	r10,-1
80002bc4:	b0 ba       	st.b	r8[0x3],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002bc6:	e3 b9 00 00 	mtsr	0x0,r9
80002bca:	e3 b6 00 00 	mtsr	0x0,r6
	sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_SUSPEND);
#endif

	cpu_irq_restore(flags);
}
80002bce:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002bd2:	00 00       	add	r0,r0
80002bd4:	80 00       	ld.sh	r0,r0[0x0]
80002bd6:	32 94       	mov	r4,41
80002bd8:	80 00       	ld.sh	r0,r0[0x0]
80002bda:	2b ec       	sub	r12,-66
80002bdc:	80 00       	ld.sh	r0,r0[0x0]
80002bde:	22 0c       	sub	r12,32
80002be0:	00 00       	add	r0,r0
80002be2:	07 18       	ld.sh	r8,r3++
80002be4:	00 00       	add	r0,r0
80002be6:	07 48       	ld.w	r8,--r3
80002be8:	00 00       	add	r0,r0
80002bea:	0a 18       	sub	r8,r5

80002bec <udd_interrupt>:
#define AVR32_USBB_IRQ_GROUP AVR32_USB_IRQ_GROUP
#endif
#endif
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#endif
{
80002bec:	eb cd 40 fc 	pushm	r2-r7,lr
	if (Is_udd_sof()) {
80002bf0:	fe 68 00 00 	mov	r8,-131072
80002bf4:	70 18       	ld.w	r8,r8[0x4]
80002bf6:	e2 18 00 04 	andl	r8,0x4,COH
80002bfa:	c0 f0       	breq	80002c18 <udd_interrupt+0x2c>
		udd_ack_sof();
80002bfc:	fe 68 00 00 	mov	r8,-131072
80002c00:	30 49       	mov	r9,4
80002c02:	91 29       	st.w	r8[0x8],r9
		if (Is_udd_full_speed_mode()) {
80002c04:	f0 f8 08 04 	ld.w	r8,r8[2052]
80002c08:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
80002c0c:	e0 81 02 ce 	brne	800031a8 <udd_interrupt+0x5bc>
		udc_sof_notify();
80002c10:	f0 1f 01 6f 	mcall	800031cc <udd_interrupt+0x5e0>
80002c14:	e0 8f 02 ca 	bral	800031a8 <udd_interrupt+0x5bc>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_end;
	}
	if (Is_udd_msof()) {
80002c18:	fe 68 00 00 	mov	r8,-131072
80002c1c:	70 18       	ld.w	r8,r8[0x4]
80002c1e:	e2 18 00 02 	andl	r8,0x2,COH
80002c22:	c0 90       	breq	80002c34 <udd_interrupt+0x48>
		udd_ack_msof();
80002c24:	30 29       	mov	r9,2
80002c26:	fe 68 00 00 	mov	r8,-131072
80002c2a:	91 29       	st.w	r8[0x8],r9
		udc_sof_notify();
80002c2c:	f0 1f 01 68 	mcall	800031cc <udd_interrupt+0x5e0>
		goto udd_interrupt_end;
80002c30:	e0 8f 02 bc 	bral	800031a8 <udd_interrupt+0x5bc>


static bool udd_ctrl_interrupt(void)
{

	if (!Is_udd_endpoint_interrupt(0))
80002c34:	fe 68 00 00 	mov	r8,-131072
80002c38:	70 18       	ld.w	r8,r8[0x4]
80002c3a:	e2 18 10 00 	andl	r8,0x1000,COH
80002c3e:	e0 80 01 6f 	breq	80002f1c <udd_interrupt+0x330>
		return false;	// No interrupt events on control endpoint

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
80002c42:	fe 68 02 20 	mov	r8,-130528
80002c46:	31 09       	mov	r9,16
80002c48:	91 09       	st.w	r8[0x0],r9
	udd_disable_nak_out_interrupt(0);
80002c4a:	30 89       	mov	r9,8
80002c4c:	91 09       	st.w	r8[0x0],r9


	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
80002c4e:	fe 68 01 30 	mov	r8,-130768
80002c52:	70 08       	ld.w	r8,r8[0x0]
80002c54:	e2 18 00 04 	andl	r8,0x4,COH
80002c58:	e0 80 00 87 	breq	80002d66 <udd_interrupt+0x17a>
static void udd_ctrl_setup_received(void)
{
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
80002c5c:	fe f8 05 74 	ld.w	r8,pc[1396]
80002c60:	70 08       	ld.w	r8,r8[0x0]
80002c62:	58 08       	cp.w	r8,0
80002c64:	c0 50       	breq	80002c6e <udd_interrupt+0x82>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
80002c66:	f0 1f 01 5c 	mcall	800031d4 <udd_interrupt+0x5e8>
		// Reinitializes control endpoint management
		udd_ctrl_init();
80002c6a:	f0 1f 01 5c 	mcall	800031d8 <udd_interrupt+0x5ec>
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
80002c6e:	fe 68 01 30 	mov	r8,-130768
80002c72:	70 08       	ld.w	r8,r8[0x0]
80002c74:	f1 d8 c2 8b 	bfextu	r8,r8,0x14,0xb
80002c78:	58 88       	cp.w	r8,8
80002c7a:	c0 90       	breq	80002c8c <udd_interrupt+0xa0>
		udd_ctrl_stall_data();
80002c7c:	f0 1f 01 58 	mcall	800031dc <udd_interrupt+0x5f0>
		udd_ack_setup_received(0);
80002c80:	30 49       	mov	r9,4
80002c82:	fe 68 01 60 	mov	r8,-130720
80002c86:	91 09       	st.w	r8[0x0],r9
80002c88:	e0 8f 02 90 	bral	800031a8 <udd_interrupt+0x5bc>
80002c8c:	fc 18 e0 00 	movh	r8,0xe000
		return;	// Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
80002c90:	fe fc 05 50 	ld.w	r12,pc[1360]
80002c94:	fc 1b 20 00 	movh	r11,0x2000
80002c98:	f0 0c 00 09 	add	r9,r8,r12
80002c9c:	11 3a       	ld.ub	r10,r8++
80002c9e:	f2 0b 0b 0a 	st.b	r9[r11],r10
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return;	// Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
80002ca2:	30 8a       	mov	r10,8
80002ca4:	ea 1a e0 00 	orh	r10,0xe000
80002ca8:	14 38       	cp.w	r8,r10
80002caa:	cf 71       	brne	80002c98 <udd_interrupt+0xac>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
80002cac:	fe f8 05 34 	ld.w	r8,pc[1332]
80002cb0:	90 19       	ld.sh	r9,r8[0x2]
80002cb2:	5c c9       	swap.bh	r9
80002cb4:	b0 19       	st.h	r8[0x2],r9
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
80002cb6:	90 29       	ld.sh	r9,r8[0x4]
80002cb8:	5c c9       	swap.bh	r9
80002cba:	b0 29       	st.h	r8[0x4],r9
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
80002cbc:	90 39       	ld.sh	r9,r8[0x6]
80002cbe:	5c c9       	swap.bh	r9
80002cc0:	b0 39       	st.h	r8[0x6],r9

	// Decode setup request
	if (udc_process_setup() == false) {
80002cc2:	f0 1f 01 49 	mcall	800031e4 <udd_interrupt+0x5f8>
80002cc6:	c0 91       	brne	80002cd8 <udd_interrupt+0xec>
		// Setup request unknow then stall it
		udd_ctrl_stall_data();
80002cc8:	f0 1f 01 45 	mcall	800031dc <udd_interrupt+0x5f0>
		udd_ack_setup_received(0);
80002ccc:	30 49       	mov	r9,4
80002cce:	fe 68 01 60 	mov	r8,-130720
80002cd2:	91 09       	st.w	r8[0x0],r9
80002cd4:	e0 8f 02 6a 	bral	800031a8 <udd_interrupt+0x5bc>
		return;
	}
	udd_ack_setup_received(0);
80002cd8:	30 49       	mov	r9,4
80002cda:	fe 68 01 60 	mov	r8,-130720
80002cde:	91 09       	st.w	r8[0x0],r9

	if (Udd_setup_is_in()) {
80002ce0:	fe f8 05 00 	ld.w	r8,pc[1280]
80002ce4:	11 89       	ld.ub	r9,r8[0x0]
80002ce6:	30 08       	mov	r8,0
80002ce8:	f0 09 18 00 	cp.b	r9,r8
80002cec:	c1 94       	brge	80002d1e <udd_interrupt+0x132>
		// Compute if an IN ZLP must be send after IN data
		udd_ctrl_payload_need_in_zlp =
80002cee:	fe f8 04 f2 	ld.w	r8,pc[1266]
80002cf2:	90 e8       	ld.uh	r8,r8[0xc]
80002cf4:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80002cf8:	5f 09       	sreq	r9
80002cfa:	fe f8 04 ee 	ld.w	r8,pc[1262]
80002cfe:	b0 89       	st.b	r8[0x0],r9
				((udd_g_ctrlreq.payload_size %
						USB_DEVICE_EP_CTRL_SIZE) == 0);
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80002d00:	30 08       	mov	r8,0
80002d02:	fe f9 04 ea 	ld.w	r9,pc[1258]
80002d06:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80002d08:	fe f9 04 e8 	ld.w	r9,pc[1256]
80002d0c:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
80002d0e:	30 29       	mov	r9,2
80002d10:	fe f8 04 c0 	ld.w	r8,pc[1216]
80002d14:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_in_sent();	// Send first data transfer
80002d16:	f0 1f 01 38 	mcall	800031f4 <udd_interrupt+0x608>
80002d1a:	e0 8f 02 47 	bral	800031a8 <udd_interrupt+0x5bc>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
80002d1e:	fe f8 04 c2 	ld.w	r8,pc[1218]
80002d22:	90 39       	ld.sh	r9,r8[0x6]
80002d24:	30 08       	mov	r8,0
80002d26:	f0 09 19 00 	cp.h	r9,r8
80002d2a:	c0 51       	brne	80002d34 <udd_interrupt+0x148>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
80002d2c:	f0 1f 01 33 	mcall	800031f8 <udd_interrupt+0x60c>
80002d30:	e0 8f 02 3c 	bral	800031a8 <udd_interrupt+0x5bc>
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80002d34:	30 08       	mov	r8,0
80002d36:	fe f9 04 b6 	ld.w	r9,pc[1206]
80002d3a:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80002d3c:	fe f9 04 b4 	ld.w	r9,pc[1204]
80002d40:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
80002d42:	30 19       	mov	r9,1
80002d44:	fe f8 04 8c 	ld.w	r8,pc[1164]
80002d48:	91 09       	st.w	r8[0x0],r9
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
80002d4a:	31 08       	mov	r8,16
80002d4c:	fe 69 01 60 	mov	r9,-130720
80002d50:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002d52:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002d56:	d3 03       	ssrf	0x10
		flags = cpu_irq_save();
		udd_enable_nak_in_interrupt(0);
80002d58:	fe 6a 01 f0 	mov	r10,-130576
80002d5c:	95 08       	st.w	r10[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002d5e:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
80002d62:	e0 8f 02 23 	bral	800031a8 <udd_interrupt+0x5bc>
	if (Is_udd_setup_received(0)) {
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
80002d66:	fe 68 01 30 	mov	r8,-130768
80002d6a:	70 08       	ld.w	r8,r8[0x0]
80002d6c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002d70:	c0 b0       	breq	80002d86 <udd_interrupt+0x19a>
80002d72:	fe 68 01 c0 	mov	r8,-130624
80002d76:	70 08       	ld.w	r8,r8[0x0]
80002d78:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002d7c:	c0 50       	breq	80002d86 <udd_interrupt+0x19a>
		// IN packet sent
		udd_ctrl_in_sent();
80002d7e:	f0 1f 01 1e 	mcall	800031f4 <udd_interrupt+0x608>
80002d82:	e0 8f 02 13 	bral	800031a8 <udd_interrupt+0x5bc>
		return true;
	}
	if (Is_udd_out_received(0)) {
80002d86:	fe 68 01 30 	mov	r8,-130768
80002d8a:	70 08       	ld.w	r8,r8[0x0]
80002d8c:	e2 18 00 02 	andl	r8,0x2,COH
80002d90:	e0 80 00 a3 	breq	80002ed6 <udd_interrupt+0x2ea>
{
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
80002d94:	fe f8 04 3c 	ld.w	r8,pc[1084]
80002d98:	70 08       	ld.w	r8,r8[0x0]
80002d9a:	58 18       	cp.w	r8,1
80002d9c:	c1 10       	breq	80002dbe <udd_interrupt+0x1d2>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
80002d9e:	58 28       	cp.w	r8,2
80002da0:	5f 09       	sreq	r9
80002da2:	58 48       	cp.w	r8,4
80002da4:	5f 08       	sreq	r8
80002da6:	f3 e8 10 08 	or	r8,r9,r8
80002daa:	c0 40       	breq	80002db2 <udd_interrupt+0x1c6>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quiclky,
			// - or ZLP OUT received normaly.
			udd_ctrl_endofrequest();
80002dac:	f0 1f 01 0a 	mcall	800031d4 <udd_interrupt+0x5e8>
80002db0:	c0 38       	rjmp	80002db6 <udd_interrupt+0x1ca>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
80002db2:	f0 1f 01 0b 	mcall	800031dc <udd_interrupt+0x5f0>
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
80002db6:	f0 1f 01 09 	mcall	800031d8 <udd_interrupt+0x5ec>
80002dba:	e0 8f 01 f7 	bral	800031a8 <udd_interrupt+0x5bc>
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
80002dbe:	fe 68 01 30 	mov	r8,-130768
80002dc2:	70 0b       	ld.w	r11,r8[0x0]
80002dc4:	f7 db c2 8b 	bfextu	r11,r11,0x14,0xb
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
80002dc8:	fe f8 04 18 	ld.w	r8,pc[1048]
80002dcc:	90 69       	ld.sh	r9,r8[0xc]
80002dce:	fe f8 04 22 	ld.w	r8,pc[1058]
80002dd2:	90 08       	ld.sh	r8,r8[0x0]
80002dd4:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
80002dd8:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80002ddc:	f6 0a 00 0a 	add	r10,r11,r10
80002de0:	14 3c       	cp.w	r12,r10
80002de2:	c0 44       	brge	80002dea <udd_interrupt+0x1fe>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
80002de4:	10 19       	sub	r9,r8
80002de6:	f7 d9 b0 10 	bfexts	r11,r9,0x0,0x10
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80002dea:	fe f9 03 f6 	ld.w	r9,pc[1014]
80002dee:	72 29       	ld.w	r9,r9[0x8]
	for (i = 0; i < nb_data; i++) {
80002df0:	58 0b       	cp.w	r11,0
80002df2:	e0 80 01 e2 	breq	800031b6 <udd_interrupt+0x5ca>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80002df6:	5c 78       	castu.h	r8
80002df8:	10 09       	add	r9,r8
80002dfa:	fc 18 e0 00 	movh	r8,0xe000
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
80002dfe:	11 3a       	ld.ub	r10,r8++
80002e00:	12 ca       	st.b	r9++,r10
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
80002e02:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80002e06:	f6 0a 19 00 	cp.h	r10,r11
80002e0a:	cf a3       	brcs	80002dfe <udd_interrupt+0x212>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
80002e0c:	fe f9 03 e4 	ld.w	r9,pc[996]
80002e10:	92 08       	ld.sh	r8,r9[0x0]
80002e12:	16 08       	add	r8,r11
80002e14:	5c 88       	casts.h	r8
80002e16:	b2 08       	st.h	r9[0x0],r8

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
80002e18:	34 09       	mov	r9,64
80002e1a:	f2 0b 19 00 	cp.h	r11,r9
80002e1e:	c0 e1       	brne	80002e3a <udd_interrupt+0x24e>
80002e20:	fe f9 03 c0 	ld.w	r9,pc[960]
80002e24:	92 ba       	ld.uh	r10,r9[0x6]
80002e26:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
80002e2a:	fe f9 03 c2 	ld.w	r9,pc[962]
80002e2e:	92 89       	ld.uh	r9,r9[0x0]
80002e30:	f6 09 00 09 	add	r9,r11,r9
80002e34:	12 3a       	cp.w	r10,r9
80002e36:	e0 89 00 1a 	brgt	80002e6a <udd_interrupt+0x27e>
							udd_ctrl_payload_nb_trans)))
	{
		// End of reception because it is a short packet
		// Before send ZLP, call intermediat calback 
		// in case of data receiv generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
80002e3a:	fe f9 03 a6 	ld.w	r9,pc[934]
80002e3e:	b2 68       	st.h	r9[0xc],r8
		if (NULL != udd_g_ctrlreq.over_under_run) {
80002e40:	72 5c       	ld.w	r12,r9[0x14]
80002e42:	58 0c       	cp.w	r12,0
80002e44:	c0 b0       	breq	80002e5a <udd_interrupt+0x26e>
			if (!udd_g_ctrlreq.over_under_run()) {
80002e46:	5d 1c       	icall	r12
80002e48:	c0 91       	brne	80002e5a <udd_interrupt+0x26e>
				// Stall ZLP
				udd_ctrl_stall_data();
80002e4a:	f0 1f 00 e5 	mcall	800031dc <udd_interrupt+0x5f0>
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
80002e4e:	30 29       	mov	r9,2
80002e50:	fe 68 01 60 	mov	r8,-130720
80002e54:	91 09       	st.w	r8[0x0],r9
80002e56:	e0 8f 01 a9 	bral	800031a8 <udd_interrupt+0x5bc>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
80002e5a:	30 29       	mov	r9,2
80002e5c:	fe 68 01 60 	mov	r8,-130720
80002e60:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_send_zlp_in();
80002e62:	f0 1f 00 e6 	mcall	800031f8 <udd_interrupt+0x60c>
80002e66:	e0 8f 01 a1 	bral	800031a8 <udd_interrupt+0x5bc>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
80002e6a:	fe f9 03 76 	ld.w	r9,pc[886]
80002e6e:	92 69       	ld.sh	r9,r9[0xc]
80002e70:	f0 09 19 00 	cp.h	r9,r8
80002e74:	c2 21       	brne	80002eb8 <udd_interrupt+0x2cc>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
80002e76:	fe f8 03 6a 	ld.w	r8,pc[874]
80002e7a:	70 5c       	ld.w	r12,r8[0x14]
80002e7c:	58 0c       	cp.w	r12,0
80002e7e:	c0 91       	brne	80002e90 <udd_interrupt+0x2a4>
			// No callback availabled to request a new payload buffer
			udd_ctrl_stall_data();
80002e80:	f0 1f 00 d7 	mcall	800031dc <udd_interrupt+0x5f0>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80002e84:	30 29       	mov	r9,2
80002e86:	fe 68 01 60 	mov	r8,-130720
80002e8a:	91 09       	st.w	r8[0x0],r9
80002e8c:	e0 8f 01 8e 	bral	800031a8 <udd_interrupt+0x5bc>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
80002e90:	5d 1c       	icall	r12
80002e92:	c0 81       	brne	80002ea2 <udd_interrupt+0x2b6>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
80002e94:	f0 1f 00 d2 	mcall	800031dc <udd_interrupt+0x5f0>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80002e98:	30 29       	mov	r9,2
80002e9a:	fe 68 01 60 	mov	r8,-130720
80002e9e:	91 09       	st.w	r8[0x0],r9
80002ea0:	c8 49       	rjmp	800031a8 <udd_interrupt+0x5bc>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
80002ea2:	fe f9 03 4a 	ld.w	r9,pc[842]
80002ea6:	fe f8 03 4a 	ld.w	r8,pc[842]
80002eaa:	90 0b       	ld.sh	r11,r8[0x0]
80002eac:	92 0a       	ld.sh	r10,r9[0x0]
80002eae:	f6 0a 00 0a 	add	r10,r11,r10
80002eb2:	b2 0a       	st.h	r9[0x0],r10
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
80002eb4:	30 09       	mov	r9,0
80002eb6:	b0 09       	st.h	r8[0x0],r9
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
80002eb8:	fe 69 01 60 	mov	r9,-130720
80002ebc:	30 28       	mov	r8,2
80002ebe:	93 08       	st.w	r9[0x0],r8
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
80002ec0:	31 08       	mov	r8,16
80002ec2:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002ec4:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002ec8:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_nak_in_interrupt(0);
80002eca:	fe 6a 01 f0 	mov	r10,-130576
80002ece:	95 08       	st.w	r10[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002ed0:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
80002ed4:	c6 a9       	rjmp	800031a8 <udd_interrupt+0x5bc>
	if (Is_udd_out_received(0)) {
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_nak_out(0)) {
80002ed6:	fe 68 01 30 	mov	r8,-130768
80002eda:	70 08       	ld.w	r8,r8[0x0]
80002edc:	e2 18 00 08 	andl	r8,0x8,COH
80002ee0:	c1 80       	breq	80002f10 <udd_interrupt+0x324>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
80002ee2:	30 89       	mov	r9,8
80002ee4:	fe 68 01 60 	mov	r8,-130720
80002ee8:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
80002eea:	fe 68 01 30 	mov	r8,-130768
80002eee:	70 08       	ld.w	r8,r8[0x0]
80002ef0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002ef4:	e0 81 01 5a 	brne	800031a8 <udd_interrupt+0x5bc>
		return;	// overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
80002ef8:	fe f8 02 d8 	ld.w	r8,pc[728]
80002efc:	70 08       	ld.w	r8,r8[0x0]
80002efe:	58 38       	cp.w	r8,3
80002f00:	e0 81 01 54 	brne	800031a8 <udd_interrupt+0x5bc>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
80002f04:	e8 69 00 00 	mov	r9,524288
80002f08:	fe 68 01 f0 	mov	r8,-130576
80002f0c:	91 09       	st.w	r8[0x0],r9
80002f0e:	c4 d9       	rjmp	800031a8 <udd_interrupt+0x5bc>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
80002f10:	fe 68 01 30 	mov	r8,-130768
80002f14:	70 08       	ld.w	r8,r8[0x0]
80002f16:	e2 18 00 10 	andl	r8,0x10,COH
80002f1a:	c0 e1       	brne	80002f36 <udd_interrupt+0x34a>
80002f1c:	fe f7 02 e0 	ld.w	r7,pc[736]
80002f20:	0e 9a       	mov	r10,r7
80002f22:	fe 69 01 34 	mov	r9,-130764
80002f26:	30 0b       	mov	r11,0
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002f28:	fe 66 00 00 	mov	r6,-131072
80002f2c:	fc 14 02 00 	movh	r4,0x200
			// Call callback to signal end of transfer
			udd_ep_finish_job(ptr_job, false);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80002f30:	e0 63 10 00 	mov	r3,4096
80002f34:	c1 e8       	rjmp	80002f70 <udd_interrupt+0x384>
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
		// Underflow on IN packet
		udd_ack_nak_in(0);
80002f36:	31 09       	mov	r9,16
80002f38:	fe 68 01 60 	mov	r8,-130720
80002f3c:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
80002f3e:	fe 68 01 30 	mov	r8,-130768
80002f42:	70 08       	ld.w	r8,r8[0x0]
80002f44:	e2 18 00 02 	andl	r8,0x2,COH
80002f48:	e0 81 01 30 	brne	800031a8 <udd_interrupt+0x5bc>
		return;	// underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
80002f4c:	fe f8 02 84 	ld.w	r8,pc[644]
80002f50:	70 08       	ld.w	r8,r8[0x0]
80002f52:	58 18       	cp.w	r8,1
80002f54:	c0 41       	brne	80002f5c <udd_interrupt+0x370>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
80002f56:	f0 1f 00 a9 	mcall	800031f8 <udd_interrupt+0x60c>
80002f5a:	c2 79       	rjmp	800031a8 <udd_interrupt+0x5bc>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
80002f5c:	58 48       	cp.w	r8,4
80002f5e:	e0 81 01 25 	brne	800031a8 <udd_interrupt+0x5bc>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
80002f62:	e8 69 00 00 	mov	r9,524288
80002f66:	fe 68 01 f0 	mov	r8,-130576
80002f6a:	91 09       	st.w	r8[0x0],r9
80002f6c:	c1 e9       	rjmp	800031a8 <udd_interrupt+0x5bc>
80002f6e:	10 9b       	mov	r11,r8
80002f70:	f6 c8 ff ff 	sub	r8,r11,-1
80002f74:	14 9c       	mov	r12,r10
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002f76:	6c 45       	ld.w	r5,r6[0x10]
80002f78:	10 9e       	mov	lr,r8
80002f7a:	e8 0b 09 4b 	lsl	r11,r4,r11
80002f7e:	f7 e5 00 05 	and	r5,r11,r5
80002f82:	c4 b0       	breq	80003018 <udd_interrupt+0x42c>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
80002f84:	6c 15       	ld.w	r5,r6[0x4]
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002f86:	f7 e5 00 05 	and	r5,r11,r5
80002f8a:	c4 70       	breq	80003018 <udd_interrupt+0x42c>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			udd_disable_endpoint_dma_interrupt(ep);
80002f8c:	fe 69 00 00 	mov	r9,-131072
80002f90:	93 5b       	st.w	r9[0x14],r11
			if (ptr_job->b_raise_dma) {
80002f92:	74 09       	ld.w	r9,r10[0x0]
80002f94:	e6 19 20 00 	andh	r9,0x2000,COH
80002f98:	c0 50       	breq	80002fa2 <udd_interrupt+0x3b6>
				// In case of manual raise DMA interrupt
				// to process a ZLP packet
				udd_raise_endpoint_dma_interrupt(ep);
80002f9a:	fe 69 00 00 	mov	r9,-131072
80002f9e:	93 3b       	st.w	r9[0xc],r11
80002fa0:	c0 a8       	rjmp	80002fb4 <udd_interrupt+0x3c8>
			}else{
				// Save number of data no transfered
				nb_remaining = (udd_endpoint_dma_get_status(ep) &
80002fa2:	f0 09 15 04 	lsl	r9,r8,0x4
80002fa6:	e0 39 fd 00 	sub	r9,130304
80002faa:	72 39       	ld.w	r9,r9[0xc]
						AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_MASK)
						>> AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_OFFSET;
				// Update number of data transfered
				ptr_job->buf_size -= nb_remaining;
80002fac:	b1 89       	lsr	r9,0x10
80002fae:	74 2a       	ld.w	r10,r10[0x8]
80002fb0:	12 1a       	sub	r10,r9
80002fb2:	99 2a       	st.w	r12[0x8],r10
			}

			if (Is_udd_endpoint_in(ep)) {
80002fb4:	a3 68       	lsl	r8,0x2
80002fb6:	fe 6b 01 00 	mov	r11,-130816
80002fba:	f0 0b 00 09 	add	r9,r8,r11
80002fbe:	72 09       	ld.w	r9,r9[0x0]
80002fc0:	e2 19 01 00 	andl	r9,0x100,COH
80002fc4:	c2 60       	breq	80003010 <udd_interrupt+0x424>
				// Transfer complet on IN
				if (ptr_job->b_send_zlp) {
80002fc6:	78 09       	ld.w	r9,r12[0x0]
80002fc8:	e6 19 40 00 	andh	r9,0x4000,COH
80002fcc:	c2 20       	breq	80003010 <udd_interrupt+0x424>
					// Need to send a ZLP after data transfer
					// enable interrupt to wait a free bank to sent ZLP
					udd_ack_in_send(ep);
80002fce:	fe 6a 01 60 	mov	r10,-130720
80002fd2:	f0 0a 00 09 	add	r9,r8,r10
80002fd6:	30 1a       	mov	r10,1
80002fd8:	93 0a       	st.w	r9[0x0],r10
					if (Is_udd_write_enabled(ep)) {
80002fda:	fe 6b 01 30 	mov	r11,-130768
80002fde:	f0 0b 00 09 	add	r9,r8,r11
80002fe2:	72 0a       	ld.w	r10,r9[0x0]
						udd_raise_in_send(ep);
80002fe4:	fe 6b 01 90 	mov	r11,-130672
80002fe8:	f0 0b 00 09 	add	r9,r8,r11
				// Transfer complet on IN
				if (ptr_job->b_send_zlp) {
					// Need to send a ZLP after data transfer
					// enable interrupt to wait a free bank to sent ZLP
					udd_ack_in_send(ep);
					if (Is_udd_write_enabled(ep)) {
80002fec:	e6 1a 00 01 	andh	r10,0x1,COH
						udd_raise_in_send(ep);
80002ff0:	f9 ba 01 01 	movne	r10,1
80002ff4:	f3 fa 1a 00 	st.wne	r9[0x0],r10
					}
					udd_enable_in_send_interrupt(ep);
80002ff8:	e0 38 fe 10 	sub	r8,130576
80002ffc:	30 19       	mov	r9,1
80002ffe:	91 09       	st.w	r8[0x0],r9
					udd_enable_endpoint_interrupt(ep);
80003000:	e0 68 10 00 	mov	r8,4096
80003004:	f0 0e 09 4e 	lsl	lr,r8,lr
80003008:	fe 68 00 00 	mov	r8,-131072
8000300c:	91 6e       	st.w	r8[0x18],lr
8000300e:	cc d8       	rjmp	800031a8 <udd_interrupt+0x5bc>
					return true;
				}
			}
			// Call callback to signal end of transfer
			udd_ep_finish_job(ptr_job, false);
80003010:	30 0b       	mov	r11,0
80003012:	f0 1f 00 7c 	mcall	80003200 <udd_interrupt+0x614>
80003016:	cc 98       	rjmp	800031a8 <udd_interrupt+0x5bc>
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80003018:	6c 4b       	ld.w	r11,r6[0x10]
8000301a:	e6 0e 09 4e 	lsl	lr,r3,lr
8000301e:	fd eb 00 0b 	and	r11,lr,r11
80003022:	c4 60       	breq	800030ae <udd_interrupt+0x4c2>
80003024:	e0 7b fe d0 	mov	r11,130768
80003028:	f2 0b 00 02 	add	r2,r9,r11
8000302c:	f2 cb ff 70 	sub	r11,r9,-144
			if (Is_udd_in_send_interrupt_enabled(ep) && Is_udd_in_send(ep)) {
80003030:	76 05       	ld.w	r5,r11[0x0]
80003032:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
80003036:	c1 50       	breq	80003060 <udd_interrupt+0x474>
80003038:	72 05       	ld.w	r5,r9[0x0]
8000303a:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
8000303e:	c1 10       	breq	80003060 <udd_interrupt+0x474>
				udd_disable_in_send_interrupt(ep);
80003040:	fe 6a 02 20 	mov	r10,-130528
80003044:	e4 0a 00 08 	add	r8,r2,r10
80003048:	30 19       	mov	r9,1
8000304a:	91 09       	st.w	r8[0x0],r9
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
8000304c:	e0 32 fe a0 	sub	r2,130720
80003050:	85 09       	st.w	r2[0x0],r9
				udd_ack_fifocon(ep);
80003052:	e0 69 40 00 	mov	r9,16384
80003056:	91 09       	st.w	r8[0x0],r9
				udd_ep_finish_job(ptr_job, false);
80003058:	30 0b       	mov	r11,0
8000305a:	f0 1f 00 6a 	mcall	80003200 <udd_interrupt+0x614>
8000305e:	ca 58       	rjmp	800031a8 <udd_interrupt+0x5bc>
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep) && (0==udd_nb_busy_bank(ep))) {
80003060:	76 0b       	ld.w	r11,r11[0x0]
80003062:	e2 1b 10 00 	andl	r11,0x1000,COH
80003066:	c2 40       	breq	800030ae <udd_interrupt+0x4c2>
80003068:	72 0b       	ld.w	r11,r9[0x0]
8000306a:	f7 db c1 82 	bfextu	r11,r11,0xc,0x2
8000306e:	c2 01       	brne	800030ae <udd_interrupt+0x4c2>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
80003070:	fe 69 02 20 	mov	r9,-130528
80003074:	e4 09 00 08 	add	r8,r2,r9
80003078:	e0 69 10 00 	mov	r9,4096
8000307c:	91 09       	st.w	r8[0x0],r9
				udd_disable_endpoint_interrupt(ep);
8000307e:	fe 68 00 00 	mov	r8,-131072
80003082:	91 5e       	st.w	r8[0x14],lr

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
80003084:	78 08       	ld.w	r8,r12[0x0]
80003086:	30 09       	mov	r9,0
80003088:	f1 d9 d3 81 	bfins	r8,r9,0x1c,0x1
8000308c:	99 08       	st.w	r12[0x0],r8
				udd_disable_endpoint_bank_autoswitch(ep);
8000308e:	fe 6b 01 00 	mov	r11,-130816
80003092:	e4 0b 00 08 	add	r8,r2,r11
80003096:	70 09       	ld.w	r9,r8[0x0]
80003098:	a9 d9       	cbr	r9,0x9
8000309a:	91 09       	st.w	r8[0x0],r9
				udd_enable_stall_handshake(ep);
8000309c:	e0 32 fe 10 	sub	r2,130576
800030a0:	e8 68 00 00 	mov	r8,524288
800030a4:	85 08       	st.w	r2[0x0],r8
				udd_reset_data_toggle(ep);
800030a6:	e4 68 00 00 	mov	r8,262144
800030aa:	85 08       	st.w	r2[0x0],r8
800030ac:	c7 e8       	rjmp	800031a8 <udd_interrupt+0x5bc>
800030ae:	2f 0a       	sub	r10,-16
800030b0:	2f c9       	sub	r9,-4
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
800030b2:	58 38       	cp.w	r8,3
800030b4:	fe 91 ff 5d 	brne	80002f6e <udd_interrupt+0x382>
800030b8:	c8 38       	rjmp	800031be <udd_interrupt+0x5d2>
		goto udd_interrupt_end;	// Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
		udd_ack_reset();
800030ba:	30 89       	mov	r9,8
800030bc:	fe 68 00 00 	mov	r8,-131072
800030c0:	91 29       	st.w	r8[0x8],r9
#if __ICCAVR32__
#if !defined(AVR32_USBB_IRQ_GROUP)
#define AVR32_USBB_IRQ_GROUP AVR32_USB_IRQ_GROUP
#endif
#endif
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
800030c2:	ee c6 ff d0 	sub	r6,r7,-48
static void udd_ep_job_table_kill(void)
{
	uint8_t i;
	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_finish_job(&udd_ep_job[i], true);
800030c6:	30 15       	mov	r5,1
800030c8:	0a 9b       	mov	r11,r5
800030ca:	0e 9c       	mov	r12,r7
800030cc:	f0 1f 00 4d 	mcall	80003200 <udd_interrupt+0x614>
800030d0:	2f 07       	sub	r7,-16

static void udd_ep_job_table_kill(void)
{
	uint8_t i;
	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
800030d2:	0c 37       	cp.w	r7,r6
800030d4:	cf a1       	brne	800030c8 <udd_interrupt+0x4dc>
		// Abort all jobs on-going
#if (0!=USB_DEVICE_MAX_EP)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
800030d6:	f0 1f 00 4c 	mcall	80003204 <udd_interrupt+0x618>
		// Reset endpoint control
		udd_reset_ep_ctrl();
800030da:	f0 1f 00 4c 	mcall	80003208 <udd_interrupt+0x61c>
		// Reset endpoint control management
		udd_ctrl_init();
800030de:	f0 1f 00 3f 	mcall	800031d8 <udd_interrupt+0x5ec>
		goto udd_interrupt_end;
800030e2:	c6 38       	rjmp	800031a8 <udd_interrupt+0x5bc>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
800030e4:	fe 68 00 00 	mov	r8,-131072
800030e8:	70 48       	ld.w	r8,r8[0x10]
800030ea:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800030ee:	c1 b0       	breq	80003124 <udd_interrupt+0x538>
800030f0:	fe 68 00 00 	mov	r8,-131072
800030f4:	70 18       	ld.w	r8,r8[0x4]
800030f6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800030fa:	c1 50       	breq	80003124 <udd_interrupt+0x538>
		otg_unfreeze_clock();
800030fc:	fe 68 00 00 	mov	r8,-131072
80003100:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003104:	af c9       	cbr	r9,0xe
80003106:	f1 49 08 00 	st.w	r8[2048],r9
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
8000310a:	30 19       	mov	r9,1
8000310c:	91 59       	st.w	r8[0x14],r9
		udd_enable_wake_up_interrupt();
8000310e:	31 09       	mov	r9,16
80003110:	91 69       	st.w	r8[0x18],r9
		otg_freeze_clock();	// Mandatory to exit of sleep mode after a wakeup event
80003112:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003116:	af a9       	sbr	r9,0xe
80003118:	f1 49 08 00 	st.w	r8[2048],r9
		udd_sleep_mode(false);	// Enter in SUSPEND mode
8000311c:	30 0c       	mov	r12,0
8000311e:	f0 1f 00 3c 	mcall	8000320c <udd_interrupt+0x620>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
80003122:	c4 38       	rjmp	800031a8 <udd_interrupt+0x5bc>
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
80003124:	fe 68 00 00 	mov	r8,-131072
80003128:	70 48       	ld.w	r8,r8[0x10]
8000312a:	e2 18 00 10 	andl	r8,0x10,COH
8000312e:	c2 10       	breq	80003170 <udd_interrupt+0x584>
80003130:	fe 68 00 00 	mov	r8,-131072
80003134:	70 18       	ld.w	r8,r8[0x4]
80003136:	e2 18 00 10 	andl	r8,0x10,COH
8000313a:	c1 b0       	breq	80003170 <udd_interrupt+0x584>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
8000313c:	fe 68 00 00 	mov	r8,-131072
80003140:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003144:	af c9       	cbr	r9,0xe
80003146:	f1 49 08 00 	st.w	r8[2048],r9
		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_clock_usable() ) {
8000314a:	c0 58       	rjmp	80003154 <udd_interrupt+0x568>
			if(Is_udd_suspend()) break;   // In case of USB state change in HS
8000314c:	70 19       	ld.w	r9,r8[0x4]
8000314e:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80003152:	c0 61       	brne	8000315e <udd_interrupt+0x572>

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_clock_usable() ) {
80003154:	f0 f9 08 04 	ld.w	r9,r8[2052]
80003158:	e2 19 40 00 	andl	r9,0x4000,COH
8000315c:	cf 80       	breq	8000314c <udd_interrupt+0x560>
			if(Is_udd_suspend()) break;   // In case of USB state change in HS
		};
		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
8000315e:	fe 68 00 00 	mov	r8,-131072
80003162:	31 09       	mov	r9,16
80003164:	91 59       	st.w	r8[0x14],r9
		udd_enable_suspend_interrupt();
80003166:	30 1c       	mov	r12,1
80003168:	91 6c       	st.w	r8[0x18],r12
		udd_sleep_mode(true);	// Enter in IDLE mode
8000316a:	f0 1f 00 29 	mcall	8000320c <udd_interrupt+0x620>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_end;
8000316e:	c1 d8       	rjmp	800031a8 <udd_interrupt+0x5bc>
	}

	if (Is_udd_vbus_transition()) {
80003170:	fe 68 00 00 	mov	r8,-131072
80003174:	f0 f8 08 04 	ld.w	r8,r8[2052]
80003178:	e2 18 00 02 	andl	r8,0x2,COH
8000317c:	c1 60       	breq	800031a8 <udd_interrupt+0x5bc>
		// Ack VBus transition and send status to high level
		otg_unfreeze_clock();
8000317e:	fe 68 00 00 	mov	r8,-131072
80003182:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003186:	af c9       	cbr	r9,0xe
80003188:	f1 49 08 00 	st.w	r8[2048],r9
		udd_ack_vbus_transition();
8000318c:	30 29       	mov	r9,2
8000318e:	f1 49 08 08 	st.w	r8[2056],r9
		otg_freeze_clock();
80003192:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003196:	af a9       	sbr	r9,0xe
80003198:	f1 49 08 00 	st.w	r8[2048],r9
#ifdef UDC_VBUS_EVENT
		UDC_VBUS_EVENT(Is_udd_vbus_high());
8000319c:	f0 fc 08 04 	ld.w	r12,r8[2052]
800031a0:	f9 dc c1 61 	bfextu	r12,r12,0xb,0x1
800031a4:	f0 1f 00 1b 	mcall	80003210 <udd_interrupt+0x624>
#endif
		goto udd_interrupt_end;
	}
udd_interrupt_end:
	otg_data_memory_barrier();
800031a8:	fe 68 00 00 	mov	r8,-131072
800031ac:	f0 f8 08 18 	ld.w	r8,r8[2072]
	return;
}
800031b0:	e3 cd 40 fc 	ldm	sp++,r2-r7,lr
800031b4:	d6 03       	rete
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
800031b6:	48 f9       	lddpc	r9,800031f0 <udd_interrupt+0x604>
800031b8:	b2 08       	st.h	r9[0x0],r8
800031ba:	fe 9f fe 40 	bral	80002e3a <udd_interrupt+0x24e>
	if (udd_ep_interrupt())
		goto udd_interrupt_end;	// Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
800031be:	fe 68 00 00 	mov	r8,-131072
800031c2:	70 18       	ld.w	r8,r8[0x4]
800031c4:	e2 18 00 08 	andl	r8,0x8,COH
800031c8:	c8 e0       	breq	800030e4 <udd_interrupt+0x4f8>
800031ca:	c7 8b       	rjmp	800030ba <udd_interrupt+0x4ce>
800031cc:	80 00       	ld.sh	r0,r0[0x0]
800031ce:	37 90       	mov	r0,121
800031d0:	00 00       	add	r0,r0
800031d2:	07 4c       	ld.w	r12,--r3
800031d4:	80 00       	ld.sh	r0,r0[0x0]
800031d6:	25 10       	sub	r0,81
800031d8:	80 00       	ld.sh	r0,r0[0x0]
800031da:	27 50       	sub	r0,117
800031dc:	80 00       	ld.sh	r0,r0[0x0]
800031de:	24 f8       	sub	r8,79
800031e0:	00 00       	add	r0,r0
800031e2:	0a 00       	add	r0,r5
800031e4:	80 00       	ld.sh	r0,r0[0x0]
800031e6:	3a 10       	mov	r0,-95
800031e8:	00 00       	add	r0,r0
800031ea:	07 50       	ld.sh	r0,--r3
800031ec:	00 00       	add	r0,r0
800031ee:	07 14       	ld.sh	r4,r3++
800031f0:	00 00       	add	r0,r0
800031f2:	07 4a       	ld.w	r10,--r3
800031f4:	80 00       	ld.sh	r0,r0[0x0]
800031f6:	27 b0       	sub	r0,123
800031f8:	80 00       	ld.sh	r0,r0[0x0]
800031fa:	27 84       	sub	r4,120
800031fc:	00 00       	add	r0,r0
800031fe:	07 18       	ld.sh	r8,r3++
80003200:	80 00       	ld.sh	r0,r0[0x0]
80003202:	25 24       	sub	r4,82
80003204:	80 00       	ld.sh	r0,r0[0x0]
80003206:	39 b0       	mov	r0,-101
80003208:	80 00       	ld.sh	r0,r0[0x0]
8000320a:	2a 0e       	sub	lr,-96
8000320c:	80 00       	ld.sh	r0,r0[0x0]
8000320e:	26 dc       	sub	r12,109
80003210:	80 00       	ld.sh	r0,r0[0x0]
80003212:	3f 10       	mov	r0,-15

80003214 <sysclk_priv_enable_module>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003214:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80003218:	d3 03       	ssrf	0x10

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
8000321a:	fe 78 0c 00 	mov	r8,-62464
8000321e:	71 59       	ld.w	r9,r8[0x54]
80003220:	e2 19 00 40 	andl	r9,0x40,COH
80003224:	cf d0       	breq	8000321e <sysclk_priv_enable_module+0xa>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80003226:	a3 6c       	lsl	r12,0x2
80003228:	e0 2c f3 f8 	sub	r12,62456
8000322c:	78 08       	ld.w	r8,r12[0x0]
	mask |= 1U << module_index;
8000322e:	30 19       	mov	r9,1
80003230:	f2 0b 09 4b 	lsl	r11,r9,r11
80003234:	10 4b       	or	r11,r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
80003236:	99 0b       	st.w	r12[0x0],r11
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003238:	e3 ba 00 00 	mtsr	0x0,r10

	cpu_irq_restore(flags);
}
8000323c:	5e fc       	retal	r12
8000323e:	d7 03       	nop

80003240 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(unsigned int index)
{
80003240:	eb cd 40 e0 	pushm	r5-r7,lr
80003244:	18 96       	mov	r6,r12
80003246:	58 9c       	cp.w	r12,9
80003248:	5f 07       	sreq	r7

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000324a:	e1 b5 00 00 	mfsr	r5,0x0
	cpu_irq_disable();
8000324e:	d3 03       	ssrf	0x10
		pbus_id = 1;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (!sysclk_bus_refcount[pbus_id])
80003250:	48 f8       	lddpc	r8,8000328c <sysclk_enable_pbb_module+0x4c>
80003252:	f0 07 07 09 	ld.ub	r9,r8[r7]
80003256:	30 08       	mov	r8,0
80003258:	f0 09 18 00 	cp.b	r9,r8
8000325c:	c0 a1       	brne	80003270 <sysclk_enable_pbb_module+0x30>
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
8000325e:	ee 0b 15 01 	lsl	r11,r7,0x1
80003262:	f9 bb 01 06 	movne	r11,6
80003266:	f9 bb 00 02 	moveq	r11,2
8000326a:	30 1c       	mov	r12,1
8000326c:	f0 1f 00 09 	mcall	80003290 <sysclk_enable_pbb_module+0x50>
		sysclk_enable_hsb_module(2 + (4 * pbus_id));
	sysclk_bus_refcount[pbus_id]++;
80003270:	48 78       	lddpc	r8,8000328c <sysclk_enable_pbb_module+0x4c>
80003272:	f0 07 07 09 	ld.ub	r9,r8[r7]
80003276:	2f f9       	sub	r9,-1
80003278:	f0 07 0b 09 	st.b	r8[r7],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000327c:	e3 b5 00 00 	mtsr	0x0,r5

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
80003280:	0c 9b       	mov	r11,r6
80003282:	30 3c       	mov	r12,3
80003284:	f0 1f 00 03 	mcall	80003290 <sysclk_enable_pbb_module+0x50>
}
80003288:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000328c:	00 00       	add	r0,r0
8000328e:	07 54       	ld.sh	r4,--r3
80003290:	80 00       	ld.sh	r0,r0[0x0]
80003292:	32 14       	mov	r4,33

80003294 <sysclk_enable_usb>:
 * \pre The USB generick clock must be configurated to 12MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
80003294:	d4 01       	pushm	lr
	struct genclk_config gcfg;

	sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
80003296:	30 1c       	mov	r12,1
80003298:	f0 1f 00 0f 	mcall	800032d4 <sysclk_enable_usb+0x40>
8000329c:	30 3b       	mov	r11,3
8000329e:	30 1c       	mov	r12,1
800032a0:	f0 1f 00 0e 	mcall	800032d8 <sysclk_enable_usb+0x44>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800032a4:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800032a8:	d3 03       	ssrf	0x10
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
800032aa:	fe 78 0c 00 	mov	r8,-62464
800032ae:	e0 6a 03 07 	mov	r10,775
800032b2:	91 aa       	st.w	r8[0x28],r10
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
800032b4:	70 0a       	ld.w	r10,r8[0x0]
800032b6:	a3 aa       	sbr	r10,0x2
800032b8:	91 0a       	st.w	r8[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800032ba:	e3 b9 00 00 	mtsr	0x0,r9
	cpu_irq_restore(flags);
}

static inline bool osc_is_ready(uint8_t id)
{
	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_OSC0RDY + id)));
800032be:	71 59       	ld.w	r9,r8[0x54]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
800032c0:	e2 19 00 80 	andl	r9,0x80,COH
800032c4:	cf d0       	breq	800032be <sysclk_enable_usb+0x2a>
}

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
800032c6:	30 49       	mov	r9,4
800032c8:	fe 78 0c 00 	mov	r8,-62464
800032cc:	f1 49 00 70 	st.w	r8[112],r9
		break;
	}

	genclk_config_set_divider(&gcfg, CONFIG_USBCLK_DIV);
	genclk_enable(&gcfg, AVR32_PM_GCLK_USBB);
}
800032d0:	d8 02       	popm	pc
800032d2:	00 00       	add	r0,r0
800032d4:	80 00       	ld.sh	r0,r0[0x0]
800032d6:	32 40       	mov	r0,36
800032d8:	80 00       	ld.sh	r0,r0[0x0]
800032da:	32 14       	mov	r4,33

800032dc <udi_cdc_data_disable>:
	UDI_CDC_DISABLE_EXT();
}

void udi_cdc_data_disable(void)
{
}
800032dc:	5e fc       	retal	r12
800032de:	d7 03       	nop

800032e0 <udi_cdc_comm_setup>:


bool udi_cdc_comm_setup(void)
{
	if (Udd_setup_is_in()) {
800032e0:	49 e8       	lddpc	r8,80003358 <udi_cdc_comm_setup+0x78>
800032e2:	11 88       	ld.ub	r8,r8[0x0]
800032e4:	30 09       	mov	r9,0
800032e6:	f2 08 18 00 	cp.b	r8,r9
800032ea:	c1 84       	brge	8000331a <udi_cdc_comm_setup+0x3a>
		// GET Interface Requests 
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
800032ec:	e2 18 00 60 	andl	r8,0x60,COH
800032f0:	e0 48 00 20 	cp.w	r8,32
800032f4:	c3 11       	brne	80003356 <udi_cdc_comm_setup+0x76>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
800032f6:	49 98       	lddpc	r8,80003358 <udi_cdc_comm_setup+0x78>
800032f8:	11 99       	ld.ub	r9,r8[0x1]
800032fa:	32 18       	mov	r8,33
800032fc:	f0 09 18 00 	cp.b	r9,r8
80003300:	c2 b1       	brne	80003356 <udi_cdc_comm_setup+0x76>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
80003302:	49 68       	lddpc	r8,80003358 <udi_cdc_comm_setup+0x78>
80003304:	90 39       	ld.sh	r9,r8[0x6]
80003306:	30 78       	mov	r8,7
80003308:	f0 09 19 00 	cp.h	r9,r8
8000330c:	c2 51       	brne	80003356 <udi_cdc_comm_setup+0x76>
						udd_g_ctrlreq.req.wLength)
					return false;	// Error for USB host
				udd_g_ctrlreq.payload =
8000330e:	49 38       	lddpc	r8,80003358 <udi_cdc_comm_setup+0x78>
80003310:	49 39       	lddpc	r9,8000335c <udi_cdc_comm_setup+0x7c>
80003312:	91 29       	st.w	r8[0x8],r9
						(uint8_t *) &
						udi_cdc_line_coding;
				udd_g_ctrlreq.payload_size =
80003314:	30 79       	mov	r9,7
80003316:	b0 69       	st.h	r8[0xc],r9
80003318:	5e ff       	retal	1
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests  
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
8000331a:	e2 18 00 60 	andl	r8,0x60,COH
8000331e:	e0 48 00 20 	cp.w	r8,32
80003322:	c1 a1       	brne	80003356 <udi_cdc_comm_setup+0x76>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
80003324:	48 d8       	lddpc	r8,80003358 <udi_cdc_comm_setup+0x78>
80003326:	11 98       	ld.ub	r8,r8[0x1]
80003328:	32 09       	mov	r9,32
8000332a:	f2 08 18 00 	cp.b	r8,r9
8000332e:	c0 60       	breq	8000333a <udi_cdc_comm_setup+0x5a>
80003330:	32 29       	mov	r9,34
80003332:	f2 08 18 00 	cp.b	r8,r9
80003336:	c1 01       	brne	80003356 <udi_cdc_comm_setup+0x76>
80003338:	5e ff       	retal	1
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
8000333a:	48 88       	lddpc	r8,80003358 <udi_cdc_comm_setup+0x78>
8000333c:	90 39       	ld.sh	r9,r8[0x6]
8000333e:	30 78       	mov	r8,7
80003340:	f0 09 19 00 	cp.h	r9,r8
80003344:	c0 91       	brne	80003356 <udi_cdc_comm_setup+0x76>
						udd_g_ctrlreq.req.wLength)
					return false;	// Error for USB host
				udd_g_ctrlreq.callback =
80003346:	48 58       	lddpc	r8,80003358 <udi_cdc_comm_setup+0x78>
80003348:	48 69       	lddpc	r9,80003360 <udi_cdc_comm_setup+0x80>
8000334a:	91 49       	st.w	r8[0x10],r9
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
8000334c:	48 49       	lddpc	r9,8000335c <udi_cdc_comm_setup+0x7c>
8000334e:	91 29       	st.w	r8[0x8],r9
						(uint8_t *) &
						udi_cdc_line_coding;
				udd_g_ctrlreq.payload_size =
80003350:	30 79       	mov	r9,7
80003352:	b0 69       	st.h	r8[0xc],r9
80003354:	5e ff       	retal	1
						sizeof(udi_cdc_line_coding);
				return true;
80003356:	5e fd       	retal	0
80003358:	00 00       	add	r0,r0
8000335a:	0a 00       	add	r0,r5
8000335c:	00 00       	add	r0,r0
8000335e:	07 58       	ld.sh	r8,--r3
80003360:	80 00       	ld.sh	r0,r0[0x0]
80003362:	33 68       	mov	r8,54

80003364 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
80003364:	5e fd       	retal	0

80003366 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
80003366:	5e fd       	retal	0

80003368 <udi_cdc_line_coding_received>:

void udi_cdc_line_coding_received(void)
{
	// Send line coding to component associated to CDC
	UDI_CDC_SET_CODING_EXT((&udi_cdc_line_coding));
}
80003368:	5e fc       	retal	r12
8000336a:	d7 03       	nop

8000336c <udi_cdc_is_rx_ready>:
}


bool udi_cdc_is_rx_ready(void)
{
	return (udi_cdc_rx_pos < udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]);
8000336c:	48 68       	lddpc	r8,80003384 <udi_cdc_is_rx_ready+0x18>
8000336e:	11 8a       	ld.ub	r10,r8[0x0]
80003370:	48 68       	lddpc	r8,80003388 <udi_cdc_is_rx_ready+0x1c>
80003372:	90 08       	ld.sh	r8,r8[0x0]
80003374:	48 69       	lddpc	r9,8000338c <udi_cdc_is_rx_ready+0x20>
80003376:	f2 0a 04 19 	ld.sh	r9,r9[r10<<0x1]
8000337a:	f0 09 19 00 	cp.h	r9,r8
}
8000337e:	5f bc       	srhi	r12
80003380:	5e fc       	retal	r12
80003382:	00 00       	add	r0,r0
80003384:	00 00       	add	r0,r0
80003386:	07 ec       	ld.ub	r12,r3[0x6]
80003388:	00 00       	add	r0,r0
8000338a:	07 e8       	ld.ub	r8,r3[0x6]
8000338c:	00 00       	add	r0,r0
8000338e:	07 e4       	ld.ub	r4,r3[0x6]

80003390 <udi_cdc_is_tx_ready>:


bool udi_cdc_is_tx_ready(void)
{
	irqflags_t flags;
	if (udi_cdc_tx_buf_nb[udi_cdc_tx_buf_sel]!=UDI_CDC_TX_BUFFERS) {
80003390:	49 58       	lddpc	r8,800033e4 <udi_cdc_is_tx_ready+0x54>
80003392:	11 89       	ld.ub	r9,r8[0x0]
80003394:	49 58       	lddpc	r8,800033e8 <udi_cdc_is_tx_ready+0x58>
80003396:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
8000339a:	34 08       	mov	r8,64
8000339c:	f0 09 19 00 	cp.h	r9,r8
800033a0:	c0 20       	breq	800033a4 <udi_cdc_is_tx_ready+0x14>
800033a2:	5e ff       	retal	1
		return true;
	}
	if (!udi_cdc_tx_both_buf_to_send) {
800033a4:	49 28       	lddpc	r8,800033ec <udi_cdc_is_tx_ready+0x5c>
800033a6:	11 88       	ld.ub	r8,r8[0x0]
800033a8:	58 08       	cp.w	r8,0
800033aa:	c1 21       	brne	800033ce <udi_cdc_is_tx_ready+0x3e>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800033ac:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800033b0:	d3 03       	ssrf	0x10
		flags = cpu_irq_save();	// to protect udi_cdc_tx_buf_sel
		if (!udi_cdc_tx_trans_ongoing) {
800033b2:	49 09       	lddpc	r9,800033f0 <udi_cdc_is_tx_ready+0x60>
800033b4:	13 89       	ld.ub	r9,r9[0x0]
800033b6:	58 09       	cp.w	r9,0
800033b8:	c0 91       	brne	800033ca <udi_cdc_is_tx_ready+0x3a>
			// No transfer on-going
			// then use the other buffer to store data
			udi_cdc_tx_both_buf_to_send = true;
800033ba:	30 1a       	mov	r10,1
800033bc:	48 c9       	lddpc	r9,800033ec <udi_cdc_is_tx_ready+0x5c>
800033be:	b2 8a       	st.b	r9[0x0],r10
			udi_cdc_tx_buf_sel = (udi_cdc_tx_buf_sel==0)?1:0;
800033c0:	48 99       	lddpc	r9,800033e4 <udi_cdc_is_tx_ready+0x54>
800033c2:	13 8a       	ld.ub	r10,r9[0x0]
800033c4:	58 0a       	cp.w	r10,0
800033c6:	5f 0a       	sreq	r10
800033c8:	b2 8a       	st.b	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800033ca:	e3 b8 00 00 	mtsr	0x0,r8
		}
	  	cpu_irq_restore(flags);
	}
	return (udi_cdc_tx_buf_nb[udi_cdc_tx_buf_sel]!=UDI_CDC_TX_BUFFERS);
800033ce:	48 68       	lddpc	r8,800033e4 <udi_cdc_is_tx_ready+0x54>
800033d0:	11 89       	ld.ub	r9,r8[0x0]
800033d2:	48 68       	lddpc	r8,800033e8 <udi_cdc_is_tx_ready+0x58>
800033d4:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
800033d8:	34 08       	mov	r8,64
800033da:	f0 09 19 00 	cp.h	r9,r8
800033de:	5f 1c       	srne	r12
}
800033e0:	5e fc       	retal	r12
800033e2:	00 00       	add	r0,r0
800033e4:	00 00       	add	r0,r0
800033e6:	07 5f       	ld.sh	pc,--r3
800033e8:	00 00       	add	r0,r0
800033ea:	07 60       	ld.uh	r0,--r3
800033ec:	00 00       	add	r0,r0
800033ee:	08 71       	tst	r1,r4
800033f0:	00 00       	add	r0,r0
800033f2:	07 ee       	ld.ub	lr,r3[0x6]

800033f4 <udi_cdc_putc>:


int udi_cdc_putc(int value)
{
800033f4:	eb cd 40 fe 	pushm	r1-r7,lr
800033f8:	18 97       	mov	r7,r12
	irqflags_t flags;
	bool b_databit_9;
	uint8_t buf_sel;

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);
800033fa:	49 88       	lddpc	r8,80003458 <udi_cdc_putc+0x64>
800033fc:	11 e9       	ld.ub	r9,r8[0x6]
800033fe:	30 98       	mov	r8,9
80003400:	f0 09 18 00 	cp.b	r9,r8
80003404:	5f 04       	sreq	r4

udi_cdc_putc_process_one_byte:
	// Check avaliable space
	if (!udi_cdc_is_tx_ready()) {
		if (!udi_cdc_running) {
80003406:	49 66       	lddpc	r6,8000345c <udi_cdc_putc+0x68>
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel;
80003408:	49 63       	lddpc	r3,80003460 <udi_cdc_putc+0x6c>
	udi_cdc_tx_buf[buf_sel][udi_cdc_tx_buf_nb[buf_sel]++] = value;
8000340a:	49 75       	lddpc	r5,80003464 <udi_cdc_putc+0x70>
8000340c:	49 72       	lddpc	r2,80003468 <udi_cdc_putc+0x74>
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
8000340e:	30 01       	mov	r1,0

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);

udi_cdc_putc_process_one_byte:
	// Check avaliable space
	if (!udi_cdc_is_tx_ready()) {
80003410:	f0 1f 00 17 	mcall	8000346c <udi_cdc_putc+0x78>
80003414:	c0 51       	brne	8000341e <udi_cdc_putc+0x2a>
		if (!udi_cdc_running) {
80003416:	0d 88       	ld.ub	r8,r6[0x0]
80003418:	58 08       	cp.w	r8,0
8000341a:	cf b1       	brne	80003410 <udi_cdc_putc+0x1c>
8000341c:	c1 b8       	rjmp	80003452 <udi_cdc_putc+0x5e>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000341e:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80003422:	d3 03       	ssrf	0x10
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel;
80003424:	07 88       	ld.ub	r8,r3[0x0]
	udi_cdc_tx_buf[buf_sel][udi_cdc_tx_buf_nb[buf_sel]++] = value;
80003426:	ea 08 04 19 	ld.sh	r9,r5[r8<<0x1]
8000342a:	f7 d9 c0 10 	bfextu	r11,r9,0x0,0x10
8000342e:	f0 0c 15 06 	lsl	r12,r8,0x6
80003432:	f8 0b 00 0b 	add	r11,r12,r11
80003436:	e4 0b 0b 07 	st.b	r2[r11],r7
8000343a:	2f f9       	sub	r9,-1
8000343c:	ea 08 0a 19 	st.h	r5[r8<<0x1],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003440:	e3 ba 00 00 	mtsr	0x0,r10
	cpu_irq_restore(flags);

	if (b_databit_9) {
80003444:	58 04       	cp.w	r4,0
80003446:	c0 31       	brne	8000344c <udi_cdc_putc+0x58>
80003448:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
8000344c:	a9 47       	asr	r7,0x8
8000344e:	02 94       	mov	r4,r1
80003450:	ce 0b       	rjmp	80003410 <udi_cdc_putc+0x1c>
		goto udi_cdc_putc_process_one_byte;
80003452:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80003456:	00 00       	add	r0,r0
80003458:	00 00       	add	r0,r0
8000345a:	07 58       	ld.sh	r8,--r3
8000345c:	00 00       	add	r0,r0
8000345e:	07 ed       	ld.ub	sp,r3[0x6]
80003460:	00 00       	add	r0,r0
80003462:	07 5f       	ld.sh	pc,--r3
80003464:	00 00       	add	r0,r0
80003466:	07 60       	ld.uh	r0,--r3
80003468:	00 00       	add	r0,r0
8000346a:	07 64       	ld.uh	r4,--r3
8000346c:	80 00       	ld.sh	r0,r0[0x0]
8000346e:	33 90       	mov	r0,57

80003470 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(void)
{
80003470:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003474:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80003478:	d3 03       	ssrf	0x10
	irqflags_t flags;
	uint8_t buf_sel_trans;

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel;
8000347a:	49 78       	lddpc	r8,800034d4 <udi_cdc_rx_start+0x64>
8000347c:	11 87       	ld.ub	r7,r8[0x0]
	if (udi_cdc_rx_trans_ongoing ||
8000347e:	49 78       	lddpc	r8,800034d8 <udi_cdc_rx_start+0x68>
80003480:	11 88       	ld.ub	r8,r8[0x0]
80003482:	58 08       	cp.w	r8,0
80003484:	c0 a1       	brne	80003498 <udi_cdc_rx_start+0x28>
		(udi_cdc_rx_pos < udi_cdc_rx_buf_nb[buf_sel_trans])) {
80003486:	49 68       	lddpc	r8,800034dc <udi_cdc_rx_start+0x6c>
80003488:	90 08       	ld.sh	r8,r8[0x0]
8000348a:	49 6a       	lddpc	r10,800034e0 <udi_cdc_rx_start+0x70>
8000348c:	f4 07 04 1a 	ld.sh	r10,r10[r7<<0x1]
80003490:	f0 0a 19 00 	cp.h	r10,r8
80003494:	e0 88 00 06 	brls	800034a0 <udi_cdc_rx_start+0x30>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003498:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
8000349c:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
		cpu_irq_restore(flags);
		return false;
	}

	// Change current buffer
	udi_cdc_rx_pos = 0;
800034a0:	30 0a       	mov	r10,0
800034a2:	48 f8       	lddpc	r8,800034dc <udi_cdc_rx_start+0x6c>
800034a4:	b0 0a       	st.h	r8[0x0],r10
	udi_cdc_rx_buf_sel = (buf_sel_trans==0)?1:0;
800034a6:	58 07       	cp.w	r7,0
800034a8:	5f 0a       	sreq	r10
800034aa:	48 b8       	lddpc	r8,800034d4 <udi_cdc_rx_start+0x64>
800034ac:	b0 8a       	st.b	r8[0x0],r10

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing = true;
800034ae:	30 1a       	mov	r10,1
800034b0:	48 a8       	lddpc	r8,800034d8 <udi_cdc_rx_start+0x68>
800034b2:	b0 8a       	st.b	r8[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800034b4:	e3 b9 00 00 	mtsr	0x0,r9
	cpu_irq_restore(flags);
	
	if (udi_cdc_is_rx_ready()) {
800034b8:	f0 1f 00 0b 	mcall	800034e4 <udi_cdc_rx_start+0x74>
		UDI_CDC_RX_NOTIFY();
	}

	return udd_ep_run( UDI_CDC_DATA_EP_OUT,
800034bc:	a7 67       	lsl	r7,0x6
800034be:	48 b8       	lddpc	r8,800034e8 <udi_cdc_rx_start+0x78>
800034c0:	34 09       	mov	r9,64
800034c2:	48 ba       	lddpc	r10,800034ec <udi_cdc_rx_start+0x7c>
800034c4:	0e 0a       	add	r10,r7
800034c6:	30 1b       	mov	r11,1
800034c8:	30 2c       	mov	r12,2
800034ca:	f0 1f 00 0a 	mcall	800034f0 <udi_cdc_rx_start+0x80>
					true,
					udi_cdc_rx_buf[buf_sel_trans],
					UDI_CDC_RX_BUFFERS,
					udi_cdc_data_recevied);
}
800034ce:	e3 cd 80 80 	ldm	sp++,r7,pc
800034d2:	00 00       	add	r0,r0
800034d4:	00 00       	add	r0,r0
800034d6:	07 ec       	ld.ub	r12,r3[0x6]
800034d8:	00 00       	add	r0,r0
800034da:	08 70       	tst	r0,r4
800034dc:	00 00       	add	r0,r0
800034de:	07 e8       	ld.ub	r8,r3[0x6]
800034e0:	00 00       	add	r0,r0
800034e2:	07 e4       	ld.ub	r4,r3[0x6]
800034e4:	80 00       	ld.sh	r0,r0[0x0]
800034e6:	33 6c       	mov	r12,54
800034e8:	80 00       	ld.sh	r0,r0[0x0]
800034ea:	35 70       	mov	r0,87
800034ec:	00 00       	add	r0,r0
800034ee:	07 f0       	ld.ub	r0,r3[0x7]
800034f0:	80 00       	ld.sh	r0,r0[0x0]
800034f2:	25 94       	sub	r4,89

800034f4 <udi_cdc_getc>:
	return (udi_cdc_rx_pos < udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]);
}


int udi_cdc_getc(void)
{
800034f4:	d4 31       	pushm	r0-r7,lr
	int rx_data = 0;
	bool b_databit_9;

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);
800034f6:	49 88       	lddpc	r8,80003554 <udi_cdc_getc+0x60>
800034f8:	11 e9       	ld.ub	r9,r8[0x6]
800034fa:	30 98       	mov	r8,9
800034fc:	f0 09 18 00 	cp.b	r9,r8
80003500:	5f 02       	sreq	r2
80003502:	30 03       	mov	r3,0

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	while (udi_cdc_rx_pos >= udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]) {
80003504:	49 56       	lddpc	r6,80003558 <udi_cdc_getc+0x64>
80003506:	49 67       	lddpc	r7,8000355c <udi_cdc_getc+0x68>
80003508:	49 65       	lddpc	r5,80003560 <udi_cdc_getc+0x6c>
		if (!udi_cdc_running) {
8000350a:	49 74       	lddpc	r4,80003564 <udi_cdc_getc+0x70>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[udi_cdc_rx_buf_sel][udi_cdc_rx_pos];
8000350c:	49 71       	lddpc	r1,80003568 <udi_cdc_getc+0x74>
	udi_cdc_rx_start();

	if (b_databit_9) {
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
8000350e:	06 90       	mov	r0,r3
80003510:	c0 48       	rjmp	80003518 <udi_cdc_getc+0x24>
	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	while (udi_cdc_rx_pos >= udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]) {
		if (!udi_cdc_running) {
80003512:	09 88       	ld.ub	r8,r4[0x0]
80003514:	58 08       	cp.w	r8,0
80003516:	c1 b0       	breq	8000354c <udi_cdc_getc+0x58>

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	while (udi_cdc_rx_pos >= udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]) {
80003518:	0d 89       	ld.ub	r9,r6[0x0]
8000351a:	8e 08       	ld.sh	r8,r7[0x0]
8000351c:	ea 09 04 19 	ld.sh	r9,r5[r9<<0x1]
80003520:	f0 09 19 00 	cp.h	r9,r8
80003524:	fe 98 ff f7 	brls	80003512 <udi_cdc_getc+0x1e>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[udi_cdc_rx_buf_sel][udi_cdc_rx_pos];
80003528:	0d 88       	ld.ub	r8,r6[0x0]
8000352a:	8e 09       	ld.sh	r9,r7[0x0]
8000352c:	5c 79       	castu.h	r9
8000352e:	a7 68       	lsl	r8,0x6
80003530:	12 08       	add	r8,r9
80003532:	e2 08 07 08 	ld.ub	r8,r1[r8]
80003536:	10 43       	or	r3,r8
	udi_cdc_rx_pos++;
80003538:	8e 08       	ld.sh	r8,r7[0x0]
8000353a:	2f f8       	sub	r8,-1
8000353c:	ae 08       	st.h	r7[0x0],r8

	udi_cdc_rx_start();
8000353e:	f0 1f 00 0c 	mcall	8000356c <udi_cdc_getc+0x78>

	if (b_databit_9) {
80003542:	58 02       	cp.w	r2,0
80003544:	c0 50       	breq	8000354e <udi_cdc_getc+0x5a>
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
80003546:	a9 63       	lsl	r3,0x8
80003548:	00 92       	mov	r2,r0
8000354a:	ce 7b       	rjmp	80003518 <udi_cdc_getc+0x24>
		goto udi_cdc_getc_process_one_byte;
8000354c:	30 03       	mov	r3,0
	}
	return rx_data;
}
8000354e:	06 9c       	mov	r12,r3
80003550:	d8 32       	popm	r0-r7,pc
80003552:	00 00       	add	r0,r0
80003554:	00 00       	add	r0,r0
80003556:	07 58       	ld.sh	r8,--r3
80003558:	00 00       	add	r0,r0
8000355a:	07 ec       	ld.ub	r12,r3[0x6]
8000355c:	00 00       	add	r0,r0
8000355e:	07 e8       	ld.ub	r8,r3[0x6]
80003560:	00 00       	add	r0,r0
80003562:	07 e4       	ld.ub	r4,r3[0x6]
80003564:	00 00       	add	r0,r0
80003566:	07 ed       	ld.ub	sp,r3[0x6]
80003568:	00 00       	add	r0,r0
8000356a:	07 f0       	ld.ub	r0,r3[0x7]
8000356c:	80 00       	ld.sh	r0,r0[0x0]
8000356e:	34 70       	mov	r0,71

80003570 <udi_cdc_data_recevied>:
					udi_cdc_data_recevied);
}


void udi_cdc_data_recevied(udd_ep_status_t status, iram_size_t n)
{
80003570:	d4 01       	pushm	lr
	uint8_t buf_sel_trans;

	if (UDD_EP_TRANSFER_OK != status) {
80003572:	58 0c       	cp.w	r12,0
80003574:	c1 01       	brne	80003594 <udi_cdc_data_recevied+0x24>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel==0)?1:0;
80003576:	48 98       	lddpc	r8,80003598 <udi_cdc_data_recevied+0x28>
80003578:	11 88       	ld.ub	r8,r8[0x0]
	udi_cdc_rx_buf_nb[buf_sel_trans] = n;
8000357a:	58 08       	cp.w	r8,0
8000357c:	f9 b8 01 00 	movne	r8,0
80003580:	f9 b8 00 02 	moveq	r8,2
80003584:	48 69       	lddpc	r9,8000359c <udi_cdc_data_recevied+0x2c>
80003586:	f2 08 0a 0b 	st.h	r9[r8],r11
	udi_cdc_rx_trans_ongoing = false;
8000358a:	30 09       	mov	r9,0
8000358c:	48 58       	lddpc	r8,800035a0 <udi_cdc_data_recevied+0x30>
8000358e:	b0 89       	st.b	r8[0x0],r9
	udi_cdc_rx_start();
80003590:	f0 1f 00 05 	mcall	800035a4 <udi_cdc_data_recevied+0x34>
80003594:	d8 02       	popm	pc
80003596:	00 00       	add	r0,r0
80003598:	00 00       	add	r0,r0
8000359a:	07 ec       	ld.ub	r12,r3[0x6]
8000359c:	00 00       	add	r0,r0
8000359e:	07 e4       	ld.ub	r4,r3[0x6]
800035a0:	00 00       	add	r0,r0
800035a2:	08 70       	tst	r0,r4
800035a4:	80 00       	ld.sh	r0,r0[0x0]
800035a6:	34 70       	mov	r0,71

800035a8 <udi_cdc_tx_send>:
	udi_cdc_tx_send();
}


static void udi_cdc_tx_send(void)
{
800035a8:	eb cd 40 e0 	pushm	r5-r7,lr
	irqflags_t flags;
	uint8_t buf_sel_trans;
	bool b_short_packet;

	if (udi_cdc_tx_trans_ongoing) {
800035ac:	4a a8       	lddpc	r8,80003654 <udi_cdc_tx_send+0xac>
800035ae:	11 88       	ld.ub	r8,r8[0x0]
800035b0:	58 08       	cp.w	r8,0
800035b2:	c4 f1       	brne	80003650 <udi_cdc_tx_send+0xa8>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
800035b4:	f0 1f 00 29 	mcall	80003658 <udi_cdc_tx_send+0xb0>
800035b8:	c0 a0       	breq	800035cc <udi_cdc_tx_send+0x24>
		if (udi_cdc_tx_sof_num == udd_get_micro_frame_number()) {
800035ba:	f0 1f 00 29 	mcall	8000365c <udi_cdc_tx_send+0xb4>
800035be:	4a 98       	lddpc	r8,80003660 <udi_cdc_tx_send+0xb8>
800035c0:	90 08       	ld.sh	r8,r8[0x0]
800035c2:	f8 08 19 00 	cp.h	r8,r12
800035c6:	c0 a1       	brne	800035da <udi_cdc_tx_send+0x32>
800035c8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num == udd_get_frame_number()) {
800035cc:	f0 1f 00 26 	mcall	80003664 <udi_cdc_tx_send+0xbc>
800035d0:	4a 48       	lddpc	r8,80003660 <udi_cdc_tx_send+0xb8>
800035d2:	90 08       	ld.sh	r8,r8[0x0]
800035d4:	f8 08 19 00 	cp.h	r8,r12
800035d8:	c3 c0       	breq	80003650 <udi_cdc_tx_send+0xa8>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800035da:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800035de:	d3 03       	ssrf	0x10
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save();	// to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel;
800035e0:	4a 29       	lddpc	r9,80003668 <udi_cdc_tx_send+0xc0>
800035e2:	13 87       	ld.ub	r7,r9[0x0]
	if (!udi_cdc_tx_both_buf_to_send) {
800035e4:	4a 29       	lddpc	r9,8000366c <udi_cdc_tx_send+0xc4>
800035e6:	13 89       	ld.ub	r9,r9[0x0]
800035e8:	58 09       	cp.w	r9,0
800035ea:	c0 61       	brne	800035f6 <udi_cdc_tx_send+0x4e>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel = (buf_sel_trans==0)?1:0;
800035ec:	58 07       	cp.w	r7,0
800035ee:	5f 0a       	sreq	r10
800035f0:	49 e9       	lddpc	r9,80003668 <udi_cdc_tx_send+0xc0>
800035f2:	b2 8a       	st.b	r9[0x0],r10
800035f4:	c0 38       	rjmp	800035fa <udi_cdc_tx_send+0x52>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
800035f6:	58 07       	cp.w	r7,0
800035f8:	5f 07       	sreq	r7
	}
	udi_cdc_tx_trans_ongoing = true;
800035fa:	30 1a       	mov	r10,1
800035fc:	49 69       	lddpc	r9,80003654 <udi_cdc_tx_send+0xac>
800035fe:	b2 8a       	st.b	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003600:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[buf_sel_trans] != UDI_CDC_TX_BUFFERS);
80003604:	0e 95       	mov	r5,r7
80003606:	49 b8       	lddpc	r8,80003670 <udi_cdc_tx_send+0xc8>
80003608:	f0 07 04 19 	ld.sh	r9,r8[r7<<0x1]
8000360c:	34 08       	mov	r8,64
8000360e:	f0 09 19 00 	cp.h	r9,r8
80003612:	5f 16       	srne	r6
	if (b_short_packet) {
80003614:	58 06       	cp.w	r6,0
80003616:	c0 e0       	breq	80003632 <udi_cdc_tx_send+0x8a>
		if (udd_is_high_speed()) {
80003618:	f0 1f 00 10 	mcall	80003658 <udi_cdc_tx_send+0xb0>
8000361c:	c0 60       	breq	80003628 <udi_cdc_tx_send+0x80>
			udi_cdc_tx_sof_num = udd_get_micro_frame_number();
8000361e:	f0 1f 00 10 	mcall	8000365c <udi_cdc_tx_send+0xb4>
80003622:	49 08       	lddpc	r8,80003660 <udi_cdc_tx_send+0xb8>
80003624:	b0 0c       	st.h	r8[0x0],r12
80003626:	c0 98       	rjmp	80003638 <udi_cdc_tx_send+0x90>
		}else{
			udi_cdc_tx_sof_num = udd_get_frame_number();
80003628:	f0 1f 00 0f 	mcall	80003664 <udi_cdc_tx_send+0xbc>
8000362c:	48 d8       	lddpc	r8,80003660 <udi_cdc_tx_send+0xb8>
8000362e:	b0 0c       	st.h	r8[0x0],r12
80003630:	c0 48       	rjmp	80003638 <udi_cdc_tx_send+0x90>
		}
	}else{
		udi_cdc_tx_sof_num = 0; // Force next transfer without wait SOF
80003632:	30 09       	mov	r9,0
80003634:	48 b8       	lddpc	r8,80003660 <udi_cdc_tx_send+0xb8>
80003636:	b0 09       	st.h	r8[0x0],r9
	}

	// Send the buffer with enable of short packet
	udd_ep_run( UDI_CDC_DATA_EP_IN,
80003638:	a7 67       	lsl	r7,0x6
8000363a:	48 f8       	lddpc	r8,80003674 <udi_cdc_tx_send+0xcc>
8000363c:	48 d9       	lddpc	r9,80003670 <udi_cdc_tx_send+0xc8>
8000363e:	f2 05 05 19 	ld.uh	r9,r9[r5<<0x1]
80003642:	48 ea       	lddpc	r10,80003678 <udi_cdc_tx_send+0xd0>
80003644:	0e 0a       	add	r10,r7
80003646:	0c 9b       	mov	r11,r6
80003648:	e0 6c 00 81 	mov	r12,129
8000364c:	f0 1f 00 0c 	mcall	8000367c <udi_cdc_tx_send+0xd4>
80003650:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003654:	00 00       	add	r0,r0
80003656:	07 ee       	ld.ub	lr,r3[0x6]
80003658:	80 00       	ld.sh	r0,r0[0x0]
8000365a:	23 9e       	sub	lr,57
8000365c:	80 00       	ld.sh	r0,r0[0x0]
8000365e:	23 da       	sub	r10,61
80003660:	00 00       	add	r0,r0
80003662:	07 ea       	ld.ub	r10,r3[0x6]
80003664:	80 00       	ld.sh	r0,r0[0x0]
80003666:	23 ce       	sub	lr,60
80003668:	00 00       	add	r0,r0
8000366a:	07 5f       	ld.sh	pc,--r3
8000366c:	00 00       	add	r0,r0
8000366e:	08 71       	tst	r1,r4
80003670:	00 00       	add	r0,r0
80003672:	07 60       	ld.uh	r0,--r3
80003674:	80 00       	ld.sh	r0,r0[0x0]
80003676:	36 80       	mov	r0,104
80003678:	00 00       	add	r0,r0
8000367a:	07 64       	ld.uh	r4,--r3
8000367c:	80 00       	ld.sh	r0,r0[0x0]
8000367e:	25 94       	sub	r4,89

80003680 <udi_cdc_data_sent>:
	udi_cdc_rx_start();
}


void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n)
{
80003680:	d4 01       	pushm	lr
	if (UDD_EP_TRANSFER_OK != status) {
80003682:	58 0c       	cp.w	r12,0
80003684:	c1 21       	brne	800036a8 <udi_cdc_data_sent+0x28>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[(udi_cdc_tx_buf_sel==0)?1:0] = 0;
80003686:	48 a8       	lddpc	r8,800036ac <udi_cdc_data_sent+0x2c>
80003688:	11 88       	ld.ub	r8,r8[0x0]
8000368a:	58 08       	cp.w	r8,0
8000368c:	f9 b9 01 00 	movne	r9,0
80003690:	f9 b9 00 02 	moveq	r9,2
80003694:	30 08       	mov	r8,0
80003696:	48 7a       	lddpc	r10,800036b0 <udi_cdc_data_sent+0x30>
80003698:	f4 09 0a 08 	st.h	r10[r9],r8
	udi_cdc_tx_both_buf_to_send = false;
8000369c:	48 69       	lddpc	r9,800036b4 <udi_cdc_data_sent+0x34>
8000369e:	b2 88       	st.b	r9[0x0],r8
	udi_cdc_tx_trans_ongoing = false;
800036a0:	48 69       	lddpc	r9,800036b8 <udi_cdc_data_sent+0x38>
800036a2:	b2 88       	st.b	r9[0x0],r8
	udi_cdc_tx_send();
800036a4:	f0 1f 00 06 	mcall	800036bc <udi_cdc_data_sent+0x3c>
800036a8:	d8 02       	popm	pc
800036aa:	00 00       	add	r0,r0
800036ac:	00 00       	add	r0,r0
800036ae:	07 5f       	ld.sh	pc,--r3
800036b0:	00 00       	add	r0,r0
800036b2:	07 60       	ld.uh	r0,--r3
800036b4:	00 00       	add	r0,r0
800036b6:	08 71       	tst	r1,r4
800036b8:	00 00       	add	r0,r0
800036ba:	07 ee       	ld.ub	lr,r3[0x6]
800036bc:	80 00       	ld.sh	r0,r0[0x0]
800036be:	35 a8       	mov	r8,90

800036c0 <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
800036c0:	d4 01       	pushm	lr
	udi_cdc_tx_send();
800036c2:	f0 1f 00 02 	mcall	800036c8 <udi_cdc_data_sof_notify+0x8>
}
800036c6:	d8 02       	popm	pc
800036c8:	80 00       	ld.sh	r0,r0[0x0]
800036ca:	35 a8       	mov	r8,90

800036cc <udi_cdc_data_enable>:
	// to initialize memories or indicate that interface is enabled
	return UDI_CDC_ENABLE_EXT();
}

bool udi_cdc_data_enable(void)
{
800036cc:	eb cd 40 c0 	pushm	r6-r7,lr
	// Initialize TX management
	udi_cdc_tx_trans_ongoing = false;
800036d0:	30 06       	mov	r6,0
800036d2:	48 f8       	lddpc	r8,8000370c <udi_cdc_data_enable+0x40>
800036d4:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_tx_both_buf_to_send = false;
800036d6:	48 f8       	lddpc	r8,80003710 <udi_cdc_data_enable+0x44>
800036d8:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_tx_buf_sel = 0;
800036da:	48 f8       	lddpc	r8,80003714 <udi_cdc_data_enable+0x48>
800036dc:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_tx_buf_nb[0] = 0;
800036de:	48 f8       	lddpc	r8,80003718 <udi_cdc_data_enable+0x4c>
800036e0:	30 07       	mov	r7,0
800036e2:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_tx_buf_nb[1] = 0;
800036e4:	b0 17       	st.h	r8[0x2],r7
	udi_cdc_tx_sof_num = 0;
800036e6:	48 e8       	lddpc	r8,8000371c <udi_cdc_data_enable+0x50>
800036e8:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_tx_send();
800036ea:	f0 1f 00 0e 	mcall	80003720 <udi_cdc_data_enable+0x54>

	// Initialize RX management
	udi_cdc_rx_trans_ongoing = false;
800036ee:	48 e8       	lddpc	r8,80003724 <udi_cdc_data_enable+0x58>
800036f0:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_rx_buf_sel = 0;
800036f2:	48 e8       	lddpc	r8,80003728 <udi_cdc_data_enable+0x5c>
800036f4:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_rx_buf_nb[0] = 0;
800036f6:	48 e8       	lddpc	r8,8000372c <udi_cdc_data_enable+0x60>
800036f8:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_rx_pos = 0;
800036fa:	48 e8       	lddpc	r8,80003730 <udi_cdc_data_enable+0x64>
800036fc:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_running = udi_cdc_rx_start();
800036fe:	f0 1f 00 0e 	mcall	80003734 <udi_cdc_data_enable+0x68>
80003702:	48 e8       	lddpc	r8,80003738 <udi_cdc_data_enable+0x6c>
80003704:	b0 8c       	st.b	r8[0x0],r12
	return udi_cdc_running;
80003706:	11 8c       	ld.ub	r12,r8[0x0]
}
80003708:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000370c:	00 00       	add	r0,r0
8000370e:	07 ee       	ld.ub	lr,r3[0x6]
80003710:	00 00       	add	r0,r0
80003712:	08 71       	tst	r1,r4
80003714:	00 00       	add	r0,r0
80003716:	07 5f       	ld.sh	pc,--r3
80003718:	00 00       	add	r0,r0
8000371a:	07 60       	ld.uh	r0,--r3
8000371c:	00 00       	add	r0,r0
8000371e:	07 ea       	ld.ub	r10,r3[0x6]
80003720:	80 00       	ld.sh	r0,r0[0x0]
80003722:	35 a8       	mov	r8,90
80003724:	00 00       	add	r0,r0
80003726:	08 70       	tst	r0,r4
80003728:	00 00       	add	r0,r0
8000372a:	07 ec       	ld.ub	r12,r3[0x6]
8000372c:	00 00       	add	r0,r0
8000372e:	07 e4       	ld.ub	r4,r3[0x6]
80003730:	00 00       	add	r0,r0
80003732:	07 e8       	ld.ub	r8,r3[0x6]
80003734:	80 00       	ld.sh	r0,r0[0x0]
80003736:	34 70       	mov	r0,71
80003738:	00 00       	add	r0,r0
8000373a:	07 ed       	ld.ub	sp,r3[0x6]

8000373c <udi_cdc_comm_disable>:


void udi_cdc_comm_disable(void)
{
8000373c:	d4 01       	pushm	lr
	udi_cdc_running = false;
8000373e:	30 09       	mov	r9,0
80003740:	48 38       	lddpc	r8,8000374c <udi_cdc_comm_disable+0x10>
80003742:	b0 89       	st.b	r8[0x0],r9
	UDI_CDC_DISABLE_EXT();
80003744:	f0 1f 00 03 	mcall	80003750 <udi_cdc_comm_disable+0x14>
}
80003748:	d8 02       	popm	pc
8000374a:	00 00       	add	r0,r0
8000374c:	00 00       	add	r0,r0
8000374e:	07 ed       	ld.ub	sp,r3[0x6]
80003750:	80 00       	ld.sh	r0,r0[0x0]
80003752:	3f 04       	mov	r4,-16

80003754 <udi_cdc_comm_enable>:

//@}


bool udi_cdc_comm_enable(void)
{
80003754:	d4 01       	pushm	lr
	// Initialize control signal management
	udi_cdc_state = CPU_TO_LE16(0);
80003756:	30 0a       	mov	r10,0
80003758:	48 a8       	lddpc	r8,80003780 <udi_cdc_comm_enable+0x2c>
8000375a:	b0 0a       	st.h	r8[0x0],r10
	uid_cdc_state_msg.value = CPU_TO_LE16(0);
8000375c:	48 a8       	lddpc	r8,80003784 <udi_cdc_comm_enable+0x30>
8000375e:	b0 4a       	st.h	r8[0x8],r10

	udi_cdc_line_coding.dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
80003760:	48 a8       	lddpc	r8,80003788 <udi_cdc_comm_enable+0x34>
80003762:	30 09       	mov	r9,0
80003764:	b0 8a       	st.b	r8[0x0],r10
80003766:	3c 2a       	mov	r10,-62
80003768:	b0 9a       	st.b	r8[0x1],r10
8000376a:	30 1a       	mov	r10,1
8000376c:	b0 aa       	st.b	r8[0x2],r10
8000376e:	b0 b9       	st.b	r8[0x3],r9
	udi_cdc_line_coding.bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
80003770:	b0 c9       	st.b	r8[0x4],r9
	udi_cdc_line_coding.bParityType = UDI_CDC_DEFAULT_PARITY;
80003772:	b0 d9       	st.b	r8[0x5],r9
	udi_cdc_line_coding.bDataBits = UDI_CDC_DEFAULT_DATABITS;
80003774:	30 89       	mov	r9,8
80003776:	b0 e9       	st.b	r8[0x6],r9
	UDI_CDC_SET_CODING_EXT((&udi_cdc_line_coding));

	// Call application callback
	// to initialize memories or indicate that interface is enabled
	return UDI_CDC_ENABLE_EXT();
80003778:	f0 1f 00 05 	mcall	8000378c <udi_cdc_comm_enable+0x38>
}
8000377c:	d8 02       	popm	pc
8000377e:	00 00       	add	r0,r0
80003780:	00 00       	add	r0,r0
80003782:	08 72       	tst	r2,r4
80003784:	00 00       	add	r0,r0
80003786:	00 50       	eor	r0,r0
80003788:	00 00       	add	r0,r0
8000378a:	07 58       	ld.sh	r8,--r3
8000378c:	80 00       	ld.sh	r0,r0[0x0]
8000378e:	3e f8       	mov	r8,-17

80003790 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
80003790:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
80003794:	49 18       	lddpc	r8,800037d8 <udc_sof_notify+0x48>
80003796:	11 89       	ld.ub	r9,r8[0x0]
80003798:	30 08       	mov	r8,0
8000379a:	f0 09 18 00 	cp.b	r9,r8
8000379e:	c1 b0       	breq	800037d4 <udc_sof_notify+0x44>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800037a0:	48 f8       	lddpc	r8,800037dc <udc_sof_notify+0x4c>
800037a2:	70 08       	ld.w	r8,r8[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
800037a4:	70 09       	ld.w	r9,r8[0x0]
800037a6:	13 ca       	ld.ub	r10,r9[0x4]
800037a8:	30 09       	mov	r9,0
800037aa:	f2 0a 18 00 	cp.b	r10,r9
800037ae:	c1 30       	breq	800037d4 <udc_sof_notify+0x44>
800037b0:	30 07       	mov	r7,0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800037b2:	48 b6       	lddpc	r6,800037dc <udc_sof_notify+0x4c>
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
800037b4:	70 18       	ld.w	r8,r8[0x4]
800037b6:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
800037ba:	70 48       	ld.w	r8,r8[0x10]
800037bc:	58 08       	cp.w	r8,0
800037be:	c0 20       	breq	800037c2 <udc_sof_notify+0x32>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
800037c0:	5d 18       	icall	r8
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
800037c2:	2f f7       	sub	r7,-1
800037c4:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800037c6:	6c 08       	ld.w	r8,r6[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
800037c8:	70 09       	ld.w	r9,r8[0x0]
800037ca:	13 c9       	ld.ub	r9,r9[0x4]
800037cc:	ee 09 18 00 	cp.b	r9,r7
800037d0:	fe 9b ff f2 	brhi	800037b4 <udc_sof_notify+0x24>
800037d4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800037d8:	00 00       	add	r0,r0
800037da:	08 7e       	tst	lr,r4
800037dc:	00 00       	add	r0,r0
800037de:	08 78       	tst	r8,r4

800037e0 <udc_get_eof_conf>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
800037e0:	48 78       	lddpc	r8,800037fc <udc_get_eof_conf+0x1c>
800037e2:	70 08       	ld.w	r8,r8[0x0]
800037e4:	70 08       	ld.w	r8,r8[0x0]
800037e6:	11 aa       	ld.ub	r10,r8[0x2]
800037e8:	11 b9       	ld.ub	r9,r8[0x3]
800037ea:	f3 ea 10 89 	or	r9,r9,r10<<0x8
800037ee:	5c c9       	swap.bh	r9
800037f0:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
}
800037f4:	f0 0c 00 0c 	add	r12,r8,r12
800037f8:	5e fc       	retal	r12
800037fa:	00 00       	add	r0,r0
800037fc:	00 00       	add	r0,r0
800037fe:	08 78       	tst	r8,r4

80003800 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
80003800:	eb cd 40 e0 	pushm	r5-r7,lr
80003804:	18 97       	mov	r7,r12
80003806:	16 96       	mov	r6,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration)
80003808:	49 b8       	lddpc	r8,80003874 <udc_update_iface_desc+0x74>
8000380a:	11 89       	ld.ub	r9,r8[0x0]
8000380c:	30 08       	mov	r8,0
8000380e:	f0 09 18 00 	cp.b	r9,r8
80003812:	c2 f0       	breq	80003870 <udc_update_iface_desc+0x70>
		return false;

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
80003814:	49 98       	lddpc	r8,80003878 <udc_update_iface_desc+0x78>
80003816:	70 08       	ld.w	r8,r8[0x0]
80003818:	70 08       	ld.w	r8,r8[0x0]
8000381a:	11 c9       	ld.ub	r9,r8[0x4]
8000381c:	18 9e       	mov	lr,r12
8000381e:	f8 09 18 00 	cp.b	r9,r12
80003822:	e0 88 00 27 	brls	80003870 <udc_update_iface_desc+0x70>
		return false;

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
80003826:	49 65       	lddpc	r5,8000387c <udc_update_iface_desc+0x7c>
80003828:	8b 08       	st.w	r5[0x0],r8
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
8000382a:	f0 1f 00 16 	mcall	80003880 <udc_update_iface_desc+0x80>
	while (ptr_end_desc >
8000382e:	6a 08       	ld.w	r8,r5[0x0]
80003830:	10 3c       	cp.w	r12,r8
80003832:	e0 88 00 1f 	brls	80003870 <udc_update_iface_desc+0x70>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
80003836:	30 4b       	mov	r11,4
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80003838:	10 99       	mov	r9,r8
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
8000383a:	11 9a       	ld.ub	r10,r8[0x1]
8000383c:	f6 0a 18 00 	cp.b	r10,r11
80003840:	c0 a1       	brne	80003854 <udc_update_iface_desc+0x54>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber)
80003842:	11 aa       	ld.ub	r10,r8[0x2]
80003844:	0e 9e       	mov	lr,r7
80003846:	ee 0a 18 00 	cp.b	r10,r7
8000384a:	c0 51       	brne	80003854 <udc_update_iface_desc+0x54>
					&& (setting_num ==
							udc_ptr_iface->
8000384c:	11 ba       	ld.ub	r10,r8[0x3]
8000384e:	ec 0a 18 00 	cp.b	r10,r6
80003852:	c0 b0       	breq	80003868 <udc_update_iface_desc+0x68>
							bAlternateSetting))
				return true;	// Interface found
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) ((uint8_t
80003854:	13 88       	ld.ub	r8,r9[0x0]
80003856:	f2 08 00 08 	add	r8,r9,r8
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
8000385a:	10 3c       	cp.w	r12,r8
8000385c:	fe 9b ff ee 	brhi	80003838 <udc_update_iface_desc+0x38>
80003860:	48 79       	lddpc	r9,8000387c <udc_update_iface_desc+0x7c>
80003862:	93 08       	st.w	r9[0x0],r8
80003864:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003868:	48 59       	lddpc	r9,8000387c <udc_update_iface_desc+0x7c>
8000386a:	93 08       	st.w	r9[0x0],r8
8000386c:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80003870:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003874:	00 00       	add	r0,r0
80003876:	08 7e       	tst	lr,r4
80003878:	00 00       	add	r0,r0
8000387a:	08 78       	tst	r8,r4
8000387c:	00 00       	add	r0,r0
8000387e:	08 84       	andn	r4,r4
80003880:	80 00       	ld.sh	r0,r0[0x0]
80003882:	37 e0       	mov	r0,126

80003884 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
80003884:	eb cd 40 c0 	pushm	r6-r7,lr
80003888:	18 96       	mov	r6,r12
8000388a:	16 97       	mov	r7,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
8000388c:	f0 1f 00 11 	mcall	800038d0 <udc_next_desc_in_iface+0x4c>
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
80003890:	0d 88       	ld.ub	r8,r6[0x0]
80003892:	10 06       	add	r6,r8
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
80003894:	0c 3c       	cp.w	r12,r6
80003896:	e0 88 00 19 	brls	800038c8 <udc_next_desc_in_iface+0x44>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
8000389a:	0d 98       	ld.ub	r8,r6[0x1]
8000389c:	30 49       	mov	r9,4
8000389e:	f2 08 18 00 	cp.b	r8,r9
800038a2:	c1 30       	breq	800038c8 <udc_next_desc_in_iface+0x44>
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
800038a4:	ee 08 18 00 	cp.b	r8,r7
800038a8:	c0 a1       	brne	800038bc <udc_next_desc_in_iface+0x38>
800038aa:	c1 08       	rjmp	800038ca <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
800038ac:	0d 98       	ld.ub	r8,r6[0x1]
800038ae:	f2 08 18 00 	cp.b	r8,r9
800038b2:	c0 b0       	breq	800038c8 <udc_next_desc_in_iface+0x44>
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
800038b4:	ee 08 18 00 	cp.b	r8,r7
800038b8:	c0 31       	brne	800038be <udc_next_desc_in_iface+0x3a>
800038ba:	c0 88       	rjmp	800038ca <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
800038bc:	30 49       	mov	r9,4
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
			return desc;	// Specific descriptor found
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
800038be:	0d 88       	ld.ub	r8,r6[0x0]
800038c0:	10 06       	add	r6,r8
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
800038c2:	0c 3c       	cp.w	r12,r6
800038c4:	fe 9b ff f4 	brhi	800038ac <udc_next_desc_in_iface+0x28>
800038c8:	30 06       	mov	r6,0
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL;	// No specific descriptor found
}
800038ca:	0c 9c       	mov	r12,r6
800038cc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800038d0:	80 00       	ld.sh	r0,r0[0x0]
800038d2:	37 e0       	mov	r0,126

800038d4 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
800038d4:	d4 01       	pushm	lr
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
800038d6:	48 48       	lddpc	r8,800038e4 <udc_valid_address+0x10>
800038d8:	11 bc       	ld.ub	r12,r8[0x3]
800038da:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800038de:	f0 1f 00 03 	mcall	800038e8 <udc_valid_address+0x14>
}
800038e2:	d8 02       	popm	pc
800038e4:	00 00       	add	r0,r0
800038e6:	0a 00       	add	r0,r5
800038e8:	80 00       	ld.sh	r0,r0[0x0]
800038ea:	23 a0       	sub	r0,58

800038ec <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
800038ec:	eb cd 40 e0 	pushm	r5-r7,lr
800038f0:	18 95       	mov	r5,r12
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num))
800038f2:	f0 1f 00 12 	mcall	80003938 <udc_iface_enable+0x4c>
800038f6:	c1 f0       	breq	80003934 <udc_iface_enable+0x48>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
800038f8:	49 18       	lddpc	r8,8000393c <udc_iface_enable+0x50>
800038fa:	70 07       	ld.w	r7,r8[0x0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
800038fc:	30 56       	mov	r6,5
800038fe:	0c 9b       	mov	r11,r6
80003900:	0e 9c       	mov	r12,r7
80003902:	f0 1f 00 10 	mcall	80003940 <udc_iface_enable+0x54>
80003906:	18 97       	mov	r7,r12
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
80003908:	c0 d0       	breq	80003922 <udc_iface_enable+0x36>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
						ep_desc->bmAttributes,
						le16_to_cpu
8000390a:	19 ca       	ld.ub	r10,r12[0x4]
8000390c:	19 d8       	ld.ub	r8,r12[0x5]
8000390e:	f1 ea 10 8a 	or	r10,r8,r10<<0x8
80003912:	5c ca       	swap.bh	r10
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
80003914:	5c 7a       	castu.h	r10
80003916:	19 bb       	ld.ub	r11,r12[0x3]
80003918:	19 ac       	ld.ub	r12,r12[0x2]
8000391a:	f0 1f 00 0b 	mcall	80003944 <udc_iface_enable+0x58>
8000391e:	cf 01       	brne	800038fe <udc_iface_enable+0x12>
80003920:	c0 a8       	rjmp	80003934 <udc_iface_enable+0x48>
						(ep_desc->wMaxPacketSize)))
			return false;
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
80003922:	48 a8       	lddpc	r8,80003948 <udc_iface_enable+0x5c>
80003924:	70 08       	ld.w	r8,r8[0x0]
80003926:	70 18       	ld.w	r8,r8[0x4]
80003928:	f0 05 03 28 	ld.w	r8,r8[r5<<0x2]
8000392c:	70 0c       	ld.w	r12,r8[0x0]
8000392e:	5d 1c       	icall	r12
80003930:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003934:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003938:	80 00       	ld.sh	r0,r0[0x0]
8000393a:	38 00       	mov	r0,-128
8000393c:	00 00       	add	r0,r0
8000393e:	08 84       	andn	r4,r4
80003940:	80 00       	ld.sh	r0,r0[0x0]
80003942:	38 84       	mov	r4,-120
80003944:	80 00       	ld.sh	r0,r0[0x0]
80003946:	28 ec       	sub	r12,-114
80003948:	00 00       	add	r0,r0
8000394a:	08 78       	tst	r8,r4

8000394c <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
8000394c:	eb cd 40 e0 	pushm	r5-r7,lr
80003950:	18 96       	mov	r6,r12
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
80003952:	18 97       	mov	r7,r12
80003954:	30 0b       	mov	r11,0
80003956:	f0 1f 00 12 	mcall	8000399c <udc_iface_disable+0x50>
8000395a:	c1 e0       	breq	80003996 <udc_iface_disable+0x4a>
		return false;

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
8000395c:	49 18       	lddpc	r8,800039a0 <udc_iface_disable+0x54>
8000395e:	70 08       	ld.w	r8,r8[0x0]
80003960:	70 18       	ld.w	r8,r8[0x4]
80003962:	f0 06 03 25 	ld.w	r5,r8[r6<<0x2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting()))
80003966:	6a 3c       	ld.w	r12,r5[0xc]
80003968:	5d 1c       	icall	r12
8000396a:	18 9b       	mov	r11,r12
8000396c:	0c 9c       	mov	r12,r6
8000396e:	f0 1f 00 0c 	mcall	8000399c <udc_iface_disable+0x50>
80003972:	c1 20       	breq	80003996 <udc_iface_disable+0x4a>
		return false;

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
80003974:	48 c8       	lddpc	r8,800039a4 <udc_iface_disable+0x58>
80003976:	70 07       	ld.w	r7,r8[0x0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
80003978:	30 56       	mov	r6,5
8000397a:	0c 9b       	mov	r11,r6
8000397c:	0e 9c       	mov	r12,r7
8000397e:	f0 1f 00 0b 	mcall	800039a8 <udc_iface_disable+0x5c>
80003982:	18 97       	mov	r7,r12
					udc_next_desc_in_iface((UDC_DESC_STORAGE
							usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc)
80003984:	c0 50       	breq	8000398e <udc_iface_disable+0x42>
				break;
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
80003986:	19 ac       	ld.ub	r12,r12[0x2]
80003988:	f0 1f 00 09 	mcall	800039ac <udc_iface_disable+0x60>
		}
8000398c:	cf 7b       	rjmp	8000397a <udc_iface_disable+0x2e>
	}
#endif

	// Disable interface
	udi_api->disable();
8000398e:	6a 18       	ld.w	r8,r5[0x4]
80003990:	5d 18       	icall	r8
80003992:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
	return true;
80003996:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
8000399a:	00 00       	add	r0,r0
8000399c:	80 00       	ld.sh	r0,r0[0x0]
8000399e:	38 00       	mov	r0,-128
800039a0:	00 00       	add	r0,r0
800039a2:	08 78       	tst	r8,r4
800039a4:	00 00       	add	r0,r0
800039a6:	08 84       	andn	r4,r4
800039a8:	80 00       	ld.sh	r0,r0[0x0]
800039aa:	38 84       	mov	r4,-120
800039ac:	80 00       	ld.sh	r0,r0[0x0]
800039ae:	25 64       	sub	r4,86

800039b0 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device, 
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
800039b0:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
800039b4:	49 38       	lddpc	r8,80003a00 <udc_reset+0x50>
800039b6:	11 89       	ld.ub	r9,r8[0x0]
800039b8:	30 08       	mov	r8,0
800039ba:	f0 09 18 00 	cp.b	r9,r8
800039be:	c1 70       	breq	800039ec <udc_reset+0x3c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800039c0:	49 18       	lddpc	r8,80003a04 <udc_reset+0x54>
800039c2:	70 08       	ld.w	r8,r8[0x0]
800039c4:	70 08       	ld.w	r8,r8[0x0]
800039c6:	11 c9       	ld.ub	r9,r8[0x4]
800039c8:	30 08       	mov	r8,0
800039ca:	f0 09 18 00 	cp.b	r9,r8
800039ce:	c0 f0       	breq	800039ec <udc_reset+0x3c>
800039d0:	30 07       	mov	r7,0
800039d2:	48 d6       	lddpc	r6,80003a04 <udc_reset+0x54>
				iface_num++) {
			udc_iface_disable(iface_num);
800039d4:	0e 9c       	mov	r12,r7
800039d6:	f0 1f 00 0d 	mcall	80003a08 <udc_reset+0x58>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
800039da:	2f f7       	sub	r7,-1
800039dc:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800039de:	6c 08       	ld.w	r8,r6[0x0]
800039e0:	70 08       	ld.w	r8,r8[0x0]
800039e2:	11 c8       	ld.ub	r8,r8[0x4]
800039e4:	ee 08 18 00 	cp.b	r8,r7
800039e8:	fe 9b ff f6 	brhi	800039d4 <udc_reset+0x24>
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
800039ec:	30 09       	mov	r9,0
800039ee:	48 58       	lddpc	r8,80003a00 <udc_reset+0x50>
800039f0:	b0 89       	st.b	r8[0x0],r9
	if (0 != (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status)) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
800039f2:	e0 69 01 00 	mov	r9,256
800039f6:	48 68       	lddpc	r8,80003a0c <udc_reset+0x5c>
800039f8:	b0 09       	st.h	r8[0x0],r9
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
800039fa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800039fe:	00 00       	add	r0,r0
80003a00:	00 00       	add	r0,r0
80003a02:	08 7e       	tst	lr,r4
80003a04:	00 00       	add	r0,r0
80003a06:	08 78       	tst	r8,r4
80003a08:	80 00       	ld.sh	r0,r0[0x0]
80003a0a:	39 4c       	mov	r12,-108
80003a0c:	00 00       	add	r0,r0
80003a0e:	08 7c       	tst	r12,r4

80003a10 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
80003a10:	eb cd 40 e0 	pushm	r5-r7,lr
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
80003a14:	fe f8 04 3c 	ld.w	r8,pc[1084]
80003a18:	30 09       	mov	r9,0
80003a1a:	b0 69       	st.h	r8[0xc],r9
	udd_g_ctrlreq.callback = NULL;
80003a1c:	30 0a       	mov	r10,0
80003a1e:	91 4a       	st.w	r8[0x10],r10
	udd_g_ctrlreq.over_under_run = NULL;
80003a20:	91 5a       	st.w	r8[0x14],r10

	if (Udd_setup_is_in()) {
80003a22:	11 88       	ld.ub	r8,r8[0x0]
80003a24:	10 9a       	mov	r10,r8
80003a26:	f2 08 18 00 	cp.b	r8,r9
80003a2a:	c0 94       	brge	80003a3c <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0)
80003a2c:	fe f9 04 24 	ld.w	r9,pc[1060]
80003a30:	92 3b       	ld.sh	r11,r9[0x6]
80003a32:	30 09       	mov	r9,0
80003a34:	f2 0b 19 00 	cp.h	r11,r9
80003a38:	e0 80 02 0a 	breq	80003e4c <udc_process_setup+0x43c>
			return false;	// Error from USB host
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
80003a3c:	10 99       	mov	r9,r8
80003a3e:	e2 19 00 60 	andl	r9,0x60,COH
80003a42:	e0 81 01 d9 	brne	80003df4 <udc_process_setup+0x3e4>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
80003a46:	f2 0a 18 00 	cp.b	r10,r9
80003a4a:	e0 84 01 01 	brge	80003c4c <udc_process_setup+0x23c>
		// GET Standard Requests 
		if (udd_g_ctrlreq.req.wLength == 0)
80003a4e:	fe f9 04 02 	ld.w	r9,pc[1026]
80003a52:	92 39       	ld.sh	r9,r9[0x6]
80003a54:	58 09       	cp.w	r9,0
80003a56:	e0 80 01 cf 	breq	80003df4 <udc_process_setup+0x3e4>
			return false;	// Error for USB host

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
80003a5a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003a5e:	e0 81 00 9e 	brne	80003b9a <udc_process_setup+0x18a>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
80003a62:	fe fa 03 ee 	ld.w	r10,pc[1006]
80003a66:	15 9a       	ld.ub	r10,r10[0x1]
80003a68:	30 6b       	mov	r11,6
80003a6a:	f6 0a 18 00 	cp.b	r10,r11
80003a6e:	c1 a0       	breq	80003aa2 <udc_process_setup+0x92>
80003a70:	30 8b       	mov	r11,8
80003a72:	f6 0a 18 00 	cp.b	r10,r11
80003a76:	e0 80 00 85 	breq	80003b80 <udc_process_setup+0x170>
80003a7a:	30 0b       	mov	r11,0
80003a7c:	f6 0a 18 00 	cp.b	r10,r11
80003a80:	e0 81 00 8d 	brne	80003b9a <udc_process_setup+0x18a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status))
80003a84:	30 28       	mov	r8,2
80003a86:	f0 09 19 00 	cp.h	r9,r8
80003a8a:	c0 40       	breq	80003a92 <udc_process_setup+0x82>
80003a8c:	30 0c       	mov	r12,0
80003a8e:	e0 8f 01 af 	bral	80003dec <udc_process_setup+0x3dc>
		return false;

	udd_set_setup_payload(
80003a92:	30 2b       	mov	r11,2
80003a94:	fe fc 03 c0 	ld.w	r12,pc[960]
80003a98:	f0 1f 00 f0 	mcall	80003e58 <udc_process_setup+0x448>
80003a9c:	30 1c       	mov	r12,1
80003a9e:	e0 8f 01 a7 	bral	80003dec <udc_process_setup+0x3dc>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
80003aa2:	fe f8 03 ae 	ld.w	r8,pc[942]
80003aa6:	90 19       	ld.sh	r9,r8[0x2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
80003aa8:	f2 08 16 08 	lsr	r8,r9,0x8
80003aac:	30 2a       	mov	r10,2
80003aae:	f4 08 18 00 	cp.b	r8,r10
80003ab2:	c1 00       	breq	80003ad2 <udc_process_setup+0xc2>
80003ab4:	30 3a       	mov	r10,3
80003ab6:	f4 08 18 00 	cp.b	r8,r10
80003aba:	c2 a0       	breq	80003b0e <udc_process_setup+0xfe>
80003abc:	30 19       	mov	r9,1
80003abe:	f2 08 18 00 	cp.b	r8,r9
80003ac2:	c5 d1       	brne	80003b7c <udc_process_setup+0x16c>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
80003ac4:	fe f8 03 98 	ld.w	r8,pc[920]
80003ac8:	70 0c       	ld.w	r12,r8[0x0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
80003aca:	19 8b       	ld.ub	r11,r12[0x0]
80003acc:	f0 1f 00 e3 	mcall	80003e58 <udc_process_setup+0x448>
80003ad0:	c4 78       	rjmp	80003b5e <udc_process_setup+0x14e>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
80003ad2:	5c 59       	castu.b	r9
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
80003ad4:	fe f8 03 88 	ld.w	r8,pc[904]
80003ad8:	70 08       	ld.w	r8,r8[0x0]
80003ada:	f1 38 00 11 	ld.ub	r8,r8[17]
80003ade:	f2 08 18 00 	cp.b	r8,r9
80003ae2:	e0 88 00 4d 	brls	80003b7c <udc_process_setup+0x16c>
					bNumConfigurations)
				return false;
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
80003ae6:	fe f8 03 76 	ld.w	r8,pc[886]
80003aea:	70 18       	ld.w	r8,r8[0x4]
80003aec:	f0 09 03 3c 	ld.w	r12,r8[r9<<0x3]
80003af0:	19 a9       	ld.ub	r9,r12[0x2]
80003af2:	19 b8       	ld.ub	r8,r12[0x3]
80003af4:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80003af8:	5c c8       	swap.bh	r8
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations)
				return false;
			udd_set_setup_payload(
80003afa:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
80003afe:	f0 1f 00 d7 	mcall	80003e58 <udc_process_setup+0x448>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
80003b02:	fe f8 03 4e 	ld.w	r8,pc[846]
80003b06:	70 28       	ld.w	r8,r8[0x8]
80003b08:	30 29       	mov	r9,2
80003b0a:	b0 99       	st.b	r8[0x1],r9
80003b0c:	c2 98       	rjmp	80003b5e <udc_process_setup+0x14e>
	uint8_t i;
	uint8_t *str;
	uint8_t str_lgt=0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
80003b0e:	5c 59       	castu.b	r9
80003b10:	58 19       	cp.w	r9,1
80003b12:	c1 00       	breq	80003b32 <udc_process_setup+0x122>
80003b14:	58 29       	cp.w	r9,2
80003b16:	c0 40       	breq	80003b1e <udc_process_setup+0x10e>
80003b18:	58 09       	cp.w	r9,0
80003b1a:	c0 60       	breq	80003b26 <udc_process_setup+0x116>
80003b1c:	c3 08       	rjmp	80003b7c <udc_process_setup+0x16c>
80003b1e:	fe fc 03 42 	ld.w	r12,pc[834]
80003b22:	30 3b       	mov	r11,3
80003b24:	c0 a8       	rjmp	80003b38 <udc_process_setup+0x128>
	case 0:
		udd_set_setup_payload(
80003b26:	30 4b       	mov	r11,4
80003b28:	fe fc 03 3c 	ld.w	r12,pc[828]
80003b2c:	f0 1f 00 cb 	mcall	80003e58 <udc_process_setup+0x448>
80003b30:	c1 78       	rjmp	80003b5e <udc_process_setup+0x14e>
80003b32:	fe fc 03 36 	ld.w	r12,pc[822]
80003b36:	30 9b       	mov	r11,9
80003b38:	fe fa 03 34 	ld.w	r10,pc[820]
80003b3c:	2f ea       	sub	r10,-2
80003b3e:	18 98       	mov	r8,r12
		return false;
	}

	if (str_lgt != 0) {
		for(i = 0; i < str_lgt; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
80003b40:	11 39       	ld.ub	r9,r8++
80003b42:	5c c9       	swap.bh	r9
80003b44:	14 b9       	st.h	r10++,r9
#endif
		return false;
	}

	if (str_lgt != 0) {
		for(i = 0; i < str_lgt; i++) {
80003b46:	f0 0c 01 09 	sub	r9,r8,r12
80003b4a:	f6 09 18 00 	cp.b	r9,r11
80003b4e:	cf 93       	brcs	80003b40 <udc_process_setup+0x130>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}
		
		udc_string_desc.header.bLength = 2 + (str_lgt) * 2;
80003b50:	a1 7b       	lsl	r11,0x1
80003b52:	2f eb       	sub	r11,-2
80003b54:	fe fc 03 18 	ld.w	r12,pc[792]
80003b58:	b8 8b       	st.b	r12[0x0],r11
		udd_set_setup_payload(
80003b5a:	f0 1f 00 c0 	mcall	80003e58 <udc_process_setup+0x448>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size)
80003b5e:	fe f8 02 f2 	ld.w	r8,pc[754]
80003b62:	90 39       	ld.sh	r9,r8[0x6]
80003b64:	90 68       	ld.sh	r8,r8[0xc]
80003b66:	f2 08 19 00 	cp.h	r8,r9
80003b6a:	e0 8b 00 04 	brhi	80003b72 <udc_process_setup+0x162>
80003b6e:	30 1c       	mov	r12,1
80003b70:	c3 e9       	rjmp	80003dec <udc_process_setup+0x3dc>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
80003b72:	fe f8 02 de 	ld.w	r8,pc[734]
80003b76:	b0 69       	st.h	r8[0xc],r9
80003b78:	30 1c       	mov	r12,1
80003b7a:	c3 99       	rjmp	80003dec <udc_process_setup+0x3dc>
80003b7c:	30 0c       	mov	r12,0
80003b7e:	c3 79       	rjmp	80003dec <udc_process_setup+0x3dc>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1)
80003b80:	30 18       	mov	r8,1
80003b82:	f0 09 19 00 	cp.h	r9,r8
80003b86:	c0 30       	breq	80003b8c <udc_process_setup+0x17c>
80003b88:	30 0c       	mov	r12,0
80003b8a:	c3 19       	rjmp	80003dec <udc_process_setup+0x3dc>
		return false;

	udd_set_setup_payload(&udc_num_configuration,1);
80003b8c:	30 1b       	mov	r11,1
80003b8e:	fe fc 02 e2 	ld.w	r12,pc[738]
80003b92:	f0 1f 00 b2 	mcall	80003e58 <udc_process_setup+0x448>
80003b96:	30 1c       	mov	r12,1
80003b98:	c2 a9       	rjmp	80003dec <udc_process_setup+0x3dc>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
80003b9a:	58 18       	cp.w	r8,1
80003b9c:	c3 61       	brne	80003c08 <udc_process_setup+0x1f8>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
80003b9e:	fe fa 02 b2 	ld.w	r10,pc[690]
80003ba2:	15 9b       	ld.ub	r11,r10[0x1]
80003ba4:	30 aa       	mov	r10,10
80003ba6:	f4 0b 18 00 	cp.b	r11,r10
80003baa:	c2 f1       	brne	80003c08 <udc_process_setup+0x1f8>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1)
80003bac:	f0 09 19 00 	cp.h	r9,r8
80003bb0:	c2 a1       	brne	80003c04 <udc_process_setup+0x1f4>
		return false;	// Error in request
	if (!udc_num_configuration)
80003bb2:	fe f8 02 be 	ld.w	r8,pc[702]
80003bb6:	11 89       	ld.ub	r9,r8[0x0]
80003bb8:	30 08       	mov	r8,0
80003bba:	f0 09 18 00 	cp.b	r9,r8
80003bbe:	c2 30       	breq	80003c04 <udc_process_setup+0x1f4>
		return false;	// The device is not is configured state yet

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
80003bc0:	fe f8 02 90 	ld.w	r8,pc[656]
80003bc4:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
80003bc6:	fe f8 02 ae 	ld.w	r8,pc[686]
80003bca:	70 08       	ld.w	r8,r8[0x0]
80003bcc:	70 08       	ld.w	r8,r8[0x0]
80003bce:	11 c8       	ld.ub	r8,r8[0x4]
80003bd0:	ee 08 18 00 	cp.b	r8,r7
80003bd4:	e0 88 00 18 	brls	80003c04 <udc_process_setup+0x1f4>
		return false;

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
80003bd8:	30 0b       	mov	r11,0
80003bda:	0e 9c       	mov	r12,r7
80003bdc:	f0 1f 00 a7 	mcall	80003e78 <udc_process_setup+0x468>
80003be0:	c1 20       	breq	80003c04 <udc_process_setup+0x1f4>
		return false;
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
	udc_iface_setting = udi_api->getsetting();
80003be2:	fe f8 02 92 	ld.w	r8,pc[658]
80003be6:	70 08       	ld.w	r8,r8[0x0]
80003be8:	70 18       	ld.w	r8,r8[0x4]
80003bea:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
80003bee:	70 3c       	ld.w	r12,r8[0xc]
80003bf0:	5d 1c       	icall	r12
80003bf2:	fe f8 02 8a 	ld.w	r8,pc[650]
80003bf6:	b0 8c       	st.b	r8[0x0],r12
	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
80003bf8:	30 1b       	mov	r11,1
80003bfa:	10 9c       	mov	r12,r8
80003bfc:	f0 1f 00 97 	mcall	80003e58 <udc_process_setup+0x448>
80003c00:	30 1c       	mov	r12,1
80003c02:	cf 58       	rjmp	80003dec <udc_process_setup+0x3dc>
80003c04:	30 0c       	mov	r12,0
80003c06:	cf 38       	rjmp	80003dec <udc_process_setup+0x3dc>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
80003c08:	58 28       	cp.w	r8,2
80003c0a:	e0 81 00 f5 	brne	80003df4 <udc_process_setup+0x3e4>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
80003c0e:	fe f8 02 42 	ld.w	r8,pc[578]
80003c12:	11 9a       	ld.ub	r10,r8[0x1]
80003c14:	30 08       	mov	r8,0
80003c16:	f0 0a 18 00 	cp.b	r10,r8
80003c1a:	e0 81 00 e8 	brne	80003dea <udc_process_setup+0x3da>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status))
80003c1e:	30 28       	mov	r8,2
80003c20:	f0 09 19 00 	cp.h	r9,r8
80003c24:	c0 30       	breq	80003c2a <udc_process_setup+0x21a>
80003c26:	30 0c       	mov	r12,0
80003c28:	ce 28       	rjmp	80003dec <udc_process_setup+0x3dc>
		return false;

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
80003c2a:	fe f8 02 26 	ld.w	r8,pc[550]
80003c2e:	11 dc       	ld.ub	r12,r8[0x5]
80003c30:	f0 1f 00 94 	mcall	80003e80 <udc_process_setup+0x470>
80003c34:	e0 68 01 00 	mov	r8,256
80003c38:	f9 b8 00 00 	moveq	r8,0
80003c3c:	fe fc 02 48 	ld.w	r12,pc[584]
80003c40:	b8 08       	st.h	r12[0x0],r8
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload(
80003c42:	30 2b       	mov	r11,2
80003c44:	f0 1f 00 85 	mcall	80003e58 <udc_process_setup+0x448>
80003c48:	30 1c       	mov	r12,1
80003c4a:	cd 18       	rjmp	80003dec <udc_process_setup+0x3dc>
			}
		}
#endif
	} else {
		// SET Standard Requests  
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
80003c4c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003c50:	c7 71       	brne	80003d3e <udc_process_setup+0x32e>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
80003c52:	fe f9 01 fe 	ld.w	r9,pc[510]
80003c56:	13 99       	ld.ub	r9,r9[0x1]
80003c58:	30 3a       	mov	r10,3
80003c5a:	f4 09 18 00 	cp.b	r9,r10
80003c5e:	e0 80 00 c6 	breq	80003dea <udc_process_setup+0x3da>
80003c62:	e0 8b 00 07 	brhi	80003c70 <udc_process_setup+0x260>
80003c66:	30 1a       	mov	r10,1
80003c68:	f4 09 18 00 	cp.b	r9,r10
80003c6c:	c6 91       	brne	80003d3e <udc_process_setup+0x32e>
80003c6e:	c1 78       	rjmp	80003c9c <udc_process_setup+0x28c>
80003c70:	30 5a       	mov	r10,5
80003c72:	f4 09 18 00 	cp.b	r9,r10
80003c76:	c0 60       	breq	80003c82 <udc_process_setup+0x272>
80003c78:	30 9a       	mov	r10,9
80003c7a:	f4 09 18 00 	cp.b	r9,r10
80003c7e:	c6 01       	brne	80003d3e <udc_process_setup+0x32e>
80003c80:	c2 28       	rjmp	80003cc4 <udc_process_setup+0x2b4>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003c82:	4f 48       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003c84:	90 39       	ld.sh	r9,r8[0x6]
80003c86:	30 08       	mov	r8,0
80003c88:	f0 09 19 00 	cp.h	r9,r8
80003c8c:	c0 30       	breq	80003c92 <udc_process_setup+0x282>
80003c8e:	30 0c       	mov	r12,0
80003c90:	ca e8       	rjmp	80003dec <udc_process_setup+0x3dc>
		return false;

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
80003c92:	4f e9       	lddpc	r9,80003e88 <udc_process_setup+0x478>
80003c94:	4e f8       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003c96:	91 49       	st.w	r8[0x10],r9
80003c98:	30 1c       	mov	r12,1
80003c9a:	ca 98       	rjmp	80003dec <udc_process_setup+0x3dc>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003c9c:	4e d8       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003c9e:	90 39       	ld.sh	r9,r8[0x6]
80003ca0:	30 08       	mov	r8,0
80003ca2:	f0 09 19 00 	cp.h	r9,r8
80003ca6:	c0 d1       	brne	80003cc0 <udc_process_setup+0x2b0>
		return false;

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
80003ca8:	4e a8       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003caa:	90 19       	ld.sh	r9,r8[0x2]
80003cac:	30 18       	mov	r8,1
80003cae:	f0 09 19 00 	cp.h	r9,r8
80003cb2:	c0 71       	brne	80003cc0 <udc_process_setup+0x2b0>
		udc_device_status &= CPU_TO_LE16(~USB_DEV_STATUS_REMOTEWAKEUP);
80003cb4:	4e 88       	lddpc	r8,80003e54 <udc_process_setup+0x444>
80003cb6:	90 09       	ld.sh	r9,r8[0x0]
80003cb8:	a9 d9       	cbr	r9,0x9
80003cba:	b0 09       	st.h	r8[0x0],r9
80003cbc:	30 1c       	mov	r12,1
80003cbe:	c9 78       	rjmp	80003dec <udc_process_setup+0x3dc>
80003cc0:	30 0c       	mov	r12,0
80003cc2:	c9 58       	rjmp	80003dec <udc_process_setup+0x3dc>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength != 0)
80003cc4:	4e 38       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003cc6:	90 39       	ld.sh	r9,r8[0x6]
80003cc8:	30 08       	mov	r8,0
80003cca:	f0 09 19 00 	cp.h	r9,r8
80003cce:	c3 41       	brne	80003d36 <udc_process_setup+0x326>
		return false;
	// Authorize configuration only if the address is valid
	if (!udd_getaddress())
80003cd0:	f0 1f 00 6f 	mcall	80003e8c <udc_process_setup+0x47c>
80003cd4:	c3 10       	breq	80003d36 <udc_process_setup+0x326>
			return false;
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
80003cd6:	4d f8       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003cd8:	11 b9       	ld.ub	r9,r8[0x3]
80003cda:	4e 18       	lddpc	r8,80003e5c <udc_process_setup+0x44c>
80003cdc:	70 08       	ld.w	r8,r8[0x0]
80003cde:	f1 38 00 11 	ld.ub	r8,r8[17]
80003ce2:	10 39       	cp.w	r9,r8
80003ce4:	e0 89 00 29 	brgt	80003d36 <udc_process_setup+0x326>
				udc_config.confdev_lsfs->bNumConfigurations)
			return false;
	}

	// Reset current configuration
	udc_reset();
80003ce8:	f0 1f 00 6a 	mcall	80003e90 <udc_process_setup+0x480>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
80003cec:	4d 98       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003cee:	11 b8       	ld.ub	r8,r8[0x3]
80003cf0:	4e 09       	lddpc	r9,80003e70 <udc_process_setup+0x460>
80003cf2:	b2 88       	st.b	r9[0x0],r8
	if (udc_num_configuration == 0) {
80003cf4:	58 08       	cp.w	r8,0
80003cf6:	c2 20       	breq	80003d3a <udc_process_setup+0x32a>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
80003cf8:	20 18       	sub	r8,1
80003cfa:	4d 99       	lddpc	r9,80003e5c <udc_process_setup+0x44c>
80003cfc:	72 19       	ld.w	r9,r9[0x4]
80003cfe:	f2 08 00 38 	add	r8,r9,r8<<0x3
80003d02:	4d d9       	lddpc	r9,80003e74 <udc_process_setup+0x464>
80003d04:	93 08       	st.w	r9[0x0],r8
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003d06:	70 08       	ld.w	r8,r8[0x0]
80003d08:	11 c9       	ld.ub	r9,r8[0x4]
80003d0a:	30 08       	mov	r8,0
80003d0c:	f0 09 18 00 	cp.b	r9,r8
80003d10:	c1 50       	breq	80003d3a <udc_process_setup+0x32a>
80003d12:	30 07       	mov	r7,0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0))
80003d14:	0e 95       	mov	r5,r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003d16:	4d 86       	lddpc	r6,80003e74 <udc_process_setup+0x464>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0))
80003d18:	0a 9b       	mov	r11,r5
80003d1a:	0e 9c       	mov	r12,r7
80003d1c:	f0 1f 00 5e 	mcall	80003e94 <udc_process_setup+0x484>
80003d20:	c0 b0       	breq	80003d36 <udc_process_setup+0x326>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
80003d22:	2f f7       	sub	r7,-1
80003d24:	5c 57       	castu.b	r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003d26:	6c 08       	ld.w	r8,r6[0x0]
80003d28:	70 08       	ld.w	r8,r8[0x0]
80003d2a:	11 c8       	ld.ub	r8,r8[0x4]
80003d2c:	ee 08 18 00 	cp.b	r8,r7
80003d30:	fe 9b ff f4 	brhi	80003d18 <udc_process_setup+0x308>
80003d34:	c0 38       	rjmp	80003d3a <udc_process_setup+0x32a>
80003d36:	30 0c       	mov	r12,0
80003d38:	c5 a8       	rjmp	80003dec <udc_process_setup+0x3dc>
80003d3a:	30 1c       	mov	r12,1
80003d3c:	c5 88       	rjmp	80003dec <udc_process_setup+0x3dc>
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
80003d3e:	58 18       	cp.w	r8,1
80003d40:	c2 21       	brne	80003d84 <udc_process_setup+0x374>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
80003d42:	4c 49       	lddpc	r9,80003e50 <udc_process_setup+0x440>
80003d44:	13 9a       	ld.ub	r10,r9[0x1]
80003d46:	30 b9       	mov	r9,11
80003d48:	f2 0a 18 00 	cp.b	r10,r9
80003d4c:	c1 c1       	brne	80003d84 <udc_process_setup+0x374>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength != 0)
80003d4e:	4c 18       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003d50:	90 39       	ld.sh	r9,r8[0x6]
80003d52:	30 08       	mov	r8,0
80003d54:	f0 09 19 00 	cp.h	r9,r8
80003d58:	c1 41       	brne	80003d80 <udc_process_setup+0x370>
		return false;	// Error in request
	if (!udc_num_configuration)
80003d5a:	4c 68       	lddpc	r8,80003e70 <udc_process_setup+0x460>
80003d5c:	11 89       	ld.ub	r9,r8[0x0]
80003d5e:	30 08       	mov	r8,0
80003d60:	f0 09 18 00 	cp.b	r9,r8
80003d64:	c0 e0       	breq	80003d80 <udc_process_setup+0x370>
		return false;	// The device is not is configured state yet


	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
80003d66:	4b b8       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003d68:	90 16       	ld.sh	r6,r8[0x2]

	// Disable current setting
	if (!udc_iface_disable(iface_num))
80003d6a:	11 d7       	ld.ub	r7,r8[0x5]
80003d6c:	0e 9c       	mov	r12,r7
80003d6e:	f0 1f 00 4b 	mcall	80003e98 <udc_process_setup+0x488>
80003d72:	c0 70       	breq	80003d80 <udc_process_setup+0x370>
		return false;

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
80003d74:	f7 d6 c0 08 	bfextu	r11,r6,0x0,0x8
80003d78:	0e 9c       	mov	r12,r7
80003d7a:	f0 1f 00 47 	mcall	80003e94 <udc_process_setup+0x484>
80003d7e:	c3 78       	rjmp	80003dec <udc_process_setup+0x3dc>
80003d80:	30 0c       	mov	r12,0
80003d82:	c3 58       	rjmp	80003dec <udc_process_setup+0x3dc>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
80003d84:	58 28       	cp.w	r8,2
80003d86:	c3 71       	brne	80003df4 <udc_process_setup+0x3e4>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
80003d88:	4b 28       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003d8a:	11 98       	ld.ub	r8,r8[0x1]
80003d8c:	30 19       	mov	r9,1
80003d8e:	f2 08 18 00 	cp.b	r8,r9
80003d92:	c0 60       	breq	80003d9e <udc_process_setup+0x38e>
80003d94:	30 39       	mov	r9,3
80003d96:	f2 08 18 00 	cp.b	r8,r9
80003d9a:	c2 81       	brne	80003dea <udc_process_setup+0x3da>
80003d9c:	c1 48       	rjmp	80003dc4 <udc_process_setup+0x3b4>
 *
 * \return true if success 
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003d9e:	4a d8       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003da0:	90 39       	ld.sh	r9,r8[0x6]
80003da2:	30 08       	mov	r8,0
80003da4:	f0 09 19 00 	cp.h	r9,r8
80003da8:	c0 c1       	brne	80003dc0 <udc_process_setup+0x3b0>
		return false;

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
80003daa:	4a a8       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003dac:	90 19       	ld.sh	r9,r8[0x2]
80003dae:	30 08       	mov	r8,0
80003db0:	f0 09 19 00 	cp.h	r9,r8
80003db4:	c0 61       	brne	80003dc0 <udc_process_setup+0x3b0>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
80003db6:	4a 78       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003db8:	11 dc       	ld.ub	r12,r8[0x5]
80003dba:	f0 1f 00 39 	mcall	80003e9c <udc_process_setup+0x48c>
80003dbe:	c1 78       	rjmp	80003dec <udc_process_setup+0x3dc>
80003dc0:	30 0c       	mov	r12,0
80003dc2:	c1 58       	rjmp	80003dec <udc_process_setup+0x3dc>
 * \return true if success 
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_epset_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80003dc4:	4a 38       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003dc6:	90 39       	ld.sh	r9,r8[0x6]
80003dc8:	30 08       	mov	r8,0
80003dca:	f0 09 19 00 	cp.h	r9,r8
80003dce:	c0 c1       	brne	80003de6 <udc_process_setup+0x3d6>
		return false;
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
80003dd0:	4a 08       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003dd2:	90 19       	ld.sh	r9,r8[0x2]
80003dd4:	30 08       	mov	r8,0
80003dd6:	f0 09 19 00 	cp.h	r9,r8
80003dda:	c0 61       	brne	80003de6 <udc_process_setup+0x3d6>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
80003ddc:	49 d8       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003dde:	11 dc       	ld.ub	r12,r8[0x5]
80003de0:	f0 1f 00 30 	mcall	80003ea0 <udc_process_setup+0x490>
80003de4:	c0 48       	rjmp	80003dec <udc_process_setup+0x3dc>
80003de6:	30 0c       	mov	r12,0
80003de8:	c0 28       	rjmp	80003dec <udc_process_setup+0x3dc>
80003dea:	30 0c       	mov	r12,0
			return false;	// Error from USB host
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd())
80003dec:	58 0c       	cp.w	r12,0
80003dee:	c0 30       	breq	80003df4 <udc_process_setup+0x3e4>
80003df0:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
			return true;
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
80003df4:	49 78       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003df6:	11 88       	ld.ub	r8,r8[0x0]
80003df8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003dfc:	58 18       	cp.w	r8,1
80003dfe:	c2 71       	brne	80003e4c <udc_process_setup+0x43c>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration)
80003e00:	49 c8       	lddpc	r8,80003e70 <udc_process_setup+0x460>
80003e02:	11 89       	ld.ub	r9,r8[0x0]
80003e04:	30 08       	mov	r8,0
80003e06:	f0 09 18 00 	cp.b	r9,r8
80003e0a:	c2 10       	breq	80003e4c <udc_process_setup+0x43c>
		return false;	// The device is not is configured state yet
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
80003e0c:	49 18       	lddpc	r8,80003e50 <udc_process_setup+0x440>
80003e0e:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
80003e10:	49 98       	lddpc	r8,80003e74 <udc_process_setup+0x464>
80003e12:	70 08       	ld.w	r8,r8[0x0]
80003e14:	70 08       	ld.w	r8,r8[0x0]
80003e16:	11 c8       	ld.ub	r8,r8[0x4]
80003e18:	ee 08 18 00 	cp.b	r8,r7
80003e1c:	e0 88 00 18 	brls	80003e4c <udc_process_setup+0x43c>
		return false;

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
80003e20:	0e 96       	mov	r6,r7
80003e22:	30 0b       	mov	r11,0
80003e24:	0e 9c       	mov	r12,r7
80003e26:	f0 1f 00 15 	mcall	80003e78 <udc_process_setup+0x468>
80003e2a:	c1 10       	breq	80003e4c <udc_process_setup+0x43c>
		return false;
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
80003e2c:	49 28       	lddpc	r8,80003e74 <udc_process_setup+0x464>
80003e2e:	70 08       	ld.w	r8,r8[0x0]
80003e30:	70 18       	ld.w	r8,r8[0x4]
80003e32:	f0 07 03 27 	ld.w	r7,r8[r7<<0x2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting()))
80003e36:	6e 3c       	ld.w	r12,r7[0xc]
80003e38:	5d 1c       	icall	r12
80003e3a:	18 9b       	mov	r11,r12
80003e3c:	0c 9c       	mov	r12,r6
80003e3e:	f0 1f 00 0f 	mcall	80003e78 <udc_process_setup+0x468>
80003e42:	c0 50       	breq	80003e4c <udc_process_setup+0x43c>
		return false;

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
80003e44:	6e 2c       	ld.w	r12,r7[0x8]
80003e46:	5d 1c       	icall	r12
80003e48:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003e4c:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003e50:	00 00       	add	r0,r0
80003e52:	0a 00       	add	r0,r5
80003e54:	00 00       	add	r0,r0
80003e56:	08 7c       	tst	r12,r4
80003e58:	80 00       	ld.sh	r0,r0[0x0]
80003e5a:	23 e8       	sub	r8,62
80003e5c:	00 00       	add	r0,r0
80003e5e:	00 b0       	st.h	r0++,r0
80003e60:	00 00       	add	r0,r0
80003e62:	00 cc       	st.b	r0++,r12
80003e64:	00 00       	add	r0,r0
80003e66:	00 f0       	st.b	--r0,r0
80003e68:	00 00       	add	r0,r0
80003e6a:	00 d0       	st.w	--r0,r0
80003e6c:	00 00       	add	r0,r0
80003e6e:	00 dc       	st.w	--r0,r12
80003e70:	00 00       	add	r0,r0
80003e72:	08 7e       	tst	lr,r4
80003e74:	00 00       	add	r0,r0
80003e76:	08 78       	tst	r8,r4
80003e78:	80 00       	ld.sh	r0,r0[0x0]
80003e7a:	38 00       	mov	r0,-128
80003e7c:	00 00       	add	r0,r0
80003e7e:	08 74       	tst	r4,r4
80003e80:	80 00       	ld.sh	r0,r0[0x0]
80003e82:	23 f4       	sub	r4,63
80003e84:	00 00       	add	r0,r0
80003e86:	08 80       	andn	r0,r4
80003e88:	80 00       	ld.sh	r0,r0[0x0]
80003e8a:	38 d4       	mov	r4,-115
80003e8c:	80 00       	ld.sh	r0,r0[0x0]
80003e8e:	23 c2       	sub	r2,60
80003e90:	80 00       	ld.sh	r0,r0[0x0]
80003e92:	39 b0       	mov	r0,-101
80003e94:	80 00       	ld.sh	r0,r0[0x0]
80003e96:	38 ec       	mov	r12,-114
80003e98:	80 00       	ld.sh	r0,r0[0x0]
80003e9a:	39 4c       	mov	r12,-108
80003e9c:	80 00       	ld.sh	r0,r0[0x0]
80003e9e:	24 84       	sub	r4,72
80003ea0:	80 00       	ld.sh	r0,r0[0x0]
80003ea2:	24 08       	sub	r8,64

80003ea4 <_read>:
#elif (defined(__GNUC__) && !defined(XMEGA))


int __attribute__((weak))
_read (int file, char * ptr, int len)
{
80003ea4:	eb cd 40 fc 	pushm	r2-r7,lr
80003ea8:	20 1d       	sub	sp,4
80003eaa:	16 94       	mov	r4,r11
80003eac:	14 95       	mov	r5,r10
	int nChars = 0;

	if (file != 0)
80003eae:	58 0c       	cp.w	r12,0
80003eb0:	c0 30       	breq	80003eb6 <_read+0x12>
80003eb2:	3f f7       	mov	r7,-1
80003eb4:	c1 98       	rjmp	80003ee6 <_read+0x42>
		return -1;

	for (; len > 0; --len) {
80003eb6:	58 0a       	cp.w	r10,0
80003eb8:	e0 89 00 04 	brgt	80003ec0 <_read+0x1c>
80003ebc:	30 07       	mov	r7,0
80003ebe:	c1 48       	rjmp	80003ee6 <_read+0x42>
80003ec0:	30 07       	mov	r7,0
		int c;
		ptr_get(stdio_base,&c);
80003ec2:	48 c3       	lddpc	r3,80003ef0 <_read+0x4c>
80003ec4:	48 c6       	lddpc	r6,80003ef4 <_read+0x50>
80003ec6:	1a 92       	mov	r2,sp
80003ec8:	66 0c       	ld.w	r12,r3[0x0]
80003eca:	6c 08       	ld.w	r8,r6[0x0]
80003ecc:	1a 9b       	mov	r11,sp
80003ece:	5d 18       	icall	r8
		if (c < 0)
80003ed0:	40 08       	lddsp	r8,sp[0x0]
80003ed2:	58 08       	cp.w	r8,0
80003ed4:	c0 95       	brlt	80003ee6 <_read+0x42>
		break;
		*ptr++ = c;
80003ed6:	e8 07 0b 08 	st.b	r4[r7],r8
		++nChars;
80003eda:	2f f7       	sub	r7,-1
// GCC AVR32 implementation
#elif (defined(__GNUC__) && !defined(XMEGA))


int __attribute__((weak))
_read (int file, char * ptr, int len)
80003edc:	ea 07 01 08 	sub	r8,r5,r7
	int nChars = 0;

	if (file != 0)
		return -1;

	for (; len > 0; --len) {
80003ee0:	58 08       	cp.w	r8,0
80003ee2:	fe 99 ff f3 	brgt	80003ec8 <_read+0x24>
		break;
		*ptr++ = c;
		++nChars;
	}
	return nChars;
}
80003ee6:	0e 9c       	mov	r12,r7
80003ee8:	2f fd       	sub	sp,-4
80003eea:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80003eee:	00 00       	add	r0,r0
80003ef0:	00 00       	add	r0,r0
80003ef2:	0a 28       	rsub	r8,r5
80003ef4:	00 00       	add	r0,r0
80003ef6:	0a 20       	rsub	r0,r5

80003ef8 <stdio_usb_enable>:
	}
}

bool stdio_usb_enable(void)
{
	stdio_usb_interface_enable = true;
80003ef8:	30 19       	mov	r9,1
80003efa:	48 28       	lddpc	r8,80003f00 <stdio_usb_enable+0x8>
80003efc:	b0 89       	st.b	r8[0x0],r9
	return true;
}
80003efe:	5e ff       	retal	1
80003f00:	00 00       	add	r0,r0
80003f02:	08 88       	andn	r8,r4

80003f04 <stdio_usb_disable>:

void stdio_usb_disable(void)
{
	stdio_usb_interface_enable = false;
80003f04:	30 09       	mov	r9,0
80003f06:	48 28       	lddpc	r8,80003f0c <stdio_usb_disable+0x8>
80003f08:	b0 89       	st.b	r8[0x0],r9
}
80003f0a:	5e fc       	retal	r12
80003f0c:	00 00       	add	r0,r0
80003f0e:	08 88       	andn	r8,r4

80003f10 <stdio_usb_vbus_event>:
	
	*data = udi_cdc_getc ();
}

void stdio_usb_vbus_event(bool b_high)
{
80003f10:	d4 01       	pushm	lr
	if (b_high) {
80003f12:	58 0c       	cp.w	r12,0
80003f14:	c0 40       	breq	80003f1c <stdio_usb_vbus_event+0xc>
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
	udd_attach();
80003f16:	f0 1f 00 04 	mcall	80003f24 <stdio_usb_vbus_event+0x14>
80003f1a:	d8 02       	popm	pc
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
80003f1c:	f0 1f 00 03 	mcall	80003f28 <stdio_usb_vbus_event+0x18>
80003f20:	d8 02       	popm	pc
80003f22:	00 00       	add	r0,r0
80003f24:	80 00       	ld.sh	r0,r0[0x0]
80003f26:	2a 7c       	sub	r12,-89
80003f28:	80 00       	ld.sh	r0,r0[0x0]
80003f2a:	27 2c       	sub	r12,114

80003f2c <stdio_usb_init>:
{
	stdio_usb_interface_enable = false;
}

void stdio_usb_init (volatile void * usart)
{
80003f2c:	d4 01       	pushm	lr
	stdio_base = usart;
80003f2e:	48 98       	lddpc	r8,80003f50 <stdio_usb_init+0x24>
80003f30:	91 0c       	st.w	r8[0x0],r12
	ptr_put = stdio_usb_putchar;
80003f32:	48 99       	lddpc	r9,80003f54 <stdio_usb_init+0x28>
80003f34:	48 98       	lddpc	r8,80003f58 <stdio_usb_init+0x2c>
80003f36:	91 09       	st.w	r8[0x0],r9
	ptr_get = stdio_usb_getchar;
80003f38:	48 99       	lddpc	r9,80003f5c <stdio_usb_init+0x30>
80003f3a:	48 a8       	lddpc	r8,80003f60 <stdio_usb_init+0x34>
80003f3c:	91 09       	st.w	r8[0x0],r9

/*! \brief Start the USB Device stack
 */
static inline void udc_start(void)
{
	udd_enable();
80003f3e:	f0 1f 00 0a 	mcall	80003f64 <stdio_usb_init+0x38>
 *        udc_attach(); \n
 *     }  \n
 */
static inline bool udc_include_vbus_monitoring(void)
{
	return udd_include_vbus_monitoring();
80003f42:	f0 1f 00 0a 	mcall	80003f68 <stdio_usb_init+0x3c>
	 * integrated USB interfaces.  Assume the VBUS is present if
	 * VBUS monitoring is not available.
	 */
	udc_start ();

	if (! udc_include_vbus_monitoring ()) {
80003f46:	c0 41       	brne	80003f4e <stdio_usb_init+0x22>
		stdio_usb_vbus_event (true);
80003f48:	30 1c       	mov	r12,1
80003f4a:	f0 1f 00 09 	mcall	80003f6c <stdio_usb_init+0x40>
80003f4e:	d8 02       	popm	pc
80003f50:	00 00       	add	r0,r0
80003f52:	0a 28       	rsub	r8,r5
80003f54:	80 00       	ld.sh	r0,r0[0x0]
80003f56:	3f 9c       	mov	r12,-7
80003f58:	00 00       	add	r0,r0
80003f5a:	0a 24       	rsub	r4,r5
80003f5c:	80 00       	ld.sh	r0,r0[0x0]
80003f5e:	3f 70       	mov	r0,-9
80003f60:	00 00       	add	r0,r0
80003f62:	0a 20       	rsub	r0,r5
80003f64:	80 00       	ld.sh	r0,r0[0x0]
80003f66:	2a ec       	sub	r12,-82
80003f68:	80 00       	ld.sh	r0,r0[0x0]
80003f6a:	23 9c       	sub	r12,57
80003f6c:	80 00       	ld.sh	r0,r0[0x0]
80003f6e:	3f 10       	mov	r0,-15

80003f70 <stdio_usb_getchar>:

	return udi_cdc_putc (data) ? 0 : -1;
}

void stdio_usb_getchar (void volatile * usart, int * data)
{
80003f70:	eb cd 40 80 	pushm	r7,lr
80003f74:	16 97       	mov	r7,r11
	/* A negative return value should be used to indicate that data
	 * was not read, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
80003f76:	48 88       	lddpc	r8,80003f94 <stdio_usb_getchar+0x24>
80003f78:	11 89       	ld.ub	r9,r8[0x0]
80003f7a:	30 08       	mov	r8,0
80003f7c:	f0 09 18 00 	cp.b	r9,r8
80003f80:	c0 51       	brne	80003f8a <stdio_usb_getchar+0x1a>
		*data = 0;  // -1
80003f82:	30 08       	mov	r8,0
80003f84:	97 08       	st.w	r11[0x0],r8
		return;
80003f86:	e3 cd 80 80 	ldm	sp++,r7,pc
	}
	
	*data = udi_cdc_getc ();
80003f8a:	f0 1f 00 04 	mcall	80003f98 <stdio_usb_getchar+0x28>
80003f8e:	8f 0c       	st.w	r7[0x0],r12
80003f90:	e3 cd 80 80 	ldm	sp++,r7,pc
80003f94:	00 00       	add	r0,r0
80003f96:	08 88       	andn	r8,r4
80003f98:	80 00       	ld.sh	r0,r0[0x0]
80003f9a:	34 f4       	mov	r4,79

80003f9c <stdio_usb_putchar>:
#include "stdio_usb.h"

static bool stdio_usb_interface_enable = false;

int stdio_usb_putchar (volatile void * usart, int data)
{
80003f9c:	d4 01       	pushm	lr
	/* A negative return value should be used to indicate that data
	 * was not written, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
80003f9e:	48 78       	lddpc	r8,80003fb8 <stdio_usb_putchar+0x1c>
80003fa0:	11 89       	ld.ub	r9,r8[0x0]
80003fa2:	30 08       	mov	r8,0
80003fa4:	f0 09 18 00 	cp.b	r9,r8
80003fa8:	c0 60       	breq	80003fb4 <stdio_usb_putchar+0x18>
		return 0;  // -1
	}

	return udi_cdc_putc (data) ? 0 : -1;
80003faa:	16 9c       	mov	r12,r11
80003fac:	f0 1f 00 04 	mcall	80003fbc <stdio_usb_putchar+0x20>
80003fb0:	c0 21       	brne	80003fb4 <stdio_usb_putchar+0x18>
80003fb2:	dc 0a       	popm	pc,r12=-1
80003fb4:	d8 0a       	popm	pc,r12=0
80003fb6:	00 00       	add	r0,r0
80003fb8:	00 00       	add	r0,r0
80003fba:	08 88       	andn	r8,r4
80003fbc:	80 00       	ld.sh	r0,r0[0x0]
80003fbe:	33 f4       	mov	r4,63

80003fc0 <_write>:

#elif (defined(__GNUC__) && !defined(XMEGA))

	int __attribute__((weak))
	_write (int file, char * ptr, int len)
	{
80003fc0:	eb cd 40 f8 	pushm	r3-r7,lr
80003fc4:	16 94       	mov	r4,r11
80003fc6:	14 95       	mov	r5,r10
		int nChars = 0;
	
		if ( (file != 1)
80003fc8:	20 1c       	sub	r12,1
80003fca:	58 2c       	cp.w	r12,2
80003fcc:	e0 8b 00 13 	brhi	80003ff2 <_write+0x32>
			&& (file != 2) && (file!=3))
		return -1;
	
		for (; len != 0; --len) {
80003fd0:	58 0a       	cp.w	r10,0
80003fd2:	c0 31       	brne	80003fd8 <_write+0x18>
80003fd4:	30 07       	mov	r7,0
80003fd6:	c0 f8       	rjmp	80003ff4 <_write+0x34>
80003fd8:	30 07       	mov	r7,0
			if (ptr_put(stdio_base, *ptr++) < 0) {
80003fda:	48 93       	lddpc	r3,80003ffc <_write+0x3c>
80003fdc:	48 96       	lddpc	r6,80004000 <_write+0x40>
80003fde:	66 0c       	ld.w	r12,r3[0x0]
80003fe0:	6c 08       	ld.w	r8,r6[0x0]
80003fe2:	e8 07 07 0b 	ld.ub	r11,r4[r7]
80003fe6:	5d 18       	icall	r8
80003fe8:	c0 55       	brlt	80003ff2 <_write+0x32>
				return -1;
			}
			++nChars;
80003fea:	2f f7       	sub	r7,-1
	
		if ( (file != 1)
			&& (file != 2) && (file!=3))
		return -1;
	
		for (; len != 0; --len) {
80003fec:	0e 35       	cp.w	r5,r7
80003fee:	cf 81       	brne	80003fde <_write+0x1e>
80003ff0:	c0 28       	rjmp	80003ff4 <_write+0x34>
80003ff2:	3f f7       	mov	r7,-1
				return -1;
			}
			++nChars;
		}
		return nChars;
	}
80003ff4:	0e 9c       	mov	r12,r7
80003ff6:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80003ffa:	00 00       	add	r0,r0
80003ffc:	00 00       	add	r0,r0
80003ffe:	0a 28       	rsub	r8,r5
80004000:	00 00       	add	r0,r0
80004002:	0a 24       	rsub	r4,r5

80004004 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
80004004:	f8 c8 ff f8 	sub	r8,r12,-8
80004008:	99 18       	st.w	r12[0x4],r8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
8000400a:	3f f9       	mov	r9,-1
8000400c:	99 29       	st.w	r12[0x8],r9

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
8000400e:	99 38       	st.w	r12[0xc],r8
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
80004010:	99 48       	st.w	r12[0x10],r8

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
80004012:	30 08       	mov	r8,0
80004014:	99 08       	st.w	r12[0x0],r8
}
80004016:	5e fc       	retal	r12

80004018 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
80004018:	30 08       	mov	r8,0
8000401a:	99 48       	st.w	r12[0x10],r8
}
8000401c:	5e fc       	retal	r12

8000401e <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
8000401e:	78 18       	ld.w	r8,r12[0x4]

	pxNewListItem->pxNext = pxIndex->pxNext;
80004020:	70 19       	ld.w	r9,r8[0x4]
80004022:	97 19       	st.w	r11[0x4],r9
	pxNewListItem->pxPrevious = pxList->pxIndex;
80004024:	78 19       	ld.w	r9,r12[0x4]
80004026:	97 29       	st.w	r11[0x8],r9
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
80004028:	70 19       	ld.w	r9,r8[0x4]
8000402a:	93 2b       	st.w	r9[0x8],r11
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
8000402c:	91 1b       	st.w	r8[0x4],r11
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
8000402e:	99 1b       	st.w	r12[0x4],r11

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80004030:	97 4c       	st.w	r11[0x10],r12

	( pxList->uxNumberOfItems )++;
80004032:	78 08       	ld.w	r8,r12[0x0]
80004034:	2f f8       	sub	r8,-1
80004036:	99 08       	st.w	r12[0x0],r8
}
80004038:	5e fc       	retal	r12

8000403a <vListInsert>:
{
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
8000403a:	76 0a       	ld.w	r10,r11[0x0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
8000403c:	5b fa       	cp.w	r10,-1
8000403e:	c0 31       	brne	80004044 <vListInsert+0xa>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
80004040:	78 48       	ld.w	r8,r12[0x10]
80004042:	c0 c8       	rjmp	8000405a <vListInsert+0x20>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
80004044:	f8 c8 ff f8 	sub	r8,r12,-8
80004048:	70 19       	ld.w	r9,r8[0x4]
8000404a:	72 09       	ld.w	r9,r9[0x0]
8000404c:	12 3a       	cp.w	r10,r9
8000404e:	c0 63       	brcs	8000405a <vListInsert+0x20>
80004050:	70 18       	ld.w	r8,r8[0x4]
80004052:	70 19       	ld.w	r9,r8[0x4]
80004054:	72 09       	ld.w	r9,r9[0x0]
80004056:	12 3a       	cp.w	r10,r9
80004058:	cf c2       	brcc	80004050 <vListInsert+0x16>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
8000405a:	70 19       	ld.w	r9,r8[0x4]
8000405c:	97 19       	st.w	r11[0x4],r9
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
8000405e:	93 2b       	st.w	r9[0x8],r11
	pxNewListItem->pxPrevious = pxIterator;
80004060:	97 28       	st.w	r11[0x8],r8
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
80004062:	91 1b       	st.w	r8[0x4],r11

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80004064:	97 4c       	st.w	r11[0x10],r12

	( pxList->uxNumberOfItems )++;
80004066:	78 08       	ld.w	r8,r12[0x0]
80004068:	2f f8       	sub	r8,-1
8000406a:	99 08       	st.w	r12[0x0],r8
}
8000406c:	5e fc       	retal	r12

8000406e <vListRemove>:

void vListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
8000406e:	78 18       	ld.w	r8,r12[0x4]
80004070:	78 29       	ld.w	r9,r12[0x8]
80004072:	91 29       	st.w	r8[0x8],r9
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
80004074:	78 28       	ld.w	r8,r12[0x8]
80004076:	78 19       	ld.w	r9,r12[0x4]
80004078:	91 19       	st.w	r8[0x4],r9
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
8000407a:	78 48       	ld.w	r8,r12[0x10]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
8000407c:	70 19       	ld.w	r9,r8[0x4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
8000407e:	18 39       	cp.w	r9,r12
80004080:	f9 f9 00 02 	ld.weq	r9,r12[0x8]
80004084:	f1 f9 0a 01 	st.weq	r8[0x4],r9
	}

	pxItemToRemove->pvContainer = NULL;
80004088:	30 09       	mov	r9,0
8000408a:	99 49       	st.w	r12[0x10],r9
	( pxList->uxNumberOfItems )--;
8000408c:	70 09       	ld.w	r9,r8[0x0]
8000408e:	20 19       	sub	r9,1
80004090:	91 09       	st.w	r8[0x0],r9
}
80004092:	5e fc       	retal	r12

80004094 <pxPortInitialiseStack>:
	/* Setup the initial stack of the task.  The stack is set exactly as
	expected by the portRESTORE_CONTEXT() macro. */

	/* When the task starts, it will expect to find the function parameter in R12. */
	pxTopOfStack--;
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x08080808;					/* R8 */
80004094:	e0 68 08 08 	mov	r8,2056
80004098:	ea 18 08 08 	orh	r8,0x808
8000409c:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x09090909;					/* R9 */
8000409e:	e0 68 09 09 	mov	r8,2313
800040a2:	ea 18 09 09 	orh	r8,0x909
800040a6:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x0A0A0A0A;					/* R10 */
800040a8:	e0 68 0a 0a 	mov	r8,2570
800040ac:	ea 18 0a 0a 	orh	r8,0xa0a
800040b0:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x0B0B0B0B;					/* R11 */
800040b2:	e0 68 0b 0b 	mov	r8,2827
800040b6:	ea 18 0b 0b 	orh	r8,0xb0b
800040ba:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) pvParameters;					/* R12 */
800040bc:	18 da       	st.w	--r12,r10
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0xDEADBEEF;					/* R14/LR */
800040be:	e0 68 be ef 	mov	r8,48879
800040c2:	ea 18 de ad 	orh	r8,0xdead
800040c6:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) pxCode + portINSTRUCTION_SIZE; /* R15/PC */
800040c8:	18 db       	st.w	--r12,r11
	*pxTopOfStack-- = ( portSTACK_TYPE ) portINITIAL_SR;				/* SR */
800040ca:	fc 18 00 40 	movh	r8,0x40
800040ce:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0xFF0000FF;					/* R0 */
800040d0:	e0 68 00 ff 	mov	r8,255
800040d4:	ea 18 ff 00 	orh	r8,0xff00
800040d8:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x01010101;					/* R1 */
800040da:	e0 68 01 01 	mov	r8,257
800040de:	ea 18 01 01 	orh	r8,0x101
800040e2:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x02020202;					/* R2 */
800040e4:	e0 68 02 02 	mov	r8,514
800040e8:	ea 18 02 02 	orh	r8,0x202
800040ec:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x03030303;					/* R3 */
800040ee:	e0 68 03 03 	mov	r8,771
800040f2:	ea 18 03 03 	orh	r8,0x303
800040f6:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x04040404;					/* R4 */
800040f8:	e0 68 04 04 	mov	r8,1028
800040fc:	ea 18 04 04 	orh	r8,0x404
80004100:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x05050505;					/* R5 */
80004102:	e0 68 05 05 	mov	r8,1285
80004106:	ea 18 05 05 	orh	r8,0x505
8000410a:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x06060606;					/* R6 */
8000410c:	e0 68 06 06 	mov	r8,1542
80004110:	ea 18 06 06 	orh	r8,0x606
80004114:	18 d8       	st.w	--r12,r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x07070707;					/* R7 */
80004116:	e0 68 07 07 	mov	r8,1799
8000411a:	ea 18 07 07 	orh	r8,0x707
8000411e:	18 d8       	st.w	--r12,r8
	*pxTopOfStack = ( portSTACK_TYPE ) portNO_CRITICAL_NESTING;			/* ulCriticalNesting */
80004120:	30 08       	mov	r8,0
80004122:	18 d8       	st.w	--r12,r8

	return pxTopOfStack;
}
80004124:	5e fc       	retal	r12
80004126:	d7 03       	nop

80004128 <vPortEnterCritical>:
be saved to the stack.  Instead the critical section nesting level is stored
in a variable, which is then saved as part of the stack context. */
__attribute__((__noinline__)) void vPortEnterCritical( void )
{
	/* Disable interrupts */
	portDISABLE_INTERRUPTS();
80004128:	d3 03       	ssrf	0x10

	/* Now interrupts are disabled ulCriticalNesting can be accessed
	 directly.  Increment ulCriticalNesting to keep a count of how many times
	 portENTER_CRITICAL() has been called. */
	ulCriticalNesting++;
8000412a:	48 38       	lddpc	r8,80004134 <vPortEnterCritical+0xc>
8000412c:	70 09       	ld.w	r9,r8[0x0]
8000412e:	2f f9       	sub	r9,-1
80004130:	91 09       	st.w	r8[0x0],r9
}
80004132:	5e fc       	retal	r12
80004134:	00 00       	add	r0,r0
80004136:	00 f4       	st.b	--r0,r4

80004138 <xPortStartScheduler>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
80004138:	d4 01       	pushm	lr
	};

#endif

	/* Disable all interrupt/exception. */
	portDISABLE_INTERRUPTS();
8000413a:	d3 03       	ssrf	0x10
		/* Start the timer/counter. */
		tc_start(tc, configTICK_TC_CHANNEL);
	}
	#else
	{
		INTC_register_interrupt(&vTick, AVR32_CORE_COMPARE_IRQ, AVR32_INTC_INT0);
8000413c:	30 0a       	mov	r10,0
8000413e:	14 9b       	mov	r11,r10
80004140:	49 2c       	lddpc	r12,80004188 <xPortStartScheduler+0x50>
80004142:	f0 1f 00 13 	mcall	8000418c <xPortStartScheduler+0x54>
/* Schedule the COUNT&COMPARE match interrupt in (configCPU_CLOCK_HZ/configTICK_RATE_HZ)
clock cycles from now. */
#if( configTICK_USE_TC==0 )
	static void prvScheduleFirstTick(void)
	{
		Set_system_register(AVR32_COMPARE, configCPU_CLOCK_HZ/configTICK_RATE_HZ);
80004146:	e0 68 2e e0 	mov	r8,12000
8000414a:	e3 b8 00 43 	mtsr	0x10c,r8
		Set_system_register(AVR32_COUNT, 0);
8000414e:	30 08       	mov	r8,0
80004150:	e3 b8 00 42 	mtsr	0x108,r8
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();

	/* Start the first task. */
	portRESTORE_CONTEXT();
80004154:	e0 68 09 5c 	mov	r8,2396
80004158:	ea 18 00 00 	orh	r8,0x0
8000415c:	70 00       	ld.w	r0,r8[0x0]
8000415e:	60 0d       	ld.w	sp,r0[0x0]
80004160:	1b 00       	ld.w	r0,sp++
80004162:	e0 68 00 f4 	mov	r8,244
80004166:	ea 18 00 00 	orh	r8,0x0
8000416a:	91 00       	st.w	r8[0x0],r0
8000416c:	e3 cd 00 ff 	ldm	sp++,r0-r7
80004170:	2f ed       	sub	sp,-8
80004172:	e3 cd 5f 00 	ldm	sp++,r8-r12,lr
80004176:	fa f0 ff e0 	ld.w	r0,sp[-32]
8000417a:	e3 b0 00 00 	mtsr	0x0,r0
8000417e:	fa f0 ff dc 	ld.w	r0,sp[-36]
80004182:	fa ff ff e4 	ld.w	pc,sp[-28]

	/* Should not get here! */
	return 0;
}
80004186:	d8 0a       	popm	pc,r12=0
80004188:	80 00       	ld.sh	r0,r0[0x0]
8000418a:	42 54       	lddsp	r4,sp[0x94]
8000418c:	80 00       	ld.sh	r0,r0[0x0]
8000418e:	22 0c       	sub	r12,32

80004190 <SCALLYield>:
/*-----------------------------------------------------------*/
__attribute__((__naked__)) void SCALLYield( void );
__attribute__((__naked__)) void SCALLYield( void )
{
	/* Save the context of the interrupted task. */
	portSAVE_CONTEXT_SCALL();
80004190:	20 6d       	sub	sp,24
80004192:	eb cd 00 ff 	pushm	r0-r7
80004196:	fa c7 ff c0 	sub	r7,sp,-64
8000419a:	ee f0 ff f8 	ld.w	r0,r7[-8]
8000419e:	ef 40 ff e0 	st.w	r7[-32],r0
800041a2:	ee f0 ff fc 	ld.w	r0,r7[-4]
800041a6:	ef 40 ff e4 	st.w	r7[-28],r0
800041aa:	eb c7 5f 00 	stm	--r7,r8-r12,lr
800041ae:	e0 68 00 f4 	mov	r8,244
800041b2:	ea 18 00 00 	orh	r8,0x0
800041b6:	70 00       	ld.w	r0,r8[0x0]
800041b8:	1a d0       	st.w	--sp,r0
800041ba:	f0 1f 00 1a 	mcall	80004220 <LABEL_RET_SCALL_266+0x14>
800041be:	e0 68 09 5c 	mov	r8,2396
800041c2:	ea 18 00 00 	orh	r8,0x0
800041c6:	70 00       	ld.w	r0,r8[0x0]
800041c8:	81 0d       	st.w	r0[0x0],sp
	vTaskSwitchContext();
800041ca:	f0 1f 00 17 	mcall	80004224 <LABEL_RET_SCALL_266+0x18>
	portRESTORE_CONTEXT_SCALL();
800041ce:	e0 68 09 5c 	mov	r8,2396
800041d2:	ea 18 00 00 	orh	r8,0x0
800041d6:	70 00       	ld.w	r0,r8[0x0]
800041d8:	60 0d       	ld.w	sp,r0[0x0]
800041da:	1b 00       	ld.w	r0,sp++
800041dc:	e0 68 00 f4 	mov	r8,244
800041e0:	ea 18 00 00 	orh	r8,0x0
800041e4:	91 00       	st.w	r8[0x0],r0
800041e6:	fa c7 ff d8 	sub	r7,sp,-40
800041ea:	e3 c7 5f 00 	ldm	r7++,r8-r12,lr
800041ee:	ee f0 ff e0 	ld.w	r0,r7[-32]
800041f2:	e0 61 00 f4 	mov	r1,244
800041f6:	ea 11 00 00 	orh	r1,0x0
800041fa:	62 02       	ld.w	r2,r1[0x0]
800041fc:	58 02       	cp.w	r2,0
800041fe:	c0 70       	breq	8000420c <LABEL_RET_SCALL_266>
80004200:	e4 c2 00 01 	sub	r2,r2,1
80004204:	83 02       	st.w	r1[0x0],r2
80004206:	58 02       	cp.w	r2,0
80004208:	c0 21       	brne	8000420c <LABEL_RET_SCALL_266>
8000420a:	b1 c0       	cbr	r0,0x10

8000420c <LABEL_RET_SCALL_266>:
8000420c:	ef 40 ff f8 	st.w	r7[-8],r0
80004210:	ee f0 ff e4 	ld.w	r0,r7[-28]
80004214:	ef 40 ff fc 	st.w	r7[-4],r0
80004218:	e3 cd 00 ff 	ldm	sp++,r0-r7
8000421c:	2f ad       	sub	sp,-24
8000421e:	d6 13       	rets
80004220:	80 00       	ld.sh	r0,r0[0x0]
80004222:	41 28       	lddsp	r8,sp[0x48]
80004224:	80 00       	ld.sh	r0,r0[0x0]
80004226:	43 68       	lddsp	r8,sp[0xd8]

80004228 <prvClearCcInt>:
		Set_system_register(AVR32_COUNT, 0);
	}

	__attribute__((__noinline__)) static void prvClearCcInt(void)
	{
		Set_system_register(AVR32_COMPARE, Get_system_register(AVR32_COMPARE));
80004228:	e1 b8 00 43 	mfsr	r8,0x10c
8000422c:	e3 b8 00 43 	mtsr	0x10c,r8
	}
80004230:	5e fc       	retal	r12
80004232:	d7 03       	nop

80004234 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

__attribute__((__noinline__)) void vPortExitCritical( void )
{
	if(ulCriticalNesting > portNO_CRITICAL_NESTING)
80004234:	48 78       	lddpc	r8,80004250 <vPortExitCritical+0x1c>
80004236:	70 08       	ld.w	r8,r8[0x0]
80004238:	58 08       	cp.w	r8,0
8000423a:	5e 0c       	reteq	r12
	{
		ulCriticalNesting--;
8000423c:	48 58       	lddpc	r8,80004250 <vPortExitCritical+0x1c>
8000423e:	70 09       	ld.w	r9,r8[0x0]
80004240:	20 19       	sub	r9,1
80004242:	91 09       	st.w	r8[0x0],r9
		if( ulCriticalNesting == portNO_CRITICAL_NESTING )
80004244:	70 08       	ld.w	r8,r8[0x0]
80004246:	58 08       	cp.w	r8,0
80004248:	5e 1c       	retne	r12
		{
			/* Enable all interrupt/exception. */
			portENABLE_INTERRUPTS();
8000424a:	d5 03       	csrf	0x10
8000424c:	5e fc       	retal	r12
8000424e:	00 00       	add	r0,r0
80004250:	00 00       	add	r0,r0
80004252:	00 f4       	st.b	--r0,r4

80004254 <vTick>:
/* The preemptive scheduler is defined as "naked" as the full context is saved
on entry as part of the context switch. */
__attribute__((__naked__)) static void vTick( void )
{
	/* Save the context of the interrupted task. */
	portSAVE_CONTEXT_OS_INT();
80004254:	eb cd 00 ff 	pushm	r0-r7
80004258:	e0 68 00 f4 	mov	r8,244
8000425c:	ea 18 00 00 	orh	r8,0x0
80004260:	70 00       	ld.w	r0,r8[0x0]
80004262:	1a d0       	st.w	--sp,r0
80004264:	7a 90       	ld.w	r0,sp[0x24]
80004266:	e1 d0 c2 c3 	bfextu	r0,r0,0x16,0x3
8000426a:	58 10       	cp.w	r0,1
8000426c:	e0 8b 00 08 	brhi	8000427c <LABEL_INT_SKIP_SAVE_CONTEXT_240>
80004270:	e0 68 09 5c 	mov	r8,2396
80004274:	ea 18 00 00 	orh	r8,0x0
80004278:	70 00       	ld.w	r0,r8[0x0]
8000427a:	81 0d       	st.w	r0[0x0],sp

8000427c <LABEL_INT_SKIP_SAVE_CONTEXT_240>:
	#if( configTICK_USE_TC==1 )
		/* Clear the interrupt flag. */
		prvClearTcInt();
	#else
		/* Clear the interrupt flag. */
		prvClearCcInt();
8000427c:	f0 1f 00 12 	mcall	800042c4 <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x14>
	#endif

	/* Because FreeRTOS is not supposed to run with nested interrupts, put all OS
	calls in a critical section . */
	portENTER_CRITICAL();
80004280:	f0 1f 00 12 	mcall	800042c8 <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x18>
		vTaskIncrementTick();
80004284:	f0 1f 00 12 	mcall	800042cc <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x1c>
	portEXIT_CRITICAL();
80004288:	f0 1f 00 12 	mcall	800042d0 <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x20>

	/* Restore the context of the "elected task". */
	portRESTORE_CONTEXT_OS_INT();
8000428c:	7a 90       	ld.w	r0,sp[0x24]
8000428e:	e1 d0 c2 c3 	bfextu	r0,r0,0x16,0x3
80004292:	58 10       	cp.w	r0,1
80004294:	e0 8b 00 0e 	brhi	800042b0 <LABEL_INT_SKIP_RESTORE_CONTEXT_257>
80004298:	f0 1f 00 0c 	mcall	800042c8 <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x18>
8000429c:	f0 1f 00 0e 	mcall	800042d4 <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x24>
800042a0:	f0 1f 00 0c 	mcall	800042d0 <LABEL_INT_SKIP_RESTORE_CONTEXT_257+0x20>
800042a4:	e0 68 09 5c 	mov	r8,2396
800042a8:	ea 18 00 00 	orh	r8,0x0
800042ac:	70 00       	ld.w	r0,r8[0x0]
800042ae:	60 0d       	ld.w	sp,r0[0x0]

800042b0 <LABEL_INT_SKIP_RESTORE_CONTEXT_257>:
800042b0:	1b 00       	ld.w	r0,sp++
800042b2:	e0 68 00 f4 	mov	r8,244
800042b6:	ea 18 00 00 	orh	r8,0x0
800042ba:	91 00       	st.w	r8[0x0],r0
800042bc:	e3 cd 00 ff 	ldm	sp++,r0-r7
800042c0:	d6 03       	rete
800042c2:	00 00       	add	r0,r0
800042c4:	80 00       	ld.sh	r0,r0[0x0]
800042c6:	42 28       	lddsp	r8,sp[0x88]
800042c8:	80 00       	ld.sh	r0,r0[0x0]
800042ca:	41 28       	lddsp	r8,sp[0x48]
800042cc:	80 00       	ld.sh	r0,r0[0x0]
800042ce:	43 e4       	lddsp	r4,sp[0xf8]
800042d0:	80 00       	ld.sh	r0,r0[0x0]
800042d2:	42 34       	lddsp	r4,sp[0x8c]
800042d4:	80 00       	ld.sh	r0,r0[0x0]
800042d6:	43 68       	lddsp	r8,sp[0xd8]

800042d8 <__malloc_lock>:
 * safe section as memory allocation management uses global data.
 * See the aforementioned details.
 */
void __malloc_lock(struct _reent *ptr);
void __malloc_lock(struct _reent *ptr)
{
800042d8:	d4 01       	pushm	lr
	vTaskSuspendAll();
800042da:	f0 1f 00 02 	mcall	800042e0 <__malloc_lock+0x8>
}
800042de:	d8 02       	popm	pc
800042e0:	80 00       	ld.sh	r0,r0[0x0]
800042e2:	43 58       	lddsp	r8,sp[0xd4]

800042e4 <__malloc_unlock>:
 * a safe section as memory allocation management uses global data.
 * See the aforementioned details.
 */
void __malloc_unlock(struct _reent *ptr);
void __malloc_unlock(struct _reent *ptr)
{
800042e4:	d4 01       	pushm	lr
	xTaskResumeAll();
800042e6:	f0 1f 00 02 	mcall	800042ec <__malloc_unlock+0x8>
}
800042ea:	d8 02       	popm	pc
800042ec:	80 00       	ld.sh	r0,r0[0x0]
800042ee:	44 fc       	lddsp	r12,sp[0x13c]

800042f0 <_init_startup>:
 * exception vectors are not compatible with the SCALL management in the current
 * FreeRTOS port. More low-level initializations are besides added here.
 */
int _init_startup(void);
int _init_startup(void)
{
800042f0:	d4 01       	pushm	lr
		extern void __heap_end__;
		portBASE_TYPE *pxMem;
	#endif

	/* Load the Exception Vector Base Address in the corresponding system register. */
	Set_system_register( AVR32_EVBA, ( int ) &_evba );
800042f2:	48 48       	lddpc	r8,80004300 <_init_startup+0x10>
800042f4:	e3 b8 00 01 	mtsr	0x4,r8

	/* Enable exceptions. */
	ENABLE_ALL_EXCEPTIONS();
800042f8:	d5 53       	csrf	0x15

	/* Initialize interrupt handling. */
	INTC_init_interrupts();
800042fa:	f0 1f 00 03 	mcall	80004304 <_init_startup+0x14>
	}
	#endif

  // Don't-care value for GCC.
  return 1;
}
800042fe:	da 0a       	popm	pc,r12=1
80004300:	80 00       	ld.sh	r0,r0[0x0]
80004302:	aa 00       	st.h	r5[0x0],r0
80004304:	80 00       	ld.sh	r0,r0[0x0]
80004306:	22 3c       	sub	r12,35

80004308 <vPortFree>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
80004308:	eb cd 40 80 	pushm	r7,lr
8000430c:	18 97       	mov	r7,r12
	if( pv )
8000430e:	58 0c       	cp.w	r12,0
80004310:	c0 80       	breq	80004320 <vPortFree+0x18>
	{
		vTaskSuspendAll();
80004312:	f0 1f 00 05 	mcall	80004324 <vPortFree+0x1c>
		{
			free( pv );
80004316:	0e 9c       	mov	r12,r7
80004318:	f0 1f 00 04 	mcall	80004328 <vPortFree+0x20>
		}
		xTaskResumeAll();
8000431c:	f0 1f 00 04 	mcall	8000432c <vPortFree+0x24>
80004320:	e3 cd 80 80 	ldm	sp++,r7,pc
80004324:	80 00       	ld.sh	r0,r0[0x0]
80004326:	43 58       	lddsp	r8,sp[0xd4]
80004328:	80 00       	ld.sh	r0,r0[0x0]
8000432a:	4a 70       	lddpc	r0,800043c4 <vTaskSwitchContext+0x5c>
8000432c:	80 00       	ld.sh	r0,r0[0x0]
8000432e:	44 fc       	lddsp	r12,sp[0x13c]

80004330 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
80004330:	eb cd 40 80 	pushm	r7,lr
80004334:	18 97       	mov	r7,r12
void *pvReturn;

	vTaskSuspendAll();
80004336:	f0 1f 00 06 	mcall	8000434c <pvPortMalloc+0x1c>
	{
		pvReturn = malloc( xWantedSize );
8000433a:	0e 9c       	mov	r12,r7
8000433c:	f0 1f 00 05 	mcall	80004350 <pvPortMalloc+0x20>
80004340:	18 97       	mov	r7,r12
	}
	xTaskResumeAll();
80004342:	f0 1f 00 05 	mcall	80004354 <pvPortMalloc+0x24>
		}
	}
	#endif
	
	return pvReturn;
}
80004346:	0e 9c       	mov	r12,r7
80004348:	e3 cd 80 80 	ldm	sp++,r7,pc
8000434c:	80 00       	ld.sh	r0,r0[0x0]
8000434e:	43 58       	lddsp	r8,sp[0xd4]
80004350:	80 00       	ld.sh	r0,r0[0x0]
80004352:	4a 88       	lddpc	r8,800043f0 <vTaskIncrementTick+0xc>
80004354:	80 00       	ld.sh	r0,r0[0x0]
80004356:	44 fc       	lddsp	r12,sp[0x13c]

80004358 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
80004358:	48 38       	lddpc	r8,80004364 <vTaskSuspendAll+0xc>
8000435a:	70 09       	ld.w	r9,r8[0x0]
8000435c:	2f f9       	sub	r9,-1
8000435e:	91 09       	st.w	r8[0x0],r9
}
80004360:	5e fc       	retal	r12
80004362:	00 00       	add	r0,r0
80004364:	00 00       	add	r0,r0
80004366:	09 8c       	ld.ub	r12,r4[0x0]

80004368 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
80004368:	49 a8       	lddpc	r8,800043d0 <vTaskSwitchContext+0x68>
8000436a:	70 08       	ld.w	r8,r8[0x0]
8000436c:	58 08       	cp.w	r8,0
8000436e:	c0 b1       	brne	80004384 <vTaskSwitchContext+0x1c>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
80004370:	49 98       	lddpc	r8,800043d4 <vTaskSwitchContext+0x6c>
80004372:	70 08       	ld.w	r8,r8[0x0]
80004374:	f0 08 00 28 	add	r8,r8,r8<<0x2
80004378:	49 89       	lddpc	r9,800043d8 <vTaskSwitchContext+0x70>
8000437a:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
8000437e:	58 08       	cp.w	r8,0
80004380:	c0 60       	breq	8000438c <vTaskSwitchContext+0x24>
80004382:	c1 18       	rjmp	800043a4 <vTaskSwitchContext+0x3c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
80004384:	30 19       	mov	r9,1
80004386:	49 68       	lddpc	r8,800043dc <vTaskSwitchContext+0x74>
80004388:	91 09       	st.w	r8[0x0],r9
8000438a:	5e fc       	retal	r12
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
8000438c:	49 28       	lddpc	r8,800043d4 <vTaskSwitchContext+0x6c>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
8000438e:	49 3a       	lddpc	r10,800043d8 <vTaskSwitchContext+0x70>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
80004390:	70 09       	ld.w	r9,r8[0x0]
80004392:	20 19       	sub	r9,1
80004394:	91 09       	st.w	r8[0x0],r9
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
80004396:	70 09       	ld.w	r9,r8[0x0]
80004398:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000439c:	f4 09 03 29 	ld.w	r9,r10[r9<<0x2]
800043a0:	58 09       	cp.w	r9,0
800043a2:	cf 70       	breq	80004390 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
800043a4:	48 c8       	lddpc	r8,800043d4 <vTaskSwitchContext+0x6c>
800043a6:	70 08       	ld.w	r8,r8[0x0]
800043a8:	f0 08 00 28 	add	r8,r8,r8<<0x2
800043ac:	48 b9       	lddpc	r9,800043d8 <vTaskSwitchContext+0x70>
800043ae:	f2 08 00 28 	add	r8,r9,r8<<0x2
800043b2:	70 19       	ld.w	r9,r8[0x4]
800043b4:	72 19       	ld.w	r9,r9[0x4]
800043b6:	91 19       	st.w	r8[0x4],r9
800043b8:	f0 ca ff f8 	sub	r10,r8,-8
800043bc:	14 39       	cp.w	r9,r10
800043be:	f3 f9 00 01 	ld.weq	r9,r9[0x4]
800043c2:	f1 f9 0a 01 	st.weq	r8[0x4],r9
800043c6:	70 18       	ld.w	r8,r8[0x4]
800043c8:	70 39       	ld.w	r9,r8[0xc]
800043ca:	48 68       	lddpc	r8,800043e0 <vTaskSwitchContext+0x78>
800043cc:	91 09       	st.w	r8[0x0],r9
800043ce:	5e fc       	retal	r12
800043d0:	00 00       	add	r0,r0
800043d2:	09 8c       	ld.ub	r12,r4[0x0]
800043d4:	00 00       	add	r0,r0
800043d6:	09 c4       	ld.ub	r4,r4[0x4]
800043d8:	00 00       	add	r0,r0
800043da:	08 a8       	st.w	r4++,r8
800043dc:	00 00       	add	r0,r0
800043de:	09 ac       	ld.ub	r12,r4[0x2]
800043e0:	00 00       	add	r0,r0
800043e2:	09 5c       	ld.sh	r12,--r4

800043e4 <vTaskIncrementTick>:
 * documented in task.h
 *----------------------------------------------------------*/


void vTaskIncrementTick( void )
{
800043e4:	eb cd 40 fe 	pushm	r1-r7,lr
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
800043e8:	4b a8       	lddpc	r8,800044d0 <vTaskIncrementTick+0xec>
800043ea:	70 08       	ld.w	r8,r8[0x0]
800043ec:	58 08       	cp.w	r8,0
800043ee:	c6 a1       	brne	800044c2 <vTaskIncrementTick+0xde>
	{
		++xTickCount;
800043f0:	4b 98       	lddpc	r8,800044d4 <vTaskIncrementTick+0xf0>
800043f2:	70 09       	ld.w	r9,r8[0x0]
800043f4:	2f f9       	sub	r9,-1
800043f6:	91 09       	st.w	r8[0x0],r9
		if( xTickCount == ( portTickType ) 0 )
800043f8:	70 08       	ld.w	r8,r8[0x0]
800043fa:	58 08       	cp.w	r8,0
800043fc:	c1 a1       	brne	80004430 <vTaskIncrementTick+0x4c>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
800043fe:	4b 78       	lddpc	r8,800044d8 <vTaskIncrementTick+0xf4>
80004400:	70 0a       	ld.w	r10,r8[0x0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
80004402:	4b 79       	lddpc	r9,800044dc <vTaskIncrementTick+0xf8>
80004404:	72 0b       	ld.w	r11,r9[0x0]
80004406:	91 0b       	st.w	r8[0x0],r11
			pxOverflowDelayedTaskList = pxTemp;
80004408:	93 0a       	st.w	r9[0x0],r10
			xNumOfOverflows++;
8000440a:	4b 69       	lddpc	r9,800044e0 <vTaskIncrementTick+0xfc>
8000440c:	72 0a       	ld.w	r10,r9[0x0]
8000440e:	2f fa       	sub	r10,-1
80004410:	93 0a       	st.w	r9[0x0],r10
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
80004412:	70 08       	ld.w	r8,r8[0x0]
80004414:	70 08       	ld.w	r8,r8[0x0]
80004416:	58 08       	cp.w	r8,0
80004418:	c0 51       	brne	80004422 <vTaskIncrementTick+0x3e>
				/* The new current delayed list is empty.  Set 
				xNextTaskUnblockTime to the maximum possible value so it is 
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until 
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
8000441a:	3f f9       	mov	r9,-1
8000441c:	4b 28       	lddpc	r8,800044e4 <vTaskIncrementTick+0x100>
8000441e:	91 09       	st.w	r8[0x0],r9
80004420:	c0 88       	rjmp	80004430 <vTaskIncrementTick+0x4c>
			{
				/* The new current delayed list is not empty, get the value of 
				the item at the head of the delayed list.  This is the time at 
				which the task at the head of the delayed list should be removed 
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
80004422:	4a e8       	lddpc	r8,800044d8 <vTaskIncrementTick+0xf4>
80004424:	70 08       	ld.w	r8,r8[0x0]
80004426:	70 38       	ld.w	r8,r8[0xc]
80004428:	70 38       	ld.w	r8,r8[0xc]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
8000442a:	70 19       	ld.w	r9,r8[0x4]
8000442c:	4a e8       	lddpc	r8,800044e4 <vTaskIncrementTick+0x100>
8000442e:	91 09       	st.w	r8[0x0],r9
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
80004430:	4a 98       	lddpc	r8,800044d4 <vTaskIncrementTick+0xf0>
80004432:	70 09       	ld.w	r9,r8[0x0]
80004434:	4a c8       	lddpc	r8,800044e4 <vTaskIncrementTick+0x100>
80004436:	70 08       	ld.w	r8,r8[0x0]
80004438:	10 39       	cp.w	r9,r8
8000443a:	c4 83       	brcs	800044ca <vTaskIncrementTick+0xe6>
8000443c:	4a 78       	lddpc	r8,800044d8 <vTaskIncrementTick+0xf4>
8000443e:	70 08       	ld.w	r8,r8[0x0]
80004440:	70 08       	ld.w	r8,r8[0x0]
80004442:	58 08       	cp.w	r8,0
80004444:	c0 c0       	breq	8000445c <vTaskIncrementTick+0x78>
80004446:	4a 58       	lddpc	r8,800044d8 <vTaskIncrementTick+0xf4>
80004448:	70 08       	ld.w	r8,r8[0x0]
8000444a:	70 38       	ld.w	r8,r8[0xc]
8000444c:	70 37       	ld.w	r7,r8[0xc]
8000444e:	6e 18       	ld.w	r8,r7[0x4]
80004450:	4a 19       	lddpc	r9,800044d4 <vTaskIncrementTick+0xf0>
80004452:	72 09       	ld.w	r9,r9[0x0]
80004454:	12 38       	cp.w	r8,r9
80004456:	e0 88 00 14 	brls	8000447e <vTaskIncrementTick+0x9a>
8000445a:	c0 e8       	rjmp	80004476 <vTaskIncrementTick+0x92>
8000445c:	3f f9       	mov	r9,-1
8000445e:	4a 28       	lddpc	r8,800044e4 <vTaskIncrementTick+0x100>
80004460:	91 09       	st.w	r8[0x0],r9
80004462:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
80004466:	6a 08       	ld.w	r8,r5[0x0]
80004468:	70 38       	ld.w	r8,r8[0xc]
8000446a:	70 37       	ld.w	r7,r8[0xc]
8000446c:	6e 18       	ld.w	r8,r7[0x4]
8000446e:	64 09       	ld.w	r9,r2[0x0]
80004470:	12 38       	cp.w	r8,r9
80004472:	e0 88 00 0b 	brls	80004488 <vTaskIncrementTick+0xa4>
80004476:	49 c9       	lddpc	r9,800044e4 <vTaskIncrementTick+0x100>
80004478:	93 08       	st.w	r9[0x0],r8
8000447a:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
8000447e:	49 b4       	lddpc	r4,800044e8 <vTaskIncrementTick+0x104>
80004480:	08 91       	mov	r1,r4
80004482:	49 b3       	lddpc	r3,800044ec <vTaskIncrementTick+0x108>
80004484:	49 55       	lddpc	r5,800044d8 <vTaskIncrementTick+0xf4>
80004486:	49 42       	lddpc	r2,800044d4 <vTaskIncrementTick+0xf0>
80004488:	ee c6 ff fc 	sub	r6,r7,-4
8000448c:	0c 9c       	mov	r12,r6
8000448e:	f0 1f 00 19 	mcall	800044f0 <vTaskIncrementTick+0x10c>
80004492:	6e a8       	ld.w	r8,r7[0x28]
80004494:	58 08       	cp.w	r8,0
80004496:	c0 50       	breq	800044a0 <vTaskIncrementTick+0xbc>
80004498:	ee cc ff e8 	sub	r12,r7,-24
8000449c:	f0 1f 00 15 	mcall	800044f0 <vTaskIncrementTick+0x10c>
800044a0:	6e bc       	ld.w	r12,r7[0x2c]
800044a2:	68 08       	ld.w	r8,r4[0x0]
800044a4:	10 3c       	cp.w	r12,r8
800044a6:	e3 fc ba 00 	st.whi	r1[0x0],r12
800044aa:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
800044ae:	0c 9b       	mov	r11,r6
800044b0:	e6 0c 00 2c 	add	r12,r3,r12<<0x2
800044b4:	f0 1f 00 10 	mcall	800044f4 <vTaskIncrementTick+0x110>
800044b8:	6a 08       	ld.w	r8,r5[0x0]
800044ba:	70 08       	ld.w	r8,r8[0x0]
800044bc:	58 08       	cp.w	r8,0
800044be:	cd 41       	brne	80004466 <vTaskIncrementTick+0x82>
800044c0:	cc eb       	rjmp	8000445c <vTaskIncrementTick+0x78>
	}
	else
	{
		++uxMissedTicks;
800044c2:	48 e8       	lddpc	r8,800044f8 <vTaskIncrementTick+0x114>
800044c4:	70 09       	ld.w	r9,r8[0x0]
800044c6:	2f f9       	sub	r9,-1
800044c8:	91 09       	st.w	r8[0x0],r9
800044ca:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
800044ce:	00 00       	add	r0,r0
800044d0:	00 00       	add	r0,r0
800044d2:	09 8c       	ld.ub	r12,r4[0x0]
800044d4:	00 00       	add	r0,r0
800044d6:	09 88       	ld.ub	r8,r4[0x0]
800044d8:	00 00       	add	r0,r0
800044da:	08 94       	mov	r4,r4
800044dc:	00 00       	add	r0,r0
800044de:	08 a4       	st.w	r4++,r4
800044e0:	00 00       	add	r0,r0
800044e2:	08 a0       	st.w	r4++,r0
800044e4:	00 00       	add	r0,r0
800044e6:	00 f8       	st.b	--r0,r8
800044e8:	00 00       	add	r0,r0
800044ea:	09 c4       	ld.ub	r4,r4[0x4]
800044ec:	00 00       	add	r0,r0
800044ee:	08 a8       	st.w	r4++,r8
800044f0:	80 00       	ld.sh	r0,r0[0x0]
800044f2:	40 6e       	lddsp	lr,sp[0x18]
800044f4:	80 00       	ld.sh	r0,r0[0x0]
800044f6:	40 1e       	lddsp	lr,sp[0x4]
800044f8:	00 00       	add	r0,r0
800044fa:	08 8c       	andn	r12,r4

800044fc <xTaskResumeAll>:
	++uxSchedulerSuspended;
}
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
800044fc:	d4 31       	pushm	r0-r7,lr
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
800044fe:	f0 1f 00 2c 	mcall	800045ac <xTaskResumeAll+0xb0>
	{
		--uxSchedulerSuspended;
80004502:	4a c8       	lddpc	r8,800045b0 <xTaskResumeAll+0xb4>
80004504:	70 09       	ld.w	r9,r8[0x0]
80004506:	20 19       	sub	r9,1
80004508:	91 09       	st.w	r8[0x0],r9

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
8000450a:	70 08       	ld.w	r8,r8[0x0]
8000450c:	58 08       	cp.w	r8,0
8000450e:	c4 a1       	brne	800045a2 <xTaskResumeAll+0xa6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0 )
80004510:	4a 98       	lddpc	r8,800045b4 <xTaskResumeAll+0xb8>
80004512:	70 08       	ld.w	r8,r8[0x0]
80004514:	58 08       	cp.w	r8,0
80004516:	c4 60       	breq	800045a2 <xTaskResumeAll+0xa6>
80004518:	30 04       	mov	r4,0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
8000451a:	4a 85       	lddpc	r5,800045b8 <xTaskResumeAll+0xbc>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					vListRemove( &( pxTCB->xEventListItem ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
8000451c:	4a 83       	lddpc	r3,800045bc <xTaskResumeAll+0xc0>
8000451e:	06 90       	mov	r0,r3
80004520:	4a 82       	lddpc	r2,800045c0 <xTaskResumeAll+0xc4>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
80004522:	4a 91       	lddpc	r1,800045c4 <xTaskResumeAll+0xc8>
80004524:	c1 e8       	rjmp	80004560 <xTaskResumeAll+0x64>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
80004526:	6a 38       	ld.w	r8,r5[0xc]
80004528:	70 37       	ld.w	r7,r8[0xc]
					vListRemove( &( pxTCB->xEventListItem ) );
8000452a:	ee cc ff e8 	sub	r12,r7,-24
8000452e:	f0 1f 00 27 	mcall	800045c8 <xTaskResumeAll+0xcc>
					vListRemove( &( pxTCB->xGenericListItem ) );
80004532:	ee c6 ff fc 	sub	r6,r7,-4
80004536:	0c 9c       	mov	r12,r6
80004538:	f0 1f 00 24 	mcall	800045c8 <xTaskResumeAll+0xcc>
					prvAddTaskToReadyQueue( pxTCB );
8000453c:	6e bc       	ld.w	r12,r7[0x2c]
8000453e:	66 08       	ld.w	r8,r3[0x0]
80004540:	10 3c       	cp.w	r12,r8
80004542:	e1 fc ba 00 	st.whi	r0[0x0],r12
80004546:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
8000454a:	0c 9b       	mov	r11,r6
8000454c:	e4 0c 00 2c 	add	r12,r2,r12<<0x2
80004550:	f0 1f 00 1f 	mcall	800045cc <xTaskResumeAll+0xd0>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
80004554:	62 08       	ld.w	r8,r1[0x0]
80004556:	6e b9       	ld.w	r9,r7[0x2c]
80004558:	70 b8       	ld.w	r8,r8[0x2c]
8000455a:	10 39       	cp.w	r9,r8
8000455c:	f9 b4 02 01 	movhs	r4,1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
80004560:	6a 08       	ld.w	r8,r5[0x0]
80004562:	58 08       	cp.w	r8,0
80004564:	ce 11       	brne	80004526 <xTaskResumeAll+0x2a>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
80004566:	49 b8       	lddpc	r8,800045d0 <xTaskResumeAll+0xd4>
80004568:	70 08       	ld.w	r8,r8[0x0]
8000456a:	58 08       	cp.w	r8,0
8000456c:	c0 f0       	breq	8000458a <xTaskResumeAll+0x8e>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
8000456e:	49 98       	lddpc	r8,800045d0 <xTaskResumeAll+0xd4>
80004570:	70 08       	ld.w	r8,r8[0x0]
80004572:	58 08       	cp.w	r8,0
80004574:	c1 10       	breq	80004596 <xTaskResumeAll+0x9a>
					{
						vTaskIncrementTick();
						--uxMissedTicks;
80004576:	49 77       	lddpc	r7,800045d0 <xTaskResumeAll+0xd4>
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
					{
						vTaskIncrementTick();
80004578:	f0 1f 00 17 	mcall	800045d4 <xTaskResumeAll+0xd8>
						--uxMissedTicks;
8000457c:	6e 08       	ld.w	r8,r7[0x0]
8000457e:	20 18       	sub	r8,1
80004580:	8f 08       	st.w	r7[0x0],r8
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
80004582:	6e 08       	ld.w	r8,r7[0x0]
80004584:	58 08       	cp.w	r8,0
80004586:	cf 91       	brne	80004578 <xTaskResumeAll+0x7c>
80004588:	c0 78       	rjmp	80004596 <xTaskResumeAll+0x9a>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
8000458a:	58 14       	cp.w	r4,1
8000458c:	c0 50       	breq	80004596 <xTaskResumeAll+0x9a>
8000458e:	49 38       	lddpc	r8,800045d8 <xTaskResumeAll+0xdc>
80004590:	70 08       	ld.w	r8,r8[0x0]
80004592:	58 18       	cp.w	r8,1
80004594:	c0 71       	brne	800045a2 <xTaskResumeAll+0xa6>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
80004596:	30 09       	mov	r9,0
80004598:	49 08       	lddpc	r8,800045d8 <xTaskResumeAll+0xdc>
8000459a:	91 09       	st.w	r8[0x0],r9
					portYIELD_WITHIN_API();
8000459c:	d7 33       	scall
8000459e:	30 17       	mov	r7,1
800045a0:	c0 28       	rjmp	800045a4 <xTaskResumeAll+0xa8>
800045a2:	30 07       	mov	r7,0
				}
			}
		}
	}
	taskEXIT_CRITICAL();
800045a4:	f0 1f 00 0e 	mcall	800045dc <xTaskResumeAll+0xe0>

	return xAlreadyYielded;
}
800045a8:	0e 9c       	mov	r12,r7
800045aa:	d8 32       	popm	r0-r7,pc
800045ac:	80 00       	ld.sh	r0,r0[0x0]
800045ae:	41 28       	lddsp	r8,sp[0x48]
800045b0:	00 00       	add	r0,r0
800045b2:	09 8c       	ld.ub	r12,r4[0x0]
800045b4:	00 00       	add	r0,r0
800045b6:	09 a8       	ld.ub	r8,r4[0x2]
800045b8:	00 00       	add	r0,r0
800045ba:	09 60       	ld.uh	r0,--r4
800045bc:	00 00       	add	r0,r0
800045be:	09 c4       	ld.ub	r4,r4[0x4]
800045c0:	00 00       	add	r0,r0
800045c2:	08 a8       	st.w	r4++,r8
800045c4:	00 00       	add	r0,r0
800045c6:	09 5c       	ld.sh	r12,--r4
800045c8:	80 00       	ld.sh	r0,r0[0x0]
800045ca:	40 6e       	lddsp	lr,sp[0x18]
800045cc:	80 00       	ld.sh	r0,r0[0x0]
800045ce:	40 1e       	lddsp	lr,sp[0x4]
800045d0:	00 00       	add	r0,r0
800045d2:	08 8c       	andn	r12,r4
800045d4:	80 00       	ld.sh	r0,r0[0x0]
800045d6:	43 e4       	lddsp	r4,sp[0xf8]
800045d8:	00 00       	add	r0,r0
800045da:	09 ac       	ld.ub	r12,r4[0x2]
800045dc:	80 00       	ld.sh	r0,r0[0x0]
800045de:	42 34       	lddsp	r4,sp[0x8c]

800045e0 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
800045e0:	eb cd 40 80 	pushm	r7,lr
800045e4:	18 97       	mov	r7,r12
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
800045e6:	49 08       	lddpc	r8,80004624 <prvAddCurrentTaskToDelayedList+0x44>
800045e8:	70 08       	ld.w	r8,r8[0x0]
800045ea:	91 1c       	st.w	r8[0x4],r12

	if( xTimeToWake < xTickCount )
800045ec:	48 f8       	lddpc	r8,80004628 <prvAddCurrentTaskToDelayedList+0x48>
800045ee:	70 08       	ld.w	r8,r8[0x0]
800045f0:	10 3c       	cp.w	r12,r8
800045f2:	c0 a2       	brcc	80004606 <prvAddCurrentTaskToDelayedList+0x26>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
800045f4:	48 c8       	lddpc	r8,80004624 <prvAddCurrentTaskToDelayedList+0x44>
800045f6:	70 0b       	ld.w	r11,r8[0x0]
800045f8:	48 d8       	lddpc	r8,8000462c <prvAddCurrentTaskToDelayedList+0x4c>
800045fa:	70 0c       	ld.w	r12,r8[0x0]
800045fc:	2f cb       	sub	r11,-4
800045fe:	f0 1f 00 0d 	mcall	80004630 <prvAddCurrentTaskToDelayedList+0x50>
80004602:	e3 cd 80 80 	ldm	sp++,r7,pc
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
80004606:	48 88       	lddpc	r8,80004624 <prvAddCurrentTaskToDelayedList+0x44>
80004608:	70 0b       	ld.w	r11,r8[0x0]
8000460a:	48 b8       	lddpc	r8,80004634 <prvAddCurrentTaskToDelayedList+0x54>
8000460c:	70 0c       	ld.w	r12,r8[0x0]
8000460e:	2f cb       	sub	r11,-4
80004610:	f0 1f 00 08 	mcall	80004630 <prvAddCurrentTaskToDelayedList+0x50>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
80004614:	48 98       	lddpc	r8,80004638 <prvAddCurrentTaskToDelayedList+0x58>
80004616:	70 08       	ld.w	r8,r8[0x0]
80004618:	10 37       	cp.w	r7,r8
8000461a:	c0 32       	brcc	80004620 <prvAddCurrentTaskToDelayedList+0x40>
		{
			xNextTaskUnblockTime = xTimeToWake;
8000461c:	48 78       	lddpc	r8,80004638 <prvAddCurrentTaskToDelayedList+0x58>
8000461e:	91 07       	st.w	r8[0x0],r7
80004620:	e3 cd 80 80 	ldm	sp++,r7,pc
80004624:	00 00       	add	r0,r0
80004626:	09 5c       	ld.sh	r12,--r4
80004628:	00 00       	add	r0,r0
8000462a:	09 88       	ld.ub	r8,r4[0x0]
8000462c:	00 00       	add	r0,r0
8000462e:	08 a4       	st.w	r4++,r4
80004630:	80 00       	ld.sh	r0,r0[0x0]
80004632:	40 3a       	lddsp	r10,sp[0xc]
80004634:	00 00       	add	r0,r0
80004636:	08 94       	mov	r4,r4
80004638:	00 00       	add	r0,r0
8000463a:	00 f8       	st.b	--r0,r8

8000463c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
8000463c:	eb cd 40 c0 	pushm	r6-r7,lr
80004640:	18 97       	mov	r7,r12
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0 )
80004642:	58 0c       	cp.w	r12,0
80004644:	c1 10       	breq	80004666 <vTaskDelay+0x2a>
		{
			vTaskSuspendAll();
80004646:	f0 1f 00 0a 	mcall	8000466c <vTaskDelay+0x30>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
8000464a:	48 a8       	lddpc	r8,80004670 <vTaskDelay+0x34>
8000464c:	70 06       	ld.w	r6,r8[0x0]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
8000464e:	48 a8       	lddpc	r8,80004674 <vTaskDelay+0x38>
80004650:	70 0c       	ld.w	r12,r8[0x0]
80004652:	2f cc       	sub	r12,-4
80004654:	f0 1f 00 09 	mcall	80004678 <vTaskDelay+0x3c>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
80004658:	ee 06 00 0c 	add	r12,r7,r6
8000465c:	f0 1f 00 08 	mcall	8000467c <vTaskDelay+0x40>
			}
			xAlreadyYielded = xTaskResumeAll();
80004660:	f0 1f 00 08 	mcall	80004680 <vTaskDelay+0x44>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( !xAlreadyYielded )
80004664:	c0 21       	brne	80004668 <vTaskDelay+0x2c>
		{
			portYIELD_WITHIN_API();
80004666:	d7 33       	scall
80004668:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000466c:	80 00       	ld.sh	r0,r0[0x0]
8000466e:	43 58       	lddsp	r8,sp[0xd4]
80004670:	00 00       	add	r0,r0
80004672:	09 88       	ld.ub	r8,r4[0x0]
80004674:	00 00       	add	r0,r0
80004676:	09 5c       	ld.sh	r12,--r4
80004678:	80 00       	ld.sh	r0,r0[0x0]
8000467a:	40 6e       	lddsp	lr,sp[0x18]
8000467c:	80 00       	ld.sh	r0,r0[0x0]
8000467e:	45 e0       	lddsp	r0,sp[0x178]
80004680:	80 00       	ld.sh	r0,r0[0x0]
80004682:	44 fc       	lddsp	r12,sp[0x13c]

80004684 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
80004684:	eb cd 40 f8 	pushm	r3-r7,lr
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
80004688:	49 57       	lddpc	r7,800046dc <prvIdleTask+0x58>
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
8000468a:	49 64       	lddpc	r4,800046e0 <prvIdleTask+0x5c>

				taskENTER_CRITICAL();
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					--uxCurrentNumberOfTasks;
8000468c:	49 63       	lddpc	r3,800046e4 <prvIdleTask+0x60>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
8000468e:	49 75       	lddpc	r5,800046e8 <prvIdleTask+0x64>
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
80004690:	6e 08       	ld.w	r8,r7[0x0]
80004692:	58 08       	cp.w	r8,0
80004694:	c1 e0       	breq	800046d0 <prvIdleTask+0x4c>
		{
			vTaskSuspendAll();
80004696:	f0 1f 00 16 	mcall	800046ec <prvIdleTask+0x68>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
8000469a:	68 06       	ld.w	r6,r4[0x0]
			xTaskResumeAll();
8000469c:	f0 1f 00 15 	mcall	800046f0 <prvIdleTask+0x6c>

			if( xListIsEmpty == pdFALSE )
800046a0:	58 06       	cp.w	r6,0
800046a2:	c1 70       	breq	800046d0 <prvIdleTask+0x4c>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
800046a4:	f0 1f 00 14 	mcall	800046f4 <prvIdleTask+0x70>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
800046a8:	68 38       	ld.w	r8,r4[0xc]
800046aa:	70 36       	ld.w	r6,r8[0xc]
					vListRemove( &( pxTCB->xGenericListItem ) );
800046ac:	ec cc ff fc 	sub	r12,r6,-4
800046b0:	f0 1f 00 12 	mcall	800046f8 <prvIdleTask+0x74>
					--uxCurrentNumberOfTasks;
800046b4:	66 08       	ld.w	r8,r3[0x0]
800046b6:	20 18       	sub	r8,1
800046b8:	87 08       	st.w	r3[0x0],r8
					--uxTasksDeleted;
800046ba:	6e 08       	ld.w	r8,r7[0x0]
800046bc:	20 18       	sub	r8,1
800046be:	8f 08       	st.w	r7[0x0],r8
				}
				taskEXIT_CRITICAL();
800046c0:	f0 1f 00 0f 	mcall	800046fc <prvIdleTask+0x78>

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
800046c4:	6c cc       	ld.w	r12,r6[0x30]
800046c6:	f0 1f 00 0f 	mcall	80004700 <prvIdleTask+0x7c>
		vPortFree( pxTCB );
800046ca:	0c 9c       	mov	r12,r6
800046cc:	f0 1f 00 0d 	mcall	80004700 <prvIdleTask+0x7c>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
800046d0:	6a 08       	ld.w	r8,r5[0x0]
800046d2:	58 18       	cp.w	r8,1
800046d4:	fe 98 ff de 	brls	80004690 <prvIdleTask+0xc>
			{
				taskYIELD();
800046d8:	d7 33       	scall
800046da:	cd bb       	rjmp	80004690 <prvIdleTask+0xc>
800046dc:	00 00       	add	r0,r0
800046de:	08 9c       	mov	r12,r4
800046e0:	00 00       	add	r0,r0
800046e2:	09 48       	ld.w	r8,--r4
800046e4:	00 00       	add	r0,r0
800046e6:	09 a8       	ld.ub	r8,r4[0x2]
800046e8:	00 00       	add	r0,r0
800046ea:	08 a8       	st.w	r4++,r8
800046ec:	80 00       	ld.sh	r0,r0[0x0]
800046ee:	43 58       	lddsp	r8,sp[0xd4]
800046f0:	80 00       	ld.sh	r0,r0[0x0]
800046f2:	44 fc       	lddsp	r12,sp[0x13c]
800046f4:	80 00       	ld.sh	r0,r0[0x0]
800046f6:	41 28       	lddsp	r8,sp[0x48]
800046f8:	80 00       	ld.sh	r0,r0[0x0]
800046fa:	40 6e       	lddsp	lr,sp[0x18]
800046fc:	80 00       	ld.sh	r0,r0[0x0]
800046fe:	42 34       	lddsp	r4,sp[0x8c]
80004700:	80 00       	ld.sh	r0,r0[0x0]
80004702:	43 08       	lddsp	r8,sp[0xc0]

80004704 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
80004704:	d4 31       	pushm	r0-r7,lr
80004706:	20 1d       	sub	sp,4
80004708:	fa c4 ff d8 	sub	r4,sp,-40
8000470c:	50 0c       	stdsp	sp[0x0],r12
8000470e:	16 91       	mov	r1,r11
80004710:	14 97       	mov	r7,r10
80004712:	12 90       	mov	r0,r9
80004714:	10 93       	mov	r3,r8
80004716:	68 02       	ld.w	r2,r4[0x0]
80004718:	68 16       	ld.w	r6,r4[0x4]
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
8000471a:	34 4c       	mov	r12,68
8000471c:	f0 1f 00 5b 	mcall	80004888 <xTaskGenericCreate+0x184>
80004720:	18 95       	mov	r5,r12

	if( pxNewTCB != NULL )
80004722:	c0 31       	brne	80004728 <xTaskGenericCreate+0x24>
80004724:	3f fc       	mov	r12,-1
80004726:	ca d8       	rjmp	80004880 <xTaskGenericCreate+0x17c>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
80004728:	58 06       	cp.w	r6,0
8000472a:	e0 81 00 ad 	brne	80004884 <xTaskGenericCreate+0x180>
8000472e:	0e 9c       	mov	r12,r7
80004730:	5c 7c       	castu.h	r12
80004732:	a3 6c       	lsl	r12,0x2
80004734:	f0 1f 00 55 	mcall	80004888 <xTaskGenericCreate+0x184>
80004738:	18 96       	mov	r6,r12
8000473a:	8b cc       	st.w	r5[0x30],r12

		if( pxNewTCB->pxStack == NULL )
8000473c:	c0 61       	brne	80004748 <xTaskGenericCreate+0x44>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
8000473e:	0a 9c       	mov	r12,r5
80004740:	f0 1f 00 53 	mcall	8000488c <xTaskGenericCreate+0x188>
80004744:	3f fc       	mov	r12,-1
80004746:	c9 d8       	rjmp	80004880 <xTaskGenericCreate+0x17c>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, tskSTACK_FILL_BYTE, usStackDepth * sizeof( portSTACK_TYPE ) );
80004748:	5c 77       	castu.h	r7
8000474a:	ee 0a 15 02 	lsl	r10,r7,0x2
8000474e:	e0 6b 00 a5 	mov	r11,165
80004752:	0c 9c       	mov	r12,r6
80004754:	f0 1f 00 4f 	mcall	80004890 <xTaskGenericCreate+0x18c>
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( unsigned long ) pxTopOfStack ) & ( ( unsigned long ) ~portBYTE_ALIGNMENT_MASK  ) );
80004758:	ee c6 00 01 	sub	r6,r7,1
8000475c:	6a c8       	ld.w	r8,r5[0x30]
8000475e:	f0 06 00 26 	add	r6,r8,r6<<0x2
80004762:	e0 16 ff fc 	andl	r6,0xfffc
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
80004766:	31 0a       	mov	r10,16
80004768:	02 9b       	mov	r11,r1
8000476a:	ea cc ff cc 	sub	r12,r5,-52
8000476e:	f0 1f 00 4a 	mcall	80004894 <xTaskGenericCreate+0x190>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
80004772:	30 08       	mov	r8,0
80004774:	eb 68 00 43 	st.b	r5[67],r8
80004778:	58 73       	cp.w	r3,7
8000477a:	e6 07 17 80 	movls	r7,r3
8000477e:	f9 b7 0b 07 	movhi	r7,7
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
80004782:	8b b7       	st.w	r5[0x2c],r7
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
80004784:	ea c4 ff fc 	sub	r4,r5,-4
80004788:	08 9c       	mov	r12,r4
8000478a:	f0 1f 00 44 	mcall	80004898 <xTaskGenericCreate+0x194>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
8000478e:	ea cc ff e8 	sub	r12,r5,-24
80004792:	f0 1f 00 42 	mcall	80004898 <xTaskGenericCreate+0x194>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
80004796:	8b 45       	st.w	r5[0x10],r5

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
80004798:	ee 07 11 08 	rsub	r7,r7,8
8000479c:	8b 67       	st.w	r5[0x18],r7
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
8000479e:	8b 95       	st.w	r5[0x24],r5
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
800047a0:	00 9a       	mov	r10,r0
800047a2:	40 0b       	lddsp	r11,sp[0x0]
800047a4:	0c 9c       	mov	r12,r6
800047a6:	f0 1f 00 3e 	mcall	8000489c <xTaskGenericCreate+0x198>
800047aa:	8b 0c       	st.w	r5[0x0],r12
		if( ( void * ) pxCreatedTask != NULL )
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
800047ac:	58 02       	cp.w	r2,0
800047ae:	e5 f5 1a 00 	st.wne	r2[0x0],r5
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
800047b2:	f0 1f 00 3c 	mcall	800048a0 <xTaskGenericCreate+0x19c>
		{
			uxCurrentNumberOfTasks++;
800047b6:	4b c8       	lddpc	r8,800048a4 <xTaskGenericCreate+0x1a0>
800047b8:	70 09       	ld.w	r9,r8[0x0]
800047ba:	2f f9       	sub	r9,-1
800047bc:	91 09       	st.w	r8[0x0],r9
			if( pxCurrentTCB == NULL )
800047be:	4b b8       	lddpc	r8,800048a8 <xTaskGenericCreate+0x1a4>
800047c0:	70 08       	ld.w	r8,r8[0x0]
800047c2:	58 08       	cp.w	r8,0
800047c4:	c2 61       	brne	80004810 <xTaskGenericCreate+0x10c>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
800047c6:	4b 98       	lddpc	r8,800048a8 <xTaskGenericCreate+0x1a4>
800047c8:	91 05       	st.w	r8[0x0],r5

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
800047ca:	4b 78       	lddpc	r8,800048a4 <xTaskGenericCreate+0x1a0>
800047cc:	70 08       	ld.w	r8,r8[0x0]
800047ce:	58 18       	cp.w	r8,1
800047d0:	c2 b1       	brne	80004826 <xTaskGenericCreate+0x122>
800047d2:	4b 77       	lddpc	r7,800048ac <xTaskGenericCreate+0x1a8>

/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
800047d4:	ee c6 ff 60 	sub	r6,r7,-160
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
800047d8:	0e 9c       	mov	r12,r7
800047da:	f0 1f 00 36 	mcall	800048b0 <xTaskGenericCreate+0x1ac>
800047de:	2e c7       	sub	r7,-20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
800047e0:	0c 37       	cp.w	r7,r6
800047e2:	cf b1       	brne	800047d8 <xTaskGenericCreate+0xd4>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
800047e4:	4b 47       	lddpc	r7,800048b4 <xTaskGenericCreate+0x1b0>
800047e6:	0e 9c       	mov	r12,r7
800047e8:	f0 1f 00 32 	mcall	800048b0 <xTaskGenericCreate+0x1ac>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
800047ec:	4b 36       	lddpc	r6,800048b8 <xTaskGenericCreate+0x1b4>
800047ee:	0c 9c       	mov	r12,r6
800047f0:	f0 1f 00 30 	mcall	800048b0 <xTaskGenericCreate+0x1ac>
	vListInitialise( ( xList * ) &xPendingReadyList );
800047f4:	4b 2c       	lddpc	r12,800048bc <xTaskGenericCreate+0x1b8>
800047f6:	f0 1f 00 2f 	mcall	800048b0 <xTaskGenericCreate+0x1ac>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
800047fa:	4b 2c       	lddpc	r12,800048c0 <xTaskGenericCreate+0x1bc>
800047fc:	f0 1f 00 2d 	mcall	800048b0 <xTaskGenericCreate+0x1ac>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
80004800:	4b 1c       	lddpc	r12,800048c4 <xTaskGenericCreate+0x1c0>
80004802:	f0 1f 00 2c 	mcall	800048b0 <xTaskGenericCreate+0x1ac>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
80004806:	4b 18       	lddpc	r8,800048c8 <xTaskGenericCreate+0x1c4>
80004808:	91 07       	st.w	r8[0x0],r7
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
8000480a:	4b 18       	lddpc	r8,800048cc <xTaskGenericCreate+0x1c8>
8000480c:	91 06       	st.w	r8[0x0],r6
8000480e:	c0 c8       	rjmp	80004826 <xTaskGenericCreate+0x122>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
80004810:	4b 08       	lddpc	r8,800048d0 <xTaskGenericCreate+0x1cc>
80004812:	70 08       	ld.w	r8,r8[0x0]
80004814:	58 08       	cp.w	r8,0
80004816:	c0 81       	brne	80004826 <xTaskGenericCreate+0x122>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
80004818:	4a 48       	lddpc	r8,800048a8 <xTaskGenericCreate+0x1a4>
8000481a:	70 08       	ld.w	r8,r8[0x0]
8000481c:	70 b8       	ld.w	r8,r8[0x2c]
8000481e:	10 33       	cp.w	r3,r8
80004820:	c0 33       	brcs	80004826 <xTaskGenericCreate+0x122>
					{
						pxCurrentTCB = pxNewTCB;
80004822:	4a 28       	lddpc	r8,800048a8 <xTaskGenericCreate+0x1a4>
80004824:	91 05       	st.w	r8[0x0],r5
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
80004826:	6a b8       	ld.w	r8,r5[0x2c]
80004828:	4a b9       	lddpc	r9,800048d4 <xTaskGenericCreate+0x1d0>
8000482a:	72 09       	ld.w	r9,r9[0x0]
8000482c:	12 38       	cp.w	r8,r9
8000482e:	e0 88 00 04 	brls	80004836 <xTaskGenericCreate+0x132>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
80004832:	4a 99       	lddpc	r9,800048d4 <xTaskGenericCreate+0x1d0>
80004834:	93 08       	st.w	r9[0x0],r8
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
80004836:	4a 98       	lddpc	r8,800048d8 <xTaskGenericCreate+0x1d4>
80004838:	70 09       	ld.w	r9,r8[0x0]
8000483a:	2f f9       	sub	r9,-1
8000483c:	91 09       	st.w	r8[0x0],r9

			prvAddTaskToReadyQueue( pxNewTCB );
8000483e:	6a b8       	ld.w	r8,r5[0x2c]
80004840:	4a 79       	lddpc	r9,800048dc <xTaskGenericCreate+0x1d8>
80004842:	72 09       	ld.w	r9,r9[0x0]
80004844:	12 38       	cp.w	r8,r9
80004846:	e0 88 00 04 	brls	8000484e <xTaskGenericCreate+0x14a>
8000484a:	4a 59       	lddpc	r9,800048dc <xTaskGenericCreate+0x1d8>
8000484c:	93 08       	st.w	r9[0x0],r8
8000484e:	6a bc       	ld.w	r12,r5[0x2c]
80004850:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
80004854:	08 9b       	mov	r11,r4
80004856:	49 68       	lddpc	r8,800048ac <xTaskGenericCreate+0x1a8>
80004858:	f0 0c 00 2c 	add	r12,r8,r12<<0x2
8000485c:	f0 1f 00 21 	mcall	800048e0 <xTaskGenericCreate+0x1dc>

			xReturn = pdPASS;
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
80004860:	f0 1f 00 21 	mcall	800048e4 <xTaskGenericCreate+0x1e0>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
80004864:	49 b8       	lddpc	r8,800048d0 <xTaskGenericCreate+0x1cc>
80004866:	70 08       	ld.w	r8,r8[0x0]
80004868:	58 08       	cp.w	r8,0
8000486a:	c0 a0       	breq	8000487e <xTaskGenericCreate+0x17a>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
8000486c:	48 f8       	lddpc	r8,800048a8 <xTaskGenericCreate+0x1a4>
8000486e:	70 08       	ld.w	r8,r8[0x0]
80004870:	70 b8       	ld.w	r8,r8[0x2c]
80004872:	10 33       	cp.w	r3,r8
80004874:	e0 88 00 05 	brls	8000487e <xTaskGenericCreate+0x17a>
			{
				portYIELD_WITHIN_API();
80004878:	d7 33       	scall
8000487a:	30 1c       	mov	r12,1
8000487c:	c0 28       	rjmp	80004880 <xTaskGenericCreate+0x17c>
8000487e:	30 1c       	mov	r12,1
			}
		}
	}

	return xReturn;
}
80004880:	2f fd       	sub	sp,-4
80004882:	d8 32       	popm	r0-r7,pc
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
80004884:	99 c6       	st.w	r12[0x30],r6
80004886:	c6 1b       	rjmp	80004748 <xTaskGenericCreate+0x44>
80004888:	80 00       	ld.sh	r0,r0[0x0]
8000488a:	43 30       	lddsp	r0,sp[0xcc]
8000488c:	80 00       	ld.sh	r0,r0[0x0]
8000488e:	43 08       	lddsp	r8,sp[0xc0]
80004890:	80 00       	ld.sh	r0,r0[0x0]
80004892:	50 38       	stdsp	sp[0xc],r8
80004894:	80 00       	ld.sh	r0,r0[0x0]
80004896:	54 c4       	stdsp	sp[0x130],r4
80004898:	80 00       	ld.sh	r0,r0[0x0]
8000489a:	40 18       	lddsp	r8,sp[0x4]
8000489c:	80 00       	ld.sh	r0,r0[0x0]
8000489e:	40 94       	lddsp	r4,sp[0x24]
800048a0:	80 00       	ld.sh	r0,r0[0x0]
800048a2:	41 28       	lddsp	r8,sp[0x48]
800048a4:	00 00       	add	r0,r0
800048a6:	09 a8       	ld.ub	r8,r4[0x2]
800048a8:	00 00       	add	r0,r0
800048aa:	09 5c       	ld.sh	r12,--r4
800048ac:	00 00       	add	r0,r0
800048ae:	08 a8       	st.w	r4++,r8
800048b0:	80 00       	ld.sh	r0,r0[0x0]
800048b2:	40 04       	lddsp	r4,sp[0x0]
800048b4:	00 00       	add	r0,r0
800048b6:	09 74       	ld.ub	r4,--r4
800048b8:	00 00       	add	r0,r0
800048ba:	09 90       	ld.ub	r0,r4[0x1]
800048bc:	00 00       	add	r0,r0
800048be:	09 60       	ld.uh	r0,--r4
800048c0:	00 00       	add	r0,r0
800048c2:	09 48       	ld.w	r8,--r4
800048c4:	00 00       	add	r0,r0
800048c6:	09 b0       	ld.ub	r0,r4[0x3]
800048c8:	00 00       	add	r0,r0
800048ca:	08 94       	mov	r4,r4
800048cc:	00 00       	add	r0,r0
800048ce:	08 a4       	st.w	r4++,r4
800048d0:	00 00       	add	r0,r0
800048d2:	08 98       	mov	r8,r4
800048d4:	00 00       	add	r0,r0
800048d6:	08 90       	mov	r0,r4
800048d8:	00 00       	add	r0,r0
800048da:	09 a4       	ld.ub	r4,r4[0x2]
800048dc:	00 00       	add	r0,r0
800048de:	09 c4       	ld.ub	r4,r4[0x4]
800048e0:	80 00       	ld.sh	r0,r0[0x0]
800048e2:	40 1e       	lddsp	lr,sp[0x4]
800048e4:	80 00       	ld.sh	r0,r0[0x0]
800048e6:	42 34       	lddsp	r4,sp[0x8c]

800048e8 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
800048e8:	d4 01       	pushm	lr
portBASE_TYPE xReturn;

	/* Add the idle task at the lowest priority. */
	xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), ( xTaskHandle * ) NULL );
800048ea:	30 09       	mov	r9,0
800048ec:	1a d9       	st.w	--sp,r9
800048ee:	1a d9       	st.w	--sp,r9
800048f0:	1a d9       	st.w	--sp,r9
800048f2:	12 98       	mov	r8,r9
800048f4:	e0 6a 01 00 	mov	r10,256
800048f8:	48 9b       	lddpc	r11,8000491c <vTaskStartScheduler+0x34>
800048fa:	48 ac       	lddpc	r12,80004920 <vTaskStartScheduler+0x38>
800048fc:	f0 1f 00 0a 	mcall	80004924 <vTaskStartScheduler+0x3c>
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
80004900:	2f dd       	sub	sp,-12
80004902:	58 1c       	cp.w	r12,1
80004904:	c0 a1       	brne	80004918 <vTaskStartScheduler+0x30>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
80004906:	d3 03       	ssrf	0x10

		xSchedulerRunning = pdTRUE;
80004908:	30 19       	mov	r9,1
8000490a:	48 88       	lddpc	r8,80004928 <vTaskStartScheduler+0x40>
8000490c:	91 09       	st.w	r8[0x0],r9
		xTickCount = ( portTickType ) 0;
8000490e:	30 09       	mov	r9,0
80004910:	48 78       	lddpc	r8,8000492c <vTaskStartScheduler+0x44>
80004912:	91 09       	st.w	r8[0x0],r9
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() )
80004914:	f0 1f 00 07 	mcall	80004930 <vTaskStartScheduler+0x48>
80004918:	d8 02       	popm	pc
8000491a:	00 00       	add	r0,r0
8000491c:	80 00       	ld.sh	r0,r0[0x0]
8000491e:	ad 08       	ld.d	r8,r6
80004920:	80 00       	ld.sh	r0,r0[0x0]
80004922:	46 84       	lddsp	r4,sp[0x1a0]
80004924:	80 00       	ld.sh	r0,r0[0x0]
80004926:	47 04       	lddsp	r4,sp[0x1c0]
80004928:	00 00       	add	r0,r0
8000492a:	08 98       	mov	r8,r4
8000492c:	00 00       	add	r0,r0
8000492e:	09 88       	ld.ub	r8,r4[0x0]
80004930:	80 00       	ld.sh	r0,r0[0x0]
80004932:	41 38       	lddsp	r8,sp[0x4c]

80004934 <taskFn>:
	    setbuf(stdout, NULL);
	    setbuf(stdin,  NULL);
    #endif
}

static void taskFn(void* args){
80004934:	eb cd 40 f8 	pushm	r3-r7,lr
80004938:	30 07       	mov	r7,0
	const portTickType delay = 1000 / portTICK_RATE_MS;
	
    int iter = 0;

	while(1){
		gpio_toggle_pin(LED0_GPIO);
8000493a:	32 35       	mov	r5,35
		printf("tick %d\n", iter++);
8000493c:	48 94       	lddpc	r4,80004960 <taskFn+0x2c>
		
		vTaskDelay(delay);
8000493e:	e0 63 03 e8 	mov	r3,1000
	const portTickType delay = 1000 / portTICK_RATE_MS;
	
    int iter = 0;

	while(1){
		gpio_toggle_pin(LED0_GPIO);
80004942:	0a 9c       	mov	r12,r5
80004944:	f0 1f 00 08 	mcall	80004964 <taskFn+0x30>
		printf("tick %d\n", iter++);
80004948:	ee c6 ff ff 	sub	r6,r7,-1
8000494c:	1a d7       	st.w	--sp,r7
8000494e:	08 9c       	mov	r12,r4
80004950:	f0 1f 00 06 	mcall	80004968 <taskFn+0x34>
		
		vTaskDelay(delay);
80004954:	06 9c       	mov	r12,r3
80004956:	f0 1f 00 06 	mcall	8000496c <taskFn+0x38>
8000495a:	0c 97       	mov	r7,r6
8000495c:	2f fd       	sub	sp,-4
8000495e:	cf 2b       	rjmp	80004942 <taskFn+0xe>
80004960:	80 00       	ld.sh	r0,r0[0x0]
80004962:	ad 10       	ld.d	r0,--r6
80004964:	80 00       	ld.sh	r0,r0[0x0]
80004966:	21 f4       	sub	r4,31
80004968:	80 00       	ld.sh	r0,r0[0x0]
8000496a:	50 48       	stdsp	sp[0x10],r8
8000496c:	80 00       	ld.sh	r0,r0[0x0]
8000496e:	46 3c       	lddsp	r12,sp[0x18c]

80004970 <init>:
    for(int i = 0; i < 10; i++){
        asm volatile ("" ::: "memory");
    }
}

void init(){
80004970:	eb cd 40 80 	pushm	r7,lr
	board_init();
80004974:	f0 1f 00 1a 	mcall	800049dc <init+0x6c>
	
    gpio_configure_pin(TEST_A, GPIO_DIR_INPUT);
80004978:	30 0b       	mov	r11,0
8000497a:	31 fc       	mov	r12,31
8000497c:	f0 1f 00 19 	mcall	800049e0 <init+0x70>
    gpio_configure_pin(TEST_B, GPIO_DIR_INPUT);
80004980:	30 0b       	mov	r11,0
80004982:	31 dc       	mov	r12,29
80004984:	f0 1f 00 17 	mcall	800049e0 <init+0x70>
    gpio_configure_pin(TEST_C, GPIO_DIR_INPUT);
80004988:	30 0b       	mov	r11,0
8000498a:	31 bc       	mov	r12,27
8000498c:	f0 1f 00 15 	mcall	800049e0 <init+0x70>
    gpio_configure_pin(RESPONSE_A, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80004990:	30 3b       	mov	r11,3
80004992:	31 ec       	mov	r12,30
80004994:	f0 1f 00 13 	mcall	800049e0 <init+0x70>
    gpio_configure_pin(RESPONSE_B, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80004998:	30 3b       	mov	r11,3
8000499a:	31 cc       	mov	r12,28
8000499c:	f0 1f 00 11 	mcall	800049e0 <init+0x70>
    gpio_configure_pin(RESPONSE_C, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800049a0:	30 3b       	mov	r11,3
800049a2:	32 0c       	mov	r12,32
800049a4:	f0 1f 00 0f 	mcall	800049e0 <init+0x70>

	pcl_switch_to_osc(PCL_OSC0, FOSC0, OSC0_STARTUP);
800049a8:	30 3a       	mov	r10,3
800049aa:	e0 6b 1b 00 	mov	r11,6912
800049ae:	ea 1b 00 b7 	orh	r11,0xb7
800049b2:	30 0c       	mov	r12,0
800049b4:	f0 1f 00 0c 	mcall	800049e4 <init+0x74>
	
	stdio_usb_init(&CONFIG_USART_IF);
800049b8:	fe 7c 1c 00 	mov	r12,-58368
800049bc:	f0 1f 00 0b 	mcall	800049e8 <init+0x78>

    #if defined(__GNUC__) && defined(__AVR32__)
	    setbuf(stdout, NULL);
800049c0:	48 b7       	lddpc	r7,800049ec <init+0x7c>
800049c2:	6e 08       	ld.w	r8,r7[0x0]
800049c4:	30 0b       	mov	r11,0
800049c6:	70 1c       	ld.w	r12,r8[0x4]
800049c8:	f0 1f 00 0a 	mcall	800049f0 <init+0x80>
	    setbuf(stdin,  NULL);
800049cc:	6e 08       	ld.w	r8,r7[0x0]
800049ce:	30 0b       	mov	r11,0
800049d0:	70 0c       	ld.w	r12,r8[0x0]
800049d2:	f0 1f 00 08 	mcall	800049f0 <init+0x80>
    #endif
}
800049d6:	e3 cd 80 80 	ldm	sp++,r7,pc
800049da:	00 00       	add	r0,r0
800049dc:	80 00       	ld.sh	r0,r0[0x0]
800049de:	21 0c       	sub	r12,16
800049e0:	80 00       	ld.sh	r0,r0[0x0]
800049e2:	21 3c       	sub	r12,19
800049e4:	80 00       	ld.sh	r0,r0[0x0]
800049e6:	23 80       	sub	r0,56
800049e8:	80 00       	ld.sh	r0,r0[0x0]
800049ea:	3f 2c       	mov	r12,-14
800049ec:	00 00       	add	r0,r0
800049ee:	01 ec       	ld.ub	r12,r0[0x6]
800049f0:	80 00       	ld.sh	r0,r0[0x0]
800049f2:	53 88       	stdsp	sp[0xe0],r8

800049f4 <main>:
	xTaskCreate(responseTask_D, "Test_B", 1024, (&(struct responseTaskArgs){{TEST_B, RESPONSE_B}}), tskIDLE_PRIORITY + 2, NULL);
	xTaskCreate(responseTask_D, "Test_C", 1024, (&(struct responseTaskArgs){{TEST_C, RESPONSE_C}}), tskIDLE_PRIORITY + 1, NULL);
}


int main(){
800049f4:	eb cd 40 80 	pushm	r7,lr
	init();
800049f8:	f0 1f 00 0a 	mcall	80004a20 <main+0x2c>
        
	xTaskCreate(taskFn, "", 1024, NULL, tskIDLE_PRIORITY + 1, NULL);
800049fc:	30 07       	mov	r7,0
800049fe:	1a d7       	st.w	--sp,r7
80004a00:	1a d7       	st.w	--sp,r7
80004a02:	1a d7       	st.w	--sp,r7
80004a04:	30 18       	mov	r8,1
80004a06:	0e 99       	mov	r9,r7
80004a08:	e0 6a 04 00 	mov	r10,1024
80004a0c:	48 6b       	lddpc	r11,80004a24 <main+0x30>
80004a0e:	48 7c       	lddpc	r12,80004a28 <main+0x34>
80004a10:	f0 1f 00 07 	mcall	80004a2c <main+0x38>
	//task_C(NULL);
	
	// Start the scheduler, anything after this will not run.
	vTaskStartScheduler();
80004a14:	f0 1f 00 07 	mcall	80004a30 <main+0x3c>
80004a18:	2f dd       	sub	sp,-12
    
}
80004a1a:	0e 9c       	mov	r12,r7
80004a1c:	e3 cd 80 80 	ldm	sp++,r7,pc
80004a20:	80 00       	ld.sh	r0,r0[0x0]
80004a22:	49 70       	lddpc	r0,80004a7c <free+0xc>
80004a24:	80 00       	ld.sh	r0,r0[0x0]
80004a26:	ad 18       	ld.d	r8,--r6
80004a28:	80 00       	ld.sh	r0,r0[0x0]
80004a2a:	49 34       	lddpc	r4,80004a74 <free+0x4>
80004a2c:	80 00       	ld.sh	r0,r0[0x0]
80004a2e:	47 04       	lddsp	r4,sp[0x1c0]
80004a30:	80 00       	ld.sh	r0,r0[0x0]
80004a32:	48 e8       	lddpc	r8,80004a68 <exit+0x20>

80004a34 <atexit>:
80004a34:	d4 01       	pushm	lr
80004a36:	30 09       	mov	r9,0
80004a38:	18 9b       	mov	r11,r12
80004a3a:	12 9a       	mov	r10,r9
80004a3c:	12 9c       	mov	r12,r9
80004a3e:	f0 1f 00 02 	mcall	80004a44 <atexit+0x10>
80004a42:	d8 02       	popm	pc
80004a44:	80 00       	ld.sh	r0,r0[0x0]
80004a46:	79 b0       	ld.w	r0,r12[0x6c]

80004a48 <exit>:
80004a48:	d4 21       	pushm	r4-r7,lr
80004a4a:	30 0b       	mov	r11,0
80004a4c:	18 97       	mov	r7,r12
80004a4e:	f0 1f 00 06 	mcall	80004a64 <exit+0x1c>
80004a52:	48 68       	lddpc	r8,80004a68 <exit+0x20>
80004a54:	70 0c       	ld.w	r12,r8[0x0]
80004a56:	78 a8       	ld.w	r8,r12[0x28]
80004a58:	58 08       	cp.w	r8,0
80004a5a:	c0 20       	breq	80004a5e <exit+0x16>
80004a5c:	5d 18       	icall	r8
80004a5e:	0e 9c       	mov	r12,r7
80004a60:	f0 1f 00 03 	mcall	80004a6c <exit+0x24>
80004a64:	80 00       	ld.sh	r0,r0[0x0]
80004a66:	7a 5c       	ld.w	r12,sp[0x14]
80004a68:	80 00       	ld.sh	r0,r0[0x0]
80004a6a:	ad 20       	st.d	r6++,r0
80004a6c:	80 00       	ld.sh	r0,r0[0x0]
80004a6e:	54 ee       	stdsp	sp[0x138],lr

80004a70 <free>:
80004a70:	d4 01       	pushm	lr
80004a72:	48 48       	lddpc	r8,80004a80 <free+0x10>
80004a74:	18 9b       	mov	r11,r12
80004a76:	70 0c       	ld.w	r12,r8[0x0]
80004a78:	f0 1f 00 03 	mcall	80004a84 <free+0x14>
80004a7c:	d8 02       	popm	pc
80004a7e:	00 00       	add	r0,r0
80004a80:	00 00       	add	r0,r0
80004a82:	01 ec       	ld.ub	r12,r0[0x6]
80004a84:	80 00       	ld.sh	r0,r0[0x0]
80004a86:	8c 24       	ld.sh	r4,r6[0x4]

80004a88 <malloc>:
80004a88:	d4 01       	pushm	lr
80004a8a:	48 48       	lddpc	r8,80004a98 <malloc+0x10>
80004a8c:	18 9b       	mov	r11,r12
80004a8e:	70 0c       	ld.w	r12,r8[0x0]
80004a90:	f0 1f 00 03 	mcall	80004a9c <malloc+0x14>
80004a94:	d8 02       	popm	pc
80004a96:	00 00       	add	r0,r0
80004a98:	00 00       	add	r0,r0
80004a9a:	01 ec       	ld.ub	r12,r0[0x6]
80004a9c:	80 00       	ld.sh	r0,r0[0x0]
80004a9e:	4a a0       	lddpc	r0,80004b44 <_malloc_r+0xa4>

80004aa0 <_malloc_r>:
80004aa0:	d4 31       	pushm	r0-r7,lr
80004aa2:	f6 c8 ff f5 	sub	r8,r11,-11
80004aa6:	18 95       	mov	r5,r12
80004aa8:	10 97       	mov	r7,r8
80004aaa:	e0 17 ff f8 	andl	r7,0xfff8
80004aae:	59 68       	cp.w	r8,22
80004ab0:	f9 b7 08 10 	movls	r7,16
80004ab4:	16 37       	cp.w	r7,r11
80004ab6:	5f 38       	srlo	r8
80004ab8:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80004abc:	c0 50       	breq	80004ac6 <_malloc_r+0x26>
80004abe:	30 c8       	mov	r8,12
80004ac0:	99 38       	st.w	r12[0xc],r8
80004ac2:	e0 8f 01 f3 	bral	80004ea8 <_malloc_r+0x408>
80004ac6:	f0 1f 00 50 	mcall	80004c04 <_malloc_r+0x164>
80004aca:	e0 47 01 f7 	cp.w	r7,503
80004ace:	e0 8b 00 1c 	brhi	80004b06 <_malloc_r+0x66>
80004ad2:	ee 03 16 03 	lsr	r3,r7,0x3
80004ad6:	4c d8       	lddpc	r8,80004c08 <_malloc_r+0x168>
80004ad8:	f0 03 00 38 	add	r8,r8,r3<<0x3
80004adc:	70 36       	ld.w	r6,r8[0xc]
80004ade:	10 36       	cp.w	r6,r8
80004ae0:	c0 61       	brne	80004aec <_malloc_r+0x4c>
80004ae2:	ec c8 ff f8 	sub	r8,r6,-8
80004ae6:	70 36       	ld.w	r6,r8[0xc]
80004ae8:	10 36       	cp.w	r6,r8
80004aea:	c0 c0       	breq	80004b02 <_malloc_r+0x62>
80004aec:	6c 18       	ld.w	r8,r6[0x4]
80004aee:	e0 18 ff fc 	andl	r8,0xfffc
80004af2:	6c 3a       	ld.w	r10,r6[0xc]
80004af4:	ec 08 00 09 	add	r9,r6,r8
80004af8:	0a 9c       	mov	r12,r5
80004afa:	6c 28       	ld.w	r8,r6[0x8]
80004afc:	95 28       	st.w	r10[0x8],r8
80004afe:	91 3a       	st.w	r8[0xc],r10
80004b00:	c4 68       	rjmp	80004b8c <_malloc_r+0xec>
80004b02:	2f e3       	sub	r3,-2
80004b04:	c4 c8       	rjmp	80004b9c <_malloc_r+0xfc>
80004b06:	ee 03 16 09 	lsr	r3,r7,0x9
80004b0a:	c0 41       	brne	80004b12 <_malloc_r+0x72>
80004b0c:	ee 03 16 03 	lsr	r3,r7,0x3
80004b10:	c2 68       	rjmp	80004b5c <_malloc_r+0xbc>
80004b12:	58 43       	cp.w	r3,4
80004b14:	e0 8b 00 06 	brhi	80004b20 <_malloc_r+0x80>
80004b18:	ee 03 16 06 	lsr	r3,r7,0x6
80004b1c:	2c 83       	sub	r3,-56
80004b1e:	c1 f8       	rjmp	80004b5c <_malloc_r+0xbc>
80004b20:	59 43       	cp.w	r3,20
80004b22:	e0 8b 00 04 	brhi	80004b2a <_malloc_r+0x8a>
80004b26:	2a 53       	sub	r3,-91
80004b28:	c1 a8       	rjmp	80004b5c <_malloc_r+0xbc>
80004b2a:	e0 43 00 54 	cp.w	r3,84
80004b2e:	e0 8b 00 06 	brhi	80004b3a <_malloc_r+0x9a>
80004b32:	ee 03 16 0c 	lsr	r3,r7,0xc
80004b36:	29 23       	sub	r3,-110
80004b38:	c1 28       	rjmp	80004b5c <_malloc_r+0xbc>
80004b3a:	e0 43 01 54 	cp.w	r3,340
80004b3e:	e0 8b 00 06 	brhi	80004b4a <_malloc_r+0xaa>
80004b42:	ee 03 16 0f 	lsr	r3,r7,0xf
80004b46:	28 93       	sub	r3,-119
80004b48:	c0 a8       	rjmp	80004b5c <_malloc_r+0xbc>
80004b4a:	e0 43 05 54 	cp.w	r3,1364
80004b4e:	e0 88 00 04 	brls	80004b56 <_malloc_r+0xb6>
80004b52:	37 e3       	mov	r3,126
80004b54:	c0 48       	rjmp	80004b5c <_malloc_r+0xbc>
80004b56:	ee 03 16 12 	lsr	r3,r7,0x12
80004b5a:	28 43       	sub	r3,-124
80004b5c:	4a ba       	lddpc	r10,80004c08 <_malloc_r+0x168>
80004b5e:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80004b62:	74 36       	ld.w	r6,r10[0xc]
80004b64:	c1 98       	rjmp	80004b96 <_malloc_r+0xf6>
80004b66:	6c 19       	ld.w	r9,r6[0x4]
80004b68:	e0 19 ff fc 	andl	r9,0xfffc
80004b6c:	f2 07 01 0b 	sub	r11,r9,r7
80004b70:	58 fb       	cp.w	r11,15
80004b72:	e0 8a 00 04 	brle	80004b7a <_malloc_r+0xda>
80004b76:	20 13       	sub	r3,1
80004b78:	c1 18       	rjmp	80004b9a <_malloc_r+0xfa>
80004b7a:	6c 38       	ld.w	r8,r6[0xc]
80004b7c:	58 0b       	cp.w	r11,0
80004b7e:	c0 b5       	brlt	80004b94 <_malloc_r+0xf4>
80004b80:	6c 2a       	ld.w	r10,r6[0x8]
80004b82:	ec 09 00 09 	add	r9,r6,r9
80004b86:	0a 9c       	mov	r12,r5
80004b88:	91 2a       	st.w	r8[0x8],r10
80004b8a:	95 38       	st.w	r10[0xc],r8
80004b8c:	72 18       	ld.w	r8,r9[0x4]
80004b8e:	a1 a8       	sbr	r8,0x0
80004b90:	93 18       	st.w	r9[0x4],r8
80004b92:	cb c8       	rjmp	80004d0a <_malloc_r+0x26a>
80004b94:	10 96       	mov	r6,r8
80004b96:	14 36       	cp.w	r6,r10
80004b98:	ce 71       	brne	80004b66 <_malloc_r+0xc6>
80004b9a:	2f f3       	sub	r3,-1
80004b9c:	49 ba       	lddpc	r10,80004c08 <_malloc_r+0x168>
80004b9e:	f4 cc ff f8 	sub	r12,r10,-8
80004ba2:	78 26       	ld.w	r6,r12[0x8]
80004ba4:	18 36       	cp.w	r6,r12
80004ba6:	c6 e0       	breq	80004c82 <_malloc_r+0x1e2>
80004ba8:	6c 19       	ld.w	r9,r6[0x4]
80004baa:	e0 19 ff fc 	andl	r9,0xfffc
80004bae:	f2 07 01 08 	sub	r8,r9,r7
80004bb2:	58 f8       	cp.w	r8,15
80004bb4:	e0 89 00 90 	brgt	80004cd4 <_malloc_r+0x234>
80004bb8:	99 3c       	st.w	r12[0xc],r12
80004bba:	99 2c       	st.w	r12[0x8],r12
80004bbc:	58 08       	cp.w	r8,0
80004bbe:	c0 55       	brlt	80004bc8 <_malloc_r+0x128>
80004bc0:	ec 09 00 09 	add	r9,r6,r9
80004bc4:	0a 9c       	mov	r12,r5
80004bc6:	ce 3b       	rjmp	80004b8c <_malloc_r+0xec>
80004bc8:	e0 49 01 ff 	cp.w	r9,511
80004bcc:	e0 8b 00 13 	brhi	80004bf2 <_malloc_r+0x152>
80004bd0:	a3 99       	lsr	r9,0x3
80004bd2:	f4 09 00 38 	add	r8,r10,r9<<0x3
80004bd6:	70 2b       	ld.w	r11,r8[0x8]
80004bd8:	8d 38       	st.w	r6[0xc],r8
80004bda:	8d 2b       	st.w	r6[0x8],r11
80004bdc:	97 36       	st.w	r11[0xc],r6
80004bde:	91 26       	st.w	r8[0x8],r6
80004be0:	a3 49       	asr	r9,0x2
80004be2:	74 18       	ld.w	r8,r10[0x4]
80004be4:	30 1b       	mov	r11,1
80004be6:	f6 09 09 49 	lsl	r9,r11,r9
80004bea:	f1 e9 10 09 	or	r9,r8,r9
80004bee:	95 19       	st.w	r10[0x4],r9
80004bf0:	c4 98       	rjmp	80004c82 <_malloc_r+0x1e2>
80004bf2:	f2 0a 16 09 	lsr	r10,r9,0x9
80004bf6:	58 4a       	cp.w	r10,4
80004bf8:	e0 8b 00 0a 	brhi	80004c0c <_malloc_r+0x16c>
80004bfc:	f2 0a 16 06 	lsr	r10,r9,0x6
80004c00:	2c 8a       	sub	r10,-56
80004c02:	c2 38       	rjmp	80004c48 <_malloc_r+0x1a8>
80004c04:	80 00       	ld.sh	r0,r0[0x0]
80004c06:	42 d8       	lddsp	r8,sp[0xb4]
80004c08:	00 00       	add	r0,r0
80004c0a:	01 f0       	ld.ub	r0,r0[0x7]
80004c0c:	59 4a       	cp.w	r10,20
80004c0e:	e0 8b 00 04 	brhi	80004c16 <_malloc_r+0x176>
80004c12:	2a 5a       	sub	r10,-91
80004c14:	c1 a8       	rjmp	80004c48 <_malloc_r+0x1a8>
80004c16:	e0 4a 00 54 	cp.w	r10,84
80004c1a:	e0 8b 00 06 	brhi	80004c26 <_malloc_r+0x186>
80004c1e:	f2 0a 16 0c 	lsr	r10,r9,0xc
80004c22:	29 2a       	sub	r10,-110
80004c24:	c1 28       	rjmp	80004c48 <_malloc_r+0x1a8>
80004c26:	e0 4a 01 54 	cp.w	r10,340
80004c2a:	e0 8b 00 06 	brhi	80004c36 <_malloc_r+0x196>
80004c2e:	f2 0a 16 0f 	lsr	r10,r9,0xf
80004c32:	28 9a       	sub	r10,-119
80004c34:	c0 a8       	rjmp	80004c48 <_malloc_r+0x1a8>
80004c36:	e0 4a 05 54 	cp.w	r10,1364
80004c3a:	e0 88 00 04 	brls	80004c42 <_malloc_r+0x1a2>
80004c3e:	37 ea       	mov	r10,126
80004c40:	c0 48       	rjmp	80004c48 <_malloc_r+0x1a8>
80004c42:	f2 0a 16 12 	lsr	r10,r9,0x12
80004c46:	28 4a       	sub	r10,-124
80004c48:	4c 8b       	lddpc	r11,80004d68 <_malloc_r+0x2c8>
80004c4a:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80004c4e:	68 28       	ld.w	r8,r4[0x8]
80004c50:	08 38       	cp.w	r8,r4
80004c52:	c0 e1       	brne	80004c6e <_malloc_r+0x1ce>
80004c54:	76 19       	ld.w	r9,r11[0x4]
80004c56:	a3 4a       	asr	r10,0x2
80004c58:	30 1e       	mov	lr,1
80004c5a:	fc 0a 09 4a 	lsl	r10,lr,r10
80004c5e:	f3 ea 10 0a 	or	r10,r9,r10
80004c62:	10 99       	mov	r9,r8
80004c64:	97 1a       	st.w	r11[0x4],r10
80004c66:	c0 a8       	rjmp	80004c7a <_malloc_r+0x1da>
80004c68:	70 28       	ld.w	r8,r8[0x8]
80004c6a:	08 38       	cp.w	r8,r4
80004c6c:	c0 60       	breq	80004c78 <_malloc_r+0x1d8>
80004c6e:	70 1a       	ld.w	r10,r8[0x4]
80004c70:	e0 1a ff fc 	andl	r10,0xfffc
80004c74:	14 39       	cp.w	r9,r10
80004c76:	cf 93       	brcs	80004c68 <_malloc_r+0x1c8>
80004c78:	70 39       	ld.w	r9,r8[0xc]
80004c7a:	8d 39       	st.w	r6[0xc],r9
80004c7c:	8d 28       	st.w	r6[0x8],r8
80004c7e:	91 36       	st.w	r8[0xc],r6
80004c80:	93 26       	st.w	r9[0x8],r6
80004c82:	e6 08 14 02 	asr	r8,r3,0x2
80004c86:	30 1b       	mov	r11,1
80004c88:	4b 84       	lddpc	r4,80004d68 <_malloc_r+0x2c8>
80004c8a:	f6 08 09 4b 	lsl	r11,r11,r8
80004c8e:	68 18       	ld.w	r8,r4[0x4]
80004c90:	10 3b       	cp.w	r11,r8
80004c92:	e0 8b 00 6f 	brhi	80004d70 <_malloc_r+0x2d0>
80004c96:	f7 e8 00 09 	and	r9,r11,r8
80004c9a:	c0 b1       	brne	80004cb0 <_malloc_r+0x210>
80004c9c:	e0 13 ff fc 	andl	r3,0xfffc
80004ca0:	a1 7b       	lsl	r11,0x1
80004ca2:	2f c3       	sub	r3,-4
80004ca4:	c0 38       	rjmp	80004caa <_malloc_r+0x20a>
80004ca6:	2f c3       	sub	r3,-4
80004ca8:	a1 7b       	lsl	r11,0x1
80004caa:	f7 e8 00 09 	and	r9,r11,r8
80004cae:	cf c0       	breq	80004ca6 <_malloc_r+0x206>
80004cb0:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80004cb4:	06 92       	mov	r2,r3
80004cb6:	1c 91       	mov	r1,lr
80004cb8:	62 36       	ld.w	r6,r1[0xc]
80004cba:	c2 e8       	rjmp	80004d16 <_malloc_r+0x276>
80004cbc:	6c 1a       	ld.w	r10,r6[0x4]
80004cbe:	e0 1a ff fc 	andl	r10,0xfffc
80004cc2:	f4 07 01 08 	sub	r8,r10,r7
80004cc6:	58 f8       	cp.w	r8,15
80004cc8:	e0 8a 00 15 	brle	80004cf2 <_malloc_r+0x252>
80004ccc:	6c 3a       	ld.w	r10,r6[0xc]
80004cce:	6c 29       	ld.w	r9,r6[0x8]
80004cd0:	95 29       	st.w	r10[0x8],r9
80004cd2:	93 3a       	st.w	r9[0xc],r10
80004cd4:	0e 99       	mov	r9,r7
80004cd6:	ec 07 00 07 	add	r7,r6,r7
80004cda:	a1 a9       	sbr	r9,0x0
80004cdc:	99 37       	st.w	r12[0xc],r7
80004cde:	99 27       	st.w	r12[0x8],r7
80004ce0:	8d 19       	st.w	r6[0x4],r9
80004ce2:	ee 08 09 08 	st.w	r7[r8],r8
80004ce6:	8f 2c       	st.w	r7[0x8],r12
80004ce8:	8f 3c       	st.w	r7[0xc],r12
80004cea:	a1 a8       	sbr	r8,0x0
80004cec:	0a 9c       	mov	r12,r5
80004cee:	8f 18       	st.w	r7[0x4],r8
80004cf0:	c0 d8       	rjmp	80004d0a <_malloc_r+0x26a>
80004cf2:	6c 39       	ld.w	r9,r6[0xc]
80004cf4:	58 08       	cp.w	r8,0
80004cf6:	c0 f5       	brlt	80004d14 <_malloc_r+0x274>
80004cf8:	ec 0a 00 0a 	add	r10,r6,r10
80004cfc:	74 18       	ld.w	r8,r10[0x4]
80004cfe:	a1 a8       	sbr	r8,0x0
80004d00:	0a 9c       	mov	r12,r5
80004d02:	95 18       	st.w	r10[0x4],r8
80004d04:	6c 28       	ld.w	r8,r6[0x8]
80004d06:	93 28       	st.w	r9[0x8],r8
80004d08:	91 39       	st.w	r8[0xc],r9
80004d0a:	f0 1f 00 19 	mcall	80004d6c <_malloc_r+0x2cc>
80004d0e:	ec cc ff f8 	sub	r12,r6,-8
80004d12:	d8 32       	popm	r0-r7,pc
80004d14:	12 96       	mov	r6,r9
80004d16:	02 36       	cp.w	r6,r1
80004d18:	cd 21       	brne	80004cbc <_malloc_r+0x21c>
80004d1a:	2f f2       	sub	r2,-1
80004d1c:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80004d20:	c0 30       	breq	80004d26 <_malloc_r+0x286>
80004d22:	2f 81       	sub	r1,-8
80004d24:	cc ab       	rjmp	80004cb8 <_malloc_r+0x218>
80004d26:	1c 98       	mov	r8,lr
80004d28:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80004d2c:	c0 81       	brne	80004d3c <_malloc_r+0x29c>
80004d2e:	68 19       	ld.w	r9,r4[0x4]
80004d30:	f6 08 11 ff 	rsub	r8,r11,-1
80004d34:	f3 e8 00 08 	and	r8,r9,r8
80004d38:	89 18       	st.w	r4[0x4],r8
80004d3a:	c0 78       	rjmp	80004d48 <_malloc_r+0x2a8>
80004d3c:	f0 c9 00 08 	sub	r9,r8,8
80004d40:	20 13       	sub	r3,1
80004d42:	70 08       	ld.w	r8,r8[0x0]
80004d44:	12 38       	cp.w	r8,r9
80004d46:	cf 10       	breq	80004d28 <_malloc_r+0x288>
80004d48:	a1 7b       	lsl	r11,0x1
80004d4a:	68 18       	ld.w	r8,r4[0x4]
80004d4c:	10 3b       	cp.w	r11,r8
80004d4e:	e0 8b 00 11 	brhi	80004d70 <_malloc_r+0x2d0>
80004d52:	58 0b       	cp.w	r11,0
80004d54:	c0 e0       	breq	80004d70 <_malloc_r+0x2d0>
80004d56:	04 93       	mov	r3,r2
80004d58:	c0 38       	rjmp	80004d5e <_malloc_r+0x2be>
80004d5a:	2f c3       	sub	r3,-4
80004d5c:	a1 7b       	lsl	r11,0x1
80004d5e:	f7 e8 00 09 	and	r9,r11,r8
80004d62:	ca 71       	brne	80004cb0 <_malloc_r+0x210>
80004d64:	cf bb       	rjmp	80004d5a <_malloc_r+0x2ba>
80004d66:	00 00       	add	r0,r0
80004d68:	00 00       	add	r0,r0
80004d6a:	01 f0       	ld.ub	r0,r0[0x7]
80004d6c:	80 00       	ld.sh	r0,r0[0x0]
80004d6e:	42 e4       	lddsp	r4,sp[0xb8]
80004d70:	68 23       	ld.w	r3,r4[0x8]
80004d72:	66 12       	ld.w	r2,r3[0x4]
80004d74:	e0 12 ff fc 	andl	r2,0xfffc
80004d78:	0e 32       	cp.w	r2,r7
80004d7a:	5f 39       	srlo	r9
80004d7c:	e4 07 01 08 	sub	r8,r2,r7
80004d80:	58 f8       	cp.w	r8,15
80004d82:	5f aa       	srle	r10
80004d84:	f5 e9 10 09 	or	r9,r10,r9
80004d88:	e0 80 00 a2 	breq	80004ecc <_malloc_r+0x42c>
80004d8c:	4c 88       	lddpc	r8,80004eac <_malloc_r+0x40c>
80004d8e:	70 01       	ld.w	r1,r8[0x0]
80004d90:	4c 88       	lddpc	r8,80004eb0 <_malloc_r+0x410>
80004d92:	2f 01       	sub	r1,-16
80004d94:	70 08       	ld.w	r8,r8[0x0]
80004d96:	0e 01       	add	r1,r7
80004d98:	5b f8       	cp.w	r8,-1
80004d9a:	c0 40       	breq	80004da2 <_malloc_r+0x302>
80004d9c:	28 11       	sub	r1,-127
80004d9e:	e0 11 ff 80 	andl	r1,0xff80
80004da2:	02 9b       	mov	r11,r1
80004da4:	0a 9c       	mov	r12,r5
80004da6:	f0 1f 00 44 	mcall	80004eb4 <_malloc_r+0x414>
80004daa:	18 96       	mov	r6,r12
80004dac:	5b fc       	cp.w	r12,-1
80004dae:	c6 e0       	breq	80004e8a <_malloc_r+0x3ea>
80004db0:	e6 02 00 08 	add	r8,r3,r2
80004db4:	10 3c       	cp.w	r12,r8
80004db6:	c0 32       	brcc	80004dbc <_malloc_r+0x31c>
80004db8:	08 33       	cp.w	r3,r4
80004dba:	c6 81       	brne	80004e8a <_malloc_r+0x3ea>
80004dbc:	4b fa       	lddpc	r10,80004eb8 <_malloc_r+0x418>
80004dbe:	74 09       	ld.w	r9,r10[0x0]
80004dc0:	e2 09 00 09 	add	r9,r1,r9
80004dc4:	95 09       	st.w	r10[0x0],r9
80004dc6:	10 36       	cp.w	r6,r8
80004dc8:	c0 a1       	brne	80004ddc <_malloc_r+0x33c>
80004dca:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80004dce:	c0 71       	brne	80004ddc <_malloc_r+0x33c>
80004dd0:	e2 02 00 02 	add	r2,r1,r2
80004dd4:	68 28       	ld.w	r8,r4[0x8]
80004dd6:	a1 a2       	sbr	r2,0x0
80004dd8:	91 12       	st.w	r8[0x4],r2
80004dda:	c4 c8       	rjmp	80004e72 <_malloc_r+0x3d2>
80004ddc:	4b 5a       	lddpc	r10,80004eb0 <_malloc_r+0x410>
80004dde:	74 0b       	ld.w	r11,r10[0x0]
80004de0:	5b fb       	cp.w	r11,-1
80004de2:	c0 31       	brne	80004de8 <_malloc_r+0x348>
80004de4:	95 06       	st.w	r10[0x0],r6
80004de6:	c0 68       	rjmp	80004df2 <_malloc_r+0x352>
80004de8:	ec 09 00 09 	add	r9,r6,r9
80004dec:	4b 3a       	lddpc	r10,80004eb8 <_malloc_r+0x418>
80004dee:	10 19       	sub	r9,r8
80004df0:	95 09       	st.w	r10[0x0],r9
80004df2:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80004df6:	f0 09 11 08 	rsub	r9,r8,8
80004dfa:	58 08       	cp.w	r8,0
80004dfc:	f2 08 17 10 	movne	r8,r9
80004e00:	ed d8 e1 06 	addne	r6,r6,r8
80004e04:	28 08       	sub	r8,-128
80004e06:	ec 01 00 01 	add	r1,r6,r1
80004e0a:	0a 9c       	mov	r12,r5
80004e0c:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80004e10:	f0 01 01 01 	sub	r1,r8,r1
80004e14:	02 9b       	mov	r11,r1
80004e16:	f0 1f 00 28 	mcall	80004eb4 <_malloc_r+0x414>
80004e1a:	4a 88       	lddpc	r8,80004eb8 <_malloc_r+0x418>
80004e1c:	5b fc       	cp.w	r12,-1
80004e1e:	ec 0c 17 00 	moveq	r12,r6
80004e22:	f9 b1 00 00 	moveq	r1,0
80004e26:	70 09       	ld.w	r9,r8[0x0]
80004e28:	0c 1c       	sub	r12,r6
80004e2a:	89 26       	st.w	r4[0x8],r6
80004e2c:	02 0c       	add	r12,r1
80004e2e:	12 01       	add	r1,r9
80004e30:	a1 ac       	sbr	r12,0x0
80004e32:	91 01       	st.w	r8[0x0],r1
80004e34:	8d 1c       	st.w	r6[0x4],r12
80004e36:	08 33       	cp.w	r3,r4
80004e38:	c1 d0       	breq	80004e72 <_malloc_r+0x3d2>
80004e3a:	58 f2       	cp.w	r2,15
80004e3c:	e0 8b 00 05 	brhi	80004e46 <_malloc_r+0x3a6>
80004e40:	30 18       	mov	r8,1
80004e42:	8d 18       	st.w	r6[0x4],r8
80004e44:	c2 38       	rjmp	80004e8a <_malloc_r+0x3ea>
80004e46:	30 59       	mov	r9,5
80004e48:	20 c2       	sub	r2,12
80004e4a:	e0 12 ff f8 	andl	r2,0xfff8
80004e4e:	e6 02 00 08 	add	r8,r3,r2
80004e52:	91 29       	st.w	r8[0x8],r9
80004e54:	91 19       	st.w	r8[0x4],r9
80004e56:	66 18       	ld.w	r8,r3[0x4]
80004e58:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004e5c:	e5 e8 10 08 	or	r8,r2,r8
80004e60:	87 18       	st.w	r3[0x4],r8
80004e62:	58 f2       	cp.w	r2,15
80004e64:	e0 88 00 07 	brls	80004e72 <_malloc_r+0x3d2>
80004e68:	e6 cb ff f8 	sub	r11,r3,-8
80004e6c:	0a 9c       	mov	r12,r5
80004e6e:	f0 1f 00 14 	mcall	80004ebc <_malloc_r+0x41c>
80004e72:	49 49       	lddpc	r9,80004ec0 <_malloc_r+0x420>
80004e74:	72 0a       	ld.w	r10,r9[0x0]
80004e76:	49 18       	lddpc	r8,80004eb8 <_malloc_r+0x418>
80004e78:	70 08       	ld.w	r8,r8[0x0]
80004e7a:	14 38       	cp.w	r8,r10
80004e7c:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80004e80:	49 19       	lddpc	r9,80004ec4 <_malloc_r+0x424>
80004e82:	72 0a       	ld.w	r10,r9[0x0]
80004e84:	14 38       	cp.w	r8,r10
80004e86:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80004e8a:	68 28       	ld.w	r8,r4[0x8]
80004e8c:	70 18       	ld.w	r8,r8[0x4]
80004e8e:	e0 18 ff fc 	andl	r8,0xfffc
80004e92:	0e 38       	cp.w	r8,r7
80004e94:	5f 39       	srlo	r9
80004e96:	0e 18       	sub	r8,r7
80004e98:	58 f8       	cp.w	r8,15
80004e9a:	5f aa       	srle	r10
80004e9c:	f5 e9 10 09 	or	r9,r10,r9
80004ea0:	c1 60       	breq	80004ecc <_malloc_r+0x42c>
80004ea2:	0a 9c       	mov	r12,r5
80004ea4:	f0 1f 00 09 	mcall	80004ec8 <_malloc_r+0x428>
80004ea8:	d8 3a       	popm	r0-r7,pc,r12=0
80004eaa:	00 00       	add	r0,r0
80004eac:	00 00       	add	r0,r0
80004eae:	09 d0       	ld.ub	r0,r4[0x5]
80004eb0:	00 00       	add	r0,r0
80004eb2:	05 fc       	ld.ub	r12,r2[0x7]
80004eb4:	80 00       	ld.sh	r0,r0[0x0]
80004eb6:	53 60       	stdsp	sp[0xd8],r0
80004eb8:	00 00       	add	r0,r0
80004eba:	09 d4       	ld.ub	r4,r4[0x5]
80004ebc:	80 00       	ld.sh	r0,r0[0x0]
80004ebe:	8c 24       	ld.sh	r4,r6[0x4]
80004ec0:	00 00       	add	r0,r0
80004ec2:	09 cc       	ld.ub	r12,r4[0x4]
80004ec4:	00 00       	add	r0,r0
80004ec6:	09 c8       	ld.ub	r8,r4[0x4]
80004ec8:	80 00       	ld.sh	r0,r0[0x0]
80004eca:	42 e4       	lddsp	r4,sp[0xb8]
80004ecc:	68 26       	ld.w	r6,r4[0x8]
80004ece:	a1 a8       	sbr	r8,0x0
80004ed0:	0e 99       	mov	r9,r7
80004ed2:	a1 a9       	sbr	r9,0x0
80004ed4:	8d 19       	st.w	r6[0x4],r9
80004ed6:	ec 07 00 07 	add	r7,r6,r7
80004eda:	0a 9c       	mov	r12,r5
80004edc:	89 27       	st.w	r4[0x8],r7
80004ede:	8f 18       	st.w	r7[0x4],r8
80004ee0:	f0 1f 00 03 	mcall	80004eec <_malloc_r+0x44c>
80004ee4:	ec cc ff f8 	sub	r12,r6,-8
80004ee8:	d8 32       	popm	r0-r7,pc
80004eea:	00 00       	add	r0,r0
80004eec:	80 00       	ld.sh	r0,r0[0x0]
80004eee:	42 e4       	lddsp	r4,sp[0xb8]

80004ef0 <memcpy>:
80004ef0:	58 8a       	cp.w	r10,8
80004ef2:	c2 f5       	brlt	80004f50 <memcpy+0x60>
80004ef4:	f9 eb 10 09 	or	r9,r12,r11
80004ef8:	e2 19 00 03 	andl	r9,0x3,COH
80004efc:	e0 81 00 97 	brne	8000502a <memcpy+0x13a>
80004f00:	e0 4a 00 20 	cp.w	r10,32
80004f04:	c3 b4       	brge	80004f7a <memcpy+0x8a>
80004f06:	f4 08 14 02 	asr	r8,r10,0x2
80004f0a:	f0 09 11 08 	rsub	r9,r8,8
80004f0e:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80004f12:	76 69       	ld.w	r9,r11[0x18]
80004f14:	99 69       	st.w	r12[0x18],r9
80004f16:	76 59       	ld.w	r9,r11[0x14]
80004f18:	99 59       	st.w	r12[0x14],r9
80004f1a:	76 49       	ld.w	r9,r11[0x10]
80004f1c:	99 49       	st.w	r12[0x10],r9
80004f1e:	76 39       	ld.w	r9,r11[0xc]
80004f20:	99 39       	st.w	r12[0xc],r9
80004f22:	76 29       	ld.w	r9,r11[0x8]
80004f24:	99 29       	st.w	r12[0x8],r9
80004f26:	76 19       	ld.w	r9,r11[0x4]
80004f28:	99 19       	st.w	r12[0x4],r9
80004f2a:	76 09       	ld.w	r9,r11[0x0]
80004f2c:	99 09       	st.w	r12[0x0],r9
80004f2e:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80004f32:	f8 08 00 28 	add	r8,r12,r8<<0x2
80004f36:	e0 1a 00 03 	andl	r10,0x3
80004f3a:	f4 0a 11 04 	rsub	r10,r10,4
80004f3e:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80004f42:	17 a9       	ld.ub	r9,r11[0x2]
80004f44:	b0 a9       	st.b	r8[0x2],r9
80004f46:	17 99       	ld.ub	r9,r11[0x1]
80004f48:	b0 99       	st.b	r8[0x1],r9
80004f4a:	17 89       	ld.ub	r9,r11[0x0]
80004f4c:	b0 89       	st.b	r8[0x0],r9
80004f4e:	5e fc       	retal	r12
80004f50:	f4 0a 11 09 	rsub	r10,r10,9
80004f54:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80004f58:	17 f9       	ld.ub	r9,r11[0x7]
80004f5a:	b8 f9       	st.b	r12[0x7],r9
80004f5c:	17 e9       	ld.ub	r9,r11[0x6]
80004f5e:	b8 e9       	st.b	r12[0x6],r9
80004f60:	17 d9       	ld.ub	r9,r11[0x5]
80004f62:	b8 d9       	st.b	r12[0x5],r9
80004f64:	17 c9       	ld.ub	r9,r11[0x4]
80004f66:	b8 c9       	st.b	r12[0x4],r9
80004f68:	17 b9       	ld.ub	r9,r11[0x3]
80004f6a:	b8 b9       	st.b	r12[0x3],r9
80004f6c:	17 a9       	ld.ub	r9,r11[0x2]
80004f6e:	b8 a9       	st.b	r12[0x2],r9
80004f70:	17 99       	ld.ub	r9,r11[0x1]
80004f72:	b8 99       	st.b	r12[0x1],r9
80004f74:	17 89       	ld.ub	r9,r11[0x0]
80004f76:	b8 89       	st.b	r12[0x0],r9
80004f78:	5e fc       	retal	r12
80004f7a:	eb cd 40 c0 	pushm	r6-r7,lr
80004f7e:	18 99       	mov	r9,r12
80004f80:	22 0a       	sub	r10,32
80004f82:	b7 07       	ld.d	r6,r11++
80004f84:	b3 26       	st.d	r9++,r6
80004f86:	b7 07       	ld.d	r6,r11++
80004f88:	b3 26       	st.d	r9++,r6
80004f8a:	b7 07       	ld.d	r6,r11++
80004f8c:	b3 26       	st.d	r9++,r6
80004f8e:	b7 07       	ld.d	r6,r11++
80004f90:	b3 26       	st.d	r9++,r6
80004f92:	22 0a       	sub	r10,32
80004f94:	cf 74       	brge	80004f82 <memcpy+0x92>
80004f96:	2f 0a       	sub	r10,-16
80004f98:	c0 65       	brlt	80004fa4 <memcpy+0xb4>
80004f9a:	b7 07       	ld.d	r6,r11++
80004f9c:	b3 26       	st.d	r9++,r6
80004f9e:	b7 07       	ld.d	r6,r11++
80004fa0:	b3 26       	st.d	r9++,r6
80004fa2:	21 0a       	sub	r10,16
80004fa4:	5c 3a       	neg	r10
80004fa6:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80004faa:	d7 03       	nop
80004fac:	d7 03       	nop
80004fae:	f7 36 00 0e 	ld.ub	r6,r11[14]
80004fb2:	f3 66 00 0e 	st.b	r9[14],r6
80004fb6:	f7 36 00 0d 	ld.ub	r6,r11[13]
80004fba:	f3 66 00 0d 	st.b	r9[13],r6
80004fbe:	f7 36 00 0c 	ld.ub	r6,r11[12]
80004fc2:	f3 66 00 0c 	st.b	r9[12],r6
80004fc6:	f7 36 00 0b 	ld.ub	r6,r11[11]
80004fca:	f3 66 00 0b 	st.b	r9[11],r6
80004fce:	f7 36 00 0a 	ld.ub	r6,r11[10]
80004fd2:	f3 66 00 0a 	st.b	r9[10],r6
80004fd6:	f7 36 00 09 	ld.ub	r6,r11[9]
80004fda:	f3 66 00 09 	st.b	r9[9],r6
80004fde:	f7 36 00 08 	ld.ub	r6,r11[8]
80004fe2:	f3 66 00 08 	st.b	r9[8],r6
80004fe6:	f7 36 00 07 	ld.ub	r6,r11[7]
80004fea:	f3 66 00 07 	st.b	r9[7],r6
80004fee:	f7 36 00 06 	ld.ub	r6,r11[6]
80004ff2:	f3 66 00 06 	st.b	r9[6],r6
80004ff6:	f7 36 00 05 	ld.ub	r6,r11[5]
80004ffa:	f3 66 00 05 	st.b	r9[5],r6
80004ffe:	f7 36 00 04 	ld.ub	r6,r11[4]
80005002:	f3 66 00 04 	st.b	r9[4],r6
80005006:	f7 36 00 03 	ld.ub	r6,r11[3]
8000500a:	f3 66 00 03 	st.b	r9[3],r6
8000500e:	f7 36 00 02 	ld.ub	r6,r11[2]
80005012:	f3 66 00 02 	st.b	r9[2],r6
80005016:	f7 36 00 01 	ld.ub	r6,r11[1]
8000501a:	f3 66 00 01 	st.b	r9[1],r6
8000501e:	f7 36 00 00 	ld.ub	r6,r11[0]
80005022:	f3 66 00 00 	st.b	r9[0],r6
80005026:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000502a:	20 1a       	sub	r10,1
8000502c:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80005030:	f8 0a 0b 09 	st.b	r12[r10],r9
80005034:	cf b1       	brne	8000502a <memcpy+0x13a>
80005036:	5e fc       	retal	r12

80005038 <memset>:
80005038:	18 98       	mov	r8,r12
8000503a:	c0 38       	rjmp	80005040 <memset+0x8>
8000503c:	10 cb       	st.b	r8++,r11
8000503e:	20 1a       	sub	r10,1
80005040:	58 0a       	cp.w	r10,0
80005042:	cf d1       	brne	8000503c <memset+0x4>
80005044:	5e fc       	retal	r12
80005046:	d7 03       	nop

80005048 <printf>:
80005048:	d4 21       	pushm	r4-r7,lr
8000504a:	48 b8       	lddpc	r8,80005074 <printf+0x2c>
8000504c:	fa c4 ff ec 	sub	r4,sp,-20
80005050:	18 96       	mov	r6,r12
80005052:	70 07       	ld.w	r7,r8[0x0]
80005054:	58 07       	cp.w	r7,0
80005056:	c0 70       	breq	80005064 <printf+0x1c>
80005058:	6e 68       	ld.w	r8,r7[0x18]
8000505a:	58 08       	cp.w	r8,0
8000505c:	c0 41       	brne	80005064 <printf+0x1c>
8000505e:	0e 9c       	mov	r12,r7
80005060:	f0 1f 00 06 	mcall	80005078 <printf+0x30>
80005064:	08 99       	mov	r9,r4
80005066:	0c 9a       	mov	r10,r6
80005068:	0e 9c       	mov	r12,r7
8000506a:	6e 1b       	ld.w	r11,r7[0x4]
8000506c:	f0 1f 00 04 	mcall	8000507c <printf+0x34>
80005070:	d8 22       	popm	r4-r7,pc
80005072:	00 00       	add	r0,r0
80005074:	00 00       	add	r0,r0
80005076:	01 ec       	ld.ub	r12,r0[0x6]
80005078:	80 00       	ld.sh	r0,r0[0x0]
8000507a:	8a cc       	ld.uh	r12,r5[0x8]
8000507c:	80 00       	ld.sh	r0,r0[0x0]
8000507e:	59 2c       	cp.w	r12,18

80005080 <_realloc_r>:
80005080:	d4 31       	pushm	r0-r7,lr
80005082:	20 1d       	sub	sp,4
80005084:	16 94       	mov	r4,r11
80005086:	18 92       	mov	r2,r12
80005088:	14 9b       	mov	r11,r10
8000508a:	58 04       	cp.w	r4,0
8000508c:	c0 51       	brne	80005096 <_realloc_r+0x16>
8000508e:	f0 1f 00 5b 	mcall	800051f8 <_realloc_r+0x178>
80005092:	18 95       	mov	r5,r12
80005094:	c5 b9       	rjmp	8000534a <_realloc_r+0x2ca>
80005096:	50 0a       	stdsp	sp[0x0],r10
80005098:	f0 1f 00 59 	mcall	800051fc <_realloc_r+0x17c>
8000509c:	40 0b       	lddsp	r11,sp[0x0]
8000509e:	f6 c8 ff f5 	sub	r8,r11,-11
800050a2:	e8 c1 00 08 	sub	r1,r4,8
800050a6:	10 96       	mov	r6,r8
800050a8:	62 1c       	ld.w	r12,r1[0x4]
800050aa:	e0 16 ff f8 	andl	r6,0xfff8
800050ae:	59 68       	cp.w	r8,22
800050b0:	f9 b6 08 10 	movls	r6,16
800050b4:	16 36       	cp.w	r6,r11
800050b6:	5f 38       	srlo	r8
800050b8:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
800050bc:	c0 50       	breq	800050c6 <_realloc_r+0x46>
800050be:	30 c8       	mov	r8,12
800050c0:	30 05       	mov	r5,0
800050c2:	85 38       	st.w	r2[0xc],r8
800050c4:	c4 39       	rjmp	8000534a <_realloc_r+0x2ca>
800050c6:	18 90       	mov	r0,r12
800050c8:	e0 10 ff fc 	andl	r0,0xfffc
800050cc:	0c 30       	cp.w	r0,r6
800050ce:	e0 84 01 13 	brge	800052f4 <_realloc_r+0x274>
800050d2:	4c c8       	lddpc	r8,80005200 <_realloc_r+0x180>
800050d4:	e2 00 00 09 	add	r9,r1,r0
800050d8:	70 25       	ld.w	r5,r8[0x8]
800050da:	0a 39       	cp.w	r9,r5
800050dc:	c0 90       	breq	800050ee <_realloc_r+0x6e>
800050de:	72 1a       	ld.w	r10,r9[0x4]
800050e0:	a1 ca       	cbr	r10,0x0
800050e2:	f2 0a 00 0a 	add	r10,r9,r10
800050e6:	74 1a       	ld.w	r10,r10[0x4]
800050e8:	ed ba 00 00 	bld	r10,0x0
800050ec:	c2 20       	breq	80005130 <_realloc_r+0xb0>
800050ee:	72 1a       	ld.w	r10,r9[0x4]
800050f0:	e0 1a ff fc 	andl	r10,0xfffc
800050f4:	f4 00 00 03 	add	r3,r10,r0
800050f8:	0a 39       	cp.w	r9,r5
800050fa:	c1 31       	brne	80005120 <_realloc_r+0xa0>
800050fc:	ec c7 ff f0 	sub	r7,r6,-16
80005100:	0e 33       	cp.w	r3,r7
80005102:	c1 95       	brlt	80005134 <_realloc_r+0xb4>
80005104:	e2 06 00 09 	add	r9,r1,r6
80005108:	0c 13       	sub	r3,r6
8000510a:	a1 a3       	sbr	r3,0x0
8000510c:	93 13       	st.w	r9[0x4],r3
8000510e:	91 29       	st.w	r8[0x8],r9
80005110:	04 9c       	mov	r12,r2
80005112:	62 18       	ld.w	r8,r1[0x4]
80005114:	08 95       	mov	r5,r4
80005116:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000511a:	10 46       	or	r6,r8
8000511c:	83 16       	st.w	r1[0x4],r6
8000511e:	c1 49       	rjmp	80005346 <_realloc_r+0x2c6>
80005120:	0c 33       	cp.w	r3,r6
80005122:	c0 95       	brlt	80005134 <_realloc_r+0xb4>
80005124:	72 28       	ld.w	r8,r9[0x8]
80005126:	02 97       	mov	r7,r1
80005128:	72 39       	ld.w	r9,r9[0xc]
8000512a:	93 28       	st.w	r9[0x8],r8
8000512c:	91 39       	st.w	r8[0xc],r9
8000512e:	ce 58       	rjmp	800052f8 <_realloc_r+0x278>
80005130:	30 0a       	mov	r10,0
80005132:	14 99       	mov	r9,r10
80005134:	ed bc 00 00 	bld	r12,0x0
80005138:	e0 80 00 9e 	breq	80005274 <_realloc_r+0x1f4>
8000513c:	62 07       	ld.w	r7,r1[0x0]
8000513e:	e2 07 01 07 	sub	r7,r1,r7
80005142:	6e 1c       	ld.w	r12,r7[0x4]
80005144:	e0 1c ff fc 	andl	r12,0xfffc
80005148:	58 09       	cp.w	r9,0
8000514a:	c5 f0       	breq	80005208 <_realloc_r+0x188>
8000514c:	f8 00 00 03 	add	r3,r12,r0
80005150:	0a 39       	cp.w	r9,r5
80005152:	c4 81       	brne	800051e2 <_realloc_r+0x162>
80005154:	14 03       	add	r3,r10
80005156:	ec c9 ff f0 	sub	r9,r6,-16
8000515a:	12 33       	cp.w	r3,r9
8000515c:	c5 65       	brlt	80005208 <_realloc_r+0x188>
8000515e:	6e 3a       	ld.w	r10,r7[0xc]
80005160:	6e 29       	ld.w	r9,r7[0x8]
80005162:	95 29       	st.w	r10[0x8],r9
80005164:	93 3a       	st.w	r9[0xc],r10
80005166:	ee c5 ff f8 	sub	r5,r7,-8
8000516a:	e0 ca 00 04 	sub	r10,r0,4
8000516e:	e0 4a 00 24 	cp.w	r10,36
80005172:	e0 8b 00 25 	brhi	800051bc <_realloc_r+0x13c>
80005176:	0a 99       	mov	r9,r5
80005178:	59 3a       	cp.w	r10,19
8000517a:	e0 88 00 1a 	brls	800051ae <_realloc_r+0x12e>
8000517e:	09 09       	ld.w	r9,r4++
80005180:	8b 09       	st.w	r5[0x0],r9
80005182:	09 09       	ld.w	r9,r4++
80005184:	8f 39       	st.w	r7[0xc],r9
80005186:	ee c9 ff f0 	sub	r9,r7,-16
8000518a:	59 ba       	cp.w	r10,27
8000518c:	e0 88 00 11 	brls	800051ae <_realloc_r+0x12e>
80005190:	09 0b       	ld.w	r11,r4++
80005192:	93 0b       	st.w	r9[0x0],r11
80005194:	09 09       	ld.w	r9,r4++
80005196:	8f 59       	st.w	r7[0x14],r9
80005198:	ee c9 ff e8 	sub	r9,r7,-24
8000519c:	e0 4a 00 24 	cp.w	r10,36
800051a0:	c0 71       	brne	800051ae <_realloc_r+0x12e>
800051a2:	09 0a       	ld.w	r10,r4++
800051a4:	93 0a       	st.w	r9[0x0],r10
800051a6:	ee c9 ff e0 	sub	r9,r7,-32
800051aa:	09 0a       	ld.w	r10,r4++
800051ac:	8f 7a       	st.w	r7[0x1c],r10
800051ae:	09 0a       	ld.w	r10,r4++
800051b0:	12 aa       	st.w	r9++,r10
800051b2:	68 0a       	ld.w	r10,r4[0x0]
800051b4:	93 0a       	st.w	r9[0x0],r10
800051b6:	68 1a       	ld.w	r10,r4[0x4]
800051b8:	93 1a       	st.w	r9[0x4],r10
800051ba:	c0 78       	rjmp	800051c8 <_realloc_r+0x148>
800051bc:	50 08       	stdsp	sp[0x0],r8
800051be:	08 9b       	mov	r11,r4
800051c0:	0a 9c       	mov	r12,r5
800051c2:	f0 1f 00 11 	mcall	80005204 <_realloc_r+0x184>
800051c6:	40 08       	lddsp	r8,sp[0x0]
800051c8:	ee 06 00 09 	add	r9,r7,r6
800051cc:	0c 13       	sub	r3,r6
800051ce:	a1 a3       	sbr	r3,0x0
800051d0:	93 13       	st.w	r9[0x4],r3
800051d2:	91 29       	st.w	r8[0x8],r9
800051d4:	04 9c       	mov	r12,r2
800051d6:	6e 18       	ld.w	r8,r7[0x4]
800051d8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800051dc:	10 46       	or	r6,r8
800051de:	8f 16       	st.w	r7[0x4],r6
800051e0:	cb 38       	rjmp	80005346 <_realloc_r+0x2c6>
800051e2:	14 03       	add	r3,r10
800051e4:	0c 33       	cp.w	r3,r6
800051e6:	c1 15       	brlt	80005208 <_realloc_r+0x188>
800051e8:	72 28       	ld.w	r8,r9[0x8]
800051ea:	72 39       	ld.w	r9,r9[0xc]
800051ec:	93 28       	st.w	r9[0x8],r8
800051ee:	91 39       	st.w	r8[0xc],r9
800051f0:	6e 28       	ld.w	r8,r7[0x8]
800051f2:	6e 39       	ld.w	r9,r7[0xc]
800051f4:	c1 08       	rjmp	80005214 <_realloc_r+0x194>
800051f6:	00 00       	add	r0,r0
800051f8:	80 00       	ld.sh	r0,r0[0x0]
800051fa:	4a a0       	lddpc	r0,800052a0 <_realloc_r+0x220>
800051fc:	80 00       	ld.sh	r0,r0[0x0]
800051fe:	42 d8       	lddsp	r8,sp[0xb4]
80005200:	00 00       	add	r0,r0
80005202:	01 f0       	ld.ub	r0,r0[0x7]
80005204:	80 00       	ld.sh	r0,r0[0x0]
80005206:	91 c6       	st.w	r8[0x30],r6
80005208:	f8 00 00 03 	add	r3,r12,r0
8000520c:	0c 33       	cp.w	r3,r6
8000520e:	c3 35       	brlt	80005274 <_realloc_r+0x1f4>
80005210:	6e 39       	ld.w	r9,r7[0xc]
80005212:	6e 28       	ld.w	r8,r7[0x8]
80005214:	93 28       	st.w	r9[0x8],r8
80005216:	91 39       	st.w	r8[0xc],r9
80005218:	e0 ca 00 04 	sub	r10,r0,4
8000521c:	ee cc ff f8 	sub	r12,r7,-8
80005220:	e0 4a 00 24 	cp.w	r10,36
80005224:	e0 8b 00 24 	brhi	8000526c <_realloc_r+0x1ec>
80005228:	59 3a       	cp.w	r10,19
8000522a:	e0 88 00 1a 	brls	8000525e <_realloc_r+0x1de>
8000522e:	09 08       	ld.w	r8,r4++
80005230:	99 08       	st.w	r12[0x0],r8
80005232:	09 08       	ld.w	r8,r4++
80005234:	8f 38       	st.w	r7[0xc],r8
80005236:	ee cc ff f0 	sub	r12,r7,-16
8000523a:	59 ba       	cp.w	r10,27
8000523c:	e0 88 00 11 	brls	8000525e <_realloc_r+0x1de>
80005240:	09 08       	ld.w	r8,r4++
80005242:	99 08       	st.w	r12[0x0],r8
80005244:	09 08       	ld.w	r8,r4++
80005246:	8f 58       	st.w	r7[0x14],r8
80005248:	ee cc ff e8 	sub	r12,r7,-24
8000524c:	e0 4a 00 24 	cp.w	r10,36
80005250:	c0 71       	brne	8000525e <_realloc_r+0x1de>
80005252:	09 08       	ld.w	r8,r4++
80005254:	99 08       	st.w	r12[0x0],r8
80005256:	ee cc ff e0 	sub	r12,r7,-32
8000525a:	09 08       	ld.w	r8,r4++
8000525c:	8f 78       	st.w	r7[0x1c],r8
8000525e:	09 08       	ld.w	r8,r4++
80005260:	18 a8       	st.w	r12++,r8
80005262:	68 08       	ld.w	r8,r4[0x0]
80005264:	99 08       	st.w	r12[0x0],r8
80005266:	68 18       	ld.w	r8,r4[0x4]
80005268:	99 18       	st.w	r12[0x4],r8
8000526a:	c4 78       	rjmp	800052f8 <_realloc_r+0x278>
8000526c:	08 9b       	mov	r11,r4
8000526e:	f0 1f 00 39 	mcall	80005350 <_realloc_r+0x2d0>
80005272:	c4 38       	rjmp	800052f8 <_realloc_r+0x278>
80005274:	04 9c       	mov	r12,r2
80005276:	f0 1f 00 38 	mcall	80005354 <_realloc_r+0x2d4>
8000527a:	18 95       	mov	r5,r12
8000527c:	c3 a0       	breq	800052f0 <_realloc_r+0x270>
8000527e:	62 18       	ld.w	r8,r1[0x4]
80005280:	f8 c9 00 08 	sub	r9,r12,8
80005284:	a1 c8       	cbr	r8,0x0
80005286:	e2 08 00 08 	add	r8,r1,r8
8000528a:	10 39       	cp.w	r9,r8
8000528c:	c0 71       	brne	8000529a <_realloc_r+0x21a>
8000528e:	72 13       	ld.w	r3,r9[0x4]
80005290:	02 97       	mov	r7,r1
80005292:	e0 13 ff fc 	andl	r3,0xfffc
80005296:	00 03       	add	r3,r0
80005298:	c3 08       	rjmp	800052f8 <_realloc_r+0x278>
8000529a:	e0 ca 00 04 	sub	r10,r0,4
8000529e:	e0 4a 00 24 	cp.w	r10,36
800052a2:	e0 8b 00 20 	brhi	800052e2 <_realloc_r+0x262>
800052a6:	08 99       	mov	r9,r4
800052a8:	18 98       	mov	r8,r12
800052aa:	59 3a       	cp.w	r10,19
800052ac:	e0 88 00 14 	brls	800052d4 <_realloc_r+0x254>
800052b0:	13 0b       	ld.w	r11,r9++
800052b2:	10 ab       	st.w	r8++,r11
800052b4:	13 0b       	ld.w	r11,r9++
800052b6:	10 ab       	st.w	r8++,r11
800052b8:	59 ba       	cp.w	r10,27
800052ba:	e0 88 00 0d 	brls	800052d4 <_realloc_r+0x254>
800052be:	13 0b       	ld.w	r11,r9++
800052c0:	10 ab       	st.w	r8++,r11
800052c2:	13 0b       	ld.w	r11,r9++
800052c4:	10 ab       	st.w	r8++,r11
800052c6:	e0 4a 00 24 	cp.w	r10,36
800052ca:	c0 51       	brne	800052d4 <_realloc_r+0x254>
800052cc:	13 0a       	ld.w	r10,r9++
800052ce:	10 aa       	st.w	r8++,r10
800052d0:	13 0a       	ld.w	r10,r9++
800052d2:	10 aa       	st.w	r8++,r10
800052d4:	13 0a       	ld.w	r10,r9++
800052d6:	10 aa       	st.w	r8++,r10
800052d8:	72 0a       	ld.w	r10,r9[0x0]
800052da:	91 0a       	st.w	r8[0x0],r10
800052dc:	72 19       	ld.w	r9,r9[0x4]
800052de:	91 19       	st.w	r8[0x4],r9
800052e0:	c0 48       	rjmp	800052e8 <_realloc_r+0x268>
800052e2:	08 9b       	mov	r11,r4
800052e4:	f0 1f 00 1b 	mcall	80005350 <_realloc_r+0x2d0>
800052e8:	08 9b       	mov	r11,r4
800052ea:	04 9c       	mov	r12,r2
800052ec:	f0 1f 00 1b 	mcall	80005358 <_realloc_r+0x2d8>
800052f0:	04 9c       	mov	r12,r2
800052f2:	c2 a8       	rjmp	80005346 <_realloc_r+0x2c6>
800052f4:	00 93       	mov	r3,r0
800052f6:	02 97       	mov	r7,r1
800052f8:	e6 06 01 09 	sub	r9,r3,r6
800052fc:	6e 18       	ld.w	r8,r7[0x4]
800052fe:	58 f9       	cp.w	r9,15
80005300:	e0 88 00 16 	brls	8000532c <_realloc_r+0x2ac>
80005304:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005308:	ed e8 10 08 	or	r8,r6,r8
8000530c:	8f 18       	st.w	r7[0x4],r8
8000530e:	12 98       	mov	r8,r9
80005310:	a1 a8       	sbr	r8,0x0
80005312:	ee 06 00 0b 	add	r11,r7,r6
80005316:	f6 09 00 09 	add	r9,r11,r9
8000531a:	97 18       	st.w	r11[0x4],r8
8000531c:	72 18       	ld.w	r8,r9[0x4]
8000531e:	a1 a8       	sbr	r8,0x0
80005320:	2f 8b       	sub	r11,-8
80005322:	93 18       	st.w	r9[0x4],r8
80005324:	04 9c       	mov	r12,r2
80005326:	f0 1f 00 0d 	mcall	80005358 <_realloc_r+0x2d8>
8000532a:	c0 b8       	rjmp	80005340 <_realloc_r+0x2c0>
8000532c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005330:	e7 e8 10 08 	or	r8,r3,r8
80005334:	8f 18       	st.w	r7[0x4],r8
80005336:	ee 03 00 03 	add	r3,r7,r3
8000533a:	66 18       	ld.w	r8,r3[0x4]
8000533c:	a1 a8       	sbr	r8,0x0
8000533e:	87 18       	st.w	r3[0x4],r8
80005340:	04 9c       	mov	r12,r2
80005342:	ee c5 ff f8 	sub	r5,r7,-8
80005346:	f0 1f 00 06 	mcall	8000535c <_realloc_r+0x2dc>
8000534a:	0a 9c       	mov	r12,r5
8000534c:	2f fd       	sub	sp,-4
8000534e:	d8 32       	popm	r0-r7,pc
80005350:	80 00       	ld.sh	r0,r0[0x0]
80005352:	91 c6       	st.w	r8[0x30],r6
80005354:	80 00       	ld.sh	r0,r0[0x0]
80005356:	4a a0       	lddpc	r0,800053fc <setvbuf+0x58>
80005358:	80 00       	ld.sh	r0,r0[0x0]
8000535a:	8c 24       	ld.sh	r4,r6[0x4]
8000535c:	80 00       	ld.sh	r0,r0[0x0]
8000535e:	42 e4       	lddsp	r4,sp[0xb8]

80005360 <_sbrk_r>:
80005360:	d4 21       	pushm	r4-r7,lr
80005362:	30 08       	mov	r8,0
80005364:	18 97       	mov	r7,r12
80005366:	48 76       	lddpc	r6,80005380 <_sbrk_r+0x20>
80005368:	16 9c       	mov	r12,r11
8000536a:	8d 08       	st.w	r6[0x0],r8
8000536c:	f0 1f 00 06 	mcall	80005384 <_sbrk_r+0x24>
80005370:	5b fc       	cp.w	r12,-1
80005372:	c0 51       	brne	8000537c <_sbrk_r+0x1c>
80005374:	6c 08       	ld.w	r8,r6[0x0]
80005376:	58 08       	cp.w	r8,0
80005378:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000537c:	d8 22       	popm	r4-r7,pc
8000537e:	00 00       	add	r0,r0
80005380:	00 00       	add	r0,r0
80005382:	0a 2c       	rsub	r12,r5
80005384:	80 00       	ld.sh	r0,r0[0x0]
80005386:	55 a8       	stdsp	sp[0x168],r8

80005388 <setbuf>:
80005388:	d4 01       	pushm	lr
8000538a:	e0 69 04 00 	mov	r9,1024
8000538e:	58 0b       	cp.w	r11,0
80005390:	f9 ba 00 02 	moveq	r10,2
80005394:	f9 ba 01 00 	movne	r10,0
80005398:	f0 1f 00 02 	mcall	800053a0 <setbuf+0x18>
8000539c:	d8 02       	popm	pc
8000539e:	00 00       	add	r0,r0
800053a0:	80 00       	ld.sh	r0,r0[0x0]
800053a2:	53 a4       	stdsp	sp[0xe8],r4

800053a4 <setvbuf>:
800053a4:	d4 31       	pushm	r0-r7,lr
800053a6:	4b f8       	lddpc	r8,800054a0 <setvbuf+0xfc>
800053a8:	18 97       	mov	r7,r12
800053aa:	16 96       	mov	r6,r11
800053ac:	14 95       	mov	r5,r10
800053ae:	12 94       	mov	r4,r9
800053b0:	70 0c       	ld.w	r12,r8[0x0]
800053b2:	58 0c       	cp.w	r12,0
800053b4:	c0 60       	breq	800053c0 <setvbuf+0x1c>
800053b6:	78 68       	ld.w	r8,r12[0x18]
800053b8:	58 08       	cp.w	r8,0
800053ba:	c0 31       	brne	800053c0 <setvbuf+0x1c>
800053bc:	f0 1f 00 3a 	mcall	800054a4 <setvbuf+0x100>
800053c0:	4b a8       	lddpc	r8,800054a8 <setvbuf+0x104>
800053c2:	10 37       	cp.w	r7,r8
800053c4:	c0 51       	brne	800053ce <setvbuf+0x2a>
800053c6:	4b 78       	lddpc	r8,800054a0 <setvbuf+0xfc>
800053c8:	70 08       	ld.w	r8,r8[0x0]
800053ca:	70 07       	ld.w	r7,r8[0x0]
800053cc:	c0 e8       	rjmp	800053e8 <setvbuf+0x44>
800053ce:	4b 88       	lddpc	r8,800054ac <setvbuf+0x108>
800053d0:	10 37       	cp.w	r7,r8
800053d2:	c0 51       	brne	800053dc <setvbuf+0x38>
800053d4:	4b 38       	lddpc	r8,800054a0 <setvbuf+0xfc>
800053d6:	70 08       	ld.w	r8,r8[0x0]
800053d8:	70 17       	ld.w	r7,r8[0x4]
800053da:	c0 78       	rjmp	800053e8 <setvbuf+0x44>
800053dc:	4b 58       	lddpc	r8,800054b0 <setvbuf+0x10c>
800053de:	10 37       	cp.w	r7,r8
800053e0:	c0 41       	brne	800053e8 <setvbuf+0x44>
800053e2:	4b 08       	lddpc	r8,800054a0 <setvbuf+0xfc>
800053e4:	70 08       	ld.w	r8,r8[0x0]
800053e6:	70 27       	ld.w	r7,r8[0x8]
800053e8:	58 25       	cp.w	r5,2
800053ea:	5f b8       	srhi	r8
800053ec:	f1 e4 13 f8 	or	r8,r8,r4>>0x1f
800053f0:	c0 20       	breq	800053f4 <setvbuf+0x50>
800053f2:	dc 3a       	popm	r0-r7,pc,r12=-1
800053f4:	4a b3       	lddpc	r3,800054a0 <setvbuf+0xfc>
800053f6:	0e 9b       	mov	r11,r7
800053f8:	66 0c       	ld.w	r12,r3[0x0]
800053fa:	f0 1f 00 2f 	mcall	800054b4 <setvbuf+0x110>
800053fe:	30 08       	mov	r8,0
80005400:	8f 68       	st.w	r7[0x18],r8
80005402:	8f 18       	st.w	r7[0x4],r8
80005404:	8e 68       	ld.sh	r8,r7[0xc]
80005406:	ed b8 00 07 	bld	r8,0x7
8000540a:	c0 51       	brne	80005414 <setvbuf+0x70>
8000540c:	66 0c       	ld.w	r12,r3[0x0]
8000540e:	6e 4b       	ld.w	r11,r7[0x10]
80005410:	f0 1f 00 2a 	mcall	800054b8 <setvbuf+0x114>
80005414:	8e 68       	ld.sh	r8,r7[0xc]
80005416:	e0 18 ff 7c 	andl	r8,0xff7c
8000541a:	ae 68       	st.h	r7[0xc],r8
8000541c:	58 25       	cp.w	r5,2
8000541e:	c0 31       	brne	80005424 <setvbuf+0x80>
80005420:	30 0c       	mov	r12,0
80005422:	c1 38       	rjmp	80005448 <setvbuf+0xa4>
80005424:	58 06       	cp.w	r6,0
80005426:	c2 11       	brne	80005468 <setvbuf+0xc4>
80005428:	e0 63 04 00 	mov	r3,1024
8000542c:	58 04       	cp.w	r4,0
8000542e:	e6 04 17 00 	moveq	r4,r3
80005432:	08 9c       	mov	r12,r4
80005434:	f0 1f 00 22 	mcall	800054bc <setvbuf+0x118>
80005438:	18 96       	mov	r6,r12
8000543a:	c1 41       	brne	80005462 <setvbuf+0xbe>
8000543c:	06 9c       	mov	r12,r3
8000543e:	f0 1f 00 20 	mcall	800054bc <setvbuf+0x118>
80005442:	18 96       	mov	r6,r12
80005444:	c0 e1       	brne	80005460 <setvbuf+0xbc>
80005446:	3f fc       	mov	r12,-1
80005448:	8e 68       	ld.sh	r8,r7[0xc]
8000544a:	a1 b8       	sbr	r8,0x1
8000544c:	ae 68       	st.h	r7[0xc],r8
8000544e:	ee c8 ff b9 	sub	r8,r7,-71
80005452:	8f 48       	st.w	r7[0x10],r8
80005454:	8f 08       	st.w	r7[0x0],r8
80005456:	30 08       	mov	r8,0
80005458:	8f 28       	st.w	r7[0x8],r8
8000545a:	30 18       	mov	r8,1
8000545c:	8f 58       	st.w	r7[0x14],r8
8000545e:	d8 32       	popm	r0-r7,pc
80005460:	06 94       	mov	r4,r3
80005462:	8e 68       	ld.sh	r8,r7[0xc]
80005464:	a7 b8       	sbr	r8,0x7
80005466:	ae 68       	st.h	r7[0xc],r8
80005468:	58 15       	cp.w	r5,1
8000546a:	c0 71       	brne	80005478 <setvbuf+0xd4>
8000546c:	8e 68       	ld.sh	r8,r7[0xc]
8000546e:	a1 a8       	sbr	r8,0x0
80005470:	ae 68       	st.h	r7[0xc],r8
80005472:	e8 08 11 00 	rsub	r8,r4,0
80005476:	8f 68       	st.w	r7[0x18],r8
80005478:	48 a8       	lddpc	r8,800054a0 <setvbuf+0xfc>
8000547a:	49 29       	lddpc	r9,800054c0 <setvbuf+0x11c>
8000547c:	70 08       	ld.w	r8,r8[0x0]
8000547e:	8f 46       	st.w	r7[0x10],r6
80005480:	91 a9       	st.w	r8[0x28],r9
80005482:	8f 06       	st.w	r7[0x0],r6
80005484:	8f 54       	st.w	r7[0x14],r4
80005486:	8e 68       	ld.sh	r8,r7[0xc]
80005488:	10 9c       	mov	r12,r8
8000548a:	e2 1c 00 08 	andl	r12,0x8,COH
8000548e:	c0 70       	breq	8000549c <setvbuf+0xf8>
80005490:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80005494:	30 0c       	mov	r12,0
80005496:	f9 b4 01 00 	movne	r4,0
8000549a:	8f 24       	st.w	r7[0x8],r4
8000549c:	d8 32       	popm	r0-r7,pc
8000549e:	00 00       	add	r0,r0
800054a0:	00 00       	add	r0,r0
800054a2:	01 ec       	ld.ub	r12,r0[0x6]
800054a4:	80 00       	ld.sh	r0,r0[0x0]
800054a6:	8a cc       	ld.uh	r12,r5[0x8]
800054a8:	80 00       	ld.sh	r0,r0[0x0]
800054aa:	b1 08       	ld.d	r8,r8
800054ac:	80 00       	ld.sh	r0,r0[0x0]
800054ae:	b1 28       	st.d	r8++,r8
800054b0:	80 00       	ld.sh	r0,r0[0x0]
800054b2:	b1 48       	asr	r8,0x10
800054b4:	80 00       	ld.sh	r0,r0[0x0]
800054b6:	88 f0       	ld.uh	r0,r4[0xe]
800054b8:	80 00       	ld.sh	r0,r0[0x0]
800054ba:	8c 24       	ld.sh	r4,r6[0x4]
800054bc:	80 00       	ld.sh	r0,r0[0x0]
800054be:	4a 88       	lddpc	r8,8000555c <_fstat+0x4>
800054c0:	80 00       	ld.sh	r0,r0[0x0]
800054c2:	8a 0c       	ld.sh	r12,r5[0x0]

800054c4 <strncpy>:
800054c4:	30 08       	mov	r8,0
800054c6:	10 3a       	cp.w	r10,r8
800054c8:	5e 0c       	reteq	r12
800054ca:	f6 08 07 09 	ld.ub	r9,r11[r8]
800054ce:	f8 08 0b 09 	st.b	r12[r8],r9
800054d2:	2f f8       	sub	r8,-1
800054d4:	58 09       	cp.w	r9,0
800054d6:	cf 81       	brne	800054c6 <strncpy+0x2>
800054d8:	10 3a       	cp.w	r10,r8
800054da:	5e 0c       	reteq	r12
800054dc:	f8 08 0b 09 	st.b	r12[r8],r9
800054e0:	2f f8       	sub	r8,-1
800054e2:	cf bb       	rjmp	800054d8 <strncpy+0x14>

800054e4 <_init_argv>:
800054e4:	30 e8       	mov	r8,14
800054e6:	d6 73       	breakpoint
800054e8:	3f fc       	mov	r12,-1
800054ea:	35 8b       	mov	r11,88
800054ec:	5e fc       	retal	r12

800054ee <_exit>:
800054ee:	30 d8       	mov	r8,13
800054f0:	d6 73       	breakpoint
800054f2:	3f fc       	mov	r12,-1
800054f4:	35 8b       	mov	r11,88
800054f6:	c0 08       	rjmp	800054f6 <_exit+0x8>

800054f8 <_close>:
800054f8:	30 28       	mov	r8,2
800054fa:	d6 73       	breakpoint
800054fc:	3f fc       	mov	r12,-1
800054fe:	35 8b       	mov	r11,88
80005500:	58 0c       	cp.w	r12,0
80005502:	5e 4c       	retge	r12
80005504:	48 2a       	lddpc	r10,8000550c <_close+0x14>
80005506:	95 0b       	st.w	r10[0x0],r11
80005508:	5e fc       	retal	r12
8000550a:	00 00       	add	r0,r0
8000550c:	00 00       	add	r0,r0
8000550e:	0a 2c       	rsub	r12,r5

80005510 <_lseek>:
80005510:	30 58       	mov	r8,5
80005512:	d6 73       	breakpoint
80005514:	3f fc       	mov	r12,-1
80005516:	35 8b       	mov	r11,88
80005518:	58 0c       	cp.w	r12,0
8000551a:	5e 4c       	retge	r12
8000551c:	48 2a       	lddpc	r10,80005524 <_lseek+0x14>
8000551e:	95 0b       	st.w	r10[0x0],r11
80005520:	5e fc       	retal	r12
80005522:	00 00       	add	r0,r0
80005524:	00 00       	add	r0,r0
80005526:	0a 2c       	rsub	r12,r5

80005528 <isatty>:
80005528:	30 b8       	mov	r8,11
8000552a:	d6 73       	breakpoint
8000552c:	3f fc       	mov	r12,-1
8000552e:	35 8b       	mov	r11,88
80005530:	58 0c       	cp.w	r12,0
80005532:	5e 4c       	retge	r12
80005534:	48 2a       	lddpc	r10,8000553c <isatty+0x14>
80005536:	95 0b       	st.w	r10[0x0],r11
80005538:	5e fc       	retal	r12
8000553a:	00 00       	add	r0,r0
8000553c:	00 00       	add	r0,r0
8000553e:	0a 2c       	rsub	r12,r5

80005540 <_fstat_host>:
80005540:	30 98       	mov	r8,9
80005542:	d6 73       	breakpoint
80005544:	3f fc       	mov	r12,-1
80005546:	35 8b       	mov	r11,88
80005548:	58 0c       	cp.w	r12,0
8000554a:	5e 4c       	retge	r12
8000554c:	48 2a       	lddpc	r10,80005554 <_fstat_host+0x14>
8000554e:	95 0b       	st.w	r10[0x0],r11
80005550:	5e fc       	retal	r12
80005552:	00 00       	add	r0,r0
80005554:	00 00       	add	r0,r0
80005556:	0a 2c       	rsub	r12,r5

80005558 <_fstat>:
80005558:	d4 21       	pushm	r4-r7,lr
8000555a:	21 0d       	sub	sp,64
8000555c:	16 97       	mov	r7,r11
8000555e:	1a 9b       	mov	r11,sp
80005560:	f0 1f 00 11 	mcall	800055a4 <_fstat+0x4c>
80005564:	c0 34       	brge	8000556a <_fstat+0x12>
80005566:	3f fc       	mov	r12,-1
80005568:	c1 c8       	rjmp	800055a0 <_fstat+0x48>
8000556a:	40 08       	lddsp	r8,sp[0x0]
8000556c:	ae 08       	st.h	r7[0x0],r8
8000556e:	40 18       	lddsp	r8,sp[0x4]
80005570:	ae 18       	st.h	r7[0x2],r8
80005572:	40 28       	lddsp	r8,sp[0x8]
80005574:	8f 18       	st.w	r7[0x4],r8
80005576:	40 38       	lddsp	r8,sp[0xc]
80005578:	ae 48       	st.h	r7[0x8],r8
8000557a:	40 48       	lddsp	r8,sp[0x10]
8000557c:	ae 58       	st.h	r7[0xa],r8
8000557e:	40 58       	lddsp	r8,sp[0x14]
80005580:	ae 68       	st.h	r7[0xc],r8
80005582:	40 68       	lddsp	r8,sp[0x18]
80005584:	ae 78       	st.h	r7[0xe],r8
80005586:	40 88       	lddsp	r8,sp[0x20]
80005588:	8f 48       	st.w	r7[0x10],r8
8000558a:	40 a8       	lddsp	r8,sp[0x28]
8000558c:	8f b8       	st.w	r7[0x2c],r8
8000558e:	40 c8       	lddsp	r8,sp[0x30]
80005590:	8f c8       	st.w	r7[0x30],r8
80005592:	40 d8       	lddsp	r8,sp[0x34]
80005594:	8f 58       	st.w	r7[0x14],r8
80005596:	40 e8       	lddsp	r8,sp[0x38]
80005598:	30 0c       	mov	r12,0
8000559a:	8f 78       	st.w	r7[0x1c],r8
8000559c:	40 f8       	lddsp	r8,sp[0x3c]
8000559e:	8f 98       	st.w	r7[0x24],r8
800055a0:	2f 0d       	sub	sp,-64
800055a2:	d8 22       	popm	r4-r7,pc
800055a4:	80 00       	ld.sh	r0,r0[0x0]
800055a6:	55 40       	stdsp	sp[0x150],r0

800055a8 <_sbrk>:
800055a8:	d4 01       	pushm	lr
800055aa:	48 c8       	lddpc	r8,800055d8 <_sbrk+0x30>
800055ac:	70 09       	ld.w	r9,r8[0x0]
800055ae:	58 09       	cp.w	r9,0
800055b0:	c0 31       	brne	800055b6 <_sbrk+0xe>
800055b2:	48 b9       	lddpc	r9,800055dc <_sbrk+0x34>
800055b4:	91 09       	st.w	r8[0x0],r9
800055b6:	48 99       	lddpc	r9,800055d8 <_sbrk+0x30>
800055b8:	48 aa       	lddpc	r10,800055e0 <_sbrk+0x38>
800055ba:	72 08       	ld.w	r8,r9[0x0]
800055bc:	f0 0c 00 0c 	add	r12,r8,r12
800055c0:	14 3c       	cp.w	r12,r10
800055c2:	e0 8b 00 04 	brhi	800055ca <_sbrk+0x22>
800055c6:	93 0c       	st.w	r9[0x0],r12
800055c8:	c0 68       	rjmp	800055d4 <_sbrk+0x2c>
800055ca:	f0 1f 00 07 	mcall	800055e4 <_sbrk+0x3c>
800055ce:	30 c8       	mov	r8,12
800055d0:	99 08       	st.w	r12[0x0],r8
800055d2:	3f f8       	mov	r8,-1
800055d4:	10 9c       	mov	r12,r8
800055d6:	d8 02       	popm	pc
800055d8:	00 00       	add	r0,r0
800055da:	09 fc       	ld.ub	r12,r4[0x7]
800055dc:	00 00       	add	r0,r0
800055de:	0a 30       	cp.w	r0,r5
800055e0:	00 00       	add	r0,r0
800055e2:	f0 00       	*unknown*
800055e4:	80 00       	ld.sh	r0,r0[0x0]
800055e6:	88 e4       	ld.uh	r4,r4[0xc]

800055e8 <get_arg>:
800055e8:	d4 31       	pushm	r0-r7,lr
800055ea:	20 8d       	sub	sp,32
800055ec:	fa c4 ff bc 	sub	r4,sp,-68
800055f0:	50 4b       	stdsp	sp[0x10],r11
800055f2:	68 2e       	ld.w	lr,r4[0x8]
800055f4:	50 58       	stdsp	sp[0x14],r8
800055f6:	12 96       	mov	r6,r9
800055f8:	7c 0b       	ld.w	r11,lr[0x0]
800055fa:	70 05       	ld.w	r5,r8[0x0]
800055fc:	50 6e       	stdsp	sp[0x18],lr
800055fe:	58 0b       	cp.w	r11,0
80005600:	f4 0b 17 00 	moveq	r11,r10
80005604:	68 03       	ld.w	r3,r4[0x0]
80005606:	68 11       	ld.w	r1,r4[0x4]
80005608:	40 49       	lddsp	r9,sp[0x10]
8000560a:	30 08       	mov	r8,0
8000560c:	c2 e9       	rjmp	80005868 <get_arg+0x280>
8000560e:	2f fb       	sub	r11,-1
80005610:	32 5c       	mov	r12,37
80005612:	17 8a       	ld.ub	r10,r11[0x0]
80005614:	f8 0a 18 00 	cp.b	r10,r12
80005618:	5f 1e       	srne	lr
8000561a:	f0 0a 18 00 	cp.b	r10,r8
8000561e:	5f 1c       	srne	r12
80005620:	fd ec 00 0c 	and	r12,lr,r12
80005624:	f0 0c 18 00 	cp.b	r12,r8
80005628:	cf 31       	brne	8000560e <get_arg+0x26>
8000562a:	58 0a       	cp.w	r10,0
8000562c:	e0 80 01 2b 	breq	80005882 <get_arg+0x29a>
80005630:	30 0c       	mov	r12,0
80005632:	3f fa       	mov	r10,-1
80005634:	18 90       	mov	r0,r12
80005636:	50 3a       	stdsp	sp[0xc],r10
80005638:	18 94       	mov	r4,r12
8000563a:	18 92       	mov	r2,r12
8000563c:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
80005640:	16 97       	mov	r7,r11
80005642:	50 7c       	stdsp	sp[0x1c],r12
80005644:	4c ec       	lddpc	r12,8000577c <get_arg+0x194>
80005646:	0f 3a       	ld.ub	r10,r7++
80005648:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
8000564c:	40 7c       	lddsp	r12,sp[0x1c]
8000564e:	1c 0c       	add	r12,lr
80005650:	4c ce       	lddpc	lr,80005780 <get_arg+0x198>
80005652:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
80005656:	20 1e       	sub	lr,1
80005658:	50 0e       	stdsp	sp[0x0],lr
8000565a:	4c be       	lddpc	lr,80005784 <get_arg+0x19c>
8000565c:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
80005660:	50 7c       	stdsp	sp[0x1c],r12
80005662:	40 0c       	lddsp	r12,sp[0x0]
80005664:	58 7c       	cp.w	r12,7
80005666:	e0 8b 00 fa 	brhi	8000585a <get_arg+0x272>
8000566a:	4c 8e       	lddpc	lr,80005788 <get_arg+0x1a0>
8000566c:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
80005670:	36 8b       	mov	r11,104
80005672:	f6 0a 18 00 	cp.b	r10,r11
80005676:	e0 80 00 f2 	breq	8000585a <get_arg+0x272>
8000567a:	37 1b       	mov	r11,113
8000567c:	f6 0a 18 00 	cp.b	r10,r11
80005680:	c0 70       	breq	8000568e <get_arg+0xa6>
80005682:	34 cb       	mov	r11,76
80005684:	f6 0a 18 00 	cp.b	r10,r11
80005688:	c0 51       	brne	80005692 <get_arg+0xaa>
8000568a:	a3 b4       	sbr	r4,0x3
8000568c:	ce 78       	rjmp	8000585a <get_arg+0x272>
8000568e:	a5 b4       	sbr	r4,0x5
80005690:	ce 58       	rjmp	8000585a <get_arg+0x272>
80005692:	08 9a       	mov	r10,r4
80005694:	0e 9b       	mov	r11,r7
80005696:	a5 aa       	sbr	r10,0x4
80005698:	17 3c       	ld.ub	r12,r11++
8000569a:	a5 b4       	sbr	r4,0x5
8000569c:	36 ce       	mov	lr,108
8000569e:	fc 0c 18 00 	cp.b	r12,lr
800056a2:	e0 80 00 dd 	breq	8000585c <get_arg+0x274>
800056a6:	14 94       	mov	r4,r10
800056a8:	cd 98       	rjmp	8000585a <get_arg+0x272>
800056aa:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
800056ae:	36 7c       	mov	r12,103
800056b0:	f8 0a 18 00 	cp.b	r10,r12
800056b4:	e0 8b 00 27 	brhi	80005702 <get_arg+0x11a>
800056b8:	36 5b       	mov	r11,101
800056ba:	f6 0a 18 00 	cp.b	r10,r11
800056be:	c4 82       	brcc	8000574e <get_arg+0x166>
800056c0:	34 fb       	mov	r11,79
800056c2:	f6 0a 18 00 	cp.b	r10,r11
800056c6:	c4 80       	breq	80005756 <get_arg+0x16e>
800056c8:	e0 8b 00 0c 	brhi	800056e0 <get_arg+0xf8>
800056cc:	34 5b       	mov	r11,69
800056ce:	f6 0a 18 00 	cp.b	r10,r11
800056d2:	c3 e0       	breq	8000574e <get_arg+0x166>
800056d4:	34 7b       	mov	r11,71
800056d6:	f6 0a 18 00 	cp.b	r10,r11
800056da:	c3 a0       	breq	8000574e <get_arg+0x166>
800056dc:	34 4b       	mov	r11,68
800056de:	c0 88       	rjmp	800056ee <get_arg+0x106>
800056e0:	35 8b       	mov	r11,88
800056e2:	f6 0a 18 00 	cp.b	r10,r11
800056e6:	c2 c0       	breq	8000573e <get_arg+0x156>
800056e8:	e0 8b 00 07 	brhi	800056f6 <get_arg+0x10e>
800056ec:	35 5b       	mov	r11,85
800056ee:	f6 0a 18 00 	cp.b	r10,r11
800056f2:	c3 51       	brne	8000575c <get_arg+0x174>
800056f4:	c3 18       	rjmp	80005756 <get_arg+0x16e>
800056f6:	36 3b       	mov	r11,99
800056f8:	f6 0a 18 00 	cp.b	r10,r11
800056fc:	c2 f0       	breq	8000575a <get_arg+0x172>
800056fe:	36 4b       	mov	r11,100
80005700:	c0 e8       	rjmp	8000571c <get_arg+0x134>
80005702:	37 0b       	mov	r11,112
80005704:	f6 0a 18 00 	cp.b	r10,r11
80005708:	c2 50       	breq	80005752 <get_arg+0x16a>
8000570a:	e0 8b 00 0d 	brhi	80005724 <get_arg+0x13c>
8000570e:	36 eb       	mov	r11,110
80005710:	f6 0a 18 00 	cp.b	r10,r11
80005714:	c1 f0       	breq	80005752 <get_arg+0x16a>
80005716:	e0 8b 00 14 	brhi	8000573e <get_arg+0x156>
8000571a:	36 9b       	mov	r11,105
8000571c:	f6 0a 18 00 	cp.b	r10,r11
80005720:	c1 e1       	brne	8000575c <get_arg+0x174>
80005722:	c0 e8       	rjmp	8000573e <get_arg+0x156>
80005724:	37 5b       	mov	r11,117
80005726:	f6 0a 18 00 	cp.b	r10,r11
8000572a:	c0 a0       	breq	8000573e <get_arg+0x156>
8000572c:	37 8b       	mov	r11,120
8000572e:	f6 0a 18 00 	cp.b	r10,r11
80005732:	c0 60       	breq	8000573e <get_arg+0x156>
80005734:	37 3b       	mov	r11,115
80005736:	f6 0a 18 00 	cp.b	r10,r11
8000573a:	c1 11       	brne	8000575c <get_arg+0x174>
8000573c:	c0 b8       	rjmp	80005752 <get_arg+0x16a>
8000573e:	ed b4 00 04 	bld	r4,0x4
80005742:	c0 a0       	breq	80005756 <get_arg+0x16e>
80005744:	ed b4 00 05 	bld	r4,0x5
80005748:	c0 91       	brne	8000575a <get_arg+0x172>
8000574a:	30 20       	mov	r0,2
8000574c:	c0 88       	rjmp	8000575c <get_arg+0x174>
8000574e:	30 40       	mov	r0,4
80005750:	c0 68       	rjmp	8000575c <get_arg+0x174>
80005752:	30 30       	mov	r0,3
80005754:	c0 48       	rjmp	8000575c <get_arg+0x174>
80005756:	30 10       	mov	r0,1
80005758:	c0 28       	rjmp	8000575c <get_arg+0x174>
8000575a:	30 00       	mov	r0,0
8000575c:	40 3b       	lddsp	r11,sp[0xc]
8000575e:	5b fb       	cp.w	r11,-1
80005760:	c0 40       	breq	80005768 <get_arg+0x180>
80005762:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
80005766:	c7 a8       	rjmp	8000585a <get_arg+0x272>
80005768:	58 60       	cp.w	r0,6
8000576a:	e0 8b 00 78 	brhi	8000585a <get_arg+0x272>
8000576e:	6c 0a       	ld.w	r10,r6[0x0]
80005770:	ea cc ff ff 	sub	r12,r5,-1
80005774:	48 6e       	lddpc	lr,8000578c <get_arg+0x1a4>
80005776:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
8000577a:	00 00       	add	r0,r0
8000577c:	80 00       	ld.sh	r0,r0[0x0]
8000577e:	af f8       	*unknown*
80005780:	80 00       	ld.sh	r0,r0[0x0]
80005782:	af 30       	mul	r0,r7
80005784:	80 00       	ld.sh	r0,r0[0x0]
80005786:	ae c4       	st.b	r7[0x4],r4
80005788:	80 00       	ld.sh	r0,r0[0x0]
8000578a:	ad 24       	st.d	r6++,r4
8000578c:	80 00       	ld.sh	r0,r0[0x0]
8000578e:	ad 44       	asr	r4,0xc
80005790:	f4 cb ff f8 	sub	r11,r10,-8
80005794:	8d 0b       	st.w	r6[0x0],r11
80005796:	f4 ea 00 00 	ld.d	r10,r10[0]
8000579a:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
8000579e:	c0 f8       	rjmp	800057bc <get_arg+0x1d4>
800057a0:	f4 cb ff fc 	sub	r11,r10,-4
800057a4:	8d 0b       	st.w	r6[0x0],r11
800057a6:	74 0a       	ld.w	r10,r10[0x0]
800057a8:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
800057ac:	c0 88       	rjmp	800057bc <get_arg+0x1d4>
800057ae:	f4 cb ff f8 	sub	r11,r10,-8
800057b2:	8d 0b       	st.w	r6[0x0],r11
800057b4:	f4 ea 00 00 	ld.d	r10,r10[0]
800057b8:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
800057bc:	0e 9b       	mov	r11,r7
800057be:	18 95       	mov	r5,r12
800057c0:	c4 e8       	rjmp	8000585c <get_arg+0x274>
800057c2:	62 0a       	ld.w	r10,r1[0x0]
800057c4:	5b fa       	cp.w	r10,-1
800057c6:	c0 b1       	brne	800057dc <get_arg+0x1f4>
800057c8:	50 19       	stdsp	sp[0x4],r9
800057ca:	50 28       	stdsp	sp[0x8],r8
800057cc:	e0 6a 00 80 	mov	r10,128
800057d0:	30 0b       	mov	r11,0
800057d2:	02 9c       	mov	r12,r1
800057d4:	f0 1f 00 4d 	mcall	80005908 <get_arg+0x320>
800057d8:	40 28       	lddsp	r8,sp[0x8]
800057da:	40 19       	lddsp	r9,sp[0x4]
800057dc:	e4 cc 00 01 	sub	r12,r2,1
800057e0:	0e 9b       	mov	r11,r7
800057e2:	50 3c       	stdsp	sp[0xc],r12
800057e4:	f2 0c 0c 49 	max	r9,r9,r12
800057e8:	c3 a8       	rjmp	8000585c <get_arg+0x274>
800057ea:	62 0a       	ld.w	r10,r1[0x0]
800057ec:	5b fa       	cp.w	r10,-1
800057ee:	c0 b1       	brne	80005804 <get_arg+0x21c>
800057f0:	50 19       	stdsp	sp[0x4],r9
800057f2:	50 28       	stdsp	sp[0x8],r8
800057f4:	e0 6a 00 80 	mov	r10,128
800057f8:	30 0b       	mov	r11,0
800057fa:	02 9c       	mov	r12,r1
800057fc:	f0 1f 00 43 	mcall	80005908 <get_arg+0x320>
80005800:	40 28       	lddsp	r8,sp[0x8]
80005802:	40 19       	lddsp	r9,sp[0x4]
80005804:	20 12       	sub	r2,1
80005806:	30 0a       	mov	r10,0
80005808:	0e 9b       	mov	r11,r7
8000580a:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
8000580e:	f2 02 0c 49 	max	r9,r9,r2
80005812:	c2 58       	rjmp	8000585c <get_arg+0x274>
80005814:	16 97       	mov	r7,r11
80005816:	6c 0a       	ld.w	r10,r6[0x0]
80005818:	f4 cb ff fc 	sub	r11,r10,-4
8000581c:	8d 0b       	st.w	r6[0x0],r11
8000581e:	74 0a       	ld.w	r10,r10[0x0]
80005820:	0e 9b       	mov	r11,r7
80005822:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80005826:	2f f5       	sub	r5,-1
80005828:	c1 a8       	rjmp	8000585c <get_arg+0x274>
8000582a:	f4 c2 00 30 	sub	r2,r10,48
8000582e:	c0 68       	rjmp	8000583a <get_arg+0x252>
80005830:	e4 02 00 22 	add	r2,r2,r2<<0x2
80005834:	2f f7       	sub	r7,-1
80005836:	f4 02 00 12 	add	r2,r10,r2<<0x1
8000583a:	0f 8a       	ld.ub	r10,r7[0x0]
8000583c:	58 0a       	cp.w	r10,0
8000583e:	c0 e0       	breq	8000585a <get_arg+0x272>
80005840:	23 0a       	sub	r10,48
80005842:	58 9a       	cp.w	r10,9
80005844:	fe 98 ff f6 	brls	80005830 <get_arg+0x248>
80005848:	c0 98       	rjmp	8000585a <get_arg+0x272>
8000584a:	2f f7       	sub	r7,-1
8000584c:	0f 8a       	ld.ub	r10,r7[0x0]
8000584e:	58 0a       	cp.w	r10,0
80005850:	c0 50       	breq	8000585a <get_arg+0x272>
80005852:	23 0a       	sub	r10,48
80005854:	58 9a       	cp.w	r10,9
80005856:	fe 98 ff fa 	brls	8000584a <get_arg+0x262>
8000585a:	0e 9b       	mov	r11,r7
8000585c:	40 7c       	lddsp	r12,sp[0x1c]
8000585e:	30 ba       	mov	r10,11
80005860:	f4 0c 18 00 	cp.b	r12,r10
80005864:	fe 91 fe ec 	brne	8000563c <get_arg+0x54>
80005868:	40 42       	lddsp	r2,sp[0x10]
8000586a:	17 8c       	ld.ub	r12,r11[0x0]
8000586c:	0a 32       	cp.w	r2,r5
8000586e:	5f 4a       	srge	r10
80005870:	f0 0c 18 00 	cp.b	r12,r8
80005874:	5f 1c       	srne	r12
80005876:	f9 ea 00 0a 	and	r10,r12,r10
8000587a:	f0 0a 18 00 	cp.b	r10,r8
8000587e:	fe 91 fe c9 	brne	80005610 <get_arg+0x28>
80005882:	30 08       	mov	r8,0
80005884:	40 4e       	lddsp	lr,sp[0x10]
80005886:	17 8a       	ld.ub	r10,r11[0x0]
80005888:	e2 05 00 21 	add	r1,r1,r5<<0x2
8000588c:	f0 0a 18 00 	cp.b	r10,r8
80005890:	fc 09 17 10 	movne	r9,lr
80005894:	e6 05 00 38 	add	r8,r3,r5<<0x3
80005898:	06 9e       	mov	lr,r3
8000589a:	c2 a8       	rjmp	800058ee <get_arg+0x306>
8000589c:	62 0a       	ld.w	r10,r1[0x0]
8000589e:	58 3a       	cp.w	r10,3
800058a0:	c1 e0       	breq	800058dc <get_arg+0x2f4>
800058a2:	e0 89 00 07 	brgt	800058b0 <get_arg+0x2c8>
800058a6:	58 1a       	cp.w	r10,1
800058a8:	c1 a0       	breq	800058dc <get_arg+0x2f4>
800058aa:	58 2a       	cp.w	r10,2
800058ac:	c1 81       	brne	800058dc <get_arg+0x2f4>
800058ae:	c0 58       	rjmp	800058b8 <get_arg+0x2d0>
800058b0:	58 5a       	cp.w	r10,5
800058b2:	c0 c0       	breq	800058ca <get_arg+0x2e2>
800058b4:	c0 b5       	brlt	800058ca <get_arg+0x2e2>
800058b6:	c1 38       	rjmp	800058dc <get_arg+0x2f4>
800058b8:	6c 0a       	ld.w	r10,r6[0x0]
800058ba:	f4 cc ff f8 	sub	r12,r10,-8
800058be:	8d 0c       	st.w	r6[0x0],r12
800058c0:	f4 e2 00 00 	ld.d	r2,r10[0]
800058c4:	f0 e3 00 00 	st.d	r8[0],r2
800058c8:	c1 08       	rjmp	800058e8 <get_arg+0x300>
800058ca:	6c 0a       	ld.w	r10,r6[0x0]
800058cc:	f4 cc ff f8 	sub	r12,r10,-8
800058d0:	8d 0c       	st.w	r6[0x0],r12
800058d2:	f4 e2 00 00 	ld.d	r2,r10[0]
800058d6:	f0 e3 00 00 	st.d	r8[0],r2
800058da:	c0 78       	rjmp	800058e8 <get_arg+0x300>
800058dc:	6c 0a       	ld.w	r10,r6[0x0]
800058de:	f4 cc ff fc 	sub	r12,r10,-4
800058e2:	8d 0c       	st.w	r6[0x0],r12
800058e4:	74 0a       	ld.w	r10,r10[0x0]
800058e6:	91 0a       	st.w	r8[0x0],r10
800058e8:	2f f5       	sub	r5,-1
800058ea:	2f 88       	sub	r8,-8
800058ec:	2f c1       	sub	r1,-4
800058ee:	12 35       	cp.w	r5,r9
800058f0:	fe 9a ff d6 	brle	8000589c <get_arg+0x2b4>
800058f4:	1c 93       	mov	r3,lr
800058f6:	40 52       	lddsp	r2,sp[0x14]
800058f8:	40 6e       	lddsp	lr,sp[0x18]
800058fa:	85 05       	st.w	r2[0x0],r5
800058fc:	9d 0b       	st.w	lr[0x0],r11
800058fe:	40 4b       	lddsp	r11,sp[0x10]
80005900:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
80005904:	2f 8d       	sub	sp,-32
80005906:	d8 32       	popm	r0-r7,pc
80005908:	80 00       	ld.sh	r0,r0[0x0]
8000590a:	50 38       	stdsp	sp[0xc],r8

8000590c <__sprint_r>:
8000590c:	d4 21       	pushm	r4-r7,lr
8000590e:	14 97       	mov	r7,r10
80005910:	74 28       	ld.w	r8,r10[0x8]
80005912:	58 08       	cp.w	r8,0
80005914:	c0 41       	brne	8000591c <__sprint_r+0x10>
80005916:	95 18       	st.w	r10[0x4],r8
80005918:	10 9c       	mov	r12,r8
8000591a:	d8 22       	popm	r4-r7,pc
8000591c:	f0 1f 00 03 	mcall	80005928 <__sprint_r+0x1c>
80005920:	30 08       	mov	r8,0
80005922:	8f 18       	st.w	r7[0x4],r8
80005924:	8f 28       	st.w	r7[0x8],r8
80005926:	d8 22       	popm	r4-r7,pc
80005928:	80 00       	ld.sh	r0,r0[0x0]
8000592a:	8d c4       	st.w	r6[0x30],r4

8000592c <_vfprintf_r>:
8000592c:	d4 31       	pushm	r0-r7,lr
8000592e:	fa cd 06 bc 	sub	sp,sp,1724
80005932:	51 09       	stdsp	sp[0x40],r9
80005934:	16 91       	mov	r1,r11
80005936:	14 97       	mov	r7,r10
80005938:	18 95       	mov	r5,r12
8000593a:	f0 1f 00 56 	mcall	80005a90 <_vfprintf_r+0x164>
8000593e:	78 0c       	ld.w	r12,r12[0x0]
80005940:	50 cc       	stdsp	sp[0x30],r12
80005942:	58 05       	cp.w	r5,0
80005944:	c0 70       	breq	80005952 <_vfprintf_r+0x26>
80005946:	6a 68       	ld.w	r8,r5[0x18]
80005948:	58 08       	cp.w	r8,0
8000594a:	c0 41       	brne	80005952 <_vfprintf_r+0x26>
8000594c:	0a 9c       	mov	r12,r5
8000594e:	f0 1f 00 52 	mcall	80005a94 <_vfprintf_r+0x168>
80005952:	4d 28       	lddpc	r8,80005a98 <_vfprintf_r+0x16c>
80005954:	10 31       	cp.w	r1,r8
80005956:	c0 31       	brne	8000595c <_vfprintf_r+0x30>
80005958:	6a 01       	ld.w	r1,r5[0x0]
8000595a:	c0 a8       	rjmp	8000596e <_vfprintf_r+0x42>
8000595c:	4d 08       	lddpc	r8,80005a9c <_vfprintf_r+0x170>
8000595e:	10 31       	cp.w	r1,r8
80005960:	c0 31       	brne	80005966 <_vfprintf_r+0x3a>
80005962:	6a 11       	ld.w	r1,r5[0x4]
80005964:	c0 58       	rjmp	8000596e <_vfprintf_r+0x42>
80005966:	4c f8       	lddpc	r8,80005aa0 <_vfprintf_r+0x174>
80005968:	10 31       	cp.w	r1,r8
8000596a:	eb f1 00 02 	ld.weq	r1,r5[0x8]
8000596e:	82 68       	ld.sh	r8,r1[0xc]
80005970:	ed b8 00 03 	bld	r8,0x3
80005974:	c0 41       	brne	8000597c <_vfprintf_r+0x50>
80005976:	62 48       	ld.w	r8,r1[0x10]
80005978:	58 08       	cp.w	r8,0
8000597a:	c0 71       	brne	80005988 <_vfprintf_r+0x5c>
8000597c:	02 9b       	mov	r11,r1
8000597e:	0a 9c       	mov	r12,r5
80005980:	f0 1f 00 49 	mcall	80005aa4 <_vfprintf_r+0x178>
80005984:	e0 81 0f 99 	brne	800078b6 <_vfprintf_r+0x1f8a>
80005988:	82 68       	ld.sh	r8,r1[0xc]
8000598a:	10 99       	mov	r9,r8
8000598c:	e2 19 00 1a 	andl	r9,0x1a,COH
80005990:	58 a9       	cp.w	r9,10
80005992:	c3 d1       	brne	80005a0c <_vfprintf_r+0xe0>
80005994:	82 79       	ld.sh	r9,r1[0xe]
80005996:	30 0a       	mov	r10,0
80005998:	f4 09 19 00 	cp.h	r9,r10
8000599c:	c3 85       	brlt	80005a0c <_vfprintf_r+0xe0>
8000599e:	a1 d8       	cbr	r8,0x1
800059a0:	fb 58 05 d0 	st.h	sp[1488],r8
800059a4:	62 88       	ld.w	r8,r1[0x20]
800059a6:	fb 48 05 e4 	st.w	sp[1508],r8
800059aa:	62 a8       	ld.w	r8,r1[0x28]
800059ac:	fb 48 05 ec 	st.w	sp[1516],r8
800059b0:	fa c8 ff bc 	sub	r8,sp,-68
800059b4:	fb 48 05 d4 	st.w	sp[1492],r8
800059b8:	fb 48 05 c4 	st.w	sp[1476],r8
800059bc:	e0 68 04 00 	mov	r8,1024
800059c0:	fb 48 05 d8 	st.w	sp[1496],r8
800059c4:	fb 48 05 cc 	st.w	sp[1484],r8
800059c8:	30 08       	mov	r8,0
800059ca:	fb 59 05 d2 	st.h	sp[1490],r9
800059ce:	0e 9a       	mov	r10,r7
800059d0:	41 09       	lddsp	r9,sp[0x40]
800059d2:	fa c7 fa 3c 	sub	r7,sp,-1476
800059d6:	fb 48 05 dc 	st.w	sp[1500],r8
800059da:	0a 9c       	mov	r12,r5
800059dc:	0e 9b       	mov	r11,r7
800059de:	f0 1f 00 33 	mcall	80005aa8 <_vfprintf_r+0x17c>
800059e2:	50 bc       	stdsp	sp[0x2c],r12
800059e4:	c0 95       	brlt	800059f6 <_vfprintf_r+0xca>
800059e6:	0e 9b       	mov	r11,r7
800059e8:	0a 9c       	mov	r12,r5
800059ea:	f0 1f 00 31 	mcall	80005aac <_vfprintf_r+0x180>
800059ee:	40 be       	lddsp	lr,sp[0x2c]
800059f0:	f9 be 01 ff 	movne	lr,-1
800059f4:	50 be       	stdsp	sp[0x2c],lr
800059f6:	fb 08 05 d0 	ld.sh	r8,sp[1488]
800059fa:	ed b8 00 06 	bld	r8,0x6
800059fe:	e0 81 0f 5e 	brne	800078ba <_vfprintf_r+0x1f8e>
80005a02:	82 68       	ld.sh	r8,r1[0xc]
80005a04:	a7 a8       	sbr	r8,0x6
80005a06:	a2 68       	st.h	r1[0xc],r8
80005a08:	e0 8f 0f 59 	bral	800078ba <_vfprintf_r+0x1f8e>
80005a0c:	30 08       	mov	r8,0
80005a0e:	fb 48 06 b4 	st.w	sp[1716],r8
80005a12:	fb 48 06 90 	st.w	sp[1680],r8
80005a16:	fb 48 06 8c 	st.w	sp[1676],r8
80005a1a:	fb 48 06 b0 	st.w	sp[1712],r8
80005a1e:	30 08       	mov	r8,0
80005a20:	30 09       	mov	r9,0
80005a22:	50 a7       	stdsp	sp[0x28],r7
80005a24:	50 78       	stdsp	sp[0x1c],r8
80005a26:	fa c3 f9 e0 	sub	r3,sp,-1568
80005a2a:	3f f8       	mov	r8,-1
80005a2c:	50 59       	stdsp	sp[0x14],r9
80005a2e:	fb 43 06 88 	st.w	sp[1672],r3
80005a32:	fb 48 05 44 	st.w	sp[1348],r8
80005a36:	12 9c       	mov	r12,r9
80005a38:	50 69       	stdsp	sp[0x18],r9
80005a3a:	50 d9       	stdsp	sp[0x34],r9
80005a3c:	50 e9       	stdsp	sp[0x38],r9
80005a3e:	50 b9       	stdsp	sp[0x2c],r9
80005a40:	12 97       	mov	r7,r9
80005a42:	0a 94       	mov	r4,r5
80005a44:	40 a2       	lddsp	r2,sp[0x28]
80005a46:	32 5a       	mov	r10,37
80005a48:	30 08       	mov	r8,0
80005a4a:	c0 28       	rjmp	80005a4e <_vfprintf_r+0x122>
80005a4c:	2f f2       	sub	r2,-1
80005a4e:	05 89       	ld.ub	r9,r2[0x0]
80005a50:	f0 09 18 00 	cp.b	r9,r8
80005a54:	5f 1b       	srne	r11
80005a56:	f4 09 18 00 	cp.b	r9,r10
80005a5a:	5f 19       	srne	r9
80005a5c:	f3 eb 00 0b 	and	r11,r9,r11
80005a60:	f0 0b 18 00 	cp.b	r11,r8
80005a64:	cf 41       	brne	80005a4c <_vfprintf_r+0x120>
80005a66:	40 ab       	lddsp	r11,sp[0x28]
80005a68:	e4 0b 01 06 	sub	r6,r2,r11
80005a6c:	c2 f0       	breq	80005aca <_vfprintf_r+0x19e>
80005a6e:	fa f8 06 90 	ld.w	r8,sp[1680]
80005a72:	0c 08       	add	r8,r6
80005a74:	87 0b       	st.w	r3[0x0],r11
80005a76:	fb 48 06 90 	st.w	sp[1680],r8
80005a7a:	87 16       	st.w	r3[0x4],r6
80005a7c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005a80:	2f f8       	sub	r8,-1
80005a82:	fb 48 06 8c 	st.w	sp[1676],r8
80005a86:	58 78       	cp.w	r8,7
80005a88:	e0 89 00 14 	brgt	80005ab0 <_vfprintf_r+0x184>
80005a8c:	2f 83       	sub	r3,-8
80005a8e:	c1 b8       	rjmp	80005ac4 <_vfprintf_r+0x198>
80005a90:	80 00       	ld.sh	r0,r0[0x0]
80005a92:	90 dc       	ld.uh	r12,r8[0xa]
80005a94:	80 00       	ld.sh	r0,r0[0x0]
80005a96:	8a cc       	ld.uh	r12,r5[0x8]
80005a98:	80 00       	ld.sh	r0,r0[0x0]
80005a9a:	b1 08       	ld.d	r8,r8
80005a9c:	80 00       	ld.sh	r0,r0[0x0]
80005a9e:	b1 28       	st.d	r8++,r8
80005aa0:	80 00       	ld.sh	r0,r0[0x0]
80005aa2:	b1 48       	asr	r8,0x10
80005aa4:	80 00       	ld.sh	r0,r0[0x0]
80005aa6:	78 c8       	ld.w	r8,r12[0x30]
80005aa8:	80 00       	ld.sh	r0,r0[0x0]
80005aaa:	59 2c       	cp.w	r12,18
80005aac:	80 00       	ld.sh	r0,r0[0x0]
80005aae:	88 f0       	ld.uh	r0,r4[0xe]
80005ab0:	fa ca f9 78 	sub	r10,sp,-1672
80005ab4:	02 9b       	mov	r11,r1
80005ab6:	08 9c       	mov	r12,r4
80005ab8:	f0 1f 00 71 	mcall	80005c7c <_vfprintf_r+0x350>
80005abc:	e0 81 0e f9 	brne	800078ae <_vfprintf_r+0x1f82>
80005ac0:	fa c3 f9 e0 	sub	r3,sp,-1568
80005ac4:	40 ba       	lddsp	r10,sp[0x2c]
80005ac6:	0c 0a       	add	r10,r6
80005ac8:	50 ba       	stdsp	sp[0x2c],r10
80005aca:	05 89       	ld.ub	r9,r2[0x0]
80005acc:	30 08       	mov	r8,0
80005ace:	f0 09 18 00 	cp.b	r9,r8
80005ad2:	e0 80 0e dd 	breq	8000788c <_vfprintf_r+0x1f60>
80005ad6:	30 09       	mov	r9,0
80005ad8:	fb 68 06 bb 	st.b	sp[1723],r8
80005adc:	0e 96       	mov	r6,r7
80005ade:	e4 c8 ff ff 	sub	r8,r2,-1
80005ae2:	3f fe       	mov	lr,-1
80005ae4:	50 93       	stdsp	sp[0x24],r3
80005ae6:	50 41       	stdsp	sp[0x10],r1
80005ae8:	0e 93       	mov	r3,r7
80005aea:	04 91       	mov	r1,r2
80005aec:	50 89       	stdsp	sp[0x20],r9
80005aee:	50 a8       	stdsp	sp[0x28],r8
80005af0:	50 2e       	stdsp	sp[0x8],lr
80005af2:	50 39       	stdsp	sp[0xc],r9
80005af4:	12 95       	mov	r5,r9
80005af6:	12 90       	mov	r0,r9
80005af8:	10 97       	mov	r7,r8
80005afa:	08 92       	mov	r2,r4
80005afc:	c0 78       	rjmp	80005b0a <_vfprintf_r+0x1de>
80005afe:	3f fc       	mov	r12,-1
80005b00:	08 97       	mov	r7,r4
80005b02:	50 2c       	stdsp	sp[0x8],r12
80005b04:	c0 38       	rjmp	80005b0a <_vfprintf_r+0x1de>
80005b06:	30 0b       	mov	r11,0
80005b08:	50 3b       	stdsp	sp[0xc],r11
80005b0a:	0f 38       	ld.ub	r8,r7++
80005b0c:	c0 28       	rjmp	80005b10 <_vfprintf_r+0x1e4>
80005b0e:	12 90       	mov	r0,r9
80005b10:	f0 c9 00 20 	sub	r9,r8,32
80005b14:	e0 49 00 58 	cp.w	r9,88
80005b18:	e0 8b 0a 4d 	brhi	80006fb2 <_vfprintf_r+0x1686>
80005b1c:	4d 9a       	lddpc	r10,80005c80 <_vfprintf_r+0x354>
80005b1e:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
80005b22:	50 a7       	stdsp	sp[0x28],r7
80005b24:	50 80       	stdsp	sp[0x20],r0
80005b26:	0c 97       	mov	r7,r6
80005b28:	04 94       	mov	r4,r2
80005b2a:	06 96       	mov	r6,r3
80005b2c:	02 92       	mov	r2,r1
80005b2e:	4d 69       	lddpc	r9,80005c84 <_vfprintf_r+0x358>
80005b30:	40 93       	lddsp	r3,sp[0x24]
80005b32:	10 90       	mov	r0,r8
80005b34:	40 41       	lddsp	r1,sp[0x10]
80005b36:	50 d9       	stdsp	sp[0x34],r9
80005b38:	e0 8f 08 aa 	bral	80006c8c <_vfprintf_r+0x1360>
80005b3c:	30 08       	mov	r8,0
80005b3e:	fb 39 06 bb 	ld.ub	r9,sp[1723]
80005b42:	f0 09 18 00 	cp.b	r9,r8
80005b46:	ce 21       	brne	80005b0a <_vfprintf_r+0x1de>
80005b48:	32 08       	mov	r8,32
80005b4a:	c6 e8       	rjmp	80005c26 <_vfprintf_r+0x2fa>
80005b4c:	a1 a5       	sbr	r5,0x0
80005b4e:	cd eb       	rjmp	80005b0a <_vfprintf_r+0x1de>
80005b50:	0f 89       	ld.ub	r9,r7[0x0]
80005b52:	f2 c8 00 30 	sub	r8,r9,48
80005b56:	58 98       	cp.w	r8,9
80005b58:	e0 8b 00 1d 	brhi	80005b92 <_vfprintf_r+0x266>
80005b5c:	ee c8 ff ff 	sub	r8,r7,-1
80005b60:	30 0b       	mov	r11,0
80005b62:	23 09       	sub	r9,48
80005b64:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80005b68:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
80005b6c:	11 39       	ld.ub	r9,r8++
80005b6e:	f2 ca 00 30 	sub	r10,r9,48
80005b72:	58 9a       	cp.w	r10,9
80005b74:	fe 98 ff f7 	brls	80005b62 <_vfprintf_r+0x236>
80005b78:	e0 49 00 24 	cp.w	r9,36
80005b7c:	cc 51       	brne	80005b06 <_vfprintf_r+0x1da>
80005b7e:	e0 4b 00 20 	cp.w	r11,32
80005b82:	e0 89 0e 95 	brgt	800078ac <_vfprintf_r+0x1f80>
80005b86:	20 1b       	sub	r11,1
80005b88:	fa f9 06 b4 	ld.w	r9,sp[1716]
80005b8c:	12 3b       	cp.w	r11,r9
80005b8e:	c0 95       	brlt	80005ba0 <_vfprintf_r+0x274>
80005b90:	c1 08       	rjmp	80005bb0 <_vfprintf_r+0x284>
80005b92:	fa f9 06 b4 	ld.w	r9,sp[1716]
80005b96:	ec ca ff ff 	sub	r10,r6,-1
80005b9a:	12 36       	cp.w	r6,r9
80005b9c:	c1 f5       	brlt	80005bda <_vfprintf_r+0x2ae>
80005b9e:	c2 68       	rjmp	80005bea <_vfprintf_r+0x2be>
80005ba0:	fa ce f9 44 	sub	lr,sp,-1724
80005ba4:	10 97       	mov	r7,r8
80005ba6:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
80005baa:	f6 f0 fd 88 	ld.w	r0,r11[-632]
80005bae:	c3 58       	rjmp	80005c18 <_vfprintf_r+0x2ec>
80005bb0:	10 97       	mov	r7,r8
80005bb2:	fa c8 f9 50 	sub	r8,sp,-1712
80005bb6:	1a d8       	st.w	--sp,r8
80005bb8:	fa c8 fa b8 	sub	r8,sp,-1352
80005bbc:	1a d8       	st.w	--sp,r8
80005bbe:	fa c8 fb b4 	sub	r8,sp,-1100
80005bc2:	02 9a       	mov	r10,r1
80005bc4:	1a d8       	st.w	--sp,r8
80005bc6:	04 9c       	mov	r12,r2
80005bc8:	fa c8 f9 40 	sub	r8,sp,-1728
80005bcc:	fa c9 ff b4 	sub	r9,sp,-76
80005bd0:	f0 1f 00 2e 	mcall	80005c88 <_vfprintf_r+0x35c>
80005bd4:	2f dd       	sub	sp,-12
80005bd6:	78 00       	ld.w	r0,r12[0x0]
80005bd8:	c2 08       	rjmp	80005c18 <_vfprintf_r+0x2ec>
80005bda:	fa cc f9 44 	sub	r12,sp,-1724
80005bde:	14 96       	mov	r6,r10
80005be0:	f8 03 00 38 	add	r8,r12,r3<<0x3
80005be4:	f0 f0 fd 88 	ld.w	r0,r8[-632]
80005be8:	c1 88       	rjmp	80005c18 <_vfprintf_r+0x2ec>
80005bea:	41 08       	lddsp	r8,sp[0x40]
80005bec:	59 f9       	cp.w	r9,31
80005bee:	e0 89 00 11 	brgt	80005c10 <_vfprintf_r+0x2e4>
80005bf2:	f0 cb ff fc 	sub	r11,r8,-4
80005bf6:	51 0b       	stdsp	sp[0x40],r11
80005bf8:	70 00       	ld.w	r0,r8[0x0]
80005bfa:	fa cb f9 44 	sub	r11,sp,-1724
80005bfe:	f6 09 00 38 	add	r8,r11,r9<<0x3
80005c02:	f1 40 fd 88 	st.w	r8[-632],r0
80005c06:	2f f9       	sub	r9,-1
80005c08:	14 96       	mov	r6,r10
80005c0a:	fb 49 06 b4 	st.w	sp[1716],r9
80005c0e:	c0 58       	rjmp	80005c18 <_vfprintf_r+0x2ec>
80005c10:	70 00       	ld.w	r0,r8[0x0]
80005c12:	14 96       	mov	r6,r10
80005c14:	2f c8       	sub	r8,-4
80005c16:	51 08       	stdsp	sp[0x40],r8
80005c18:	58 00       	cp.w	r0,0
80005c1a:	fe 94 ff 78 	brge	80005b0a <_vfprintf_r+0x1de>
80005c1e:	5c 30       	neg	r0
80005c20:	a3 a5       	sbr	r5,0x2
80005c22:	c7 4b       	rjmp	80005b0a <_vfprintf_r+0x1de>
80005c24:	32 b8       	mov	r8,43
80005c26:	fb 68 06 bb 	st.b	sp[1723],r8
80005c2a:	c7 0b       	rjmp	80005b0a <_vfprintf_r+0x1de>
80005c2c:	0f 38       	ld.ub	r8,r7++
80005c2e:	e0 48 00 2a 	cp.w	r8,42
80005c32:	c0 30       	breq	80005c38 <_vfprintf_r+0x30c>
80005c34:	30 09       	mov	r9,0
80005c36:	c8 08       	rjmp	80005d36 <_vfprintf_r+0x40a>
80005c38:	0f 88       	ld.ub	r8,r7[0x0]
80005c3a:	f0 c9 00 30 	sub	r9,r8,48
80005c3e:	58 99       	cp.w	r9,9
80005c40:	e0 8b 00 26 	brhi	80005c8c <_vfprintf_r+0x360>
80005c44:	ee c4 ff ff 	sub	r4,r7,-1
80005c48:	30 0b       	mov	r11,0
80005c4a:	23 08       	sub	r8,48
80005c4c:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80005c50:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
80005c54:	09 38       	ld.ub	r8,r4++
80005c56:	f0 c9 00 30 	sub	r9,r8,48
80005c5a:	58 99       	cp.w	r9,9
80005c5c:	fe 98 ff f7 	brls	80005c4a <_vfprintf_r+0x31e>
80005c60:	e0 48 00 24 	cp.w	r8,36
80005c64:	fe 91 ff 51 	brne	80005b06 <_vfprintf_r+0x1da>
80005c68:	e0 4b 00 20 	cp.w	r11,32
80005c6c:	e0 89 0e 20 	brgt	800078ac <_vfprintf_r+0x1f80>
80005c70:	20 1b       	sub	r11,1
80005c72:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005c76:	10 3b       	cp.w	r11,r8
80005c78:	c1 15       	brlt	80005c9a <_vfprintf_r+0x36e>
80005c7a:	c1 88       	rjmp	80005caa <_vfprintf_r+0x37e>
80005c7c:	80 00       	ld.sh	r0,r0[0x0]
80005c7e:	59 0c       	cp.w	r12,16
80005c80:	80 00       	ld.sh	r0,r0[0x0]
80005c82:	ad 60       	lsl	r0,0xc
80005c84:	80 00       	ld.sh	r0,r0[0x0]
80005c86:	af 9c       	lsr	r12,0xf
80005c88:	80 00       	ld.sh	r0,r0[0x0]
80005c8a:	55 e8       	stdsp	sp[0x178],r8
80005c8c:	fa fa 06 b4 	ld.w	r10,sp[1716]
80005c90:	ec c9 ff ff 	sub	r9,r6,-1
80005c94:	14 36       	cp.w	r6,r10
80005c96:	c1 f5       	brlt	80005cd4 <_vfprintf_r+0x3a8>
80005c98:	c2 88       	rjmp	80005ce8 <_vfprintf_r+0x3bc>
80005c9a:	fa ca f9 44 	sub	r10,sp,-1724
80005c9e:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
80005ca2:	f6 fb fd 88 	ld.w	r11,r11[-632]
80005ca6:	50 2b       	stdsp	sp[0x8],r11
80005ca8:	c3 c8       	rjmp	80005d20 <_vfprintf_r+0x3f4>
80005caa:	fa c8 f9 50 	sub	r8,sp,-1712
80005cae:	1a d8       	st.w	--sp,r8
80005cb0:	fa c8 fa b8 	sub	r8,sp,-1352
80005cb4:	1a d8       	st.w	--sp,r8
80005cb6:	fa c8 fb b4 	sub	r8,sp,-1100
80005cba:	02 9a       	mov	r10,r1
80005cbc:	1a d8       	st.w	--sp,r8
80005cbe:	04 9c       	mov	r12,r2
80005cc0:	fa c8 f9 40 	sub	r8,sp,-1728
80005cc4:	fa c9 ff b4 	sub	r9,sp,-76
80005cc8:	f0 1f 01 9e 	mcall	80006340 <_vfprintf_r+0xa14>
80005ccc:	2f dd       	sub	sp,-12
80005cce:	78 0c       	ld.w	r12,r12[0x0]
80005cd0:	50 2c       	stdsp	sp[0x8],r12
80005cd2:	c2 78       	rjmp	80005d20 <_vfprintf_r+0x3f4>
80005cd4:	12 96       	mov	r6,r9
80005cd6:	0e 94       	mov	r4,r7
80005cd8:	fa c9 f9 44 	sub	r9,sp,-1724
80005cdc:	f2 03 00 38 	add	r8,r9,r3<<0x3
80005ce0:	f0 f8 fd 88 	ld.w	r8,r8[-632]
80005ce4:	50 28       	stdsp	sp[0x8],r8
80005ce6:	c1 d8       	rjmp	80005d20 <_vfprintf_r+0x3f4>
80005ce8:	41 08       	lddsp	r8,sp[0x40]
80005cea:	59 fa       	cp.w	r10,31
80005cec:	e0 89 00 14 	brgt	80005d14 <_vfprintf_r+0x3e8>
80005cf0:	f0 cb ff fc 	sub	r11,r8,-4
80005cf4:	70 08       	ld.w	r8,r8[0x0]
80005cf6:	51 0b       	stdsp	sp[0x40],r11
80005cf8:	50 28       	stdsp	sp[0x8],r8
80005cfa:	fa c6 f9 44 	sub	r6,sp,-1724
80005cfe:	40 2e       	lddsp	lr,sp[0x8]
80005d00:	ec 0a 00 38 	add	r8,r6,r10<<0x3
80005d04:	f1 4e fd 88 	st.w	r8[-632],lr
80005d08:	2f fa       	sub	r10,-1
80005d0a:	0e 94       	mov	r4,r7
80005d0c:	fb 4a 06 b4 	st.w	sp[1716],r10
80005d10:	12 96       	mov	r6,r9
80005d12:	c0 78       	rjmp	80005d20 <_vfprintf_r+0x3f4>
80005d14:	70 0c       	ld.w	r12,r8[0x0]
80005d16:	0e 94       	mov	r4,r7
80005d18:	2f c8       	sub	r8,-4
80005d1a:	50 2c       	stdsp	sp[0x8],r12
80005d1c:	12 96       	mov	r6,r9
80005d1e:	51 08       	stdsp	sp[0x40],r8
80005d20:	40 2b       	lddsp	r11,sp[0x8]
80005d22:	58 0b       	cp.w	r11,0
80005d24:	fe 95 fe ed 	brlt	80005afe <_vfprintf_r+0x1d2>
80005d28:	08 97       	mov	r7,r4
80005d2a:	cf 0a       	rjmp	80005b0a <_vfprintf_r+0x1de>
80005d2c:	f2 09 00 29 	add	r9,r9,r9<<0x2
80005d30:	0f 38       	ld.ub	r8,r7++
80005d32:	f4 09 00 19 	add	r9,r10,r9<<0x1
80005d36:	f0 ca 00 30 	sub	r10,r8,48
80005d3a:	58 9a       	cp.w	r10,9
80005d3c:	fe 98 ff f8 	brls	80005d2c <_vfprintf_r+0x400>
80005d40:	3f fa       	mov	r10,-1
80005d42:	f2 0a 0c 49 	max	r9,r9,r10
80005d46:	50 29       	stdsp	sp[0x8],r9
80005d48:	ce 4a       	rjmp	80005b10 <_vfprintf_r+0x1e4>
80005d4a:	a7 b5       	sbr	r5,0x7
80005d4c:	cd fa       	rjmp	80005b0a <_vfprintf_r+0x1de>
80005d4e:	30 09       	mov	r9,0
80005d50:	23 08       	sub	r8,48
80005d52:	f2 09 00 29 	add	r9,r9,r9<<0x2
80005d56:	f0 09 00 19 	add	r9,r8,r9<<0x1
80005d5a:	0f 38       	ld.ub	r8,r7++
80005d5c:	f0 ca 00 30 	sub	r10,r8,48
80005d60:	58 9a       	cp.w	r10,9
80005d62:	fe 98 ff f7 	brls	80005d50 <_vfprintf_r+0x424>
80005d66:	e0 48 00 24 	cp.w	r8,36
80005d6a:	fe 91 fe d2 	brne	80005b0e <_vfprintf_r+0x1e2>
80005d6e:	e0 49 00 20 	cp.w	r9,32
80005d72:	e0 89 0d 9d 	brgt	800078ac <_vfprintf_r+0x1f80>
80005d76:	f2 c3 00 01 	sub	r3,r9,1
80005d7a:	30 19       	mov	r9,1
80005d7c:	50 39       	stdsp	sp[0xc],r9
80005d7e:	cc 6a       	rjmp	80005b0a <_vfprintf_r+0x1de>
80005d80:	a3 b5       	sbr	r5,0x3
80005d82:	cc 4a       	rjmp	80005b0a <_vfprintf_r+0x1de>
80005d84:	a7 a5       	sbr	r5,0x6
80005d86:	cc 2a       	rjmp	80005b0a <_vfprintf_r+0x1de>
80005d88:	0a 98       	mov	r8,r5
80005d8a:	a5 b5       	sbr	r5,0x5
80005d8c:	a5 a8       	sbr	r8,0x4
80005d8e:	0f 89       	ld.ub	r9,r7[0x0]
80005d90:	36 ce       	mov	lr,108
80005d92:	fc 09 18 00 	cp.b	r9,lr
80005d96:	f7 b7 00 ff 	subeq	r7,-1
80005d9a:	f0 05 17 10 	movne	r5,r8
80005d9e:	cb 6a       	rjmp	80005b0a <_vfprintf_r+0x1de>
80005da0:	a5 b5       	sbr	r5,0x5
80005da2:	cb 4a       	rjmp	80005b0a <_vfprintf_r+0x1de>
80005da4:	50 a7       	stdsp	sp[0x28],r7
80005da6:	50 80       	stdsp	sp[0x20],r0
80005da8:	0c 97       	mov	r7,r6
80005daa:	10 90       	mov	r0,r8
80005dac:	06 96       	mov	r6,r3
80005dae:	04 94       	mov	r4,r2
80005db0:	40 93       	lddsp	r3,sp[0x24]
80005db2:	02 92       	mov	r2,r1
80005db4:	0e 99       	mov	r9,r7
80005db6:	40 41       	lddsp	r1,sp[0x10]
80005db8:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005dbc:	40 3c       	lddsp	r12,sp[0xc]
80005dbe:	58 0c       	cp.w	r12,0
80005dc0:	c1 d0       	breq	80005dfa <_vfprintf_r+0x4ce>
80005dc2:	10 36       	cp.w	r6,r8
80005dc4:	c0 64       	brge	80005dd0 <_vfprintf_r+0x4a4>
80005dc6:	fa cb f9 44 	sub	r11,sp,-1724
80005dca:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005dce:	c1 d8       	rjmp	80005e08 <_vfprintf_r+0x4dc>
80005dd0:	fa c8 f9 50 	sub	r8,sp,-1712
80005dd4:	1a d8       	st.w	--sp,r8
80005dd6:	fa c8 fa b8 	sub	r8,sp,-1352
80005dda:	1a d8       	st.w	--sp,r8
80005ddc:	fa c8 fb b4 	sub	r8,sp,-1100
80005de0:	1a d8       	st.w	--sp,r8
80005de2:	fa c8 f9 40 	sub	r8,sp,-1728
80005de6:	fa c9 ff b4 	sub	r9,sp,-76
80005dea:	04 9a       	mov	r10,r2
80005dec:	0c 9b       	mov	r11,r6
80005dee:	08 9c       	mov	r12,r4
80005df0:	f0 1f 01 54 	mcall	80006340 <_vfprintf_r+0xa14>
80005df4:	2f dd       	sub	sp,-12
80005df6:	19 b8       	ld.ub	r8,r12[0x3]
80005df8:	c2 28       	rjmp	80005e3c <_vfprintf_r+0x510>
80005dfa:	2f f7       	sub	r7,-1
80005dfc:	10 39       	cp.w	r9,r8
80005dfe:	c0 84       	brge	80005e0e <_vfprintf_r+0x4e2>
80005e00:	fa ca f9 44 	sub	r10,sp,-1724
80005e04:	f4 06 00 36 	add	r6,r10,r6<<0x3
80005e08:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
80005e0c:	c1 88       	rjmp	80005e3c <_vfprintf_r+0x510>
80005e0e:	41 09       	lddsp	r9,sp[0x40]
80005e10:	59 f8       	cp.w	r8,31
80005e12:	e0 89 00 12 	brgt	80005e36 <_vfprintf_r+0x50a>
80005e16:	f2 ca ff fc 	sub	r10,r9,-4
80005e1a:	51 0a       	stdsp	sp[0x40],r10
80005e1c:	72 09       	ld.w	r9,r9[0x0]
80005e1e:	fa c6 f9 44 	sub	r6,sp,-1724
80005e22:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80005e26:	2f f8       	sub	r8,-1
80005e28:	f5 49 fd 88 	st.w	r10[-632],r9
80005e2c:	fb 48 06 b4 	st.w	sp[1716],r8
80005e30:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80005e34:	c0 48       	rjmp	80005e3c <_vfprintf_r+0x510>
80005e36:	13 b8       	ld.ub	r8,r9[0x3]
80005e38:	2f c9       	sub	r9,-4
80005e3a:	51 09       	stdsp	sp[0x40],r9
80005e3c:	fb 68 06 60 	st.b	sp[1632],r8
80005e40:	30 0e       	mov	lr,0
80005e42:	30 08       	mov	r8,0
80005e44:	30 12       	mov	r2,1
80005e46:	fb 68 06 bb 	st.b	sp[1723],r8
80005e4a:	50 2e       	stdsp	sp[0x8],lr
80005e4c:	e0 8f 08 c5 	bral	80006fd6 <_vfprintf_r+0x16aa>
80005e50:	50 a7       	stdsp	sp[0x28],r7
80005e52:	50 80       	stdsp	sp[0x20],r0
80005e54:	0c 97       	mov	r7,r6
80005e56:	04 94       	mov	r4,r2
80005e58:	06 96       	mov	r6,r3
80005e5a:	02 92       	mov	r2,r1
80005e5c:	40 93       	lddsp	r3,sp[0x24]
80005e5e:	10 90       	mov	r0,r8
80005e60:	40 41       	lddsp	r1,sp[0x10]
80005e62:	a5 a5       	sbr	r5,0x4
80005e64:	c0 a8       	rjmp	80005e78 <_vfprintf_r+0x54c>
80005e66:	50 a7       	stdsp	sp[0x28],r7
80005e68:	50 80       	stdsp	sp[0x20],r0
80005e6a:	0c 97       	mov	r7,r6
80005e6c:	04 94       	mov	r4,r2
80005e6e:	06 96       	mov	r6,r3
80005e70:	02 92       	mov	r2,r1
80005e72:	40 93       	lddsp	r3,sp[0x24]
80005e74:	10 90       	mov	r0,r8
80005e76:	40 41       	lddsp	r1,sp[0x10]
80005e78:	ed b5 00 05 	bld	r5,0x5
80005e7c:	c5 11       	brne	80005f1e <_vfprintf_r+0x5f2>
80005e7e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005e82:	40 3c       	lddsp	r12,sp[0xc]
80005e84:	58 0c       	cp.w	r12,0
80005e86:	c1 e0       	breq	80005ec2 <_vfprintf_r+0x596>
80005e88:	10 36       	cp.w	r6,r8
80005e8a:	c0 64       	brge	80005e96 <_vfprintf_r+0x56a>
80005e8c:	fa cb f9 44 	sub	r11,sp,-1724
80005e90:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005e94:	c2 08       	rjmp	80005ed4 <_vfprintf_r+0x5a8>
80005e96:	fa c8 f9 50 	sub	r8,sp,-1712
80005e9a:	1a d8       	st.w	--sp,r8
80005e9c:	fa c8 fa b8 	sub	r8,sp,-1352
80005ea0:	0c 9b       	mov	r11,r6
80005ea2:	1a d8       	st.w	--sp,r8
80005ea4:	fa c8 fb b4 	sub	r8,sp,-1100
80005ea8:	1a d8       	st.w	--sp,r8
80005eaa:	fa c9 ff b4 	sub	r9,sp,-76
80005eae:	fa c8 f9 40 	sub	r8,sp,-1728
80005eb2:	04 9a       	mov	r10,r2
80005eb4:	08 9c       	mov	r12,r4
80005eb6:	f0 1f 01 23 	mcall	80006340 <_vfprintf_r+0xa14>
80005eba:	2f dd       	sub	sp,-12
80005ebc:	78 1b       	ld.w	r11,r12[0x4]
80005ebe:	78 09       	ld.w	r9,r12[0x0]
80005ec0:	c2 b8       	rjmp	80005f16 <_vfprintf_r+0x5ea>
80005ec2:	ee ca ff ff 	sub	r10,r7,-1
80005ec6:	10 37       	cp.w	r7,r8
80005ec8:	c0 b4       	brge	80005ede <_vfprintf_r+0x5b2>
80005eca:	fa c9 f9 44 	sub	r9,sp,-1724
80005ece:	14 97       	mov	r7,r10
80005ed0:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005ed4:	ec fb fd 8c 	ld.w	r11,r6[-628]
80005ed8:	ec f9 fd 88 	ld.w	r9,r6[-632]
80005edc:	c1 d8       	rjmp	80005f16 <_vfprintf_r+0x5ea>
80005ede:	41 09       	lddsp	r9,sp[0x40]
80005ee0:	59 f8       	cp.w	r8,31
80005ee2:	e0 89 00 14 	brgt	80005f0a <_vfprintf_r+0x5de>
80005ee6:	f2 cb ff f8 	sub	r11,r9,-8
80005eea:	51 0b       	stdsp	sp[0x40],r11
80005eec:	fa c6 f9 44 	sub	r6,sp,-1724
80005ef0:	72 1b       	ld.w	r11,r9[0x4]
80005ef2:	ec 08 00 3c 	add	r12,r6,r8<<0x3
80005ef6:	72 09       	ld.w	r9,r9[0x0]
80005ef8:	f9 4b fd 8c 	st.w	r12[-628],r11
80005efc:	f9 49 fd 88 	st.w	r12[-632],r9
80005f00:	2f f8       	sub	r8,-1
80005f02:	14 97       	mov	r7,r10
80005f04:	fb 48 06 b4 	st.w	sp[1716],r8
80005f08:	c0 78       	rjmp	80005f16 <_vfprintf_r+0x5ea>
80005f0a:	f2 c8 ff f8 	sub	r8,r9,-8
80005f0e:	72 1b       	ld.w	r11,r9[0x4]
80005f10:	14 97       	mov	r7,r10
80005f12:	51 08       	stdsp	sp[0x40],r8
80005f14:	72 09       	ld.w	r9,r9[0x0]
80005f16:	16 98       	mov	r8,r11
80005f18:	fa e9 00 00 	st.d	sp[0],r8
80005f1c:	ca e8       	rjmp	80006078 <_vfprintf_r+0x74c>
80005f1e:	ed b5 00 04 	bld	r5,0x4
80005f22:	c1 71       	brne	80005f50 <_vfprintf_r+0x624>
80005f24:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005f28:	40 3e       	lddsp	lr,sp[0xc]
80005f2a:	58 0e       	cp.w	lr,0
80005f2c:	c0 80       	breq	80005f3c <_vfprintf_r+0x610>
80005f2e:	10 36       	cp.w	r6,r8
80005f30:	c6 94       	brge	80006002 <_vfprintf_r+0x6d6>
80005f32:	fa cc f9 44 	sub	r12,sp,-1724
80005f36:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005f3a:	c8 28       	rjmp	8000603e <_vfprintf_r+0x712>
80005f3c:	ee ca ff ff 	sub	r10,r7,-1
80005f40:	10 37       	cp.w	r7,r8
80005f42:	e0 84 00 81 	brge	80006044 <_vfprintf_r+0x718>
80005f46:	fa cb f9 44 	sub	r11,sp,-1724
80005f4a:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005f4e:	c7 78       	rjmp	8000603c <_vfprintf_r+0x710>
80005f50:	ed b5 00 06 	bld	r5,0x6
80005f54:	c4 b1       	brne	80005fea <_vfprintf_r+0x6be>
80005f56:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005f5a:	40 3c       	lddsp	r12,sp[0xc]
80005f5c:	58 0c       	cp.w	r12,0
80005f5e:	c1 d0       	breq	80005f98 <_vfprintf_r+0x66c>
80005f60:	10 36       	cp.w	r6,r8
80005f62:	c0 64       	brge	80005f6e <_vfprintf_r+0x642>
80005f64:	fa cb f9 44 	sub	r11,sp,-1724
80005f68:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005f6c:	c1 f8       	rjmp	80005faa <_vfprintf_r+0x67e>
80005f6e:	fa c8 f9 50 	sub	r8,sp,-1712
80005f72:	1a d8       	st.w	--sp,r8
80005f74:	fa c8 fa b8 	sub	r8,sp,-1352
80005f78:	1a d8       	st.w	--sp,r8
80005f7a:	fa c8 fb b4 	sub	r8,sp,-1100
80005f7e:	1a d8       	st.w	--sp,r8
80005f80:	fa c8 f9 40 	sub	r8,sp,-1728
80005f84:	fa c9 ff b4 	sub	r9,sp,-76
80005f88:	04 9a       	mov	r10,r2
80005f8a:	0c 9b       	mov	r11,r6
80005f8c:	08 9c       	mov	r12,r4
80005f8e:	f0 1f 00 ed 	mcall	80006340 <_vfprintf_r+0xa14>
80005f92:	2f dd       	sub	sp,-12
80005f94:	98 18       	ld.sh	r8,r12[0x2]
80005f96:	c2 68       	rjmp	80005fe2 <_vfprintf_r+0x6b6>
80005f98:	ee ca ff ff 	sub	r10,r7,-1
80005f9c:	10 37       	cp.w	r7,r8
80005f9e:	c0 94       	brge	80005fb0 <_vfprintf_r+0x684>
80005fa0:	fa c9 f9 44 	sub	r9,sp,-1724
80005fa4:	14 97       	mov	r7,r10
80005fa6:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005faa:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80005fae:	c1 a8       	rjmp	80005fe2 <_vfprintf_r+0x6b6>
80005fb0:	41 09       	lddsp	r9,sp[0x40]
80005fb2:	59 f8       	cp.w	r8,31
80005fb4:	e0 89 00 13 	brgt	80005fda <_vfprintf_r+0x6ae>
80005fb8:	f2 cb ff fc 	sub	r11,r9,-4
80005fbc:	51 0b       	stdsp	sp[0x40],r11
80005fbe:	72 09       	ld.w	r9,r9[0x0]
80005fc0:	fa c6 f9 44 	sub	r6,sp,-1724
80005fc4:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80005fc8:	2f f8       	sub	r8,-1
80005fca:	f7 49 fd 88 	st.w	r11[-632],r9
80005fce:	fb 48 06 b4 	st.w	sp[1716],r8
80005fd2:	14 97       	mov	r7,r10
80005fd4:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80005fd8:	c0 58       	rjmp	80005fe2 <_vfprintf_r+0x6b6>
80005fda:	92 18       	ld.sh	r8,r9[0x2]
80005fdc:	14 97       	mov	r7,r10
80005fde:	2f c9       	sub	r9,-4
80005fe0:	51 09       	stdsp	sp[0x40],r9
80005fe2:	50 18       	stdsp	sp[0x4],r8
80005fe4:	bf 58       	asr	r8,0x1f
80005fe6:	50 08       	stdsp	sp[0x0],r8
80005fe8:	c4 88       	rjmp	80006078 <_vfprintf_r+0x74c>
80005fea:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005fee:	40 3c       	lddsp	r12,sp[0xc]
80005ff0:	58 0c       	cp.w	r12,0
80005ff2:	c1 d0       	breq	8000602c <_vfprintf_r+0x700>
80005ff4:	10 36       	cp.w	r6,r8
80005ff6:	c0 64       	brge	80006002 <_vfprintf_r+0x6d6>
80005ff8:	fa cb f9 44 	sub	r11,sp,-1724
80005ffc:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006000:	c1 f8       	rjmp	8000603e <_vfprintf_r+0x712>
80006002:	fa c8 f9 50 	sub	r8,sp,-1712
80006006:	1a d8       	st.w	--sp,r8
80006008:	fa c8 fa b8 	sub	r8,sp,-1352
8000600c:	0c 9b       	mov	r11,r6
8000600e:	1a d8       	st.w	--sp,r8
80006010:	fa c8 fb b4 	sub	r8,sp,-1100
80006014:	04 9a       	mov	r10,r2
80006016:	1a d8       	st.w	--sp,r8
80006018:	08 9c       	mov	r12,r4
8000601a:	fa c8 f9 40 	sub	r8,sp,-1728
8000601e:	fa c9 ff b4 	sub	r9,sp,-76
80006022:	f0 1f 00 c8 	mcall	80006340 <_vfprintf_r+0xa14>
80006026:	2f dd       	sub	sp,-12
80006028:	78 0b       	ld.w	r11,r12[0x0]
8000602a:	c2 48       	rjmp	80006072 <_vfprintf_r+0x746>
8000602c:	ee ca ff ff 	sub	r10,r7,-1
80006030:	10 37       	cp.w	r7,r8
80006032:	c0 94       	brge	80006044 <_vfprintf_r+0x718>
80006034:	fa c9 f9 44 	sub	r9,sp,-1724
80006038:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000603c:	14 97       	mov	r7,r10
8000603e:	ec fb fd 88 	ld.w	r11,r6[-632]
80006042:	c1 88       	rjmp	80006072 <_vfprintf_r+0x746>
80006044:	41 09       	lddsp	r9,sp[0x40]
80006046:	59 f8       	cp.w	r8,31
80006048:	e0 89 00 11 	brgt	8000606a <_vfprintf_r+0x73e>
8000604c:	f2 cb ff fc 	sub	r11,r9,-4
80006050:	51 0b       	stdsp	sp[0x40],r11
80006052:	fa c6 f9 44 	sub	r6,sp,-1724
80006056:	72 0b       	ld.w	r11,r9[0x0]
80006058:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000605c:	f3 4b fd 88 	st.w	r9[-632],r11
80006060:	2f f8       	sub	r8,-1
80006062:	14 97       	mov	r7,r10
80006064:	fb 48 06 b4 	st.w	sp[1716],r8
80006068:	c0 58       	rjmp	80006072 <_vfprintf_r+0x746>
8000606a:	72 0b       	ld.w	r11,r9[0x0]
8000606c:	14 97       	mov	r7,r10
8000606e:	2f c9       	sub	r9,-4
80006070:	51 09       	stdsp	sp[0x40],r9
80006072:	50 1b       	stdsp	sp[0x4],r11
80006074:	bf 5b       	asr	r11,0x1f
80006076:	50 0b       	stdsp	sp[0x0],r11
80006078:	fa ea 00 00 	ld.d	r10,sp[0]
8000607c:	58 0a       	cp.w	r10,0
8000607e:	5c 2b       	cpc	r11
80006080:	c0 e4       	brge	8000609c <_vfprintf_r+0x770>
80006082:	30 08       	mov	r8,0
80006084:	fa ea 00 00 	ld.d	r10,sp[0]
80006088:	30 09       	mov	r9,0
8000608a:	f0 0a 01 0a 	sub	r10,r8,r10
8000608e:	f2 0b 01 4b 	sbc	r11,r9,r11
80006092:	32 d8       	mov	r8,45
80006094:	fa eb 00 00 	st.d	sp[0],r10
80006098:	fb 68 06 bb 	st.b	sp[1723],r8
8000609c:	30 18       	mov	r8,1
8000609e:	e0 8f 07 12 	bral	80006ec2 <_vfprintf_r+0x1596>
800060a2:	50 a7       	stdsp	sp[0x28],r7
800060a4:	50 80       	stdsp	sp[0x20],r0
800060a6:	0c 97       	mov	r7,r6
800060a8:	04 94       	mov	r4,r2
800060aa:	06 96       	mov	r6,r3
800060ac:	02 92       	mov	r2,r1
800060ae:	40 93       	lddsp	r3,sp[0x24]
800060b0:	10 90       	mov	r0,r8
800060b2:	40 41       	lddsp	r1,sp[0x10]
800060b4:	0e 99       	mov	r9,r7
800060b6:	ed b5 00 03 	bld	r5,0x3
800060ba:	c4 11       	brne	8000613c <_vfprintf_r+0x810>
800060bc:	fa f8 06 b4 	ld.w	r8,sp[1716]
800060c0:	40 3a       	lddsp	r10,sp[0xc]
800060c2:	58 0a       	cp.w	r10,0
800060c4:	c1 90       	breq	800060f6 <_vfprintf_r+0x7ca>
800060c6:	10 36       	cp.w	r6,r8
800060c8:	c6 45       	brlt	80006190 <_vfprintf_r+0x864>
800060ca:	fa c8 f9 50 	sub	r8,sp,-1712
800060ce:	1a d8       	st.w	--sp,r8
800060d0:	fa c8 fa b8 	sub	r8,sp,-1352
800060d4:	1a d8       	st.w	--sp,r8
800060d6:	fa c8 fb b4 	sub	r8,sp,-1100
800060da:	0c 9b       	mov	r11,r6
800060dc:	1a d8       	st.w	--sp,r8
800060de:	04 9a       	mov	r10,r2
800060e0:	fa c8 f9 40 	sub	r8,sp,-1728
800060e4:	fa c9 ff b4 	sub	r9,sp,-76
800060e8:	08 9c       	mov	r12,r4
800060ea:	f0 1f 00 96 	mcall	80006340 <_vfprintf_r+0xa14>
800060ee:	2f dd       	sub	sp,-12
800060f0:	78 16       	ld.w	r6,r12[0x4]
800060f2:	50 76       	stdsp	sp[0x1c],r6
800060f4:	c4 88       	rjmp	80006184 <_vfprintf_r+0x858>
800060f6:	2f f7       	sub	r7,-1
800060f8:	10 39       	cp.w	r9,r8
800060fa:	c0 c4       	brge	80006112 <_vfprintf_r+0x7e6>
800060fc:	fa ce f9 44 	sub	lr,sp,-1724
80006100:	fc 06 00 36 	add	r6,lr,r6<<0x3
80006104:	ec fc fd 8c 	ld.w	r12,r6[-628]
80006108:	50 7c       	stdsp	sp[0x1c],r12
8000610a:	ec f6 fd 88 	ld.w	r6,r6[-632]
8000610e:	50 56       	stdsp	sp[0x14],r6
80006110:	c6 68       	rjmp	800061dc <_vfprintf_r+0x8b0>
80006112:	41 09       	lddsp	r9,sp[0x40]
80006114:	59 f8       	cp.w	r8,31
80006116:	e0 89 00 10 	brgt	80006136 <_vfprintf_r+0x80a>
8000611a:	f2 ca ff f8 	sub	r10,r9,-8
8000611e:	72 1b       	ld.w	r11,r9[0x4]
80006120:	51 0a       	stdsp	sp[0x40],r10
80006122:	72 09       	ld.w	r9,r9[0x0]
80006124:	fa ca f9 44 	sub	r10,sp,-1724
80006128:	50 7b       	stdsp	sp[0x1c],r11
8000612a:	50 59       	stdsp	sp[0x14],r9
8000612c:	f4 08 00 39 	add	r9,r10,r8<<0x3
80006130:	40 5b       	lddsp	r11,sp[0x14]
80006132:	40 7a       	lddsp	r10,sp[0x1c]
80006134:	c4 78       	rjmp	800061c2 <_vfprintf_r+0x896>
80006136:	72 18       	ld.w	r8,r9[0x4]
80006138:	50 78       	stdsp	sp[0x1c],r8
8000613a:	c4 c8       	rjmp	800061d2 <_vfprintf_r+0x8a6>
8000613c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006140:	40 3e       	lddsp	lr,sp[0xc]
80006142:	58 0e       	cp.w	lr,0
80006144:	c2 30       	breq	8000618a <_vfprintf_r+0x85e>
80006146:	10 36       	cp.w	r6,r8
80006148:	c0 94       	brge	8000615a <_vfprintf_r+0x82e>
8000614a:	fa cc f9 44 	sub	r12,sp,-1724
8000614e:	f8 06 00 36 	add	r6,r12,r6<<0x3
80006152:	ec fb fd 8c 	ld.w	r11,r6[-628]
80006156:	50 7b       	stdsp	sp[0x1c],r11
80006158:	cd 9b       	rjmp	8000610a <_vfprintf_r+0x7de>
8000615a:	fa c8 f9 50 	sub	r8,sp,-1712
8000615e:	1a d8       	st.w	--sp,r8
80006160:	fa c8 fa b8 	sub	r8,sp,-1352
80006164:	04 9a       	mov	r10,r2
80006166:	1a d8       	st.w	--sp,r8
80006168:	fa c8 fb b4 	sub	r8,sp,-1100
8000616c:	0c 9b       	mov	r11,r6
8000616e:	1a d8       	st.w	--sp,r8
80006170:	08 9c       	mov	r12,r4
80006172:	fa c8 f9 40 	sub	r8,sp,-1728
80006176:	fa c9 ff b4 	sub	r9,sp,-76
8000617a:	f0 1f 00 72 	mcall	80006340 <_vfprintf_r+0xa14>
8000617e:	2f dd       	sub	sp,-12
80006180:	78 1a       	ld.w	r10,r12[0x4]
80006182:	50 7a       	stdsp	sp[0x1c],r10
80006184:	78 0c       	ld.w	r12,r12[0x0]
80006186:	50 5c       	stdsp	sp[0x14],r12
80006188:	c2 a8       	rjmp	800061dc <_vfprintf_r+0x8b0>
8000618a:	2f f7       	sub	r7,-1
8000618c:	10 39       	cp.w	r9,r8
8000618e:	c0 94       	brge	800061a0 <_vfprintf_r+0x874>
80006190:	fa c9 f9 44 	sub	r9,sp,-1724
80006194:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006198:	ec f8 fd 8c 	ld.w	r8,r6[-628]
8000619c:	50 78       	stdsp	sp[0x1c],r8
8000619e:	cb 6b       	rjmp	8000610a <_vfprintf_r+0x7de>
800061a0:	41 09       	lddsp	r9,sp[0x40]
800061a2:	59 f8       	cp.w	r8,31
800061a4:	e0 89 00 15 	brgt	800061ce <_vfprintf_r+0x8a2>
800061a8:	f2 ca ff f8 	sub	r10,r9,-8
800061ac:	72 16       	ld.w	r6,r9[0x4]
800061ae:	72 09       	ld.w	r9,r9[0x0]
800061b0:	51 0a       	stdsp	sp[0x40],r10
800061b2:	50 59       	stdsp	sp[0x14],r9
800061b4:	fa ce f9 44 	sub	lr,sp,-1724
800061b8:	50 76       	stdsp	sp[0x1c],r6
800061ba:	fc 08 00 39 	add	r9,lr,r8<<0x3
800061be:	40 5b       	lddsp	r11,sp[0x14]
800061c0:	0c 9a       	mov	r10,r6
800061c2:	f2 eb fd 88 	st.d	r9[-632],r10
800061c6:	2f f8       	sub	r8,-1
800061c8:	fb 48 06 b4 	st.w	sp[1716],r8
800061cc:	c0 88       	rjmp	800061dc <_vfprintf_r+0x8b0>
800061ce:	72 1c       	ld.w	r12,r9[0x4]
800061d0:	50 7c       	stdsp	sp[0x1c],r12
800061d2:	f2 c8 ff f8 	sub	r8,r9,-8
800061d6:	51 08       	stdsp	sp[0x40],r8
800061d8:	72 09       	ld.w	r9,r9[0x0]
800061da:	50 59       	stdsp	sp[0x14],r9
800061dc:	40 5b       	lddsp	r11,sp[0x14]
800061de:	40 7a       	lddsp	r10,sp[0x1c]
800061e0:	f0 1f 00 59 	mcall	80006344 <_vfprintf_r+0xa18>
800061e4:	18 96       	mov	r6,r12
800061e6:	c1 50       	breq	80006210 <_vfprintf_r+0x8e4>
800061e8:	30 08       	mov	r8,0
800061ea:	30 09       	mov	r9,0
800061ec:	40 5b       	lddsp	r11,sp[0x14]
800061ee:	40 7a       	lddsp	r10,sp[0x1c]
800061f0:	f0 1f 00 56 	mcall	80006348 <_vfprintf_r+0xa1c>
800061f4:	c0 40       	breq	800061fc <_vfprintf_r+0x8d0>
800061f6:	32 d8       	mov	r8,45
800061f8:	fb 68 06 bb 	st.b	sp[1723],r8
800061fc:	4d 48       	lddpc	r8,8000634c <_vfprintf_r+0xa20>
800061fe:	4d 56       	lddpc	r6,80006350 <_vfprintf_r+0xa24>
80006200:	a7 d5       	cbr	r5,0x7
80006202:	e0 40 00 47 	cp.w	r0,71
80006206:	f0 06 17 a0 	movle	r6,r8
8000620a:	30 32       	mov	r2,3
8000620c:	e0 8f 06 e8 	bral	80006fdc <_vfprintf_r+0x16b0>
80006210:	40 5b       	lddsp	r11,sp[0x14]
80006212:	40 7a       	lddsp	r10,sp[0x1c]
80006214:	f0 1f 00 50 	mcall	80006354 <_vfprintf_r+0xa28>
80006218:	c0 c0       	breq	80006230 <_vfprintf_r+0x904>
8000621a:	50 26       	stdsp	sp[0x8],r6
8000621c:	4c f8       	lddpc	r8,80006358 <_vfprintf_r+0xa2c>
8000621e:	4d 06       	lddpc	r6,8000635c <_vfprintf_r+0xa30>
80006220:	a7 d5       	cbr	r5,0x7
80006222:	e0 40 00 47 	cp.w	r0,71
80006226:	f0 06 17 a0 	movle	r6,r8
8000622a:	30 32       	mov	r2,3
8000622c:	e0 8f 06 de 	bral	80006fe8 <_vfprintf_r+0x16bc>
80006230:	40 2a       	lddsp	r10,sp[0x8]
80006232:	5b fa       	cp.w	r10,-1
80006234:	c0 41       	brne	8000623c <_vfprintf_r+0x910>
80006236:	30 69       	mov	r9,6
80006238:	50 29       	stdsp	sp[0x8],r9
8000623a:	c1 18       	rjmp	8000625c <_vfprintf_r+0x930>
8000623c:	e0 40 00 47 	cp.w	r0,71
80006240:	5f 09       	sreq	r9
80006242:	e0 40 00 67 	cp.w	r0,103
80006246:	5f 08       	sreq	r8
80006248:	f3 e8 10 08 	or	r8,r9,r8
8000624c:	f8 08 18 00 	cp.b	r8,r12
80006250:	c0 60       	breq	8000625c <_vfprintf_r+0x930>
80006252:	40 28       	lddsp	r8,sp[0x8]
80006254:	58 08       	cp.w	r8,0
80006256:	f9 b8 00 01 	moveq	r8,1
8000625a:	50 28       	stdsp	sp[0x8],r8
8000625c:	40 78       	lddsp	r8,sp[0x1c]
8000625e:	40 59       	lddsp	r9,sp[0x14]
80006260:	fa e9 06 94 	st.d	sp[1684],r8
80006264:	a9 a5       	sbr	r5,0x8
80006266:	fa f8 06 94 	ld.w	r8,sp[1684]
8000626a:	58 08       	cp.w	r8,0
8000626c:	c0 65       	brlt	80006278 <_vfprintf_r+0x94c>
8000626e:	40 5e       	lddsp	lr,sp[0x14]
80006270:	30 0c       	mov	r12,0
80006272:	50 6e       	stdsp	sp[0x18],lr
80006274:	50 9c       	stdsp	sp[0x24],r12
80006276:	c0 78       	rjmp	80006284 <_vfprintf_r+0x958>
80006278:	40 5b       	lddsp	r11,sp[0x14]
8000627a:	32 da       	mov	r10,45
8000627c:	ee 1b 80 00 	eorh	r11,0x8000
80006280:	50 9a       	stdsp	sp[0x24],r10
80006282:	50 6b       	stdsp	sp[0x18],r11
80006284:	e0 40 00 46 	cp.w	r0,70
80006288:	5f 09       	sreq	r9
8000628a:	e0 40 00 66 	cp.w	r0,102
8000628e:	5f 08       	sreq	r8
80006290:	f3 e8 10 08 	or	r8,r9,r8
80006294:	50 48       	stdsp	sp[0x10],r8
80006296:	c0 40       	breq	8000629e <_vfprintf_r+0x972>
80006298:	40 22       	lddsp	r2,sp[0x8]
8000629a:	30 39       	mov	r9,3
8000629c:	c1 08       	rjmp	800062bc <_vfprintf_r+0x990>
8000629e:	e0 40 00 45 	cp.w	r0,69
800062a2:	5f 09       	sreq	r9
800062a4:	e0 40 00 65 	cp.w	r0,101
800062a8:	5f 08       	sreq	r8
800062aa:	40 22       	lddsp	r2,sp[0x8]
800062ac:	10 49       	or	r9,r8
800062ae:	2f f2       	sub	r2,-1
800062b0:	40 46       	lddsp	r6,sp[0x10]
800062b2:	ec 09 18 00 	cp.b	r9,r6
800062b6:	fb f2 00 02 	ld.weq	r2,sp[0x8]
800062ba:	30 29       	mov	r9,2
800062bc:	fa c8 f9 5c 	sub	r8,sp,-1700
800062c0:	1a d8       	st.w	--sp,r8
800062c2:	fa c8 f9 54 	sub	r8,sp,-1708
800062c6:	1a d8       	st.w	--sp,r8
800062c8:	fa c8 f9 4c 	sub	r8,sp,-1716
800062cc:	08 9c       	mov	r12,r4
800062ce:	1a d8       	st.w	--sp,r8
800062d0:	04 98       	mov	r8,r2
800062d2:	40 9b       	lddsp	r11,sp[0x24]
800062d4:	40 aa       	lddsp	r10,sp[0x28]
800062d6:	f0 1f 00 23 	mcall	80006360 <_vfprintf_r+0xa34>
800062da:	e0 40 00 47 	cp.w	r0,71
800062de:	5f 19       	srne	r9
800062e0:	e0 40 00 67 	cp.w	r0,103
800062e4:	5f 18       	srne	r8
800062e6:	18 96       	mov	r6,r12
800062e8:	2f dd       	sub	sp,-12
800062ea:	f3 e8 00 08 	and	r8,r9,r8
800062ee:	c0 41       	brne	800062f6 <_vfprintf_r+0x9ca>
800062f0:	ed b5 00 00 	bld	r5,0x0
800062f4:	c4 41       	brne	8000637c <_vfprintf_r+0xa50>
800062f6:	ec 02 00 0e 	add	lr,r6,r2
800062fa:	50 3e       	stdsp	sp[0xc],lr
800062fc:	40 4c       	lddsp	r12,sp[0x10]
800062fe:	58 0c       	cp.w	r12,0
80006300:	c1 50       	breq	8000632a <_vfprintf_r+0x9fe>
80006302:	0d 89       	ld.ub	r9,r6[0x0]
80006304:	33 08       	mov	r8,48
80006306:	f0 09 18 00 	cp.b	r9,r8
8000630a:	c0 b1       	brne	80006320 <_vfprintf_r+0x9f4>
8000630c:	30 08       	mov	r8,0
8000630e:	30 09       	mov	r9,0
80006310:	40 6b       	lddsp	r11,sp[0x18]
80006312:	40 7a       	lddsp	r10,sp[0x1c]
80006314:	f0 1f 00 14 	mcall	80006364 <_vfprintf_r+0xa38>
80006318:	fb b2 00 01 	rsubeq	r2,1
8000631c:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
80006320:	40 3b       	lddsp	r11,sp[0xc]
80006322:	fa f8 06 ac 	ld.w	r8,sp[1708]
80006326:	10 0b       	add	r11,r8
80006328:	50 3b       	stdsp	sp[0xc],r11
8000632a:	40 6b       	lddsp	r11,sp[0x18]
8000632c:	30 08       	mov	r8,0
8000632e:	30 09       	mov	r9,0
80006330:	40 7a       	lddsp	r10,sp[0x1c]
80006332:	f0 1f 00 0d 	mcall	80006364 <_vfprintf_r+0xa38>
80006336:	c1 d0       	breq	80006370 <_vfprintf_r+0xa44>
80006338:	40 3a       	lddsp	r10,sp[0xc]
8000633a:	fb 4a 06 a4 	st.w	sp[1700],r10
8000633e:	c1 98       	rjmp	80006370 <_vfprintf_r+0xa44>
80006340:	80 00       	ld.sh	r0,r0[0x0]
80006342:	55 e8       	stdsp	sp[0x178],r8
80006344:	80 00       	ld.sh	r0,r0[0x0]
80006346:	98 48       	ld.sh	r8,r12[0x8]
80006348:	80 00       	ld.sh	r0,r0[0x0]
8000634a:	a1 80       	lsr	r0,0x0
8000634c:	80 00       	ld.sh	r0,r0[0x0]
8000634e:	af b0       	sbr	r0,0xf
80006350:	80 00       	ld.sh	r0,r0[0x0]
80006352:	af b4       	sbr	r4,0xf
80006354:	80 00       	ld.sh	r0,r0[0x0]
80006356:	98 72       	ld.sh	r2,r12[0xe]
80006358:	80 00       	ld.sh	r0,r0[0x0]
8000635a:	af b8       	sbr	r8,0xf
8000635c:	80 00       	ld.sh	r0,r0[0x0]
8000635e:	af bc       	sbr	r12,0xf
80006360:	80 00       	ld.sh	r0,r0[0x0]
80006362:	7c 54       	ld.w	r4,lr[0x14]
80006364:	80 00       	ld.sh	r0,r0[0x0]
80006366:	a0 f2       	st.b	r0[0x7],r2
80006368:	10 c9       	st.b	r8++,r9
8000636a:	fb 48 06 a4 	st.w	sp[1700],r8
8000636e:	c0 28       	rjmp	80006372 <_vfprintf_r+0xa46>
80006370:	33 09       	mov	r9,48
80006372:	fa f8 06 a4 	ld.w	r8,sp[1700]
80006376:	40 3e       	lddsp	lr,sp[0xc]
80006378:	1c 38       	cp.w	r8,lr
8000637a:	cf 73       	brcs	80006368 <_vfprintf_r+0xa3c>
8000637c:	e0 40 00 47 	cp.w	r0,71
80006380:	5f 09       	sreq	r9
80006382:	e0 40 00 67 	cp.w	r0,103
80006386:	5f 08       	sreq	r8
80006388:	f3 e8 10 08 	or	r8,r9,r8
8000638c:	fa f9 06 a4 	ld.w	r9,sp[1700]
80006390:	0c 19       	sub	r9,r6
80006392:	50 69       	stdsp	sp[0x18],r9
80006394:	58 08       	cp.w	r8,0
80006396:	c0 b0       	breq	800063ac <_vfprintf_r+0xa80>
80006398:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000639c:	5b d8       	cp.w	r8,-3
8000639e:	c0 55       	brlt	800063a8 <_vfprintf_r+0xa7c>
800063a0:	40 2c       	lddsp	r12,sp[0x8]
800063a2:	18 38       	cp.w	r8,r12
800063a4:	e0 8a 00 6a 	brle	80006478 <_vfprintf_r+0xb4c>
800063a8:	20 20       	sub	r0,2
800063aa:	c0 58       	rjmp	800063b4 <_vfprintf_r+0xa88>
800063ac:	e0 40 00 65 	cp.w	r0,101
800063b0:	e0 89 00 46 	brgt	8000643c <_vfprintf_r+0xb10>
800063b4:	fa fb 06 ac 	ld.w	r11,sp[1708]
800063b8:	fb 60 06 9c 	st.b	sp[1692],r0
800063bc:	20 1b       	sub	r11,1
800063be:	fb 4b 06 ac 	st.w	sp[1708],r11
800063c2:	c0 47       	brpl	800063ca <_vfprintf_r+0xa9e>
800063c4:	5c 3b       	neg	r11
800063c6:	32 d8       	mov	r8,45
800063c8:	c0 28       	rjmp	800063cc <_vfprintf_r+0xaa0>
800063ca:	32 b8       	mov	r8,43
800063cc:	fb 68 06 9d 	st.b	sp[1693],r8
800063d0:	58 9b       	cp.w	r11,9
800063d2:	e0 8a 00 1d 	brle	8000640c <_vfprintf_r+0xae0>
800063d6:	fa c9 fa 35 	sub	r9,sp,-1483
800063da:	30 aa       	mov	r10,10
800063dc:	12 98       	mov	r8,r9
800063de:	0e 9c       	mov	r12,r7
800063e0:	0c 92       	mov	r2,r6
800063e2:	f6 0a 0c 06 	divs	r6,r11,r10
800063e6:	0e 9b       	mov	r11,r7
800063e8:	2d 0b       	sub	r11,-48
800063ea:	10 fb       	st.b	--r8,r11
800063ec:	0c 9b       	mov	r11,r6
800063ee:	58 96       	cp.w	r6,9
800063f0:	fe 99 ff f9 	brgt	800063e2 <_vfprintf_r+0xab6>
800063f4:	2d 0b       	sub	r11,-48
800063f6:	18 97       	mov	r7,r12
800063f8:	04 96       	mov	r6,r2
800063fa:	10 fb       	st.b	--r8,r11
800063fc:	fa ca f9 62 	sub	r10,sp,-1694
80006400:	c0 38       	rjmp	80006406 <_vfprintf_r+0xada>
80006402:	11 3b       	ld.ub	r11,r8++
80006404:	14 cb       	st.b	r10++,r11
80006406:	12 38       	cp.w	r8,r9
80006408:	cf d3       	brcs	80006402 <_vfprintf_r+0xad6>
8000640a:	c0 98       	rjmp	8000641c <_vfprintf_r+0xaf0>
8000640c:	2d 0b       	sub	r11,-48
8000640e:	33 08       	mov	r8,48
80006410:	fb 6b 06 9f 	st.b	sp[1695],r11
80006414:	fb 68 06 9e 	st.b	sp[1694],r8
80006418:	fa ca f9 60 	sub	r10,sp,-1696
8000641c:	fa c8 f9 64 	sub	r8,sp,-1692
80006420:	f4 08 01 08 	sub	r8,r10,r8
80006424:	50 e8       	stdsp	sp[0x38],r8
80006426:	10 92       	mov	r2,r8
80006428:	40 6b       	lddsp	r11,sp[0x18]
8000642a:	16 02       	add	r2,r11
8000642c:	58 1b       	cp.w	r11,1
8000642e:	e0 89 00 05 	brgt	80006438 <_vfprintf_r+0xb0c>
80006432:	ed b5 00 00 	bld	r5,0x0
80006436:	c3 51       	brne	800064a0 <_vfprintf_r+0xb74>
80006438:	2f f2       	sub	r2,-1
8000643a:	c3 38       	rjmp	800064a0 <_vfprintf_r+0xb74>
8000643c:	e0 40 00 66 	cp.w	r0,102
80006440:	c1 c1       	brne	80006478 <_vfprintf_r+0xb4c>
80006442:	fa f2 06 ac 	ld.w	r2,sp[1708]
80006446:	58 02       	cp.w	r2,0
80006448:	e0 8a 00 0c 	brle	80006460 <_vfprintf_r+0xb34>
8000644c:	40 2a       	lddsp	r10,sp[0x8]
8000644e:	58 0a       	cp.w	r10,0
80006450:	c0 41       	brne	80006458 <_vfprintf_r+0xb2c>
80006452:	ed b5 00 00 	bld	r5,0x0
80006456:	c2 51       	brne	800064a0 <_vfprintf_r+0xb74>
80006458:	2f f2       	sub	r2,-1
8000645a:	40 29       	lddsp	r9,sp[0x8]
8000645c:	12 02       	add	r2,r9
8000645e:	c0 b8       	rjmp	80006474 <_vfprintf_r+0xb48>
80006460:	40 28       	lddsp	r8,sp[0x8]
80006462:	58 08       	cp.w	r8,0
80006464:	c0 61       	brne	80006470 <_vfprintf_r+0xb44>
80006466:	ed b5 00 00 	bld	r5,0x0
8000646a:	c0 30       	breq	80006470 <_vfprintf_r+0xb44>
8000646c:	30 12       	mov	r2,1
8000646e:	c1 98       	rjmp	800064a0 <_vfprintf_r+0xb74>
80006470:	40 22       	lddsp	r2,sp[0x8]
80006472:	2f e2       	sub	r2,-2
80006474:	36 60       	mov	r0,102
80006476:	c1 58       	rjmp	800064a0 <_vfprintf_r+0xb74>
80006478:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000647c:	40 6e       	lddsp	lr,sp[0x18]
8000647e:	1c 32       	cp.w	r2,lr
80006480:	c0 65       	brlt	8000648c <_vfprintf_r+0xb60>
80006482:	ed b5 00 00 	bld	r5,0x0
80006486:	f7 b2 00 ff 	subeq	r2,-1
8000648a:	c0 a8       	rjmp	8000649e <_vfprintf_r+0xb72>
8000648c:	e4 08 11 02 	rsub	r8,r2,2
80006490:	40 6c       	lddsp	r12,sp[0x18]
80006492:	58 02       	cp.w	r2,0
80006494:	f0 02 17 a0 	movle	r2,r8
80006498:	f9 b2 09 01 	movgt	r2,1
8000649c:	18 02       	add	r2,r12
8000649e:	36 70       	mov	r0,103
800064a0:	40 9b       	lddsp	r11,sp[0x24]
800064a2:	58 0b       	cp.w	r11,0
800064a4:	e0 80 05 9c 	breq	80006fdc <_vfprintf_r+0x16b0>
800064a8:	32 d8       	mov	r8,45
800064aa:	fb 68 06 bb 	st.b	sp[1723],r8
800064ae:	e0 8f 05 9b 	bral	80006fe4 <_vfprintf_r+0x16b8>
800064b2:	50 a7       	stdsp	sp[0x28],r7
800064b4:	04 94       	mov	r4,r2
800064b6:	0c 97       	mov	r7,r6
800064b8:	02 92       	mov	r2,r1
800064ba:	06 96       	mov	r6,r3
800064bc:	40 41       	lddsp	r1,sp[0x10]
800064be:	40 93       	lddsp	r3,sp[0x24]
800064c0:	0e 99       	mov	r9,r7
800064c2:	ed b5 00 05 	bld	r5,0x5
800064c6:	c4 81       	brne	80006556 <_vfprintf_r+0xc2a>
800064c8:	fa f8 06 b4 	ld.w	r8,sp[1716]
800064cc:	40 3e       	lddsp	lr,sp[0xc]
800064ce:	58 0e       	cp.w	lr,0
800064d0:	c1 d0       	breq	8000650a <_vfprintf_r+0xbde>
800064d2:	10 36       	cp.w	r6,r8
800064d4:	c0 64       	brge	800064e0 <_vfprintf_r+0xbb4>
800064d6:	fa cc f9 44 	sub	r12,sp,-1724
800064da:	f8 06 00 36 	add	r6,r12,r6<<0x3
800064de:	c1 d8       	rjmp	80006518 <_vfprintf_r+0xbec>
800064e0:	fa c8 f9 50 	sub	r8,sp,-1712
800064e4:	1a d8       	st.w	--sp,r8
800064e6:	fa c8 fa b8 	sub	r8,sp,-1352
800064ea:	04 9a       	mov	r10,r2
800064ec:	1a d8       	st.w	--sp,r8
800064ee:	fa c8 fb b4 	sub	r8,sp,-1100
800064f2:	0c 9b       	mov	r11,r6
800064f4:	1a d8       	st.w	--sp,r8
800064f6:	08 9c       	mov	r12,r4
800064f8:	fa c8 f9 40 	sub	r8,sp,-1728
800064fc:	fa c9 ff b4 	sub	r9,sp,-76
80006500:	f0 1f 01 5f 	mcall	80006a7c <_vfprintf_r+0x1150>
80006504:	2f dd       	sub	sp,-12
80006506:	78 0a       	ld.w	r10,r12[0x0]
80006508:	c2 08       	rjmp	80006548 <_vfprintf_r+0xc1c>
8000650a:	2f f7       	sub	r7,-1
8000650c:	10 39       	cp.w	r9,r8
8000650e:	c0 84       	brge	8000651e <_vfprintf_r+0xbf2>
80006510:	fa cb f9 44 	sub	r11,sp,-1724
80006514:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006518:	ec fa fd 88 	ld.w	r10,r6[-632]
8000651c:	c1 68       	rjmp	80006548 <_vfprintf_r+0xc1c>
8000651e:	41 09       	lddsp	r9,sp[0x40]
80006520:	59 f8       	cp.w	r8,31
80006522:	e0 89 00 10 	brgt	80006542 <_vfprintf_r+0xc16>
80006526:	f2 ca ff fc 	sub	r10,r9,-4
8000652a:	51 0a       	stdsp	sp[0x40],r10
8000652c:	fa c6 f9 44 	sub	r6,sp,-1724
80006530:	72 0a       	ld.w	r10,r9[0x0]
80006532:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006536:	f3 4a fd 88 	st.w	r9[-632],r10
8000653a:	2f f8       	sub	r8,-1
8000653c:	fb 48 06 b4 	st.w	sp[1716],r8
80006540:	c0 48       	rjmp	80006548 <_vfprintf_r+0xc1c>
80006542:	72 0a       	ld.w	r10,r9[0x0]
80006544:	2f c9       	sub	r9,-4
80006546:	51 09       	stdsp	sp[0x40],r9
80006548:	40 be       	lddsp	lr,sp[0x2c]
8000654a:	1c 98       	mov	r8,lr
8000654c:	95 1e       	st.w	r10[0x4],lr
8000654e:	bf 58       	asr	r8,0x1f
80006550:	95 08       	st.w	r10[0x0],r8
80006552:	fe 9f fa 79 	bral	80005a44 <_vfprintf_r+0x118>
80006556:	ed b5 00 04 	bld	r5,0x4
8000655a:	c4 80       	breq	800065ea <_vfprintf_r+0xcbe>
8000655c:	e2 15 00 40 	andl	r5,0x40,COH
80006560:	c4 50       	breq	800065ea <_vfprintf_r+0xcbe>
80006562:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006566:	40 3c       	lddsp	r12,sp[0xc]
80006568:	58 0c       	cp.w	r12,0
8000656a:	c1 d0       	breq	800065a4 <_vfprintf_r+0xc78>
8000656c:	10 36       	cp.w	r6,r8
8000656e:	c0 64       	brge	8000657a <_vfprintf_r+0xc4e>
80006570:	fa cb f9 44 	sub	r11,sp,-1724
80006574:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006578:	c1 d8       	rjmp	800065b2 <_vfprintf_r+0xc86>
8000657a:	fa c8 f9 50 	sub	r8,sp,-1712
8000657e:	1a d8       	st.w	--sp,r8
80006580:	fa c8 fa b8 	sub	r8,sp,-1352
80006584:	04 9a       	mov	r10,r2
80006586:	1a d8       	st.w	--sp,r8
80006588:	fa c8 fb b4 	sub	r8,sp,-1100
8000658c:	0c 9b       	mov	r11,r6
8000658e:	1a d8       	st.w	--sp,r8
80006590:	08 9c       	mov	r12,r4
80006592:	fa c8 f9 40 	sub	r8,sp,-1728
80006596:	fa c9 ff b4 	sub	r9,sp,-76
8000659a:	f0 1f 01 39 	mcall	80006a7c <_vfprintf_r+0x1150>
8000659e:	2f dd       	sub	sp,-12
800065a0:	78 0a       	ld.w	r10,r12[0x0]
800065a2:	c2 08       	rjmp	800065e2 <_vfprintf_r+0xcb6>
800065a4:	2f f7       	sub	r7,-1
800065a6:	10 39       	cp.w	r9,r8
800065a8:	c0 84       	brge	800065b8 <_vfprintf_r+0xc8c>
800065aa:	fa ca f9 44 	sub	r10,sp,-1724
800065ae:	f4 06 00 36 	add	r6,r10,r6<<0x3
800065b2:	ec fa fd 88 	ld.w	r10,r6[-632]
800065b6:	c1 68       	rjmp	800065e2 <_vfprintf_r+0xcb6>
800065b8:	41 09       	lddsp	r9,sp[0x40]
800065ba:	59 f8       	cp.w	r8,31
800065bc:	e0 89 00 10 	brgt	800065dc <_vfprintf_r+0xcb0>
800065c0:	f2 ca ff fc 	sub	r10,r9,-4
800065c4:	51 0a       	stdsp	sp[0x40],r10
800065c6:	fa c6 f9 44 	sub	r6,sp,-1724
800065ca:	72 0a       	ld.w	r10,r9[0x0]
800065cc:	ec 08 00 39 	add	r9,r6,r8<<0x3
800065d0:	f3 4a fd 88 	st.w	r9[-632],r10
800065d4:	2f f8       	sub	r8,-1
800065d6:	fb 48 06 b4 	st.w	sp[1716],r8
800065da:	c0 48       	rjmp	800065e2 <_vfprintf_r+0xcb6>
800065dc:	72 0a       	ld.w	r10,r9[0x0]
800065de:	2f c9       	sub	r9,-4
800065e0:	51 09       	stdsp	sp[0x40],r9
800065e2:	40 be       	lddsp	lr,sp[0x2c]
800065e4:	b4 0e       	st.h	r10[0x0],lr
800065e6:	fe 9f fa 2f 	bral	80005a44 <_vfprintf_r+0x118>
800065ea:	fa f8 06 b4 	ld.w	r8,sp[1716]
800065ee:	40 3c       	lddsp	r12,sp[0xc]
800065f0:	58 0c       	cp.w	r12,0
800065f2:	c1 d0       	breq	8000662c <_vfprintf_r+0xd00>
800065f4:	10 36       	cp.w	r6,r8
800065f6:	c0 64       	brge	80006602 <_vfprintf_r+0xcd6>
800065f8:	fa cb f9 44 	sub	r11,sp,-1724
800065fc:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006600:	c1 d8       	rjmp	8000663a <_vfprintf_r+0xd0e>
80006602:	fa c8 f9 50 	sub	r8,sp,-1712
80006606:	1a d8       	st.w	--sp,r8
80006608:	fa c8 fa b8 	sub	r8,sp,-1352
8000660c:	04 9a       	mov	r10,r2
8000660e:	1a d8       	st.w	--sp,r8
80006610:	fa c8 fb b4 	sub	r8,sp,-1100
80006614:	0c 9b       	mov	r11,r6
80006616:	1a d8       	st.w	--sp,r8
80006618:	08 9c       	mov	r12,r4
8000661a:	fa c8 f9 40 	sub	r8,sp,-1728
8000661e:	fa c9 ff b4 	sub	r9,sp,-76
80006622:	f0 1f 01 17 	mcall	80006a7c <_vfprintf_r+0x1150>
80006626:	2f dd       	sub	sp,-12
80006628:	78 0a       	ld.w	r10,r12[0x0]
8000662a:	c2 08       	rjmp	8000666a <_vfprintf_r+0xd3e>
8000662c:	2f f7       	sub	r7,-1
8000662e:	10 39       	cp.w	r9,r8
80006630:	c0 84       	brge	80006640 <_vfprintf_r+0xd14>
80006632:	fa ca f9 44 	sub	r10,sp,-1724
80006636:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000663a:	ec fa fd 88 	ld.w	r10,r6[-632]
8000663e:	c1 68       	rjmp	8000666a <_vfprintf_r+0xd3e>
80006640:	41 09       	lddsp	r9,sp[0x40]
80006642:	59 f8       	cp.w	r8,31
80006644:	e0 89 00 10 	brgt	80006664 <_vfprintf_r+0xd38>
80006648:	f2 ca ff fc 	sub	r10,r9,-4
8000664c:	51 0a       	stdsp	sp[0x40],r10
8000664e:	fa c6 f9 44 	sub	r6,sp,-1724
80006652:	72 0a       	ld.w	r10,r9[0x0]
80006654:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006658:	f3 4a fd 88 	st.w	r9[-632],r10
8000665c:	2f f8       	sub	r8,-1
8000665e:	fb 48 06 b4 	st.w	sp[1716],r8
80006662:	c0 48       	rjmp	8000666a <_vfprintf_r+0xd3e>
80006664:	72 0a       	ld.w	r10,r9[0x0]
80006666:	2f c9       	sub	r9,-4
80006668:	51 09       	stdsp	sp[0x40],r9
8000666a:	40 be       	lddsp	lr,sp[0x2c]
8000666c:	95 0e       	st.w	r10[0x0],lr
8000666e:	fe 9f f9 eb 	bral	80005a44 <_vfprintf_r+0x118>
80006672:	50 a7       	stdsp	sp[0x28],r7
80006674:	50 80       	stdsp	sp[0x20],r0
80006676:	0c 97       	mov	r7,r6
80006678:	04 94       	mov	r4,r2
8000667a:	06 96       	mov	r6,r3
8000667c:	02 92       	mov	r2,r1
8000667e:	40 93       	lddsp	r3,sp[0x24]
80006680:	10 90       	mov	r0,r8
80006682:	40 41       	lddsp	r1,sp[0x10]
80006684:	a5 a5       	sbr	r5,0x4
80006686:	c0 a8       	rjmp	8000669a <_vfprintf_r+0xd6e>
80006688:	50 a7       	stdsp	sp[0x28],r7
8000668a:	50 80       	stdsp	sp[0x20],r0
8000668c:	0c 97       	mov	r7,r6
8000668e:	04 94       	mov	r4,r2
80006690:	06 96       	mov	r6,r3
80006692:	02 92       	mov	r2,r1
80006694:	40 93       	lddsp	r3,sp[0x24]
80006696:	10 90       	mov	r0,r8
80006698:	40 41       	lddsp	r1,sp[0x10]
8000669a:	ed b5 00 05 	bld	r5,0x5
8000669e:	c5 d1       	brne	80006758 <_vfprintf_r+0xe2c>
800066a0:	fa f8 06 b4 	ld.w	r8,sp[1716]
800066a4:	40 3c       	lddsp	r12,sp[0xc]
800066a6:	58 0c       	cp.w	r12,0
800066a8:	c2 60       	breq	800066f4 <_vfprintf_r+0xdc8>
800066aa:	10 36       	cp.w	r6,r8
800066ac:	c0 a4       	brge	800066c0 <_vfprintf_r+0xd94>
800066ae:	fa cb f9 44 	sub	r11,sp,-1724
800066b2:	f6 06 00 36 	add	r6,r11,r6<<0x3
800066b6:	ec e8 fd 88 	ld.d	r8,r6[-632]
800066ba:	fa e9 00 00 	st.d	sp[0],r8
800066be:	c1 88       	rjmp	800066ee <_vfprintf_r+0xdc2>
800066c0:	fa c8 f9 50 	sub	r8,sp,-1712
800066c4:	1a d8       	st.w	--sp,r8
800066c6:	fa c8 fa b8 	sub	r8,sp,-1352
800066ca:	04 9a       	mov	r10,r2
800066cc:	1a d8       	st.w	--sp,r8
800066ce:	0c 9b       	mov	r11,r6
800066d0:	fa c8 fb b4 	sub	r8,sp,-1100
800066d4:	08 9c       	mov	r12,r4
800066d6:	1a d8       	st.w	--sp,r8
800066d8:	fa c8 f9 40 	sub	r8,sp,-1728
800066dc:	fa c9 ff b4 	sub	r9,sp,-76
800066e0:	f0 1f 00 e7 	mcall	80006a7c <_vfprintf_r+0x1150>
800066e4:	2f dd       	sub	sp,-12
800066e6:	f8 ea 00 00 	ld.d	r10,r12[0]
800066ea:	fa eb 00 00 	st.d	sp[0],r10
800066ee:	30 08       	mov	r8,0
800066f0:	e0 8f 03 e6 	bral	80006ebc <_vfprintf_r+0x1590>
800066f4:	ee ca ff ff 	sub	r10,r7,-1
800066f8:	10 37       	cp.w	r7,r8
800066fa:	c0 b4       	brge	80006710 <_vfprintf_r+0xde4>
800066fc:	fa c9 f9 44 	sub	r9,sp,-1724
80006700:	14 97       	mov	r7,r10
80006702:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006706:	ec ea fd 88 	ld.d	r10,r6[-632]
8000670a:	fa eb 00 00 	st.d	sp[0],r10
8000670e:	c1 88       	rjmp	8000673e <_vfprintf_r+0xe12>
80006710:	41 09       	lddsp	r9,sp[0x40]
80006712:	59 f8       	cp.w	r8,31
80006714:	e0 89 00 18 	brgt	80006744 <_vfprintf_r+0xe18>
80006718:	f2 e6 00 00 	ld.d	r6,r9[0]
8000671c:	f2 cb ff f8 	sub	r11,r9,-8
80006720:	fa e7 00 00 	st.d	sp[0],r6
80006724:	51 0b       	stdsp	sp[0x40],r11
80006726:	fa c6 f9 44 	sub	r6,sp,-1724
8000672a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000672e:	fa e6 00 00 	ld.d	r6,sp[0]
80006732:	f2 e7 fd 88 	st.d	r9[-632],r6
80006736:	2f f8       	sub	r8,-1
80006738:	14 97       	mov	r7,r10
8000673a:	fb 48 06 b4 	st.w	sp[1716],r8
8000673e:	40 38       	lddsp	r8,sp[0xc]
80006740:	e0 8f 03 be 	bral	80006ebc <_vfprintf_r+0x1590>
80006744:	f2 e6 00 00 	ld.d	r6,r9[0]
80006748:	40 38       	lddsp	r8,sp[0xc]
8000674a:	fa e7 00 00 	st.d	sp[0],r6
8000674e:	2f 89       	sub	r9,-8
80006750:	14 97       	mov	r7,r10
80006752:	51 09       	stdsp	sp[0x40],r9
80006754:	e0 8f 03 b4 	bral	80006ebc <_vfprintf_r+0x1590>
80006758:	ed b5 00 04 	bld	r5,0x4
8000675c:	c1 61       	brne	80006788 <_vfprintf_r+0xe5c>
8000675e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006762:	40 3e       	lddsp	lr,sp[0xc]
80006764:	58 0e       	cp.w	lr,0
80006766:	c0 80       	breq	80006776 <_vfprintf_r+0xe4a>
80006768:	10 36       	cp.w	r6,r8
8000676a:	c6 74       	brge	80006838 <_vfprintf_r+0xf0c>
8000676c:	fa cc f9 44 	sub	r12,sp,-1724
80006770:	f8 06 00 36 	add	r6,r12,r6<<0x3
80006774:	c8 08       	rjmp	80006874 <_vfprintf_r+0xf48>
80006776:	ee ca ff ff 	sub	r10,r7,-1
8000677a:	10 37       	cp.w	r7,r8
8000677c:	c7 f4       	brge	8000687a <_vfprintf_r+0xf4e>
8000677e:	fa cb f9 44 	sub	r11,sp,-1724
80006782:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006786:	c7 68       	rjmp	80006872 <_vfprintf_r+0xf46>
80006788:	ed b5 00 06 	bld	r5,0x6
8000678c:	c4 a1       	brne	80006820 <_vfprintf_r+0xef4>
8000678e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006792:	40 3c       	lddsp	r12,sp[0xc]
80006794:	58 0c       	cp.w	r12,0
80006796:	c1 d0       	breq	800067d0 <_vfprintf_r+0xea4>
80006798:	10 36       	cp.w	r6,r8
8000679a:	c0 64       	brge	800067a6 <_vfprintf_r+0xe7a>
8000679c:	fa cb f9 44 	sub	r11,sp,-1724
800067a0:	f6 06 00 36 	add	r6,r11,r6<<0x3
800067a4:	c1 f8       	rjmp	800067e2 <_vfprintf_r+0xeb6>
800067a6:	fa c8 f9 50 	sub	r8,sp,-1712
800067aa:	1a d8       	st.w	--sp,r8
800067ac:	fa c8 fa b8 	sub	r8,sp,-1352
800067b0:	1a d8       	st.w	--sp,r8
800067b2:	fa c8 fb b4 	sub	r8,sp,-1100
800067b6:	1a d8       	st.w	--sp,r8
800067b8:	fa c8 f9 40 	sub	r8,sp,-1728
800067bc:	fa c9 ff b4 	sub	r9,sp,-76
800067c0:	04 9a       	mov	r10,r2
800067c2:	0c 9b       	mov	r11,r6
800067c4:	08 9c       	mov	r12,r4
800067c6:	f0 1f 00 ae 	mcall	80006a7c <_vfprintf_r+0x1150>
800067ca:	2f dd       	sub	sp,-12
800067cc:	98 18       	ld.sh	r8,r12[0x2]
800067ce:	c2 68       	rjmp	8000681a <_vfprintf_r+0xeee>
800067d0:	ee ca ff ff 	sub	r10,r7,-1
800067d4:	10 37       	cp.w	r7,r8
800067d6:	c0 94       	brge	800067e8 <_vfprintf_r+0xebc>
800067d8:	fa c9 f9 44 	sub	r9,sp,-1724
800067dc:	14 97       	mov	r7,r10
800067de:	f2 06 00 36 	add	r6,r9,r6<<0x3
800067e2:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800067e6:	c1 a8       	rjmp	8000681a <_vfprintf_r+0xeee>
800067e8:	41 09       	lddsp	r9,sp[0x40]
800067ea:	59 f8       	cp.w	r8,31
800067ec:	e0 89 00 13 	brgt	80006812 <_vfprintf_r+0xee6>
800067f0:	f2 cb ff fc 	sub	r11,r9,-4
800067f4:	51 0b       	stdsp	sp[0x40],r11
800067f6:	72 09       	ld.w	r9,r9[0x0]
800067f8:	fa c6 f9 44 	sub	r6,sp,-1724
800067fc:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80006800:	2f f8       	sub	r8,-1
80006802:	f7 49 fd 88 	st.w	r11[-632],r9
80006806:	fb 48 06 b4 	st.w	sp[1716],r8
8000680a:	14 97       	mov	r7,r10
8000680c:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80006810:	c0 58       	rjmp	8000681a <_vfprintf_r+0xeee>
80006812:	92 18       	ld.sh	r8,r9[0x2]
80006814:	14 97       	mov	r7,r10
80006816:	2f c9       	sub	r9,-4
80006818:	51 09       	stdsp	sp[0x40],r9
8000681a:	5c 78       	castu.h	r8
8000681c:	50 18       	stdsp	sp[0x4],r8
8000681e:	c4 68       	rjmp	800068aa <_vfprintf_r+0xf7e>
80006820:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006824:	40 3c       	lddsp	r12,sp[0xc]
80006826:	58 0c       	cp.w	r12,0
80006828:	c1 d0       	breq	80006862 <_vfprintf_r+0xf36>
8000682a:	10 36       	cp.w	r6,r8
8000682c:	c0 64       	brge	80006838 <_vfprintf_r+0xf0c>
8000682e:	fa cb f9 44 	sub	r11,sp,-1724
80006832:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006836:	c1 f8       	rjmp	80006874 <_vfprintf_r+0xf48>
80006838:	fa c8 f9 50 	sub	r8,sp,-1712
8000683c:	1a d8       	st.w	--sp,r8
8000683e:	fa c8 fa b8 	sub	r8,sp,-1352
80006842:	0c 9b       	mov	r11,r6
80006844:	1a d8       	st.w	--sp,r8
80006846:	fa c8 fb b4 	sub	r8,sp,-1100
8000684a:	04 9a       	mov	r10,r2
8000684c:	1a d8       	st.w	--sp,r8
8000684e:	08 9c       	mov	r12,r4
80006850:	fa c8 f9 40 	sub	r8,sp,-1728
80006854:	fa c9 ff b4 	sub	r9,sp,-76
80006858:	f0 1f 00 89 	mcall	80006a7c <_vfprintf_r+0x1150>
8000685c:	2f dd       	sub	sp,-12
8000685e:	78 0b       	ld.w	r11,r12[0x0]
80006860:	c2 48       	rjmp	800068a8 <_vfprintf_r+0xf7c>
80006862:	ee ca ff ff 	sub	r10,r7,-1
80006866:	10 37       	cp.w	r7,r8
80006868:	c0 94       	brge	8000687a <_vfprintf_r+0xf4e>
8000686a:	fa c9 f9 44 	sub	r9,sp,-1724
8000686e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006872:	14 97       	mov	r7,r10
80006874:	ec fb fd 88 	ld.w	r11,r6[-632]
80006878:	c1 88       	rjmp	800068a8 <_vfprintf_r+0xf7c>
8000687a:	41 09       	lddsp	r9,sp[0x40]
8000687c:	59 f8       	cp.w	r8,31
8000687e:	e0 89 00 11 	brgt	800068a0 <_vfprintf_r+0xf74>
80006882:	f2 cb ff fc 	sub	r11,r9,-4
80006886:	51 0b       	stdsp	sp[0x40],r11
80006888:	fa c6 f9 44 	sub	r6,sp,-1724
8000688c:	72 0b       	ld.w	r11,r9[0x0]
8000688e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006892:	f3 4b fd 88 	st.w	r9[-632],r11
80006896:	2f f8       	sub	r8,-1
80006898:	14 97       	mov	r7,r10
8000689a:	fb 48 06 b4 	st.w	sp[1716],r8
8000689e:	c0 58       	rjmp	800068a8 <_vfprintf_r+0xf7c>
800068a0:	72 0b       	ld.w	r11,r9[0x0]
800068a2:	14 97       	mov	r7,r10
800068a4:	2f c9       	sub	r9,-4
800068a6:	51 09       	stdsp	sp[0x40],r9
800068a8:	50 1b       	stdsp	sp[0x4],r11
800068aa:	30 0e       	mov	lr,0
800068ac:	50 0e       	stdsp	sp[0x0],lr
800068ae:	1c 98       	mov	r8,lr
800068b0:	e0 8f 03 06 	bral	80006ebc <_vfprintf_r+0x1590>
800068b4:	50 a7       	stdsp	sp[0x28],r7
800068b6:	50 80       	stdsp	sp[0x20],r0
800068b8:	0c 97       	mov	r7,r6
800068ba:	04 94       	mov	r4,r2
800068bc:	06 96       	mov	r6,r3
800068be:	02 92       	mov	r2,r1
800068c0:	40 93       	lddsp	r3,sp[0x24]
800068c2:	40 41       	lddsp	r1,sp[0x10]
800068c4:	0e 99       	mov	r9,r7
800068c6:	fa f8 06 b4 	ld.w	r8,sp[1716]
800068ca:	40 3c       	lddsp	r12,sp[0xc]
800068cc:	58 0c       	cp.w	r12,0
800068ce:	c1 d0       	breq	80006908 <_vfprintf_r+0xfdc>
800068d0:	10 36       	cp.w	r6,r8
800068d2:	c0 64       	brge	800068de <_vfprintf_r+0xfb2>
800068d4:	fa cb f9 44 	sub	r11,sp,-1724
800068d8:	f6 06 00 36 	add	r6,r11,r6<<0x3
800068dc:	c1 d8       	rjmp	80006916 <_vfprintf_r+0xfea>
800068de:	fa c8 f9 50 	sub	r8,sp,-1712
800068e2:	1a d8       	st.w	--sp,r8
800068e4:	fa c8 fa b8 	sub	r8,sp,-1352
800068e8:	1a d8       	st.w	--sp,r8
800068ea:	fa c8 fb b4 	sub	r8,sp,-1100
800068ee:	1a d8       	st.w	--sp,r8
800068f0:	fa c9 ff b4 	sub	r9,sp,-76
800068f4:	fa c8 f9 40 	sub	r8,sp,-1728
800068f8:	04 9a       	mov	r10,r2
800068fa:	0c 9b       	mov	r11,r6
800068fc:	08 9c       	mov	r12,r4
800068fe:	f0 1f 00 60 	mcall	80006a7c <_vfprintf_r+0x1150>
80006902:	2f dd       	sub	sp,-12
80006904:	78 09       	ld.w	r9,r12[0x0]
80006906:	c2 18       	rjmp	80006948 <_vfprintf_r+0x101c>
80006908:	2f f7       	sub	r7,-1
8000690a:	10 39       	cp.w	r9,r8
8000690c:	c0 84       	brge	8000691c <_vfprintf_r+0xff0>
8000690e:	fa ca f9 44 	sub	r10,sp,-1724
80006912:	f4 06 00 36 	add	r6,r10,r6<<0x3
80006916:	ec f9 fd 88 	ld.w	r9,r6[-632]
8000691a:	c1 78       	rjmp	80006948 <_vfprintf_r+0x101c>
8000691c:	41 09       	lddsp	r9,sp[0x40]
8000691e:	59 f8       	cp.w	r8,31
80006920:	e0 89 00 10 	brgt	80006940 <_vfprintf_r+0x1014>
80006924:	f2 ca ff fc 	sub	r10,r9,-4
80006928:	51 0a       	stdsp	sp[0x40],r10
8000692a:	fa c6 f9 44 	sub	r6,sp,-1724
8000692e:	72 09       	ld.w	r9,r9[0x0]
80006930:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80006934:	f5 49 fd 88 	st.w	r10[-632],r9
80006938:	2f f8       	sub	r8,-1
8000693a:	fb 48 06 b4 	st.w	sp[1716],r8
8000693e:	c0 58       	rjmp	80006948 <_vfprintf_r+0x101c>
80006940:	f2 c8 ff fc 	sub	r8,r9,-4
80006944:	51 08       	stdsp	sp[0x40],r8
80006946:	72 09       	ld.w	r9,r9[0x0]
80006948:	33 08       	mov	r8,48
8000694a:	fb 68 06 b8 	st.b	sp[1720],r8
8000694e:	37 88       	mov	r8,120
80006950:	30 0e       	mov	lr,0
80006952:	fb 68 06 b9 	st.b	sp[1721],r8
80006956:	4c bc       	lddpc	r12,80006a80 <_vfprintf_r+0x1154>
80006958:	50 19       	stdsp	sp[0x4],r9
8000695a:	a1 b5       	sbr	r5,0x1
8000695c:	50 0e       	stdsp	sp[0x0],lr
8000695e:	50 dc       	stdsp	sp[0x34],r12
80006960:	30 28       	mov	r8,2
80006962:	37 80       	mov	r0,120
80006964:	e0 8f 02 ac 	bral	80006ebc <_vfprintf_r+0x1590>
80006968:	50 a7       	stdsp	sp[0x28],r7
8000696a:	50 80       	stdsp	sp[0x20],r0
8000696c:	10 90       	mov	r0,r8
8000696e:	30 08       	mov	r8,0
80006970:	fb 68 06 bb 	st.b	sp[1723],r8
80006974:	0c 97       	mov	r7,r6
80006976:	04 94       	mov	r4,r2
80006978:	06 96       	mov	r6,r3
8000697a:	02 92       	mov	r2,r1
8000697c:	40 93       	lddsp	r3,sp[0x24]
8000697e:	40 41       	lddsp	r1,sp[0x10]
80006980:	0e 99       	mov	r9,r7
80006982:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006986:	40 3b       	lddsp	r11,sp[0xc]
80006988:	58 0b       	cp.w	r11,0
8000698a:	c1 d0       	breq	800069c4 <_vfprintf_r+0x1098>
8000698c:	10 36       	cp.w	r6,r8
8000698e:	c0 64       	brge	8000699a <_vfprintf_r+0x106e>
80006990:	fa ca f9 44 	sub	r10,sp,-1724
80006994:	f4 06 00 36 	add	r6,r10,r6<<0x3
80006998:	c1 d8       	rjmp	800069d2 <_vfprintf_r+0x10a6>
8000699a:	fa c8 f9 50 	sub	r8,sp,-1712
8000699e:	1a d8       	st.w	--sp,r8
800069a0:	fa c8 fa b8 	sub	r8,sp,-1352
800069a4:	1a d8       	st.w	--sp,r8
800069a6:	fa c8 fb b4 	sub	r8,sp,-1100
800069aa:	0c 9b       	mov	r11,r6
800069ac:	1a d8       	st.w	--sp,r8
800069ae:	04 9a       	mov	r10,r2
800069b0:	fa c8 f9 40 	sub	r8,sp,-1728
800069b4:	fa c9 ff b4 	sub	r9,sp,-76
800069b8:	08 9c       	mov	r12,r4
800069ba:	f0 1f 00 31 	mcall	80006a7c <_vfprintf_r+0x1150>
800069be:	2f dd       	sub	sp,-12
800069c0:	78 06       	ld.w	r6,r12[0x0]
800069c2:	c2 08       	rjmp	80006a02 <_vfprintf_r+0x10d6>
800069c4:	2f f7       	sub	r7,-1
800069c6:	10 39       	cp.w	r9,r8
800069c8:	c0 84       	brge	800069d8 <_vfprintf_r+0x10ac>
800069ca:	fa c9 f9 44 	sub	r9,sp,-1724
800069ce:	f2 06 00 36 	add	r6,r9,r6<<0x3
800069d2:	ec f6 fd 88 	ld.w	r6,r6[-632]
800069d6:	c1 68       	rjmp	80006a02 <_vfprintf_r+0x10d6>
800069d8:	41 09       	lddsp	r9,sp[0x40]
800069da:	59 f8       	cp.w	r8,31
800069dc:	e0 89 00 10 	brgt	800069fc <_vfprintf_r+0x10d0>
800069e0:	f2 ca ff fc 	sub	r10,r9,-4
800069e4:	51 0a       	stdsp	sp[0x40],r10
800069e6:	72 06       	ld.w	r6,r9[0x0]
800069e8:	fa ce f9 44 	sub	lr,sp,-1724
800069ec:	fc 08 00 39 	add	r9,lr,r8<<0x3
800069f0:	f3 46 fd 88 	st.w	r9[-632],r6
800069f4:	2f f8       	sub	r8,-1
800069f6:	fb 48 06 b4 	st.w	sp[1716],r8
800069fa:	c0 48       	rjmp	80006a02 <_vfprintf_r+0x10d6>
800069fc:	72 06       	ld.w	r6,r9[0x0]
800069fe:	2f c9       	sub	r9,-4
80006a00:	51 09       	stdsp	sp[0x40],r9
80006a02:	40 2c       	lddsp	r12,sp[0x8]
80006a04:	58 0c       	cp.w	r12,0
80006a06:	c1 05       	brlt	80006a26 <_vfprintf_r+0x10fa>
80006a08:	18 9a       	mov	r10,r12
80006a0a:	30 0b       	mov	r11,0
80006a0c:	0c 9c       	mov	r12,r6
80006a0e:	f0 1f 00 1e 	mcall	80006a84 <_vfprintf_r+0x1158>
80006a12:	e0 80 02 e8 	breq	80006fe2 <_vfprintf_r+0x16b6>
80006a16:	f8 06 01 02 	sub	r2,r12,r6
80006a1a:	40 2b       	lddsp	r11,sp[0x8]
80006a1c:	16 32       	cp.w	r2,r11
80006a1e:	e0 89 02 e2 	brgt	80006fe2 <_vfprintf_r+0x16b6>
80006a22:	e0 8f 02 dd 	bral	80006fdc <_vfprintf_r+0x16b0>
80006a26:	30 0a       	mov	r10,0
80006a28:	0c 9c       	mov	r12,r6
80006a2a:	50 2a       	stdsp	sp[0x8],r10
80006a2c:	f0 1f 00 17 	mcall	80006a88 <_vfprintf_r+0x115c>
80006a30:	18 92       	mov	r2,r12
80006a32:	e0 8f 02 db 	bral	80006fe8 <_vfprintf_r+0x16bc>
80006a36:	50 a7       	stdsp	sp[0x28],r7
80006a38:	50 80       	stdsp	sp[0x20],r0
80006a3a:	0c 97       	mov	r7,r6
80006a3c:	04 94       	mov	r4,r2
80006a3e:	06 96       	mov	r6,r3
80006a40:	02 92       	mov	r2,r1
80006a42:	40 93       	lddsp	r3,sp[0x24]
80006a44:	10 90       	mov	r0,r8
80006a46:	40 41       	lddsp	r1,sp[0x10]
80006a48:	a5 a5       	sbr	r5,0x4
80006a4a:	c0 a8       	rjmp	80006a5e <_vfprintf_r+0x1132>
80006a4c:	50 a7       	stdsp	sp[0x28],r7
80006a4e:	50 80       	stdsp	sp[0x20],r0
80006a50:	0c 97       	mov	r7,r6
80006a52:	04 94       	mov	r4,r2
80006a54:	06 96       	mov	r6,r3
80006a56:	02 92       	mov	r2,r1
80006a58:	40 93       	lddsp	r3,sp[0x24]
80006a5a:	10 90       	mov	r0,r8
80006a5c:	40 41       	lddsp	r1,sp[0x10]
80006a5e:	ed b5 00 05 	bld	r5,0x5
80006a62:	c5 d1       	brne	80006b1c <_vfprintf_r+0x11f0>
80006a64:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006a68:	40 39       	lddsp	r9,sp[0xc]
80006a6a:	58 09       	cp.w	r9,0
80006a6c:	c2 80       	breq	80006abc <_vfprintf_r+0x1190>
80006a6e:	10 36       	cp.w	r6,r8
80006a70:	c0 e4       	brge	80006a8c <_vfprintf_r+0x1160>
80006a72:	fa c8 f9 44 	sub	r8,sp,-1724
80006a76:	f0 06 00 36 	add	r6,r8,r6<<0x3
80006a7a:	c2 a8       	rjmp	80006ace <_vfprintf_r+0x11a2>
80006a7c:	80 00       	ld.sh	r0,r0[0x0]
80006a7e:	55 e8       	stdsp	sp[0x178],r8
80006a80:	80 00       	ld.sh	r0,r0[0x0]
80006a82:	af c0       	cbr	r0,0xe
80006a84:	80 00       	ld.sh	r0,r0[0x0]
80006a86:	91 b0       	st.w	r8[0x2c],r0
80006a88:	80 00       	ld.sh	r0,r0[0x0]
80006a8a:	99 24       	st.w	r12[0x8],r4
80006a8c:	fa c8 f9 50 	sub	r8,sp,-1712
80006a90:	1a d8       	st.w	--sp,r8
80006a92:	fa c8 fa b8 	sub	r8,sp,-1352
80006a96:	1a d8       	st.w	--sp,r8
80006a98:	fa c8 fb b4 	sub	r8,sp,-1100
80006a9c:	1a d8       	st.w	--sp,r8
80006a9e:	fa c8 f9 40 	sub	r8,sp,-1728
80006aa2:	fa c9 ff b4 	sub	r9,sp,-76
80006aa6:	04 9a       	mov	r10,r2
80006aa8:	0c 9b       	mov	r11,r6
80006aaa:	08 9c       	mov	r12,r4
80006aac:	f0 1f 00 c8 	mcall	80006dcc <_vfprintf_r+0x14a0>
80006ab0:	2f dd       	sub	sp,-12
80006ab2:	f8 e8 00 00 	ld.d	r8,r12[0]
80006ab6:	fa e9 00 00 	st.d	sp[0],r8
80006aba:	c2 e8       	rjmp	80006b16 <_vfprintf_r+0x11ea>
80006abc:	ee ca ff ff 	sub	r10,r7,-1
80006ac0:	10 37       	cp.w	r7,r8
80006ac2:	c0 b4       	brge	80006ad8 <_vfprintf_r+0x11ac>
80006ac4:	fa c8 f9 44 	sub	r8,sp,-1724
80006ac8:	14 97       	mov	r7,r10
80006aca:	f0 06 00 36 	add	r6,r8,r6<<0x3
80006ace:	ec ea fd 88 	ld.d	r10,r6[-632]
80006ad2:	fa eb 00 00 	st.d	sp[0],r10
80006ad6:	c2 08       	rjmp	80006b16 <_vfprintf_r+0x11ea>
80006ad8:	41 09       	lddsp	r9,sp[0x40]
80006ada:	59 f8       	cp.w	r8,31
80006adc:	e0 89 00 16 	brgt	80006b08 <_vfprintf_r+0x11dc>
80006ae0:	f2 e6 00 00 	ld.d	r6,r9[0]
80006ae4:	f2 cb ff f8 	sub	r11,r9,-8
80006ae8:	fa e7 00 00 	st.d	sp[0],r6
80006aec:	51 0b       	stdsp	sp[0x40],r11
80006aee:	fa c6 f9 44 	sub	r6,sp,-1724
80006af2:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006af6:	fa e6 00 00 	ld.d	r6,sp[0]
80006afa:	f2 e7 fd 88 	st.d	r9[-632],r6
80006afe:	2f f8       	sub	r8,-1
80006b00:	14 97       	mov	r7,r10
80006b02:	fb 48 06 b4 	st.w	sp[1716],r8
80006b06:	c0 88       	rjmp	80006b16 <_vfprintf_r+0x11ea>
80006b08:	f2 e6 00 00 	ld.d	r6,r9[0]
80006b0c:	2f 89       	sub	r9,-8
80006b0e:	fa e7 00 00 	st.d	sp[0],r6
80006b12:	51 09       	stdsp	sp[0x40],r9
80006b14:	14 97       	mov	r7,r10
80006b16:	30 18       	mov	r8,1
80006b18:	e0 8f 01 d2 	bral	80006ebc <_vfprintf_r+0x1590>
80006b1c:	ed b5 00 04 	bld	r5,0x4
80006b20:	c1 61       	brne	80006b4c <_vfprintf_r+0x1220>
80006b22:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006b26:	40 3e       	lddsp	lr,sp[0xc]
80006b28:	58 0e       	cp.w	lr,0
80006b2a:	c0 80       	breq	80006b3a <_vfprintf_r+0x120e>
80006b2c:	10 36       	cp.w	r6,r8
80006b2e:	c6 74       	brge	80006bfc <_vfprintf_r+0x12d0>
80006b30:	fa cc f9 44 	sub	r12,sp,-1724
80006b34:	f8 06 00 36 	add	r6,r12,r6<<0x3
80006b38:	c8 08       	rjmp	80006c38 <_vfprintf_r+0x130c>
80006b3a:	ee ca ff ff 	sub	r10,r7,-1
80006b3e:	10 37       	cp.w	r7,r8
80006b40:	c7 f4       	brge	80006c3e <_vfprintf_r+0x1312>
80006b42:	fa cb f9 44 	sub	r11,sp,-1724
80006b46:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006b4a:	c7 68       	rjmp	80006c36 <_vfprintf_r+0x130a>
80006b4c:	ed b5 00 06 	bld	r5,0x6
80006b50:	c4 a1       	brne	80006be4 <_vfprintf_r+0x12b8>
80006b52:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006b56:	40 3c       	lddsp	r12,sp[0xc]
80006b58:	58 0c       	cp.w	r12,0
80006b5a:	c1 d0       	breq	80006b94 <_vfprintf_r+0x1268>
80006b5c:	10 36       	cp.w	r6,r8
80006b5e:	c0 64       	brge	80006b6a <_vfprintf_r+0x123e>
80006b60:	fa cb f9 44 	sub	r11,sp,-1724
80006b64:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006b68:	c1 f8       	rjmp	80006ba6 <_vfprintf_r+0x127a>
80006b6a:	fa c8 f9 50 	sub	r8,sp,-1712
80006b6e:	1a d8       	st.w	--sp,r8
80006b70:	fa c8 fa b8 	sub	r8,sp,-1352
80006b74:	1a d8       	st.w	--sp,r8
80006b76:	fa c8 fb b4 	sub	r8,sp,-1100
80006b7a:	1a d8       	st.w	--sp,r8
80006b7c:	fa c8 f9 40 	sub	r8,sp,-1728
80006b80:	fa c9 ff b4 	sub	r9,sp,-76
80006b84:	04 9a       	mov	r10,r2
80006b86:	0c 9b       	mov	r11,r6
80006b88:	08 9c       	mov	r12,r4
80006b8a:	f0 1f 00 91 	mcall	80006dcc <_vfprintf_r+0x14a0>
80006b8e:	2f dd       	sub	sp,-12
80006b90:	98 18       	ld.sh	r8,r12[0x2]
80006b92:	c2 68       	rjmp	80006bde <_vfprintf_r+0x12b2>
80006b94:	ee ca ff ff 	sub	r10,r7,-1
80006b98:	10 37       	cp.w	r7,r8
80006b9a:	c0 94       	brge	80006bac <_vfprintf_r+0x1280>
80006b9c:	fa c9 f9 44 	sub	r9,sp,-1724
80006ba0:	14 97       	mov	r7,r10
80006ba2:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006ba6:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80006baa:	c1 a8       	rjmp	80006bde <_vfprintf_r+0x12b2>
80006bac:	41 09       	lddsp	r9,sp[0x40]
80006bae:	59 f8       	cp.w	r8,31
80006bb0:	e0 89 00 13 	brgt	80006bd6 <_vfprintf_r+0x12aa>
80006bb4:	f2 cb ff fc 	sub	r11,r9,-4
80006bb8:	51 0b       	stdsp	sp[0x40],r11
80006bba:	72 09       	ld.w	r9,r9[0x0]
80006bbc:	fa c6 f9 44 	sub	r6,sp,-1724
80006bc0:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80006bc4:	2f f8       	sub	r8,-1
80006bc6:	f7 49 fd 88 	st.w	r11[-632],r9
80006bca:	fb 48 06 b4 	st.w	sp[1716],r8
80006bce:	14 97       	mov	r7,r10
80006bd0:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80006bd4:	c0 58       	rjmp	80006bde <_vfprintf_r+0x12b2>
80006bd6:	92 18       	ld.sh	r8,r9[0x2]
80006bd8:	14 97       	mov	r7,r10
80006bda:	2f c9       	sub	r9,-4
80006bdc:	51 09       	stdsp	sp[0x40],r9
80006bde:	5c 78       	castu.h	r8
80006be0:	50 18       	stdsp	sp[0x4],r8
80006be2:	c4 68       	rjmp	80006c6e <_vfprintf_r+0x1342>
80006be4:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006be8:	40 3c       	lddsp	r12,sp[0xc]
80006bea:	58 0c       	cp.w	r12,0
80006bec:	c1 d0       	breq	80006c26 <_vfprintf_r+0x12fa>
80006bee:	10 36       	cp.w	r6,r8
80006bf0:	c0 64       	brge	80006bfc <_vfprintf_r+0x12d0>
80006bf2:	fa cb f9 44 	sub	r11,sp,-1724
80006bf6:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006bfa:	c1 f8       	rjmp	80006c38 <_vfprintf_r+0x130c>
80006bfc:	fa c8 f9 50 	sub	r8,sp,-1712
80006c00:	1a d8       	st.w	--sp,r8
80006c02:	fa c8 fa b8 	sub	r8,sp,-1352
80006c06:	0c 9b       	mov	r11,r6
80006c08:	1a d8       	st.w	--sp,r8
80006c0a:	fa c8 fb b4 	sub	r8,sp,-1100
80006c0e:	04 9a       	mov	r10,r2
80006c10:	1a d8       	st.w	--sp,r8
80006c12:	08 9c       	mov	r12,r4
80006c14:	fa c8 f9 40 	sub	r8,sp,-1728
80006c18:	fa c9 ff b4 	sub	r9,sp,-76
80006c1c:	f0 1f 00 6c 	mcall	80006dcc <_vfprintf_r+0x14a0>
80006c20:	2f dd       	sub	sp,-12
80006c22:	78 0b       	ld.w	r11,r12[0x0]
80006c24:	c2 48       	rjmp	80006c6c <_vfprintf_r+0x1340>
80006c26:	ee ca ff ff 	sub	r10,r7,-1
80006c2a:	10 37       	cp.w	r7,r8
80006c2c:	c0 94       	brge	80006c3e <_vfprintf_r+0x1312>
80006c2e:	fa c9 f9 44 	sub	r9,sp,-1724
80006c32:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006c36:	14 97       	mov	r7,r10
80006c38:	ec fb fd 88 	ld.w	r11,r6[-632]
80006c3c:	c1 88       	rjmp	80006c6c <_vfprintf_r+0x1340>
80006c3e:	41 09       	lddsp	r9,sp[0x40]
80006c40:	59 f8       	cp.w	r8,31
80006c42:	e0 89 00 11 	brgt	80006c64 <_vfprintf_r+0x1338>
80006c46:	f2 cb ff fc 	sub	r11,r9,-4
80006c4a:	51 0b       	stdsp	sp[0x40],r11
80006c4c:	fa c6 f9 44 	sub	r6,sp,-1724
80006c50:	72 0b       	ld.w	r11,r9[0x0]
80006c52:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006c56:	f3 4b fd 88 	st.w	r9[-632],r11
80006c5a:	2f f8       	sub	r8,-1
80006c5c:	14 97       	mov	r7,r10
80006c5e:	fb 48 06 b4 	st.w	sp[1716],r8
80006c62:	c0 58       	rjmp	80006c6c <_vfprintf_r+0x1340>
80006c64:	72 0b       	ld.w	r11,r9[0x0]
80006c66:	14 97       	mov	r7,r10
80006c68:	2f c9       	sub	r9,-4
80006c6a:	51 09       	stdsp	sp[0x40],r9
80006c6c:	50 1b       	stdsp	sp[0x4],r11
80006c6e:	30 0e       	mov	lr,0
80006c70:	30 18       	mov	r8,1
80006c72:	50 0e       	stdsp	sp[0x0],lr
80006c74:	c2 49       	rjmp	80006ebc <_vfprintf_r+0x1590>
80006c76:	50 a7       	stdsp	sp[0x28],r7
80006c78:	50 80       	stdsp	sp[0x20],r0
80006c7a:	0c 97       	mov	r7,r6
80006c7c:	04 94       	mov	r4,r2
80006c7e:	06 96       	mov	r6,r3
80006c80:	02 92       	mov	r2,r1
80006c82:	4d 4c       	lddpc	r12,80006dd0 <_vfprintf_r+0x14a4>
80006c84:	40 93       	lddsp	r3,sp[0x24]
80006c86:	10 90       	mov	r0,r8
80006c88:	40 41       	lddsp	r1,sp[0x10]
80006c8a:	50 dc       	stdsp	sp[0x34],r12
80006c8c:	ed b5 00 05 	bld	r5,0x5
80006c90:	c5 51       	brne	80006d3a <_vfprintf_r+0x140e>
80006c92:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006c96:	40 3b       	lddsp	r11,sp[0xc]
80006c98:	58 0b       	cp.w	r11,0
80006c9a:	c2 20       	breq	80006cde <_vfprintf_r+0x13b2>
80006c9c:	10 36       	cp.w	r6,r8
80006c9e:	c0 a4       	brge	80006cb2 <_vfprintf_r+0x1386>
80006ca0:	fa ca f9 44 	sub	r10,sp,-1724
80006ca4:	f4 06 00 36 	add	r6,r10,r6<<0x3
80006ca8:	ec e8 fd 88 	ld.d	r8,r6[-632]
80006cac:	fa e9 00 00 	st.d	sp[0],r8
80006cb0:	cf 58       	rjmp	80006e9a <_vfprintf_r+0x156e>
80006cb2:	fa c8 f9 50 	sub	r8,sp,-1712
80006cb6:	1a d8       	st.w	--sp,r8
80006cb8:	fa c8 fa b8 	sub	r8,sp,-1352
80006cbc:	04 9a       	mov	r10,r2
80006cbe:	1a d8       	st.w	--sp,r8
80006cc0:	0c 9b       	mov	r11,r6
80006cc2:	fa c8 fb b4 	sub	r8,sp,-1100
80006cc6:	08 9c       	mov	r12,r4
80006cc8:	1a d8       	st.w	--sp,r8
80006cca:	fa c8 f9 40 	sub	r8,sp,-1728
80006cce:	fa c9 ff b4 	sub	r9,sp,-76
80006cd2:	f0 1f 00 3f 	mcall	80006dcc <_vfprintf_r+0x14a0>
80006cd6:	2f dd       	sub	sp,-12
80006cd8:	f8 ea 00 00 	ld.d	r10,r12[0]
80006cdc:	c0 c8       	rjmp	80006cf4 <_vfprintf_r+0x13c8>
80006cde:	ee ca ff ff 	sub	r10,r7,-1
80006ce2:	10 37       	cp.w	r7,r8
80006ce4:	c0 b4       	brge	80006cfa <_vfprintf_r+0x13ce>
80006ce6:	fa c9 f9 44 	sub	r9,sp,-1724
80006cea:	14 97       	mov	r7,r10
80006cec:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006cf0:	ec ea fd 88 	ld.d	r10,r6[-632]
80006cf4:	fa eb 00 00 	st.d	sp[0],r10
80006cf8:	cd 18       	rjmp	80006e9a <_vfprintf_r+0x156e>
80006cfa:	41 09       	lddsp	r9,sp[0x40]
80006cfc:	59 f8       	cp.w	r8,31
80006cfe:	e0 89 00 16 	brgt	80006d2a <_vfprintf_r+0x13fe>
80006d02:	f2 e6 00 00 	ld.d	r6,r9[0]
80006d06:	f2 cb ff f8 	sub	r11,r9,-8
80006d0a:	fa e7 00 00 	st.d	sp[0],r6
80006d0e:	51 0b       	stdsp	sp[0x40],r11
80006d10:	fa c6 f9 44 	sub	r6,sp,-1724
80006d14:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006d18:	fa e6 00 00 	ld.d	r6,sp[0]
80006d1c:	f2 e7 fd 88 	st.d	r9[-632],r6
80006d20:	2f f8       	sub	r8,-1
80006d22:	14 97       	mov	r7,r10
80006d24:	fb 48 06 b4 	st.w	sp[1716],r8
80006d28:	cb 98       	rjmp	80006e9a <_vfprintf_r+0x156e>
80006d2a:	f2 e6 00 00 	ld.d	r6,r9[0]
80006d2e:	2f 89       	sub	r9,-8
80006d30:	fa e7 00 00 	st.d	sp[0],r6
80006d34:	51 09       	stdsp	sp[0x40],r9
80006d36:	14 97       	mov	r7,r10
80006d38:	cb 18       	rjmp	80006e9a <_vfprintf_r+0x156e>
80006d3a:	ed b5 00 04 	bld	r5,0x4
80006d3e:	c1 71       	brne	80006d6c <_vfprintf_r+0x1440>
80006d40:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006d44:	40 3e       	lddsp	lr,sp[0xc]
80006d46:	58 0e       	cp.w	lr,0
80006d48:	c0 80       	breq	80006d58 <_vfprintf_r+0x142c>
80006d4a:	10 36       	cp.w	r6,r8
80006d4c:	c6 c4       	brge	80006e24 <_vfprintf_r+0x14f8>
80006d4e:	fa cc f9 44 	sub	r12,sp,-1724
80006d52:	f8 06 00 36 	add	r6,r12,r6<<0x3
80006d56:	c8 58       	rjmp	80006e60 <_vfprintf_r+0x1534>
80006d58:	ee ca ff ff 	sub	r10,r7,-1
80006d5c:	10 37       	cp.w	r7,r8
80006d5e:	e0 84 00 84 	brge	80006e66 <_vfprintf_r+0x153a>
80006d62:	fa cb f9 44 	sub	r11,sp,-1724
80006d66:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006d6a:	c7 a8       	rjmp	80006e5e <_vfprintf_r+0x1532>
80006d6c:	ed b5 00 06 	bld	r5,0x6
80006d70:	c4 e1       	brne	80006e0c <_vfprintf_r+0x14e0>
80006d72:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006d76:	40 3c       	lddsp	r12,sp[0xc]
80006d78:	58 0c       	cp.w	r12,0
80006d7a:	c1 d0       	breq	80006db4 <_vfprintf_r+0x1488>
80006d7c:	10 36       	cp.w	r6,r8
80006d7e:	c0 64       	brge	80006d8a <_vfprintf_r+0x145e>
80006d80:	fa cb f9 44 	sub	r11,sp,-1724
80006d84:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006d88:	c1 f8       	rjmp	80006dc6 <_vfprintf_r+0x149a>
80006d8a:	fa c8 f9 50 	sub	r8,sp,-1712
80006d8e:	1a d8       	st.w	--sp,r8
80006d90:	fa c8 fa b8 	sub	r8,sp,-1352
80006d94:	1a d8       	st.w	--sp,r8
80006d96:	fa c8 fb b4 	sub	r8,sp,-1100
80006d9a:	1a d8       	st.w	--sp,r8
80006d9c:	fa c8 f9 40 	sub	r8,sp,-1728
80006da0:	fa c9 ff b4 	sub	r9,sp,-76
80006da4:	04 9a       	mov	r10,r2
80006da6:	0c 9b       	mov	r11,r6
80006da8:	08 9c       	mov	r12,r4
80006daa:	f0 1f 00 09 	mcall	80006dcc <_vfprintf_r+0x14a0>
80006dae:	2f dd       	sub	sp,-12
80006db0:	98 18       	ld.sh	r8,r12[0x2]
80006db2:	c2 a8       	rjmp	80006e06 <_vfprintf_r+0x14da>
80006db4:	ee ca ff ff 	sub	r10,r7,-1
80006db8:	10 37       	cp.w	r7,r8
80006dba:	c0 d4       	brge	80006dd4 <_vfprintf_r+0x14a8>
80006dbc:	fa c9 f9 44 	sub	r9,sp,-1724
80006dc0:	14 97       	mov	r7,r10
80006dc2:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006dc6:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80006dca:	c1 e8       	rjmp	80006e06 <_vfprintf_r+0x14da>
80006dcc:	80 00       	ld.sh	r0,r0[0x0]
80006dce:	55 e8       	stdsp	sp[0x178],r8
80006dd0:	80 00       	ld.sh	r0,r0[0x0]
80006dd2:	af c0       	cbr	r0,0xe
80006dd4:	41 09       	lddsp	r9,sp[0x40]
80006dd6:	59 f8       	cp.w	r8,31
80006dd8:	e0 89 00 13 	brgt	80006dfe <_vfprintf_r+0x14d2>
80006ddc:	f2 cb ff fc 	sub	r11,r9,-4
80006de0:	51 0b       	stdsp	sp[0x40],r11
80006de2:	72 09       	ld.w	r9,r9[0x0]
80006de4:	fa c6 f9 44 	sub	r6,sp,-1724
80006de8:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80006dec:	2f f8       	sub	r8,-1
80006dee:	f7 49 fd 88 	st.w	r11[-632],r9
80006df2:	fb 48 06 b4 	st.w	sp[1716],r8
80006df6:	14 97       	mov	r7,r10
80006df8:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80006dfc:	c0 58       	rjmp	80006e06 <_vfprintf_r+0x14da>
80006dfe:	92 18       	ld.sh	r8,r9[0x2]
80006e00:	14 97       	mov	r7,r10
80006e02:	2f c9       	sub	r9,-4
80006e04:	51 09       	stdsp	sp[0x40],r9
80006e06:	5c 78       	castu.h	r8
80006e08:	50 18       	stdsp	sp[0x4],r8
80006e0a:	c4 68       	rjmp	80006e96 <_vfprintf_r+0x156a>
80006e0c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006e10:	40 3c       	lddsp	r12,sp[0xc]
80006e12:	58 0c       	cp.w	r12,0
80006e14:	c1 d0       	breq	80006e4e <_vfprintf_r+0x1522>
80006e16:	10 36       	cp.w	r6,r8
80006e18:	c0 64       	brge	80006e24 <_vfprintf_r+0x14f8>
80006e1a:	fa cb f9 44 	sub	r11,sp,-1724
80006e1e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006e22:	c1 f8       	rjmp	80006e60 <_vfprintf_r+0x1534>
80006e24:	fa c8 f9 50 	sub	r8,sp,-1712
80006e28:	1a d8       	st.w	--sp,r8
80006e2a:	fa c8 fa b8 	sub	r8,sp,-1352
80006e2e:	0c 9b       	mov	r11,r6
80006e30:	1a d8       	st.w	--sp,r8
80006e32:	fa c8 fb b4 	sub	r8,sp,-1100
80006e36:	04 9a       	mov	r10,r2
80006e38:	1a d8       	st.w	--sp,r8
80006e3a:	08 9c       	mov	r12,r4
80006e3c:	fa c8 f9 40 	sub	r8,sp,-1728
80006e40:	fa c9 ff b4 	sub	r9,sp,-76
80006e44:	f0 1f 00 cb 	mcall	80007170 <_vfprintf_r+0x1844>
80006e48:	2f dd       	sub	sp,-12
80006e4a:	78 0b       	ld.w	r11,r12[0x0]
80006e4c:	c2 48       	rjmp	80006e94 <_vfprintf_r+0x1568>
80006e4e:	ee ca ff ff 	sub	r10,r7,-1
80006e52:	10 37       	cp.w	r7,r8
80006e54:	c0 94       	brge	80006e66 <_vfprintf_r+0x153a>
80006e56:	fa c9 f9 44 	sub	r9,sp,-1724
80006e5a:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006e5e:	14 97       	mov	r7,r10
80006e60:	ec fb fd 88 	ld.w	r11,r6[-632]
80006e64:	c1 88       	rjmp	80006e94 <_vfprintf_r+0x1568>
80006e66:	41 09       	lddsp	r9,sp[0x40]
80006e68:	59 f8       	cp.w	r8,31
80006e6a:	e0 89 00 11 	brgt	80006e8c <_vfprintf_r+0x1560>
80006e6e:	f2 cb ff fc 	sub	r11,r9,-4
80006e72:	51 0b       	stdsp	sp[0x40],r11
80006e74:	fa c6 f9 44 	sub	r6,sp,-1724
80006e78:	72 0b       	ld.w	r11,r9[0x0]
80006e7a:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006e7e:	f3 4b fd 88 	st.w	r9[-632],r11
80006e82:	2f f8       	sub	r8,-1
80006e84:	14 97       	mov	r7,r10
80006e86:	fb 48 06 b4 	st.w	sp[1716],r8
80006e8a:	c0 58       	rjmp	80006e94 <_vfprintf_r+0x1568>
80006e8c:	72 0b       	ld.w	r11,r9[0x0]
80006e8e:	14 97       	mov	r7,r10
80006e90:	2f c9       	sub	r9,-4
80006e92:	51 09       	stdsp	sp[0x40],r9
80006e94:	50 1b       	stdsp	sp[0x4],r11
80006e96:	30 0e       	mov	lr,0
80006e98:	50 0e       	stdsp	sp[0x0],lr
80006e9a:	40 08       	lddsp	r8,sp[0x0]
80006e9c:	40 1c       	lddsp	r12,sp[0x4]
80006e9e:	18 48       	or	r8,r12
80006ea0:	5f 19       	srne	r9
80006ea2:	0a 98       	mov	r8,r5
80006ea4:	eb e9 00 09 	and	r9,r5,r9
80006ea8:	a1 b8       	sbr	r8,0x1
80006eaa:	58 09       	cp.w	r9,0
80006eac:	c0 70       	breq	80006eba <_vfprintf_r+0x158e>
80006eae:	10 95       	mov	r5,r8
80006eb0:	fb 60 06 b9 	st.b	sp[1721],r0
80006eb4:	33 08       	mov	r8,48
80006eb6:	fb 68 06 b8 	st.b	sp[1720],r8
80006eba:	30 28       	mov	r8,2
80006ebc:	30 09       	mov	r9,0
80006ebe:	fb 69 06 bb 	st.b	sp[1723],r9
80006ec2:	0a 99       	mov	r9,r5
80006ec4:	a7 d9       	cbr	r9,0x7
80006ec6:	40 2b       	lddsp	r11,sp[0x8]
80006ec8:	40 16       	lddsp	r6,sp[0x4]
80006eca:	58 0b       	cp.w	r11,0
80006ecc:	5f 1a       	srne	r10
80006ece:	f2 05 17 40 	movge	r5,r9
80006ed2:	fa c2 f9 78 	sub	r2,sp,-1672
80006ed6:	40 09       	lddsp	r9,sp[0x0]
80006ed8:	0c 49       	or	r9,r6
80006eda:	5f 19       	srne	r9
80006edc:	f5 e9 10 09 	or	r9,r10,r9
80006ee0:	c5 c0       	breq	80006f98 <_vfprintf_r+0x166c>
80006ee2:	30 19       	mov	r9,1
80006ee4:	f2 08 18 00 	cp.b	r8,r9
80006ee8:	c0 60       	breq	80006ef4 <_vfprintf_r+0x15c8>
80006eea:	30 29       	mov	r9,2
80006eec:	f2 08 18 00 	cp.b	r8,r9
80006ef0:	c0 41       	brne	80006ef8 <_vfprintf_r+0x15cc>
80006ef2:	c3 c8       	rjmp	80006f6a <_vfprintf_r+0x163e>
80006ef4:	04 96       	mov	r6,r2
80006ef6:	c3 08       	rjmp	80006f56 <_vfprintf_r+0x162a>
80006ef8:	04 96       	mov	r6,r2
80006efa:	fa e8 00 00 	ld.d	r8,sp[0]
80006efe:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80006f02:	2d 0a       	sub	r10,-48
80006f04:	0c fa       	st.b	--r6,r10
80006f06:	f0 0b 16 03 	lsr	r11,r8,0x3
80006f0a:	f2 0c 16 03 	lsr	r12,r9,0x3
80006f0e:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
80006f12:	18 99       	mov	r9,r12
80006f14:	16 98       	mov	r8,r11
80006f16:	58 08       	cp.w	r8,0
80006f18:	5c 29       	cpc	r9
80006f1a:	cf 21       	brne	80006efe <_vfprintf_r+0x15d2>
80006f1c:	fa e9 00 00 	st.d	sp[0],r8
80006f20:	ed b5 00 00 	bld	r5,0x0
80006f24:	c4 51       	brne	80006fae <_vfprintf_r+0x1682>
80006f26:	33 09       	mov	r9,48
80006f28:	f2 0a 18 00 	cp.b	r10,r9
80006f2c:	c4 10       	breq	80006fae <_vfprintf_r+0x1682>
80006f2e:	0c f9       	st.b	--r6,r9
80006f30:	c3 f8       	rjmp	80006fae <_vfprintf_r+0x1682>
80006f32:	fa ea 00 00 	ld.d	r10,sp[0]
80006f36:	30 a8       	mov	r8,10
80006f38:	30 09       	mov	r9,0
80006f3a:	f0 1f 00 8f 	mcall	80007174 <_vfprintf_r+0x1848>
80006f3e:	30 a8       	mov	r8,10
80006f40:	2d 0a       	sub	r10,-48
80006f42:	30 09       	mov	r9,0
80006f44:	ac 8a       	st.b	r6[0x0],r10
80006f46:	fa ea 00 00 	ld.d	r10,sp[0]
80006f4a:	f0 1f 00 8c 	mcall	80007178 <_vfprintf_r+0x184c>
80006f4e:	16 99       	mov	r9,r11
80006f50:	14 98       	mov	r8,r10
80006f52:	fa e9 00 00 	st.d	sp[0],r8
80006f56:	20 16       	sub	r6,1
80006f58:	fa ea 00 00 	ld.d	r10,sp[0]
80006f5c:	58 9a       	cp.w	r10,9
80006f5e:	5c 2b       	cpc	r11
80006f60:	fe 9b ff e9 	brhi	80006f32 <_vfprintf_r+0x1606>
80006f64:	1b f8       	ld.ub	r8,sp[0x7]
80006f66:	2d 08       	sub	r8,-48
80006f68:	c2 08       	rjmp	80006fa8 <_vfprintf_r+0x167c>
80006f6a:	04 96       	mov	r6,r2
80006f6c:	fa e8 00 00 	ld.d	r8,sp[0]
80006f70:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80006f74:	40 de       	lddsp	lr,sp[0x34]
80006f76:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
80006f7a:	0c fa       	st.b	--r6,r10
80006f7c:	f2 0b 16 04 	lsr	r11,r9,0x4
80006f80:	f0 0a 16 04 	lsr	r10,r8,0x4
80006f84:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80006f88:	16 99       	mov	r9,r11
80006f8a:	14 98       	mov	r8,r10
80006f8c:	58 08       	cp.w	r8,0
80006f8e:	5c 29       	cpc	r9
80006f90:	cf 01       	brne	80006f70 <_vfprintf_r+0x1644>
80006f92:	fa e9 00 00 	st.d	sp[0],r8
80006f96:	c0 c8       	rjmp	80006fae <_vfprintf_r+0x1682>
80006f98:	58 08       	cp.w	r8,0
80006f9a:	c0 91       	brne	80006fac <_vfprintf_r+0x1680>
80006f9c:	ed b5 00 00 	bld	r5,0x0
80006fa0:	c0 61       	brne	80006fac <_vfprintf_r+0x1680>
80006fa2:	fa c6 f9 79 	sub	r6,sp,-1671
80006fa6:	33 08       	mov	r8,48
80006fa8:	ac 88       	st.b	r6[0x0],r8
80006faa:	c0 28       	rjmp	80006fae <_vfprintf_r+0x1682>
80006fac:	04 96       	mov	r6,r2
80006fae:	0c 12       	sub	r2,r6
80006fb0:	c1 c8       	rjmp	80006fe8 <_vfprintf_r+0x16bc>
80006fb2:	50 a7       	stdsp	sp[0x28],r7
80006fb4:	50 80       	stdsp	sp[0x20],r0
80006fb6:	40 93       	lddsp	r3,sp[0x24]
80006fb8:	0c 97       	mov	r7,r6
80006fba:	10 90       	mov	r0,r8
80006fbc:	04 94       	mov	r4,r2
80006fbe:	40 41       	lddsp	r1,sp[0x10]
80006fc0:	58 08       	cp.w	r8,0
80006fc2:	e0 80 04 65 	breq	8000788c <_vfprintf_r+0x1f60>
80006fc6:	fb 68 06 60 	st.b	sp[1632],r8
80006fca:	30 0c       	mov	r12,0
80006fcc:	30 08       	mov	r8,0
80006fce:	30 12       	mov	r2,1
80006fd0:	fb 68 06 bb 	st.b	sp[1723],r8
80006fd4:	50 2c       	stdsp	sp[0x8],r12
80006fd6:	fa c6 f9 a0 	sub	r6,sp,-1632
80006fda:	c0 78       	rjmp	80006fe8 <_vfprintf_r+0x16bc>
80006fdc:	30 0b       	mov	r11,0
80006fde:	50 2b       	stdsp	sp[0x8],r11
80006fe0:	c0 48       	rjmp	80006fe8 <_vfprintf_r+0x16bc>
80006fe2:	40 22       	lddsp	r2,sp[0x8]
80006fe4:	30 0a       	mov	r10,0
80006fe6:	50 2a       	stdsp	sp[0x8],r10
80006fe8:	40 29       	lddsp	r9,sp[0x8]
80006fea:	e4 09 0c 49 	max	r9,r2,r9
80006fee:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80006ff2:	50 39       	stdsp	sp[0xc],r9
80006ff4:	0a 9e       	mov	lr,r5
80006ff6:	30 09       	mov	r9,0
80006ff8:	e2 1e 00 02 	andl	lr,0x2,COH
80006ffc:	f2 08 18 00 	cp.b	r8,r9
80007000:	fb f8 10 03 	ld.wne	r8,sp[0xc]
80007004:	f7 b8 01 ff 	subne	r8,-1
80007008:	fb f8 1a 03 	st.wne	sp[0xc],r8
8000700c:	0a 9b       	mov	r11,r5
8000700e:	58 0e       	cp.w	lr,0
80007010:	fb fc 10 03 	ld.wne	r12,sp[0xc]
80007014:	f7 bc 01 fe 	subne	r12,-2
80007018:	fb fc 1a 03 	st.wne	sp[0xc],r12
8000701c:	e2 1b 00 84 	andl	r11,0x84,COH
80007020:	50 fe       	stdsp	sp[0x3c],lr
80007022:	50 9b       	stdsp	sp[0x24],r11
80007024:	c4 51       	brne	800070ae <_vfprintf_r+0x1782>
80007026:	40 8a       	lddsp	r10,sp[0x20]
80007028:	40 39       	lddsp	r9,sp[0xc]
8000702a:	12 1a       	sub	r10,r9
8000702c:	50 4a       	stdsp	sp[0x10],r10
8000702e:	58 0a       	cp.w	r10,0
80007030:	e0 89 00 1f 	brgt	8000706e <_vfprintf_r+0x1742>
80007034:	c3 d8       	rjmp	800070ae <_vfprintf_r+0x1782>
80007036:	2f 09       	sub	r9,-16
80007038:	2f f8       	sub	r8,-1
8000703a:	4d 1e       	lddpc	lr,8000717c <_vfprintf_r+0x1850>
8000703c:	31 0c       	mov	r12,16
8000703e:	fb 49 06 90 	st.w	sp[1680],r9
80007042:	87 0e       	st.w	r3[0x0],lr
80007044:	87 1c       	st.w	r3[0x4],r12
80007046:	fb 48 06 8c 	st.w	sp[1676],r8
8000704a:	58 78       	cp.w	r8,7
8000704c:	e0 89 00 04 	brgt	80007054 <_vfprintf_r+0x1728>
80007050:	2f 83       	sub	r3,-8
80007052:	c0 b8       	rjmp	80007068 <_vfprintf_r+0x173c>
80007054:	fa ca f9 78 	sub	r10,sp,-1672
80007058:	02 9b       	mov	r11,r1
8000705a:	08 9c       	mov	r12,r4
8000705c:	f0 1f 00 49 	mcall	80007180 <_vfprintf_r+0x1854>
80007060:	e0 81 04 27 	brne	800078ae <_vfprintf_r+0x1f82>
80007064:	fa c3 f9 e0 	sub	r3,sp,-1568
80007068:	40 4b       	lddsp	r11,sp[0x10]
8000706a:	21 0b       	sub	r11,16
8000706c:	50 4b       	stdsp	sp[0x10],r11
8000706e:	fa f9 06 90 	ld.w	r9,sp[1680]
80007072:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007076:	4c 2a       	lddpc	r10,8000717c <_vfprintf_r+0x1850>
80007078:	40 4e       	lddsp	lr,sp[0x10]
8000707a:	59 0e       	cp.w	lr,16
8000707c:	fe 99 ff dd 	brgt	80007036 <_vfprintf_r+0x170a>
80007080:	1c 09       	add	r9,lr
80007082:	2f f8       	sub	r8,-1
80007084:	87 0a       	st.w	r3[0x0],r10
80007086:	fb 49 06 90 	st.w	sp[1680],r9
8000708a:	87 1e       	st.w	r3[0x4],lr
8000708c:	fb 48 06 8c 	st.w	sp[1676],r8
80007090:	58 78       	cp.w	r8,7
80007092:	e0 89 00 04 	brgt	8000709a <_vfprintf_r+0x176e>
80007096:	2f 83       	sub	r3,-8
80007098:	c0 b8       	rjmp	800070ae <_vfprintf_r+0x1782>
8000709a:	fa ca f9 78 	sub	r10,sp,-1672
8000709e:	02 9b       	mov	r11,r1
800070a0:	08 9c       	mov	r12,r4
800070a2:	f0 1f 00 38 	mcall	80007180 <_vfprintf_r+0x1854>
800070a6:	e0 81 04 04 	brne	800078ae <_vfprintf_r+0x1f82>
800070aa:	fa c3 f9 e0 	sub	r3,sp,-1568
800070ae:	30 09       	mov	r9,0
800070b0:	fb 38 06 bb 	ld.ub	r8,sp[1723]
800070b4:	f2 08 18 00 	cp.b	r8,r9
800070b8:	c1 f0       	breq	800070f6 <_vfprintf_r+0x17ca>
800070ba:	fa f8 06 90 	ld.w	r8,sp[1680]
800070be:	fa c9 f9 45 	sub	r9,sp,-1723
800070c2:	2f f8       	sub	r8,-1
800070c4:	87 09       	st.w	r3[0x0],r9
800070c6:	fb 48 06 90 	st.w	sp[1680],r8
800070ca:	30 19       	mov	r9,1
800070cc:	fa f8 06 8c 	ld.w	r8,sp[1676]
800070d0:	87 19       	st.w	r3[0x4],r9
800070d2:	2f f8       	sub	r8,-1
800070d4:	fb 48 06 8c 	st.w	sp[1676],r8
800070d8:	58 78       	cp.w	r8,7
800070da:	e0 89 00 04 	brgt	800070e2 <_vfprintf_r+0x17b6>
800070de:	2f 83       	sub	r3,-8
800070e0:	c0 b8       	rjmp	800070f6 <_vfprintf_r+0x17ca>
800070e2:	fa ca f9 78 	sub	r10,sp,-1672
800070e6:	02 9b       	mov	r11,r1
800070e8:	08 9c       	mov	r12,r4
800070ea:	f0 1f 00 26 	mcall	80007180 <_vfprintf_r+0x1854>
800070ee:	e0 81 03 e0 	brne	800078ae <_vfprintf_r+0x1f82>
800070f2:	fa c3 f9 e0 	sub	r3,sp,-1568
800070f6:	40 fc       	lddsp	r12,sp[0x3c]
800070f8:	58 0c       	cp.w	r12,0
800070fa:	c1 f0       	breq	80007138 <_vfprintf_r+0x180c>
800070fc:	fa f8 06 90 	ld.w	r8,sp[1680]
80007100:	fa c9 f9 48 	sub	r9,sp,-1720
80007104:	2f e8       	sub	r8,-2
80007106:	87 09       	st.w	r3[0x0],r9
80007108:	fb 48 06 90 	st.w	sp[1680],r8
8000710c:	30 29       	mov	r9,2
8000710e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007112:	87 19       	st.w	r3[0x4],r9
80007114:	2f f8       	sub	r8,-1
80007116:	fb 48 06 8c 	st.w	sp[1676],r8
8000711a:	58 78       	cp.w	r8,7
8000711c:	e0 89 00 04 	brgt	80007124 <_vfprintf_r+0x17f8>
80007120:	2f 83       	sub	r3,-8
80007122:	c0 b8       	rjmp	80007138 <_vfprintf_r+0x180c>
80007124:	fa ca f9 78 	sub	r10,sp,-1672
80007128:	02 9b       	mov	r11,r1
8000712a:	08 9c       	mov	r12,r4
8000712c:	f0 1f 00 15 	mcall	80007180 <_vfprintf_r+0x1854>
80007130:	e0 81 03 bf 	brne	800078ae <_vfprintf_r+0x1f82>
80007134:	fa c3 f9 e0 	sub	r3,sp,-1568
80007138:	40 9b       	lddsp	r11,sp[0x24]
8000713a:	e0 4b 00 80 	cp.w	r11,128
8000713e:	c5 21       	brne	800071e2 <_vfprintf_r+0x18b6>
80007140:	40 8a       	lddsp	r10,sp[0x20]
80007142:	40 39       	lddsp	r9,sp[0xc]
80007144:	12 1a       	sub	r10,r9
80007146:	50 4a       	stdsp	sp[0x10],r10
80007148:	58 0a       	cp.w	r10,0
8000714a:	e0 89 00 2c 	brgt	800071a2 <_vfprintf_r+0x1876>
8000714e:	c4 a8       	rjmp	800071e2 <_vfprintf_r+0x18b6>
80007150:	2f 09       	sub	r9,-16
80007152:	2f f8       	sub	r8,-1
80007154:	48 ce       	lddpc	lr,80007184 <_vfprintf_r+0x1858>
80007156:	31 0c       	mov	r12,16
80007158:	fb 49 06 90 	st.w	sp[1680],r9
8000715c:	87 0e       	st.w	r3[0x0],lr
8000715e:	87 1c       	st.w	r3[0x4],r12
80007160:	fb 48 06 8c 	st.w	sp[1676],r8
80007164:	58 78       	cp.w	r8,7
80007166:	e0 89 00 11 	brgt	80007188 <_vfprintf_r+0x185c>
8000716a:	2f 83       	sub	r3,-8
8000716c:	c1 88       	rjmp	8000719c <_vfprintf_r+0x1870>
8000716e:	00 00       	add	r0,r0
80007170:	80 00       	ld.sh	r0,r0[0x0]
80007172:	55 e8       	stdsp	sp[0x178],r8
80007174:	80 00       	ld.sh	r0,r0[0x0]
80007176:	a7 64       	lsl	r4,0x6
80007178:	80 00       	ld.sh	r0,r0[0x0]
8000717a:	a5 00       	ld.d	r0,r2
8000717c:	80 00       	ld.sh	r0,r0[0x0]
8000717e:	af d8       	cbr	r8,0xf
80007180:	80 00       	ld.sh	r0,r0[0x0]
80007182:	59 0c       	cp.w	r12,16
80007184:	80 00       	ld.sh	r0,r0[0x0]
80007186:	af e8       	*unknown*
80007188:	fa ca f9 78 	sub	r10,sp,-1672
8000718c:	02 9b       	mov	r11,r1
8000718e:	08 9c       	mov	r12,r4
80007190:	f0 1f 00 4c 	mcall	800072c0 <_vfprintf_r+0x1994>
80007194:	e0 81 03 8d 	brne	800078ae <_vfprintf_r+0x1f82>
80007198:	fa c3 f9 e0 	sub	r3,sp,-1568
8000719c:	40 4b       	lddsp	r11,sp[0x10]
8000719e:	21 0b       	sub	r11,16
800071a0:	50 4b       	stdsp	sp[0x10],r11
800071a2:	fa f9 06 90 	ld.w	r9,sp[1680]
800071a6:	fa f8 06 8c 	ld.w	r8,sp[1676]
800071aa:	4c 7a       	lddpc	r10,800072c4 <_vfprintf_r+0x1998>
800071ac:	40 4e       	lddsp	lr,sp[0x10]
800071ae:	59 0e       	cp.w	lr,16
800071b0:	fe 99 ff d0 	brgt	80007150 <_vfprintf_r+0x1824>
800071b4:	1c 09       	add	r9,lr
800071b6:	2f f8       	sub	r8,-1
800071b8:	87 0a       	st.w	r3[0x0],r10
800071ba:	fb 49 06 90 	st.w	sp[1680],r9
800071be:	87 1e       	st.w	r3[0x4],lr
800071c0:	fb 48 06 8c 	st.w	sp[1676],r8
800071c4:	58 78       	cp.w	r8,7
800071c6:	e0 89 00 04 	brgt	800071ce <_vfprintf_r+0x18a2>
800071ca:	2f 83       	sub	r3,-8
800071cc:	c0 b8       	rjmp	800071e2 <_vfprintf_r+0x18b6>
800071ce:	fa ca f9 78 	sub	r10,sp,-1672
800071d2:	02 9b       	mov	r11,r1
800071d4:	08 9c       	mov	r12,r4
800071d6:	f0 1f 00 3b 	mcall	800072c0 <_vfprintf_r+0x1994>
800071da:	e0 81 03 6a 	brne	800078ae <_vfprintf_r+0x1f82>
800071de:	fa c3 f9 e0 	sub	r3,sp,-1568
800071e2:	40 2c       	lddsp	r12,sp[0x8]
800071e4:	04 1c       	sub	r12,r2
800071e6:	50 2c       	stdsp	sp[0x8],r12
800071e8:	58 0c       	cp.w	r12,0
800071ea:	e0 89 00 1f 	brgt	80007228 <_vfprintf_r+0x18fc>
800071ee:	c3 d8       	rjmp	80007268 <_vfprintf_r+0x193c>
800071f0:	2f 09       	sub	r9,-16
800071f2:	2f f8       	sub	r8,-1
800071f4:	4b 4b       	lddpc	r11,800072c4 <_vfprintf_r+0x1998>
800071f6:	31 0a       	mov	r10,16
800071f8:	fb 49 06 90 	st.w	sp[1680],r9
800071fc:	87 0b       	st.w	r3[0x0],r11
800071fe:	87 1a       	st.w	r3[0x4],r10
80007200:	fb 48 06 8c 	st.w	sp[1676],r8
80007204:	58 78       	cp.w	r8,7
80007206:	e0 89 00 04 	brgt	8000720e <_vfprintf_r+0x18e2>
8000720a:	2f 83       	sub	r3,-8
8000720c:	c0 b8       	rjmp	80007222 <_vfprintf_r+0x18f6>
8000720e:	fa ca f9 78 	sub	r10,sp,-1672
80007212:	02 9b       	mov	r11,r1
80007214:	08 9c       	mov	r12,r4
80007216:	f0 1f 00 2b 	mcall	800072c0 <_vfprintf_r+0x1994>
8000721a:	e0 81 03 4a 	brne	800078ae <_vfprintf_r+0x1f82>
8000721e:	fa c3 f9 e0 	sub	r3,sp,-1568
80007222:	40 29       	lddsp	r9,sp[0x8]
80007224:	21 09       	sub	r9,16
80007226:	50 29       	stdsp	sp[0x8],r9
80007228:	fa f9 06 90 	ld.w	r9,sp[1680]
8000722c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007230:	4a 5a       	lddpc	r10,800072c4 <_vfprintf_r+0x1998>
80007232:	40 2e       	lddsp	lr,sp[0x8]
80007234:	59 0e       	cp.w	lr,16
80007236:	fe 99 ff dd 	brgt	800071f0 <_vfprintf_r+0x18c4>
8000723a:	1c 09       	add	r9,lr
8000723c:	2f f8       	sub	r8,-1
8000723e:	87 0a       	st.w	r3[0x0],r10
80007240:	fb 49 06 90 	st.w	sp[1680],r9
80007244:	87 1e       	st.w	r3[0x4],lr
80007246:	fb 48 06 8c 	st.w	sp[1676],r8
8000724a:	58 78       	cp.w	r8,7
8000724c:	e0 89 00 04 	brgt	80007254 <_vfprintf_r+0x1928>
80007250:	2f 83       	sub	r3,-8
80007252:	c0 b8       	rjmp	80007268 <_vfprintf_r+0x193c>
80007254:	fa ca f9 78 	sub	r10,sp,-1672
80007258:	02 9b       	mov	r11,r1
8000725a:	08 9c       	mov	r12,r4
8000725c:	f0 1f 00 19 	mcall	800072c0 <_vfprintf_r+0x1994>
80007260:	e0 81 03 27 	brne	800078ae <_vfprintf_r+0x1f82>
80007264:	fa c3 f9 e0 	sub	r3,sp,-1568
80007268:	ed b5 00 08 	bld	r5,0x8
8000726c:	c0 b0       	breq	80007282 <_vfprintf_r+0x1956>
8000726e:	fa f8 06 90 	ld.w	r8,sp[1680]
80007272:	87 12       	st.w	r3[0x4],r2
80007274:	87 06       	st.w	r3[0x0],r6
80007276:	f0 02 00 02 	add	r2,r8,r2
8000727a:	fb 42 06 90 	st.w	sp[1680],r2
8000727e:	e0 8f 01 db 	bral	80007634 <_vfprintf_r+0x1d08>
80007282:	e0 40 00 65 	cp.w	r0,101
80007286:	e0 8a 01 dd 	brle	80007640 <_vfprintf_r+0x1d14>
8000728a:	30 08       	mov	r8,0
8000728c:	30 09       	mov	r9,0
8000728e:	40 5b       	lddsp	r11,sp[0x14]
80007290:	40 7a       	lddsp	r10,sp[0x1c]
80007292:	f0 1f 00 0e 	mcall	800072c8 <_vfprintf_r+0x199c>
80007296:	c7 e0       	breq	80007392 <_vfprintf_r+0x1a66>
80007298:	fa f8 06 90 	ld.w	r8,sp[1680]
8000729c:	48 c9       	lddpc	r9,800072cc <_vfprintf_r+0x19a0>
8000729e:	2f f8       	sub	r8,-1
800072a0:	87 09       	st.w	r3[0x0],r9
800072a2:	fb 48 06 90 	st.w	sp[1680],r8
800072a6:	30 19       	mov	r9,1
800072a8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800072ac:	87 19       	st.w	r3[0x4],r9
800072ae:	2f f8       	sub	r8,-1
800072b0:	fb 48 06 8c 	st.w	sp[1676],r8
800072b4:	58 78       	cp.w	r8,7
800072b6:	e0 89 00 0d 	brgt	800072d0 <_vfprintf_r+0x19a4>
800072ba:	2f 83       	sub	r3,-8
800072bc:	c1 48       	rjmp	800072e4 <_vfprintf_r+0x19b8>
800072be:	00 00       	add	r0,r0
800072c0:	80 00       	ld.sh	r0,r0[0x0]
800072c2:	59 0c       	cp.w	r12,16
800072c4:	80 00       	ld.sh	r0,r0[0x0]
800072c6:	af e8       	*unknown*
800072c8:	80 00       	ld.sh	r0,r0[0x0]
800072ca:	a0 f2       	st.b	r0[0x7],r2
800072cc:	80 00       	ld.sh	r0,r0[0x0]
800072ce:	af d4       	cbr	r4,0xf
800072d0:	fa ca f9 78 	sub	r10,sp,-1672
800072d4:	02 9b       	mov	r11,r1
800072d6:	08 9c       	mov	r12,r4
800072d8:	f0 1f 00 78 	mcall	800074b8 <_vfprintf_r+0x1b8c>
800072dc:	e0 81 02 e9 	brne	800078ae <_vfprintf_r+0x1f82>
800072e0:	fa c3 f9 e0 	sub	r3,sp,-1568
800072e4:	fa f8 06 ac 	ld.w	r8,sp[1708]
800072e8:	40 6c       	lddsp	r12,sp[0x18]
800072ea:	18 38       	cp.w	r8,r12
800072ec:	c0 55       	brlt	800072f6 <_vfprintf_r+0x19ca>
800072ee:	ed b5 00 00 	bld	r5,0x0
800072f2:	e0 81 02 6d 	brne	800077cc <_vfprintf_r+0x1ea0>
800072f6:	fa f8 06 90 	ld.w	r8,sp[1680]
800072fa:	2f f8       	sub	r8,-1
800072fc:	40 cb       	lddsp	r11,sp[0x30]
800072fe:	fb 48 06 90 	st.w	sp[1680],r8
80007302:	30 19       	mov	r9,1
80007304:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007308:	87 0b       	st.w	r3[0x0],r11
8000730a:	2f f8       	sub	r8,-1
8000730c:	87 19       	st.w	r3[0x4],r9
8000730e:	fb 48 06 8c 	st.w	sp[1676],r8
80007312:	58 78       	cp.w	r8,7
80007314:	e0 89 00 04 	brgt	8000731c <_vfprintf_r+0x19f0>
80007318:	2f 83       	sub	r3,-8
8000731a:	c0 b8       	rjmp	80007330 <_vfprintf_r+0x1a04>
8000731c:	fa ca f9 78 	sub	r10,sp,-1672
80007320:	02 9b       	mov	r11,r1
80007322:	08 9c       	mov	r12,r4
80007324:	f0 1f 00 65 	mcall	800074b8 <_vfprintf_r+0x1b8c>
80007328:	e0 81 02 c3 	brne	800078ae <_vfprintf_r+0x1f82>
8000732c:	fa c3 f9 e0 	sub	r3,sp,-1568
80007330:	40 66       	lddsp	r6,sp[0x18]
80007332:	20 16       	sub	r6,1
80007334:	58 06       	cp.w	r6,0
80007336:	e0 89 00 1d 	brgt	80007370 <_vfprintf_r+0x1a44>
8000733a:	e0 8f 02 49 	bral	800077cc <_vfprintf_r+0x1ea0>
8000733e:	2f 09       	sub	r9,-16
80007340:	2f f8       	sub	r8,-1
80007342:	fb 49 06 90 	st.w	sp[1680],r9
80007346:	87 02       	st.w	r3[0x0],r2
80007348:	87 10       	st.w	r3[0x4],r0
8000734a:	fb 48 06 8c 	st.w	sp[1676],r8
8000734e:	58 78       	cp.w	r8,7
80007350:	e0 89 00 04 	brgt	80007358 <_vfprintf_r+0x1a2c>
80007354:	2f 83       	sub	r3,-8
80007356:	c0 b8       	rjmp	8000736c <_vfprintf_r+0x1a40>
80007358:	fa ca f9 78 	sub	r10,sp,-1672
8000735c:	02 9b       	mov	r11,r1
8000735e:	08 9c       	mov	r12,r4
80007360:	f0 1f 00 56 	mcall	800074b8 <_vfprintf_r+0x1b8c>
80007364:	e0 81 02 a5 	brne	800078ae <_vfprintf_r+0x1f82>
80007368:	fa c3 f9 e0 	sub	r3,sp,-1568
8000736c:	21 06       	sub	r6,16
8000736e:	c0 38       	rjmp	80007374 <_vfprintf_r+0x1a48>
80007370:	4d 32       	lddpc	r2,800074bc <_vfprintf_r+0x1b90>
80007372:	31 00       	mov	r0,16
80007374:	fa f9 06 90 	ld.w	r9,sp[1680]
80007378:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000737c:	4d 0a       	lddpc	r10,800074bc <_vfprintf_r+0x1b90>
8000737e:	59 06       	cp.w	r6,16
80007380:	fe 99 ff df 	brgt	8000733e <_vfprintf_r+0x1a12>
80007384:	0c 09       	add	r9,r6
80007386:	87 0a       	st.w	r3[0x0],r10
80007388:	fb 49 06 90 	st.w	sp[1680],r9
8000738c:	2f f8       	sub	r8,-1
8000738e:	87 16       	st.w	r3[0x4],r6
80007390:	c5 59       	rjmp	8000763a <_vfprintf_r+0x1d0e>
80007392:	fa fa 06 ac 	ld.w	r10,sp[1708]
80007396:	58 0a       	cp.w	r10,0
80007398:	e0 89 00 96 	brgt	800074c4 <_vfprintf_r+0x1b98>
8000739c:	fa f8 06 90 	ld.w	r8,sp[1680]
800073a0:	4c 89       	lddpc	r9,800074c0 <_vfprintf_r+0x1b94>
800073a2:	2f f8       	sub	r8,-1
800073a4:	87 09       	st.w	r3[0x0],r9
800073a6:	fb 48 06 90 	st.w	sp[1680],r8
800073aa:	30 19       	mov	r9,1
800073ac:	fa f8 06 8c 	ld.w	r8,sp[1676]
800073b0:	87 19       	st.w	r3[0x4],r9
800073b2:	2f f8       	sub	r8,-1
800073b4:	fb 48 06 8c 	st.w	sp[1676],r8
800073b8:	58 78       	cp.w	r8,7
800073ba:	e0 89 00 04 	brgt	800073c2 <_vfprintf_r+0x1a96>
800073be:	2f 83       	sub	r3,-8
800073c0:	c0 b8       	rjmp	800073d6 <_vfprintf_r+0x1aaa>
800073c2:	fa ca f9 78 	sub	r10,sp,-1672
800073c6:	02 9b       	mov	r11,r1
800073c8:	08 9c       	mov	r12,r4
800073ca:	f0 1f 00 3c 	mcall	800074b8 <_vfprintf_r+0x1b8c>
800073ce:	e0 81 02 70 	brne	800078ae <_vfprintf_r+0x1f82>
800073d2:	fa c3 f9 e0 	sub	r3,sp,-1568
800073d6:	fa f8 06 ac 	ld.w	r8,sp[1708]
800073da:	58 08       	cp.w	r8,0
800073dc:	c0 81       	brne	800073ec <_vfprintf_r+0x1ac0>
800073de:	40 6a       	lddsp	r10,sp[0x18]
800073e0:	58 0a       	cp.w	r10,0
800073e2:	c0 51       	brne	800073ec <_vfprintf_r+0x1ac0>
800073e4:	ed b5 00 00 	bld	r5,0x0
800073e8:	e0 81 01 f2 	brne	800077cc <_vfprintf_r+0x1ea0>
800073ec:	40 c9       	lddsp	r9,sp[0x30]
800073ee:	fa f8 06 90 	ld.w	r8,sp[1680]
800073f2:	2f f8       	sub	r8,-1
800073f4:	87 09       	st.w	r3[0x0],r9
800073f6:	fb 48 06 90 	st.w	sp[1680],r8
800073fa:	30 19       	mov	r9,1
800073fc:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007400:	87 19       	st.w	r3[0x4],r9
80007402:	2f f8       	sub	r8,-1
80007404:	fb 48 06 8c 	st.w	sp[1676],r8
80007408:	58 78       	cp.w	r8,7
8000740a:	e0 89 00 04 	brgt	80007412 <_vfprintf_r+0x1ae6>
8000740e:	2f 83       	sub	r3,-8
80007410:	c0 b8       	rjmp	80007426 <_vfprintf_r+0x1afa>
80007412:	fa ca f9 78 	sub	r10,sp,-1672
80007416:	02 9b       	mov	r11,r1
80007418:	08 9c       	mov	r12,r4
8000741a:	f0 1f 00 28 	mcall	800074b8 <_vfprintf_r+0x1b8c>
8000741e:	e0 81 02 48 	brne	800078ae <_vfprintf_r+0x1f82>
80007422:	fa c3 f9 e0 	sub	r3,sp,-1568
80007426:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000742a:	5c 32       	neg	r2
8000742c:	58 02       	cp.w	r2,0
8000742e:	e0 89 00 1d 	brgt	80007468 <_vfprintf_r+0x1b3c>
80007432:	c3 b8       	rjmp	800074a8 <_vfprintf_r+0x1b7c>
80007434:	2f 09       	sub	r9,-16
80007436:	2f f8       	sub	r8,-1
80007438:	31 0e       	mov	lr,16
8000743a:	fb 49 06 90 	st.w	sp[1680],r9
8000743e:	87 00       	st.w	r3[0x0],r0
80007440:	87 1e       	st.w	r3[0x4],lr
80007442:	fb 48 06 8c 	st.w	sp[1676],r8
80007446:	58 78       	cp.w	r8,7
80007448:	e0 89 00 04 	brgt	80007450 <_vfprintf_r+0x1b24>
8000744c:	2f 83       	sub	r3,-8
8000744e:	c0 b8       	rjmp	80007464 <_vfprintf_r+0x1b38>
80007450:	fa ca f9 78 	sub	r10,sp,-1672
80007454:	02 9b       	mov	r11,r1
80007456:	08 9c       	mov	r12,r4
80007458:	f0 1f 00 18 	mcall	800074b8 <_vfprintf_r+0x1b8c>
8000745c:	e0 81 02 29 	brne	800078ae <_vfprintf_r+0x1f82>
80007460:	fa c3 f9 e0 	sub	r3,sp,-1568
80007464:	21 02       	sub	r2,16
80007466:	c0 28       	rjmp	8000746a <_vfprintf_r+0x1b3e>
80007468:	49 50       	lddpc	r0,800074bc <_vfprintf_r+0x1b90>
8000746a:	fa f9 06 90 	ld.w	r9,sp[1680]
8000746e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007472:	49 3a       	lddpc	r10,800074bc <_vfprintf_r+0x1b90>
80007474:	59 02       	cp.w	r2,16
80007476:	fe 99 ff df 	brgt	80007434 <_vfprintf_r+0x1b08>
8000747a:	04 09       	add	r9,r2
8000747c:	2f f8       	sub	r8,-1
8000747e:	87 0a       	st.w	r3[0x0],r10
80007480:	fb 49 06 90 	st.w	sp[1680],r9
80007484:	87 12       	st.w	r3[0x4],r2
80007486:	fb 48 06 8c 	st.w	sp[1676],r8
8000748a:	58 78       	cp.w	r8,7
8000748c:	e0 89 00 04 	brgt	80007494 <_vfprintf_r+0x1b68>
80007490:	2f 83       	sub	r3,-8
80007492:	c0 b8       	rjmp	800074a8 <_vfprintf_r+0x1b7c>
80007494:	fa ca f9 78 	sub	r10,sp,-1672
80007498:	02 9b       	mov	r11,r1
8000749a:	08 9c       	mov	r12,r4
8000749c:	f0 1f 00 07 	mcall	800074b8 <_vfprintf_r+0x1b8c>
800074a0:	e0 81 02 07 	brne	800078ae <_vfprintf_r+0x1f82>
800074a4:	fa c3 f9 e0 	sub	r3,sp,-1568
800074a8:	40 6c       	lddsp	r12,sp[0x18]
800074aa:	fa f8 06 90 	ld.w	r8,sp[1680]
800074ae:	87 06       	st.w	r3[0x0],r6
800074b0:	87 1c       	st.w	r3[0x4],r12
800074b2:	18 08       	add	r8,r12
800074b4:	cb e8       	rjmp	80007630 <_vfprintf_r+0x1d04>
800074b6:	00 00       	add	r0,r0
800074b8:	80 00       	ld.sh	r0,r0[0x0]
800074ba:	59 0c       	cp.w	r12,16
800074bc:	80 00       	ld.sh	r0,r0[0x0]
800074be:	af e8       	*unknown*
800074c0:	80 00       	ld.sh	r0,r0[0x0]
800074c2:	af d4       	cbr	r4,0xf
800074c4:	fa f9 06 90 	ld.w	r9,sp[1680]
800074c8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800074cc:	40 6b       	lddsp	r11,sp[0x18]
800074ce:	16 3a       	cp.w	r10,r11
800074d0:	c6 d5       	brlt	800075aa <_vfprintf_r+0x1c7e>
800074d2:	16 09       	add	r9,r11
800074d4:	2f f8       	sub	r8,-1
800074d6:	87 06       	st.w	r3[0x0],r6
800074d8:	fb 49 06 90 	st.w	sp[1680],r9
800074dc:	87 1b       	st.w	r3[0x4],r11
800074de:	fb 48 06 8c 	st.w	sp[1676],r8
800074e2:	58 78       	cp.w	r8,7
800074e4:	e0 89 00 04 	brgt	800074ec <_vfprintf_r+0x1bc0>
800074e8:	2f 83       	sub	r3,-8
800074ea:	c0 b8       	rjmp	80007500 <_vfprintf_r+0x1bd4>
800074ec:	fa ca f9 78 	sub	r10,sp,-1672
800074f0:	02 9b       	mov	r11,r1
800074f2:	08 9c       	mov	r12,r4
800074f4:	f0 1f 00 6f 	mcall	800076b0 <_vfprintf_r+0x1d84>
800074f8:	e0 81 01 db 	brne	800078ae <_vfprintf_r+0x1f82>
800074fc:	fa c3 f9 e0 	sub	r3,sp,-1568
80007500:	fa f6 06 ac 	ld.w	r6,sp[1708]
80007504:	40 6a       	lddsp	r10,sp[0x18]
80007506:	14 16       	sub	r6,r10
80007508:	58 06       	cp.w	r6,0
8000750a:	e0 89 00 1c 	brgt	80007542 <_vfprintf_r+0x1c16>
8000750e:	c3 b8       	rjmp	80007584 <_vfprintf_r+0x1c58>
80007510:	2f 09       	sub	r9,-16
80007512:	2f f8       	sub	r8,-1
80007514:	fb 49 06 90 	st.w	sp[1680],r9
80007518:	87 02       	st.w	r3[0x0],r2
8000751a:	87 10       	st.w	r3[0x4],r0
8000751c:	fb 48 06 8c 	st.w	sp[1676],r8
80007520:	58 78       	cp.w	r8,7
80007522:	e0 89 00 04 	brgt	8000752a <_vfprintf_r+0x1bfe>
80007526:	2f 83       	sub	r3,-8
80007528:	c0 b8       	rjmp	8000753e <_vfprintf_r+0x1c12>
8000752a:	fa ca f9 78 	sub	r10,sp,-1672
8000752e:	02 9b       	mov	r11,r1
80007530:	08 9c       	mov	r12,r4
80007532:	f0 1f 00 60 	mcall	800076b0 <_vfprintf_r+0x1d84>
80007536:	e0 81 01 bc 	brne	800078ae <_vfprintf_r+0x1f82>
8000753a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000753e:	21 06       	sub	r6,16
80007540:	c0 38       	rjmp	80007546 <_vfprintf_r+0x1c1a>
80007542:	4d d2       	lddpc	r2,800076b4 <_vfprintf_r+0x1d88>
80007544:	31 00       	mov	r0,16
80007546:	fa f9 06 90 	ld.w	r9,sp[1680]
8000754a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000754e:	4d aa       	lddpc	r10,800076b4 <_vfprintf_r+0x1d88>
80007550:	59 06       	cp.w	r6,16
80007552:	fe 99 ff df 	brgt	80007510 <_vfprintf_r+0x1be4>
80007556:	0c 09       	add	r9,r6
80007558:	2f f8       	sub	r8,-1
8000755a:	87 0a       	st.w	r3[0x0],r10
8000755c:	fb 49 06 90 	st.w	sp[1680],r9
80007560:	87 16       	st.w	r3[0x4],r6
80007562:	fb 48 06 8c 	st.w	sp[1676],r8
80007566:	58 78       	cp.w	r8,7
80007568:	e0 89 00 04 	brgt	80007570 <_vfprintf_r+0x1c44>
8000756c:	2f 83       	sub	r3,-8
8000756e:	c0 b8       	rjmp	80007584 <_vfprintf_r+0x1c58>
80007570:	fa ca f9 78 	sub	r10,sp,-1672
80007574:	02 9b       	mov	r11,r1
80007576:	08 9c       	mov	r12,r4
80007578:	f0 1f 00 4e 	mcall	800076b0 <_vfprintf_r+0x1d84>
8000757c:	e0 81 01 99 	brne	800078ae <_vfprintf_r+0x1f82>
80007580:	fa c3 f9 e0 	sub	r3,sp,-1568
80007584:	ed b5 00 00 	bld	r5,0x0
80007588:	e0 81 01 22 	brne	800077cc <_vfprintf_r+0x1ea0>
8000758c:	40 c9       	lddsp	r9,sp[0x30]
8000758e:	fa f8 06 90 	ld.w	r8,sp[1680]
80007592:	2f f8       	sub	r8,-1
80007594:	87 09       	st.w	r3[0x0],r9
80007596:	fb 48 06 90 	st.w	sp[1680],r8
8000759a:	30 19       	mov	r9,1
8000759c:	fa f8 06 8c 	ld.w	r8,sp[1676]
800075a0:	87 19       	st.w	r3[0x4],r9
800075a2:	2f f8       	sub	r8,-1
800075a4:	fb 48 06 8c 	st.w	sp[1676],r8
800075a8:	c0 49       	rjmp	800077b0 <_vfprintf_r+0x1e84>
800075aa:	14 09       	add	r9,r10
800075ac:	2f f8       	sub	r8,-1
800075ae:	fb 49 06 90 	st.w	sp[1680],r9
800075b2:	87 06       	st.w	r3[0x0],r6
800075b4:	87 1a       	st.w	r3[0x4],r10
800075b6:	fb 48 06 8c 	st.w	sp[1676],r8
800075ba:	58 78       	cp.w	r8,7
800075bc:	e0 89 00 04 	brgt	800075c4 <_vfprintf_r+0x1c98>
800075c0:	2f 83       	sub	r3,-8
800075c2:	c0 b8       	rjmp	800075d8 <_vfprintf_r+0x1cac>
800075c4:	fa ca f9 78 	sub	r10,sp,-1672
800075c8:	02 9b       	mov	r11,r1
800075ca:	08 9c       	mov	r12,r4
800075cc:	f0 1f 00 39 	mcall	800076b0 <_vfprintf_r+0x1d84>
800075d0:	e0 81 01 6f 	brne	800078ae <_vfprintf_r+0x1f82>
800075d4:	fa c3 f9 e0 	sub	r3,sp,-1568
800075d8:	40 c8       	lddsp	r8,sp[0x30]
800075da:	87 08       	st.w	r3[0x0],r8
800075dc:	fa f8 06 90 	ld.w	r8,sp[1680]
800075e0:	2f f8       	sub	r8,-1
800075e2:	30 19       	mov	r9,1
800075e4:	fb 48 06 90 	st.w	sp[1680],r8
800075e8:	87 19       	st.w	r3[0x4],r9
800075ea:	fa f8 06 8c 	ld.w	r8,sp[1676]
800075ee:	2f f8       	sub	r8,-1
800075f0:	fb 48 06 8c 	st.w	sp[1676],r8
800075f4:	fa f2 06 ac 	ld.w	r2,sp[1708]
800075f8:	58 78       	cp.w	r8,7
800075fa:	e0 89 00 04 	brgt	80007602 <_vfprintf_r+0x1cd6>
800075fe:	2f 83       	sub	r3,-8
80007600:	c0 b8       	rjmp	80007616 <_vfprintf_r+0x1cea>
80007602:	fa ca f9 78 	sub	r10,sp,-1672
80007606:	02 9b       	mov	r11,r1
80007608:	08 9c       	mov	r12,r4
8000760a:	f0 1f 00 2a 	mcall	800076b0 <_vfprintf_r+0x1d84>
8000760e:	e0 81 01 50 	brne	800078ae <_vfprintf_r+0x1f82>
80007612:	fa c3 f9 e0 	sub	r3,sp,-1568
80007616:	04 06       	add	r6,r2
80007618:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000761c:	87 06       	st.w	r3[0x0],r6
8000761e:	fa f9 06 90 	ld.w	r9,sp[1680]
80007622:	40 66       	lddsp	r6,sp[0x18]
80007624:	40 6e       	lddsp	lr,sp[0x18]
80007626:	10 16       	sub	r6,r8
80007628:	f2 08 01 08 	sub	r8,r9,r8
8000762c:	87 16       	st.w	r3[0x4],r6
8000762e:	1c 08       	add	r8,lr
80007630:	fb 48 06 90 	st.w	sp[1680],r8
80007634:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007638:	2f f8       	sub	r8,-1
8000763a:	fb 48 06 8c 	st.w	sp[1676],r8
8000763e:	cb 98       	rjmp	800077b0 <_vfprintf_r+0x1e84>
80007640:	40 6c       	lddsp	r12,sp[0x18]
80007642:	58 1c       	cp.w	r12,1
80007644:	e0 89 00 06 	brgt	80007650 <_vfprintf_r+0x1d24>
80007648:	ed b5 00 00 	bld	r5,0x0
8000764c:	e0 81 00 87 	brne	8000775a <_vfprintf_r+0x1e2e>
80007650:	fa f8 06 90 	ld.w	r8,sp[1680]
80007654:	2f f8       	sub	r8,-1
80007656:	30 19       	mov	r9,1
80007658:	fb 48 06 90 	st.w	sp[1680],r8
8000765c:	87 06       	st.w	r3[0x0],r6
8000765e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007662:	87 19       	st.w	r3[0x4],r9
80007664:	2f f8       	sub	r8,-1
80007666:	fb 48 06 8c 	st.w	sp[1676],r8
8000766a:	58 78       	cp.w	r8,7
8000766c:	e0 89 00 04 	brgt	80007674 <_vfprintf_r+0x1d48>
80007670:	2f 83       	sub	r3,-8
80007672:	c0 b8       	rjmp	80007688 <_vfprintf_r+0x1d5c>
80007674:	fa ca f9 78 	sub	r10,sp,-1672
80007678:	02 9b       	mov	r11,r1
8000767a:	08 9c       	mov	r12,r4
8000767c:	f0 1f 00 0d 	mcall	800076b0 <_vfprintf_r+0x1d84>
80007680:	e0 81 01 17 	brne	800078ae <_vfprintf_r+0x1f82>
80007684:	fa c3 f9 e0 	sub	r3,sp,-1568
80007688:	fa f8 06 90 	ld.w	r8,sp[1680]
8000768c:	2f f8       	sub	r8,-1
8000768e:	40 cb       	lddsp	r11,sp[0x30]
80007690:	fb 48 06 90 	st.w	sp[1680],r8
80007694:	30 19       	mov	r9,1
80007696:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000769a:	87 0b       	st.w	r3[0x0],r11
8000769c:	2f f8       	sub	r8,-1
8000769e:	87 19       	st.w	r3[0x4],r9
800076a0:	fb 48 06 8c 	st.w	sp[1676],r8
800076a4:	58 78       	cp.w	r8,7
800076a6:	e0 89 00 09 	brgt	800076b8 <_vfprintf_r+0x1d8c>
800076aa:	2f 83       	sub	r3,-8
800076ac:	c1 08       	rjmp	800076cc <_vfprintf_r+0x1da0>
800076ae:	00 00       	add	r0,r0
800076b0:	80 00       	ld.sh	r0,r0[0x0]
800076b2:	59 0c       	cp.w	r12,16
800076b4:	80 00       	ld.sh	r0,r0[0x0]
800076b6:	af e8       	*unknown*
800076b8:	fa ca f9 78 	sub	r10,sp,-1672
800076bc:	02 9b       	mov	r11,r1
800076be:	08 9c       	mov	r12,r4
800076c0:	f0 1f 00 6f 	mcall	8000787c <_vfprintf_r+0x1f50>
800076c4:	e0 81 00 f5 	brne	800078ae <_vfprintf_r+0x1f82>
800076c8:	fa c3 f9 e0 	sub	r3,sp,-1568
800076cc:	30 08       	mov	r8,0
800076ce:	30 09       	mov	r9,0
800076d0:	40 5b       	lddsp	r11,sp[0x14]
800076d2:	40 7a       	lddsp	r10,sp[0x1c]
800076d4:	f0 1f 00 6b 	mcall	80007880 <_vfprintf_r+0x1f54>
800076d8:	40 68       	lddsp	r8,sp[0x18]
800076da:	20 18       	sub	r8,1
800076dc:	58 0c       	cp.w	r12,0
800076de:	c0 d1       	brne	800076f8 <_vfprintf_r+0x1dcc>
800076e0:	2f f6       	sub	r6,-1
800076e2:	87 18       	st.w	r3[0x4],r8
800076e4:	87 06       	st.w	r3[0x0],r6
800076e6:	fa f6 06 90 	ld.w	r6,sp[1680]
800076ea:	10 06       	add	r6,r8
800076ec:	fa f8 06 8c 	ld.w	r8,sp[1676]
800076f0:	fb 46 06 90 	st.w	sp[1680],r6
800076f4:	2f f8       	sub	r8,-1
800076f6:	c2 f8       	rjmp	80007754 <_vfprintf_r+0x1e28>
800076f8:	10 96       	mov	r6,r8
800076fa:	58 08       	cp.w	r8,0
800076fc:	e0 89 00 1c 	brgt	80007734 <_vfprintf_r+0x1e08>
80007700:	c4 98       	rjmp	80007792 <_vfprintf_r+0x1e66>
80007702:	2f 09       	sub	r9,-16
80007704:	2f f8       	sub	r8,-1
80007706:	fb 49 06 90 	st.w	sp[1680],r9
8000770a:	87 02       	st.w	r3[0x0],r2
8000770c:	87 10       	st.w	r3[0x4],r0
8000770e:	fb 48 06 8c 	st.w	sp[1676],r8
80007712:	58 78       	cp.w	r8,7
80007714:	e0 89 00 04 	brgt	8000771c <_vfprintf_r+0x1df0>
80007718:	2f 83       	sub	r3,-8
8000771a:	c0 b8       	rjmp	80007730 <_vfprintf_r+0x1e04>
8000771c:	fa ca f9 78 	sub	r10,sp,-1672
80007720:	02 9b       	mov	r11,r1
80007722:	08 9c       	mov	r12,r4
80007724:	f0 1f 00 56 	mcall	8000787c <_vfprintf_r+0x1f50>
80007728:	e0 81 00 c3 	brne	800078ae <_vfprintf_r+0x1f82>
8000772c:	fa c3 f9 e0 	sub	r3,sp,-1568
80007730:	21 06       	sub	r6,16
80007732:	c0 38       	rjmp	80007738 <_vfprintf_r+0x1e0c>
80007734:	4d 42       	lddpc	r2,80007884 <_vfprintf_r+0x1f58>
80007736:	31 00       	mov	r0,16
80007738:	fa f9 06 90 	ld.w	r9,sp[1680]
8000773c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007740:	4d 1a       	lddpc	r10,80007884 <_vfprintf_r+0x1f58>
80007742:	59 06       	cp.w	r6,16
80007744:	fe 99 ff df 	brgt	80007702 <_vfprintf_r+0x1dd6>
80007748:	0c 09       	add	r9,r6
8000774a:	87 0a       	st.w	r3[0x0],r10
8000774c:	fb 49 06 90 	st.w	sp[1680],r9
80007750:	2f f8       	sub	r8,-1
80007752:	87 16       	st.w	r3[0x4],r6
80007754:	fb 48 06 8c 	st.w	sp[1676],r8
80007758:	c0 e8       	rjmp	80007774 <_vfprintf_r+0x1e48>
8000775a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000775e:	2f f8       	sub	r8,-1
80007760:	30 19       	mov	r9,1
80007762:	fb 48 06 90 	st.w	sp[1680],r8
80007766:	87 06       	st.w	r3[0x0],r6
80007768:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000776c:	87 19       	st.w	r3[0x4],r9
8000776e:	2f f8       	sub	r8,-1
80007770:	fb 48 06 8c 	st.w	sp[1676],r8
80007774:	58 78       	cp.w	r8,7
80007776:	e0 89 00 04 	brgt	8000777e <_vfprintf_r+0x1e52>
8000777a:	2f 83       	sub	r3,-8
8000777c:	c0 b8       	rjmp	80007792 <_vfprintf_r+0x1e66>
8000777e:	fa ca f9 78 	sub	r10,sp,-1672
80007782:	02 9b       	mov	r11,r1
80007784:	08 9c       	mov	r12,r4
80007786:	f0 1f 00 3e 	mcall	8000787c <_vfprintf_r+0x1f50>
8000778a:	e0 81 00 92 	brne	800078ae <_vfprintf_r+0x1f82>
8000778e:	fa c3 f9 e0 	sub	r3,sp,-1568
80007792:	40 ea       	lddsp	r10,sp[0x38]
80007794:	fa f8 06 90 	ld.w	r8,sp[1680]
80007798:	14 08       	add	r8,r10
8000779a:	fa c9 f9 64 	sub	r9,sp,-1692
8000779e:	fb 48 06 90 	st.w	sp[1680],r8
800077a2:	87 1a       	st.w	r3[0x4],r10
800077a4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800077a8:	87 09       	st.w	r3[0x0],r9
800077aa:	2f f8       	sub	r8,-1
800077ac:	fb 48 06 8c 	st.w	sp[1676],r8
800077b0:	58 78       	cp.w	r8,7
800077b2:	e0 89 00 04 	brgt	800077ba <_vfprintf_r+0x1e8e>
800077b6:	2f 83       	sub	r3,-8
800077b8:	c0 a8       	rjmp	800077cc <_vfprintf_r+0x1ea0>
800077ba:	fa ca f9 78 	sub	r10,sp,-1672
800077be:	02 9b       	mov	r11,r1
800077c0:	08 9c       	mov	r12,r4
800077c2:	f0 1f 00 2f 	mcall	8000787c <_vfprintf_r+0x1f50>
800077c6:	c7 41       	brne	800078ae <_vfprintf_r+0x1f82>
800077c8:	fa c3 f9 e0 	sub	r3,sp,-1568
800077cc:	e2 15 00 04 	andl	r5,0x4,COH
800077d0:	c3 d0       	breq	8000784a <_vfprintf_r+0x1f1e>
800077d2:	40 86       	lddsp	r6,sp[0x20]
800077d4:	40 39       	lddsp	r9,sp[0xc]
800077d6:	12 16       	sub	r6,r9
800077d8:	58 06       	cp.w	r6,0
800077da:	e0 89 00 1a 	brgt	8000780e <_vfprintf_r+0x1ee2>
800077de:	c3 68       	rjmp	8000784a <_vfprintf_r+0x1f1e>
800077e0:	2f 09       	sub	r9,-16
800077e2:	2f f8       	sub	r8,-1
800077e4:	fb 49 06 90 	st.w	sp[1680],r9
800077e8:	87 05       	st.w	r3[0x0],r5
800077ea:	87 12       	st.w	r3[0x4],r2
800077ec:	fb 48 06 8c 	st.w	sp[1676],r8
800077f0:	58 78       	cp.w	r8,7
800077f2:	e0 89 00 04 	brgt	800077fa <_vfprintf_r+0x1ece>
800077f6:	2f 83       	sub	r3,-8
800077f8:	c0 98       	rjmp	8000780a <_vfprintf_r+0x1ede>
800077fa:	00 9a       	mov	r10,r0
800077fc:	02 9b       	mov	r11,r1
800077fe:	08 9c       	mov	r12,r4
80007800:	f0 1f 00 1f 	mcall	8000787c <_vfprintf_r+0x1f50>
80007804:	c5 51       	brne	800078ae <_vfprintf_r+0x1f82>
80007806:	fa c3 f9 e0 	sub	r3,sp,-1568
8000780a:	21 06       	sub	r6,16
8000780c:	c0 58       	rjmp	80007816 <_vfprintf_r+0x1eea>
8000780e:	49 f5       	lddpc	r5,80007888 <_vfprintf_r+0x1f5c>
80007810:	31 02       	mov	r2,16
80007812:	fa c0 f9 78 	sub	r0,sp,-1672
80007816:	fa f9 06 90 	ld.w	r9,sp[1680]
8000781a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000781e:	49 ba       	lddpc	r10,80007888 <_vfprintf_r+0x1f5c>
80007820:	59 06       	cp.w	r6,16
80007822:	fe 99 ff df 	brgt	800077e0 <_vfprintf_r+0x1eb4>
80007826:	0c 09       	add	r9,r6
80007828:	2f f8       	sub	r8,-1
8000782a:	87 0a       	st.w	r3[0x0],r10
8000782c:	87 16       	st.w	r3[0x4],r6
8000782e:	fb 49 06 90 	st.w	sp[1680],r9
80007832:	fb 48 06 8c 	st.w	sp[1676],r8
80007836:	58 78       	cp.w	r8,7
80007838:	e0 8a 00 09 	brle	8000784a <_vfprintf_r+0x1f1e>
8000783c:	fa ca f9 78 	sub	r10,sp,-1672
80007840:	02 9b       	mov	r11,r1
80007842:	08 9c       	mov	r12,r4
80007844:	f0 1f 00 0e 	mcall	8000787c <_vfprintf_r+0x1f50>
80007848:	c3 31       	brne	800078ae <_vfprintf_r+0x1f82>
8000784a:	40 bc       	lddsp	r12,sp[0x2c]
8000784c:	40 36       	lddsp	r6,sp[0xc]
8000784e:	40 8e       	lddsp	lr,sp[0x20]
80007850:	ec 0e 0c 48 	max	r8,r6,lr
80007854:	10 0c       	add	r12,r8
80007856:	50 bc       	stdsp	sp[0x2c],r12
80007858:	fa f8 06 90 	ld.w	r8,sp[1680]
8000785c:	58 08       	cp.w	r8,0
8000785e:	c0 80       	breq	8000786e <_vfprintf_r+0x1f42>
80007860:	fa ca f9 78 	sub	r10,sp,-1672
80007864:	02 9b       	mov	r11,r1
80007866:	08 9c       	mov	r12,r4
80007868:	f0 1f 00 05 	mcall	8000787c <_vfprintf_r+0x1f50>
8000786c:	c2 11       	brne	800078ae <_vfprintf_r+0x1f82>
8000786e:	30 0b       	mov	r11,0
80007870:	fa c3 f9 e0 	sub	r3,sp,-1568
80007874:	fb 4b 06 8c 	st.w	sp[1676],r11
80007878:	fe 9f f0 e6 	bral	80005a44 <_vfprintf_r+0x118>
8000787c:	80 00       	ld.sh	r0,r0[0x0]
8000787e:	59 0c       	cp.w	r12,16
80007880:	80 00       	ld.sh	r0,r0[0x0]
80007882:	a0 f2       	st.b	r0[0x7],r2
80007884:	80 00       	ld.sh	r0,r0[0x0]
80007886:	af e8       	*unknown*
80007888:	80 00       	ld.sh	r0,r0[0x0]
8000788a:	af d8       	cbr	r8,0xf
8000788c:	08 95       	mov	r5,r4
8000788e:	fa f8 06 90 	ld.w	r8,sp[1680]
80007892:	58 08       	cp.w	r8,0
80007894:	c0 80       	breq	800078a4 <_vfprintf_r+0x1f78>
80007896:	08 9c       	mov	r12,r4
80007898:	fa ca f9 78 	sub	r10,sp,-1672
8000789c:	02 9b       	mov	r11,r1
8000789e:	f0 1f 00 0a 	mcall	800078c4 <_vfprintf_r+0x1f98>
800078a2:	c0 61       	brne	800078ae <_vfprintf_r+0x1f82>
800078a4:	30 08       	mov	r8,0
800078a6:	fb 48 06 8c 	st.w	sp[1676],r8
800078aa:	c0 28       	rjmp	800078ae <_vfprintf_r+0x1f82>
800078ac:	40 41       	lddsp	r1,sp[0x10]
800078ae:	82 68       	ld.sh	r8,r1[0xc]
800078b0:	ed b8 00 06 	bld	r8,0x6
800078b4:	c0 31       	brne	800078ba <_vfprintf_r+0x1f8e>
800078b6:	3f fa       	mov	r10,-1
800078b8:	50 ba       	stdsp	sp[0x2c],r10
800078ba:	40 bc       	lddsp	r12,sp[0x2c]
800078bc:	fe 3d f9 44 	sub	sp,-1724
800078c0:	d8 32       	popm	r0-r7,pc
800078c2:	00 00       	add	r0,r0
800078c4:	80 00       	ld.sh	r0,r0[0x0]
800078c6:	59 0c       	cp.w	r12,16

800078c8 <__swsetup_r>:
800078c8:	d4 21       	pushm	r4-r7,lr
800078ca:	4b 38       	lddpc	r8,80007994 <__swsetup_r+0xcc>
800078cc:	18 96       	mov	r6,r12
800078ce:	16 97       	mov	r7,r11
800078d0:	70 0c       	ld.w	r12,r8[0x0]
800078d2:	58 0c       	cp.w	r12,0
800078d4:	c0 60       	breq	800078e0 <__swsetup_r+0x18>
800078d6:	78 68       	ld.w	r8,r12[0x18]
800078d8:	58 08       	cp.w	r8,0
800078da:	c0 31       	brne	800078e0 <__swsetup_r+0x18>
800078dc:	f0 1f 00 2f 	mcall	80007998 <__swsetup_r+0xd0>
800078e0:	4a f8       	lddpc	r8,8000799c <__swsetup_r+0xd4>
800078e2:	10 37       	cp.w	r7,r8
800078e4:	c0 51       	brne	800078ee <__swsetup_r+0x26>
800078e6:	4a c8       	lddpc	r8,80007994 <__swsetup_r+0xcc>
800078e8:	70 08       	ld.w	r8,r8[0x0]
800078ea:	70 07       	ld.w	r7,r8[0x0]
800078ec:	c0 e8       	rjmp	80007908 <__swsetup_r+0x40>
800078ee:	4a d8       	lddpc	r8,800079a0 <__swsetup_r+0xd8>
800078f0:	10 37       	cp.w	r7,r8
800078f2:	c0 51       	brne	800078fc <__swsetup_r+0x34>
800078f4:	4a 88       	lddpc	r8,80007994 <__swsetup_r+0xcc>
800078f6:	70 08       	ld.w	r8,r8[0x0]
800078f8:	70 17       	ld.w	r7,r8[0x4]
800078fa:	c0 78       	rjmp	80007908 <__swsetup_r+0x40>
800078fc:	4a a8       	lddpc	r8,800079a4 <__swsetup_r+0xdc>
800078fe:	10 37       	cp.w	r7,r8
80007900:	c0 41       	brne	80007908 <__swsetup_r+0x40>
80007902:	4a 58       	lddpc	r8,80007994 <__swsetup_r+0xcc>
80007904:	70 08       	ld.w	r8,r8[0x0]
80007906:	70 27       	ld.w	r7,r8[0x8]
80007908:	8e 68       	ld.sh	r8,r7[0xc]
8000790a:	ed b8 00 03 	bld	r8,0x3
8000790e:	c1 e0       	breq	8000794a <__swsetup_r+0x82>
80007910:	ed b8 00 04 	bld	r8,0x4
80007914:	c3 e1       	brne	80007990 <__swsetup_r+0xc8>
80007916:	ed b8 00 02 	bld	r8,0x2
8000791a:	c1 51       	brne	80007944 <__swsetup_r+0x7c>
8000791c:	6e db       	ld.w	r11,r7[0x34]
8000791e:	58 0b       	cp.w	r11,0
80007920:	c0 a0       	breq	80007934 <__swsetup_r+0x6c>
80007922:	ee c8 ff bc 	sub	r8,r7,-68
80007926:	10 3b       	cp.w	r11,r8
80007928:	c0 40       	breq	80007930 <__swsetup_r+0x68>
8000792a:	0c 9c       	mov	r12,r6
8000792c:	f0 1f 00 1f 	mcall	800079a8 <__swsetup_r+0xe0>
80007930:	30 08       	mov	r8,0
80007932:	8f d8       	st.w	r7[0x34],r8
80007934:	8e 68       	ld.sh	r8,r7[0xc]
80007936:	e0 18 ff db 	andl	r8,0xffdb
8000793a:	ae 68       	st.h	r7[0xc],r8
8000793c:	30 08       	mov	r8,0
8000793e:	8f 18       	st.w	r7[0x4],r8
80007940:	6e 48       	ld.w	r8,r7[0x10]
80007942:	8f 08       	st.w	r7[0x0],r8
80007944:	8e 68       	ld.sh	r8,r7[0xc]
80007946:	a3 b8       	sbr	r8,0x3
80007948:	ae 68       	st.h	r7[0xc],r8
8000794a:	6e 48       	ld.w	r8,r7[0x10]
8000794c:	58 08       	cp.w	r8,0
8000794e:	c0 b1       	brne	80007964 <__swsetup_r+0x9c>
80007950:	8e 68       	ld.sh	r8,r7[0xc]
80007952:	e2 18 02 80 	andl	r8,0x280,COH
80007956:	e0 48 02 00 	cp.w	r8,512
8000795a:	c0 50       	breq	80007964 <__swsetup_r+0x9c>
8000795c:	0c 9c       	mov	r12,r6
8000795e:	0e 9b       	mov	r11,r7
80007960:	f0 1f 00 13 	mcall	800079ac <__swsetup_r+0xe4>
80007964:	8e 69       	ld.sh	r9,r7[0xc]
80007966:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
8000796a:	c0 70       	breq	80007978 <__swsetup_r+0xb0>
8000796c:	30 08       	mov	r8,0
8000796e:	8f 28       	st.w	r7[0x8],r8
80007970:	6e 58       	ld.w	r8,r7[0x14]
80007972:	5c 38       	neg	r8
80007974:	8f 68       	st.w	r7[0x18],r8
80007976:	c0 68       	rjmp	80007982 <__swsetup_r+0xba>
80007978:	ed b9 00 01 	bld	r9,0x1
8000797c:	ef f8 10 05 	ld.wne	r8,r7[0x14]
80007980:	8f 28       	st.w	r7[0x8],r8
80007982:	6e 48       	ld.w	r8,r7[0x10]
80007984:	58 08       	cp.w	r8,0
80007986:	c0 61       	brne	80007992 <__swsetup_r+0xca>
80007988:	8e 68       	ld.sh	r8,r7[0xc]
8000798a:	ed b8 00 07 	bld	r8,0x7
8000798e:	c0 21       	brne	80007992 <__swsetup_r+0xca>
80007990:	dc 2a       	popm	r4-r7,pc,r12=-1
80007992:	d8 2a       	popm	r4-r7,pc,r12=0
80007994:	00 00       	add	r0,r0
80007996:	01 ec       	ld.ub	r12,r0[0x6]
80007998:	80 00       	ld.sh	r0,r0[0x0]
8000799a:	8a cc       	ld.uh	r12,r5[0x8]
8000799c:	80 00       	ld.sh	r0,r0[0x0]
8000799e:	b1 08       	ld.d	r8,r8
800079a0:	80 00       	ld.sh	r0,r0[0x0]
800079a2:	b1 28       	st.d	r8++,r8
800079a4:	80 00       	ld.sh	r0,r0[0x0]
800079a6:	b1 48       	asr	r8,0x10
800079a8:	80 00       	ld.sh	r0,r0[0x0]
800079aa:	8c 24       	ld.sh	r4,r6[0x4]
800079ac:	80 00       	ld.sh	r0,r0[0x0]
800079ae:	90 e4       	ld.uh	r4,r8[0xc]

800079b0 <__register_exitproc>:
800079b0:	d4 31       	pushm	r0-r7,lr
800079b2:	4a 98       	lddpc	r8,80007a54 <__register_exitproc+0xa4>
800079b4:	70 03       	ld.w	r3,r8[0x0]
800079b6:	67 24       	ld.w	r4,r3[0x48]
800079b8:	e6 c8 ff b4 	sub	r8,r3,-76
800079bc:	58 04       	cp.w	r4,0
800079be:	f0 04 17 00 	moveq	r4,r8
800079c2:	e7 f4 0a 12 	st.weq	r3[0x48],r4
800079c6:	18 97       	mov	r7,r12
800079c8:	16 96       	mov	r6,r11
800079ca:	14 95       	mov	r5,r10
800079cc:	12 92       	mov	r2,r9
800079ce:	68 18       	ld.w	r8,r4[0x4]
800079d0:	59 f8       	cp.w	r8,31
800079d2:	e0 8a 00 0e 	brle	800079ee <__register_exitproc+0x3e>
800079d6:	e0 6c 00 8c 	mov	r12,140
800079da:	f0 1f 00 20 	mcall	80007a58 <__register_exitproc+0xa8>
800079de:	18 94       	mov	r4,r12
800079e0:	c3 80       	breq	80007a50 <__register_exitproc+0xa0>
800079e2:	67 28       	ld.w	r8,r3[0x48]
800079e4:	99 08       	st.w	r12[0x0],r8
800079e6:	e7 4c 00 48 	st.w	r3[72],r12
800079ea:	30 08       	mov	r8,0
800079ec:	99 18       	st.w	r12[0x4],r8
800079ee:	58 07       	cp.w	r7,0
800079f0:	c2 70       	breq	80007a3e <__register_exitproc+0x8e>
800079f2:	e8 fc 00 88 	ld.w	r12,r4[136]
800079f6:	58 0c       	cp.w	r12,0
800079f8:	c0 d1       	brne	80007a12 <__register_exitproc+0x62>
800079fa:	e0 6c 01 08 	mov	r12,264
800079fe:	f0 1f 00 17 	mcall	80007a58 <__register_exitproc+0xa8>
80007a02:	c2 70       	breq	80007a50 <__register_exitproc+0xa0>
80007a04:	30 08       	mov	r8,0
80007a06:	e9 4c 00 88 	st.w	r4[136],r12
80007a0a:	f9 48 01 04 	st.w	r12[260],r8
80007a0e:	f9 48 01 00 	st.w	r12[256],r8
80007a12:	68 18       	ld.w	r8,r4[0x4]
80007a14:	f0 c9 ff e0 	sub	r9,r8,-32
80007a18:	f8 08 09 25 	st.w	r12[r8<<0x2],r5
80007a1c:	f8 09 09 22 	st.w	r12[r9<<0x2],r2
80007a20:	30 1a       	mov	r10,1
80007a22:	f8 f9 01 00 	ld.w	r9,r12[256]
80007a26:	f4 08 09 48 	lsl	r8,r10,r8
80007a2a:	10 49       	or	r9,r8
80007a2c:	f9 49 01 00 	st.w	r12[256],r9
80007a30:	58 27       	cp.w	r7,2
80007a32:	f9 f9 00 41 	ld.weq	r9,r12[0x104]
80007a36:	f3 d8 e0 38 	oreq	r8,r9,r8
80007a3a:	f9 f8 0a 41 	st.weq	r12[0x104],r8
80007a3e:	68 18       	ld.w	r8,r4[0x4]
80007a40:	30 0c       	mov	r12,0
80007a42:	f0 c9 ff ff 	sub	r9,r8,-1
80007a46:	2f e8       	sub	r8,-2
80007a48:	89 19       	st.w	r4[0x4],r9
80007a4a:	e8 08 09 26 	st.w	r4[r8<<0x2],r6
80007a4e:	d8 32       	popm	r0-r7,pc
80007a50:	dc 3a       	popm	r0-r7,pc,r12=-1
80007a52:	00 00       	add	r0,r0
80007a54:	80 00       	ld.sh	r0,r0[0x0]
80007a56:	ad 20       	st.d	r6++,r0
80007a58:	80 00       	ld.sh	r0,r0[0x0]
80007a5a:	4a 88       	lddpc	r8,80007af8 <__call_exitprocs+0x9c>

80007a5c <__call_exitprocs>:
80007a5c:	d4 31       	pushm	r0-r7,lr
80007a5e:	20 3d       	sub	sp,12
80007a60:	4b 28       	lddpc	r8,80007b28 <__call_exitprocs+0xcc>
80007a62:	50 2c       	stdsp	sp[0x8],r12
80007a64:	70 08       	ld.w	r8,r8[0x0]
80007a66:	16 91       	mov	r1,r11
80007a68:	50 08       	stdsp	sp[0x0],r8
80007a6a:	2b 88       	sub	r8,-72
80007a6c:	50 18       	stdsp	sp[0x4],r8
80007a6e:	40 0a       	lddsp	r10,sp[0x0]
80007a70:	40 14       	lddsp	r4,sp[0x4]
80007a72:	75 27       	ld.w	r7,r10[0x48]
80007a74:	c5 58       	rjmp	80007b1e <__call_exitprocs+0xc2>
80007a76:	6e 15       	ld.w	r5,r7[0x4]
80007a78:	ee f6 00 88 	ld.w	r6,r7[136]
80007a7c:	ea c2 ff ff 	sub	r2,r5,-1
80007a80:	20 15       	sub	r5,1
80007a82:	ee 02 00 22 	add	r2,r7,r2<<0x2
80007a86:	ec 05 00 23 	add	r3,r6,r5<<0x2
80007a8a:	c3 58       	rjmp	80007af4 <__call_exitprocs+0x98>
80007a8c:	58 01       	cp.w	r1,0
80007a8e:	c0 70       	breq	80007a9c <__call_exitprocs+0x40>
80007a90:	58 06       	cp.w	r6,0
80007a92:	c2 e0       	breq	80007aee <__call_exitprocs+0x92>
80007a94:	e6 f8 00 80 	ld.w	r8,r3[128]
80007a98:	02 38       	cp.w	r8,r1
80007a9a:	c2 a1       	brne	80007aee <__call_exitprocs+0x92>
80007a9c:	6e 19       	ld.w	r9,r7[0x4]
80007a9e:	64 08       	ld.w	r8,r2[0x0]
80007aa0:	20 19       	sub	r9,1
80007aa2:	12 35       	cp.w	r5,r9
80007aa4:	ef f5 0a 01 	st.weq	r7[0x4],r5
80007aa8:	f9 b9 01 00 	movne	r9,0
80007aac:	e5 f9 1a 00 	st.wne	r2[0x0],r9
80007ab0:	58 08       	cp.w	r8,0
80007ab2:	c1 e0       	breq	80007aee <__call_exitprocs+0x92>
80007ab4:	6e 10       	ld.w	r0,r7[0x4]
80007ab6:	58 06       	cp.w	r6,0
80007ab8:	c0 90       	breq	80007aca <__call_exitprocs+0x6e>
80007aba:	30 1a       	mov	r10,1
80007abc:	f4 05 09 49 	lsl	r9,r10,r5
80007ac0:	ec fa 01 00 	ld.w	r10,r6[256]
80007ac4:	f3 ea 00 0a 	and	r10,r9,r10
80007ac8:	c0 31       	brne	80007ace <__call_exitprocs+0x72>
80007aca:	5d 18       	icall	r8
80007acc:	c0 b8       	rjmp	80007ae2 <__call_exitprocs+0x86>
80007ace:	ec fa 01 04 	ld.w	r10,r6[260]
80007ad2:	66 0b       	ld.w	r11,r3[0x0]
80007ad4:	14 69       	and	r9,r10
80007ad6:	c0 41       	brne	80007ade <__call_exitprocs+0x82>
80007ad8:	40 2c       	lddsp	r12,sp[0x8]
80007ada:	5d 18       	icall	r8
80007adc:	c0 38       	rjmp	80007ae2 <__call_exitprocs+0x86>
80007ade:	16 9c       	mov	r12,r11
80007ae0:	5d 18       	icall	r8
80007ae2:	6e 18       	ld.w	r8,r7[0x4]
80007ae4:	10 30       	cp.w	r0,r8
80007ae6:	cc 41       	brne	80007a6e <__call_exitprocs+0x12>
80007ae8:	68 08       	ld.w	r8,r4[0x0]
80007aea:	0e 38       	cp.w	r8,r7
80007aec:	cc 11       	brne	80007a6e <__call_exitprocs+0x12>
80007aee:	20 15       	sub	r5,1
80007af0:	20 43       	sub	r3,4
80007af2:	20 42       	sub	r2,4
80007af4:	58 05       	cp.w	r5,0
80007af6:	cc b4       	brge	80007a8c <__call_exitprocs+0x30>
80007af8:	6e 18       	ld.w	r8,r7[0x4]
80007afa:	58 08       	cp.w	r8,0
80007afc:	c0 f1       	brne	80007b1a <__call_exitprocs+0xbe>
80007afe:	6e 08       	ld.w	r8,r7[0x0]
80007b00:	58 08       	cp.w	r8,0
80007b02:	c0 c0       	breq	80007b1a <__call_exitprocs+0xbe>
80007b04:	89 08       	st.w	r4[0x0],r8
80007b06:	58 06       	cp.w	r6,0
80007b08:	c0 40       	breq	80007b10 <__call_exitprocs+0xb4>
80007b0a:	0c 9c       	mov	r12,r6
80007b0c:	f0 1f 00 08 	mcall	80007b2c <__call_exitprocs+0xd0>
80007b10:	0e 9c       	mov	r12,r7
80007b12:	f0 1f 00 07 	mcall	80007b2c <__call_exitprocs+0xd0>
80007b16:	68 07       	ld.w	r7,r4[0x0]
80007b18:	c0 38       	rjmp	80007b1e <__call_exitprocs+0xc2>
80007b1a:	0e 94       	mov	r4,r7
80007b1c:	6e 07       	ld.w	r7,r7[0x0]
80007b1e:	58 07       	cp.w	r7,0
80007b20:	ca b1       	brne	80007a76 <__call_exitprocs+0x1a>
80007b22:	2f dd       	sub	sp,-12
80007b24:	d8 32       	popm	r0-r7,pc
80007b26:	00 00       	add	r0,r0
80007b28:	80 00       	ld.sh	r0,r0[0x0]
80007b2a:	ad 20       	st.d	r6++,r0
80007b2c:	80 00       	ld.sh	r0,r0[0x0]
80007b2e:	4a 70       	lddpc	r0,80007bc8 <quorem+0x98>

80007b30 <quorem>:
80007b30:	d4 31       	pushm	r0-r7,lr
80007b32:	20 2d       	sub	sp,8
80007b34:	18 97       	mov	r7,r12
80007b36:	78 48       	ld.w	r8,r12[0x10]
80007b38:	76 46       	ld.w	r6,r11[0x10]
80007b3a:	0c 38       	cp.w	r8,r6
80007b3c:	c0 34       	brge	80007b42 <quorem+0x12>
80007b3e:	30 0c       	mov	r12,0
80007b40:	c8 58       	rjmp	80007c4a <quorem+0x11a>
80007b42:	ec c2 ff fc 	sub	r2,r6,-4
80007b46:	f6 c3 ff ec 	sub	r3,r11,-20
80007b4a:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
80007b4e:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
80007b52:	2f f9       	sub	r9,-1
80007b54:	20 16       	sub	r6,1
80007b56:	f8 09 0d 08 	divu	r8,r12,r9
80007b5a:	f6 02 00 22 	add	r2,r11,r2<<0x2
80007b5e:	ee c4 ff ec 	sub	r4,r7,-20
80007b62:	10 95       	mov	r5,r8
80007b64:	58 08       	cp.w	r8,0
80007b66:	c4 10       	breq	80007be8 <quorem+0xb8>
80007b68:	30 09       	mov	r9,0
80007b6a:	06 9a       	mov	r10,r3
80007b6c:	08 98       	mov	r8,r4
80007b6e:	12 91       	mov	r1,r9
80007b70:	50 0b       	stdsp	sp[0x0],r11
80007b72:	70 0e       	ld.w	lr,r8[0x0]
80007b74:	b1 8e       	lsr	lr,0x10
80007b76:	50 1e       	stdsp	sp[0x4],lr
80007b78:	15 0e       	ld.w	lr,r10++
80007b7a:	fc 00 16 10 	lsr	r0,lr,0x10
80007b7e:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80007b82:	ea 0e 03 41 	mac	r1,r5,lr
80007b86:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
80007b8a:	b1 81       	lsr	r1,0x10
80007b8c:	40 1b       	lddsp	r11,sp[0x4]
80007b8e:	ea 00 02 40 	mul	r0,r5,r0
80007b92:	e2 00 00 00 	add	r0,r1,r0
80007b96:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
80007b9a:	02 1b       	sub	r11,r1
80007b9c:	50 1b       	stdsp	sp[0x4],r11
80007b9e:	70 0b       	ld.w	r11,r8[0x0]
80007ba0:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
80007ba4:	02 09       	add	r9,r1
80007ba6:	f2 0e 01 0e 	sub	lr,r9,lr
80007baa:	b0 1e       	st.h	r8[0x2],lr
80007bac:	fc 09 14 10 	asr	r9,lr,0x10
80007bb0:	40 1e       	lddsp	lr,sp[0x4]
80007bb2:	fc 09 00 09 	add	r9,lr,r9
80007bb6:	b0 09       	st.h	r8[0x0],r9
80007bb8:	e0 01 16 10 	lsr	r1,r0,0x10
80007bbc:	2f c8       	sub	r8,-4
80007bbe:	b1 49       	asr	r9,0x10
80007bc0:	04 3a       	cp.w	r10,r2
80007bc2:	fe 98 ff d8 	brls	80007b72 <quorem+0x42>
80007bc6:	40 0b       	lddsp	r11,sp[0x0]
80007bc8:	58 0c       	cp.w	r12,0
80007bca:	c0 f1       	brne	80007be8 <quorem+0xb8>
80007bcc:	ec c8 ff fb 	sub	r8,r6,-5
80007bd0:	ee 08 00 28 	add	r8,r7,r8<<0x2
80007bd4:	c0 28       	rjmp	80007bd8 <quorem+0xa8>
80007bd6:	20 16       	sub	r6,1
80007bd8:	20 48       	sub	r8,4
80007bda:	08 38       	cp.w	r8,r4
80007bdc:	e0 88 00 05 	brls	80007be6 <quorem+0xb6>
80007be0:	70 09       	ld.w	r9,r8[0x0]
80007be2:	58 09       	cp.w	r9,0
80007be4:	cf 90       	breq	80007bd6 <quorem+0xa6>
80007be6:	8f 46       	st.w	r7[0x10],r6
80007be8:	0e 9c       	mov	r12,r7
80007bea:	f0 1f 00 1a 	mcall	80007c50 <quorem+0x120>
80007bee:	c2 d5       	brlt	80007c48 <quorem+0x118>
80007bf0:	2f f5       	sub	r5,-1
80007bf2:	08 98       	mov	r8,r4
80007bf4:	30 09       	mov	r9,0
80007bf6:	07 0b       	ld.w	r11,r3++
80007bf8:	f6 0a 16 10 	lsr	r10,r11,0x10
80007bfc:	70 0c       	ld.w	r12,r8[0x0]
80007bfe:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007c02:	f8 0e 16 10 	lsr	lr,r12,0x10
80007c06:	14 1e       	sub	lr,r10
80007c08:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80007c0c:	16 1a       	sub	r10,r11
80007c0e:	12 0a       	add	r10,r9
80007c10:	b0 1a       	st.h	r8[0x2],r10
80007c12:	b1 4a       	asr	r10,0x10
80007c14:	fc 0a 00 09 	add	r9,lr,r10
80007c18:	b0 09       	st.h	r8[0x0],r9
80007c1a:	2f c8       	sub	r8,-4
80007c1c:	b1 49       	asr	r9,0x10
80007c1e:	04 33       	cp.w	r3,r2
80007c20:	fe 98 ff eb 	brls	80007bf6 <quorem+0xc6>
80007c24:	ec c8 ff fb 	sub	r8,r6,-5
80007c28:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
80007c2c:	58 09       	cp.w	r9,0
80007c2e:	c0 d1       	brne	80007c48 <quorem+0x118>
80007c30:	ee 08 00 28 	add	r8,r7,r8<<0x2
80007c34:	c0 28       	rjmp	80007c38 <quorem+0x108>
80007c36:	20 16       	sub	r6,1
80007c38:	20 48       	sub	r8,4
80007c3a:	08 38       	cp.w	r8,r4
80007c3c:	e0 88 00 05 	brls	80007c46 <quorem+0x116>
80007c40:	70 09       	ld.w	r9,r8[0x0]
80007c42:	58 09       	cp.w	r9,0
80007c44:	cf 90       	breq	80007c36 <quorem+0x106>
80007c46:	8f 46       	st.w	r7[0x10],r6
80007c48:	0a 9c       	mov	r12,r5
80007c4a:	2f ed       	sub	sp,-8
80007c4c:	d8 32       	popm	r0-r7,pc
80007c4e:	00 00       	add	r0,r0
80007c50:	80 00       	ld.sh	r0,r0[0x0]
80007c52:	92 f2       	ld.uh	r2,r9[0xe]

80007c54 <_dtoa_r>:
80007c54:	d4 31       	pushm	r0-r7,lr
80007c56:	21 ad       	sub	sp,104
80007c58:	fa c4 ff 74 	sub	r4,sp,-140
80007c5c:	18 97       	mov	r7,r12
80007c5e:	16 95       	mov	r5,r11
80007c60:	68 2c       	ld.w	r12,r4[0x8]
80007c62:	50 c9       	stdsp	sp[0x30],r9
80007c64:	68 16       	ld.w	r6,r4[0x4]
80007c66:	68 09       	ld.w	r9,r4[0x0]
80007c68:	50 e8       	stdsp	sp[0x38],r8
80007c6a:	14 94       	mov	r4,r10
80007c6c:	51 2c       	stdsp	sp[0x48],r12
80007c6e:	fa e5 00 08 	st.d	sp[8],r4
80007c72:	51 59       	stdsp	sp[0x54],r9
80007c74:	6e 95       	ld.w	r5,r7[0x24]
80007c76:	58 05       	cp.w	r5,0
80007c78:	c0 91       	brne	80007c8a <_dtoa_r+0x36>
80007c7a:	31 0c       	mov	r12,16
80007c7c:	f0 1f 00 47 	mcall	80007d98 <_dtoa_r+0x144>
80007c80:	99 35       	st.w	r12[0xc],r5
80007c82:	8f 9c       	st.w	r7[0x24],r12
80007c84:	99 15       	st.w	r12[0x4],r5
80007c86:	99 25       	st.w	r12[0x8],r5
80007c88:	99 05       	st.w	r12[0x0],r5
80007c8a:	6e 99       	ld.w	r9,r7[0x24]
80007c8c:	72 08       	ld.w	r8,r9[0x0]
80007c8e:	58 08       	cp.w	r8,0
80007c90:	c0 f0       	breq	80007cae <_dtoa_r+0x5a>
80007c92:	72 1a       	ld.w	r10,r9[0x4]
80007c94:	91 1a       	st.w	r8[0x4],r10
80007c96:	30 1a       	mov	r10,1
80007c98:	72 19       	ld.w	r9,r9[0x4]
80007c9a:	f4 09 09 49 	lsl	r9,r10,r9
80007c9e:	10 9b       	mov	r11,r8
80007ca0:	91 29       	st.w	r8[0x8],r9
80007ca2:	0e 9c       	mov	r12,r7
80007ca4:	f0 1f 00 3e 	mcall	80007d9c <_dtoa_r+0x148>
80007ca8:	6e 98       	ld.w	r8,r7[0x24]
80007caa:	30 09       	mov	r9,0
80007cac:	91 09       	st.w	r8[0x0],r9
80007cae:	40 28       	lddsp	r8,sp[0x8]
80007cb0:	10 94       	mov	r4,r8
80007cb2:	58 08       	cp.w	r8,0
80007cb4:	c0 64       	brge	80007cc0 <_dtoa_r+0x6c>
80007cb6:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
80007cba:	50 28       	stdsp	sp[0x8],r8
80007cbc:	30 18       	mov	r8,1
80007cbe:	c0 28       	rjmp	80007cc2 <_dtoa_r+0x6e>
80007cc0:	30 08       	mov	r8,0
80007cc2:	8d 08       	st.w	r6[0x0],r8
80007cc4:	fc 1c 7f f0 	movh	r12,0x7ff0
80007cc8:	40 26       	lddsp	r6,sp[0x8]
80007cca:	0c 98       	mov	r8,r6
80007ccc:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80007cd0:	18 38       	cp.w	r8,r12
80007cd2:	c1 e1       	brne	80007d0e <_dtoa_r+0xba>
80007cd4:	e0 68 27 0f 	mov	r8,9999
80007cd8:	41 5b       	lddsp	r11,sp[0x54]
80007cda:	97 08       	st.w	r11[0x0],r8
80007cdc:	40 3a       	lddsp	r10,sp[0xc]
80007cde:	58 0a       	cp.w	r10,0
80007ce0:	c0 61       	brne	80007cec <_dtoa_r+0x98>
80007ce2:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
80007ce6:	c0 31       	brne	80007cec <_dtoa_r+0x98>
80007ce8:	4a ec       	lddpc	r12,80007da0 <_dtoa_r+0x14c>
80007cea:	c0 28       	rjmp	80007cee <_dtoa_r+0x9a>
80007cec:	4a ec       	lddpc	r12,80007da4 <_dtoa_r+0x150>
80007cee:	41 29       	lddsp	r9,sp[0x48]
80007cf0:	58 09       	cp.w	r9,0
80007cf2:	e0 80 05 de 	breq	800088ae <_dtoa_r+0xc5a>
80007cf6:	f8 c8 ff fd 	sub	r8,r12,-3
80007cfa:	f8 c9 ff f8 	sub	r9,r12,-8
80007cfe:	11 8b       	ld.ub	r11,r8[0x0]
80007d00:	30 0a       	mov	r10,0
80007d02:	41 25       	lddsp	r5,sp[0x48]
80007d04:	f4 0b 18 00 	cp.b	r11,r10
80007d08:	f2 08 17 10 	movne	r8,r9
80007d0c:	c1 58       	rjmp	80007d36 <_dtoa_r+0xe2>
80007d0e:	fa ea 00 08 	ld.d	r10,sp[8]
80007d12:	30 08       	mov	r8,0
80007d14:	fa eb 00 3c 	st.d	sp[60],r10
80007d18:	30 09       	mov	r9,0
80007d1a:	f0 1f 00 24 	mcall	80007da8 <_dtoa_r+0x154>
80007d1e:	c0 f0       	breq	80007d3c <_dtoa_r+0xe8>
80007d20:	30 18       	mov	r8,1
80007d22:	41 5a       	lddsp	r10,sp[0x54]
80007d24:	95 08       	st.w	r10[0x0],r8
80007d26:	4a 2c       	lddpc	r12,80007dac <_dtoa_r+0x158>
80007d28:	41 29       	lddsp	r9,sp[0x48]
80007d2a:	f8 08 00 08 	add	r8,r12,r8
80007d2e:	58 09       	cp.w	r9,0
80007d30:	e0 80 05 bf 	breq	800088ae <_dtoa_r+0xc5a>
80007d34:	12 95       	mov	r5,r9
80007d36:	8b 08       	st.w	r5[0x0],r8
80007d38:	e0 8f 05 bb 	bral	800088ae <_dtoa_r+0xc5a>
80007d3c:	fa c8 ff 9c 	sub	r8,sp,-100
80007d40:	fa c9 ff a0 	sub	r9,sp,-96
80007d44:	fa ea 00 3c 	ld.d	r10,sp[60]
80007d48:	0e 9c       	mov	r12,r7
80007d4a:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
80007d4e:	f0 1f 00 19 	mcall	80007db0 <_dtoa_r+0x15c>
80007d52:	18 93       	mov	r3,r12
80007d54:	58 05       	cp.w	r5,0
80007d56:	c0 d0       	breq	80007d70 <_dtoa_r+0x11c>
80007d58:	fa ea 00 3c 	ld.d	r10,sp[60]
80007d5c:	30 04       	mov	r4,0
80007d5e:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
80007d62:	ea c5 03 ff 	sub	r5,r5,1023
80007d66:	10 9b       	mov	r11,r8
80007d68:	51 74       	stdsp	sp[0x5c],r4
80007d6a:	ea 1b 3f f0 	orh	r11,0x3ff0
80007d6e:	c3 28       	rjmp	80007dd2 <_dtoa_r+0x17e>
80007d70:	41 88       	lddsp	r8,sp[0x60]
80007d72:	41 9c       	lddsp	r12,sp[0x64]
80007d74:	10 0c       	add	r12,r8
80007d76:	f8 c5 fb ce 	sub	r5,r12,-1074
80007d7a:	e0 45 00 20 	cp.w	r5,32
80007d7e:	e0 8a 00 1b 	brle	80007db4 <_dtoa_r+0x160>
80007d82:	f8 cc fb ee 	sub	r12,r12,-1042
80007d86:	40 3b       	lddsp	r11,sp[0xc]
80007d88:	ea 08 11 40 	rsub	r8,r5,64
80007d8c:	f6 0c 0a 4c 	lsr	r12,r11,r12
80007d90:	ec 08 09 46 	lsl	r6,r6,r8
80007d94:	0c 4c       	or	r12,r6
80007d96:	c1 48       	rjmp	80007dbe <_dtoa_r+0x16a>
80007d98:	80 00       	ld.sh	r0,r0[0x0]
80007d9a:	4a 88       	lddpc	r8,80007e38 <_dtoa_r+0x1e4>
80007d9c:	80 00       	ld.sh	r0,r0[0x0]
80007d9e:	93 24       	st.w	r9[0x8],r4
80007da0:	80 00       	ld.sh	r0,r0[0x0]
80007da2:	b0 f8       	st.b	r8[0x7],r8
80007da4:	80 00       	ld.sh	r0,r0[0x0]
80007da6:	b1 04       	ld.d	r4,r8
80007da8:	80 00       	ld.sh	r0,r0[0x0]
80007daa:	a0 f2       	st.b	r0[0x7],r2
80007dac:	80 00       	ld.sh	r0,r0[0x0]
80007dae:	af d4       	cbr	r4,0xf
80007db0:	80 00       	ld.sh	r0,r0[0x0]
80007db2:	93 d4       	st.w	r9[0x34],r4
80007db4:	ea 0c 11 20 	rsub	r12,r5,32
80007db8:	40 3a       	lddsp	r10,sp[0xc]
80007dba:	f4 0c 09 4c 	lsl	r12,r10,r12
80007dbe:	f0 1f 00 6b 	mcall	80007f68 <_dtoa_r+0x314>
80007dc2:	fc 18 fe 10 	movh	r8,0xfe10
80007dc6:	30 19       	mov	r9,1
80007dc8:	ea c5 04 33 	sub	r5,r5,1075
80007dcc:	f0 0b 00 0b 	add	r11,r8,r11
80007dd0:	51 79       	stdsp	sp[0x5c],r9
80007dd2:	30 08       	mov	r8,0
80007dd4:	fc 19 3f f8 	movh	r9,0x3ff8
80007dd8:	f0 1f 00 65 	mcall	80007f6c <_dtoa_r+0x318>
80007ddc:	e0 68 43 61 	mov	r8,17249
80007de0:	ea 18 63 6f 	orh	r8,0x636f
80007de4:	e0 69 87 a7 	mov	r9,34727
80007de8:	ea 19 3f d2 	orh	r9,0x3fd2
80007dec:	f0 1f 00 61 	mcall	80007f70 <_dtoa_r+0x31c>
80007df0:	e0 68 c8 b3 	mov	r8,51379
80007df4:	ea 18 8b 60 	orh	r8,0x8b60
80007df8:	e0 69 8a 28 	mov	r9,35368
80007dfc:	ea 19 3f c6 	orh	r9,0x3fc6
80007e00:	f0 1f 00 5d 	mcall	80007f74 <_dtoa_r+0x320>
80007e04:	0a 9c       	mov	r12,r5
80007e06:	14 90       	mov	r0,r10
80007e08:	16 91       	mov	r1,r11
80007e0a:	f0 1f 00 5c 	mcall	80007f78 <_dtoa_r+0x324>
80007e0e:	e0 68 79 fb 	mov	r8,31227
80007e12:	ea 18 50 9f 	orh	r8,0x509f
80007e16:	e0 69 44 13 	mov	r9,17427
80007e1a:	ea 19 3f d3 	orh	r9,0x3fd3
80007e1e:	f0 1f 00 55 	mcall	80007f70 <_dtoa_r+0x31c>
80007e22:	14 98       	mov	r8,r10
80007e24:	16 99       	mov	r9,r11
80007e26:	00 9a       	mov	r10,r0
80007e28:	02 9b       	mov	r11,r1
80007e2a:	f0 1f 00 53 	mcall	80007f74 <_dtoa_r+0x320>
80007e2e:	14 90       	mov	r0,r10
80007e30:	16 91       	mov	r1,r11
80007e32:	f0 1f 00 53 	mcall	80007f7c <_dtoa_r+0x328>
80007e36:	30 08       	mov	r8,0
80007e38:	18 96       	mov	r6,r12
80007e3a:	30 09       	mov	r9,0
80007e3c:	00 9a       	mov	r10,r0
80007e3e:	02 9b       	mov	r11,r1
80007e40:	f0 1f 00 50 	mcall	80007f80 <_dtoa_r+0x32c>
80007e44:	c0 c0       	breq	80007e5c <_dtoa_r+0x208>
80007e46:	0c 9c       	mov	r12,r6
80007e48:	f0 1f 00 4c 	mcall	80007f78 <_dtoa_r+0x324>
80007e4c:	14 98       	mov	r8,r10
80007e4e:	16 99       	mov	r9,r11
80007e50:	00 9a       	mov	r10,r0
80007e52:	02 9b       	mov	r11,r1
80007e54:	f0 1f 00 4c 	mcall	80007f84 <_dtoa_r+0x330>
80007e58:	f7 b6 00 01 	subeq	r6,1
80007e5c:	59 66       	cp.w	r6,22
80007e5e:	e0 88 00 05 	brls	80007e68 <_dtoa_r+0x214>
80007e62:	30 18       	mov	r8,1
80007e64:	51 48       	stdsp	sp[0x50],r8
80007e66:	c1 28       	rjmp	80007e8a <_dtoa_r+0x236>
80007e68:	4c 88       	lddpc	r8,80007f88 <_dtoa_r+0x334>
80007e6a:	fa ea 00 3c 	ld.d	r10,sp[60]
80007e6e:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
80007e72:	f0 1f 00 44 	mcall	80007f80 <_dtoa_r+0x32c>
80007e76:	f9 b4 00 00 	moveq	r4,0
80007e7a:	fb f4 0a 14 	st.weq	sp[0x50],r4
80007e7e:	f7 b6 01 01 	subne	r6,1
80007e82:	f9 bc 01 00 	movne	r12,0
80007e86:	fb fc 1a 14 	st.wne	sp[0x50],r12
80007e8a:	41 90       	lddsp	r0,sp[0x64]
80007e8c:	20 10       	sub	r0,1
80007e8e:	0a 10       	sub	r0,r5
80007e90:	c0 46       	brmi	80007e98 <_dtoa_r+0x244>
80007e92:	50 40       	stdsp	sp[0x10],r0
80007e94:	30 00       	mov	r0,0
80007e96:	c0 48       	rjmp	80007e9e <_dtoa_r+0x24a>
80007e98:	30 0b       	mov	r11,0
80007e9a:	5c 30       	neg	r0
80007e9c:	50 4b       	stdsp	sp[0x10],r11
80007e9e:	ec 02 11 00 	rsub	r2,r6,0
80007ea2:	58 06       	cp.w	r6,0
80007ea4:	fb fa 40 04 	ld.wge	r10,sp[0x10]
80007ea8:	f5 d6 e4 0a 	addge	r10,r10,r6
80007eac:	fb fa 4a 04 	st.wge	sp[0x10],r10
80007eb0:	fb f6 4a 11 	st.wge	sp[0x44],r6
80007eb4:	f9 b2 04 00 	movge	r2,0
80007eb8:	e1 d6 e5 10 	sublt	r0,r0,r6
80007ebc:	f9 b9 05 00 	movlt	r9,0
80007ec0:	fb f9 5a 11 	st.wlt	sp[0x44],r9
80007ec4:	40 c8       	lddsp	r8,sp[0x30]
80007ec6:	58 98       	cp.w	r8,9
80007ec8:	e0 8b 00 20 	brhi	80007f08 <_dtoa_r+0x2b4>
80007ecc:	58 58       	cp.w	r8,5
80007ece:	f9 b4 0a 01 	movle	r4,1
80007ed2:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
80007ed6:	f7 b5 09 04 	subgt	r5,4
80007eda:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
80007ede:	f9 b4 09 00 	movgt	r4,0
80007ee2:	40 cc       	lddsp	r12,sp[0x30]
80007ee4:	58 3c       	cp.w	r12,3
80007ee6:	c2 d0       	breq	80007f40 <_dtoa_r+0x2ec>
80007ee8:	e0 89 00 05 	brgt	80007ef2 <_dtoa_r+0x29e>
80007eec:	58 2c       	cp.w	r12,2
80007eee:	c1 01       	brne	80007f0e <_dtoa_r+0x2ba>
80007ef0:	c1 88       	rjmp	80007f20 <_dtoa_r+0x2cc>
80007ef2:	40 cb       	lddsp	r11,sp[0x30]
80007ef4:	58 4b       	cp.w	r11,4
80007ef6:	c0 60       	breq	80007f02 <_dtoa_r+0x2ae>
80007ef8:	58 5b       	cp.w	r11,5
80007efa:	c0 a1       	brne	80007f0e <_dtoa_r+0x2ba>
80007efc:	30 1a       	mov	r10,1
80007efe:	50 da       	stdsp	sp[0x34],r10
80007f00:	c2 28       	rjmp	80007f44 <_dtoa_r+0x2f0>
80007f02:	30 19       	mov	r9,1
80007f04:	50 d9       	stdsp	sp[0x34],r9
80007f06:	c0 f8       	rjmp	80007f24 <_dtoa_r+0x2d0>
80007f08:	30 08       	mov	r8,0
80007f0a:	30 14       	mov	r4,1
80007f0c:	50 c8       	stdsp	sp[0x30],r8
80007f0e:	3f f5       	mov	r5,-1
80007f10:	30 1c       	mov	r12,1
80007f12:	30 0b       	mov	r11,0
80007f14:	50 95       	stdsp	sp[0x24],r5
80007f16:	50 dc       	stdsp	sp[0x34],r12
80007f18:	0a 91       	mov	r1,r5
80007f1a:	31 28       	mov	r8,18
80007f1c:	50 eb       	stdsp	sp[0x38],r11
80007f1e:	c2 08       	rjmp	80007f5e <_dtoa_r+0x30a>
80007f20:	30 0a       	mov	r10,0
80007f22:	50 da       	stdsp	sp[0x34],r10
80007f24:	40 e9       	lddsp	r9,sp[0x38]
80007f26:	58 09       	cp.w	r9,0
80007f28:	e0 89 00 07 	brgt	80007f36 <_dtoa_r+0x2e2>
80007f2c:	30 18       	mov	r8,1
80007f2e:	50 98       	stdsp	sp[0x24],r8
80007f30:	10 91       	mov	r1,r8
80007f32:	50 e8       	stdsp	sp[0x38],r8
80007f34:	c1 58       	rjmp	80007f5e <_dtoa_r+0x30a>
80007f36:	40 e5       	lddsp	r5,sp[0x38]
80007f38:	50 95       	stdsp	sp[0x24],r5
80007f3a:	0a 91       	mov	r1,r5
80007f3c:	0a 98       	mov	r8,r5
80007f3e:	c1 08       	rjmp	80007f5e <_dtoa_r+0x30a>
80007f40:	30 0c       	mov	r12,0
80007f42:	50 dc       	stdsp	sp[0x34],r12
80007f44:	40 eb       	lddsp	r11,sp[0x38]
80007f46:	ec 0b 00 0b 	add	r11,r6,r11
80007f4a:	50 9b       	stdsp	sp[0x24],r11
80007f4c:	16 98       	mov	r8,r11
80007f4e:	2f f8       	sub	r8,-1
80007f50:	58 08       	cp.w	r8,0
80007f52:	e0 89 00 05 	brgt	80007f5c <_dtoa_r+0x308>
80007f56:	10 91       	mov	r1,r8
80007f58:	30 18       	mov	r8,1
80007f5a:	c0 28       	rjmp	80007f5e <_dtoa_r+0x30a>
80007f5c:	10 91       	mov	r1,r8
80007f5e:	30 09       	mov	r9,0
80007f60:	6e 9a       	ld.w	r10,r7[0x24]
80007f62:	95 19       	st.w	r10[0x4],r9
80007f64:	30 49       	mov	r9,4
80007f66:	c1 78       	rjmp	80007f94 <_dtoa_r+0x340>
80007f68:	80 00       	ld.sh	r0,r0[0x0]
80007f6a:	a0 0a       	st.h	r0[0x0],r10
80007f6c:	80 00       	ld.sh	r0,r0[0x0]
80007f6e:	9d 34       	st.w	lr[0xc],r4
80007f70:	80 00       	ld.sh	r0,r0[0x0]
80007f72:	9b 5c       	st.w	sp[0x14],r12
80007f74:	80 00       	ld.sh	r0,r0[0x0]
80007f76:	9e d0       	ld.uh	r0,pc[0xa]
80007f78:	80 00       	ld.sh	r0,r0[0x0]
80007f7a:	a0 12       	st.h	r0[0x2],r2
80007f7c:	80 00       	ld.sh	r0,r0[0x0]
80007f7e:	9f e4       	st.w	pc[0x38],r4
80007f80:	80 00       	ld.sh	r0,r0[0x0]
80007f82:	a1 80       	lsr	r0,0x0
80007f84:	80 00       	ld.sh	r0,r0[0x0]
80007f86:	a0 f2       	st.b	r0[0x7],r2
80007f88:	80 00       	ld.sh	r0,r0[0x0]
80007f8a:	b1 b4       	sbr	r4,0x11
80007f8c:	6a 1a       	ld.w	r10,r5[0x4]
80007f8e:	a1 79       	lsl	r9,0x1
80007f90:	2f fa       	sub	r10,-1
80007f92:	8b 1a       	st.w	r5[0x4],r10
80007f94:	6e 95       	ld.w	r5,r7[0x24]
80007f96:	f2 ca ff ec 	sub	r10,r9,-20
80007f9a:	10 3a       	cp.w	r10,r8
80007f9c:	fe 98 ff f8 	brls	80007f8c <_dtoa_r+0x338>
80007fa0:	6a 1b       	ld.w	r11,r5[0x4]
80007fa2:	0e 9c       	mov	r12,r7
80007fa4:	f0 1f 00 53 	mcall	800080f0 <_dtoa_r+0x49c>
80007fa8:	58 e1       	cp.w	r1,14
80007faa:	5f 88       	srls	r8
80007fac:	8b 0c       	st.w	r5[0x0],r12
80007fae:	f1 e4 00 04 	and	r4,r8,r4
80007fb2:	6e 98       	ld.w	r8,r7[0x24]
80007fb4:	70 08       	ld.w	r8,r8[0x0]
80007fb6:	50 88       	stdsp	sp[0x20],r8
80007fb8:	e0 80 01 98 	breq	800082e8 <_dtoa_r+0x694>
80007fbc:	58 06       	cp.w	r6,0
80007fbe:	e0 8a 00 40 	brle	8000803e <_dtoa_r+0x3ea>
80007fc2:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
80007fc6:	4c c8       	lddpc	r8,800080f4 <_dtoa_r+0x4a0>
80007fc8:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
80007fcc:	fa e5 00 18 	st.d	sp[24],r4
80007fd0:	ec 04 14 04 	asr	r4,r6,0x4
80007fd4:	ed b4 00 04 	bld	r4,0x4
80007fd8:	c0 30       	breq	80007fde <_dtoa_r+0x38a>
80007fda:	30 25       	mov	r5,2
80007fdc:	c0 f8       	rjmp	80007ffa <_dtoa_r+0x3a6>
80007fde:	4c 78       	lddpc	r8,800080f8 <_dtoa_r+0x4a4>
80007fe0:	f0 e8 00 20 	ld.d	r8,r8[32]
80007fe4:	fa ea 00 3c 	ld.d	r10,sp[60]
80007fe8:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
80007fec:	f0 1f 00 44 	mcall	800080fc <_dtoa_r+0x4a8>
80007ff0:	30 35       	mov	r5,3
80007ff2:	14 98       	mov	r8,r10
80007ff4:	16 99       	mov	r9,r11
80007ff6:	fa e9 00 08 	st.d	sp[8],r8
80007ffa:	4c 0c       	lddpc	r12,800080f8 <_dtoa_r+0x4a4>
80007ffc:	50 a3       	stdsp	sp[0x28],r3
80007ffe:	0c 93       	mov	r3,r6
80008000:	18 96       	mov	r6,r12
80008002:	c0 f8       	rjmp	80008020 <_dtoa_r+0x3cc>
80008004:	fa ea 00 18 	ld.d	r10,sp[24]
80008008:	ed b4 00 00 	bld	r4,0x0
8000800c:	c0 81       	brne	8000801c <_dtoa_r+0x3c8>
8000800e:	ec e8 00 00 	ld.d	r8,r6[0]
80008012:	2f f5       	sub	r5,-1
80008014:	f0 1f 00 3b 	mcall	80008100 <_dtoa_r+0x4ac>
80008018:	fa eb 00 18 	st.d	sp[24],r10
8000801c:	a1 54       	asr	r4,0x1
8000801e:	2f 86       	sub	r6,-8
80008020:	58 04       	cp.w	r4,0
80008022:	cf 11       	brne	80008004 <_dtoa_r+0x3b0>
80008024:	fa e8 00 18 	ld.d	r8,sp[24]
80008028:	fa ea 00 08 	ld.d	r10,sp[8]
8000802c:	06 96       	mov	r6,r3
8000802e:	f0 1f 00 34 	mcall	800080fc <_dtoa_r+0x4a8>
80008032:	40 a3       	lddsp	r3,sp[0x28]
80008034:	14 98       	mov	r8,r10
80008036:	16 99       	mov	r9,r11
80008038:	fa e9 00 08 	st.d	sp[8],r8
8000803c:	c2 d8       	rjmp	80008096 <_dtoa_r+0x442>
8000803e:	ec 08 11 00 	rsub	r8,r6,0
80008042:	c0 31       	brne	80008048 <_dtoa_r+0x3f4>
80008044:	30 25       	mov	r5,2
80008046:	c2 88       	rjmp	80008096 <_dtoa_r+0x442>
80008048:	4a cc       	lddpc	r12,800080f8 <_dtoa_r+0x4a4>
8000804a:	f0 04 14 04 	asr	r4,r8,0x4
8000804e:	50 1c       	stdsp	sp[0x4],r12
80008050:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80008054:	4a 89       	lddpc	r9,800080f4 <_dtoa_r+0x4a0>
80008056:	fa ea 00 3c 	ld.d	r10,sp[60]
8000805a:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000805e:	f0 1f 00 29 	mcall	80008100 <_dtoa_r+0x4ac>
80008062:	40 1c       	lddsp	r12,sp[0x4]
80008064:	50 63       	stdsp	sp[0x18],r3
80008066:	30 25       	mov	r5,2
80008068:	0c 93       	mov	r3,r6
8000806a:	fa eb 00 08 	st.d	sp[8],r10
8000806e:	18 96       	mov	r6,r12
80008070:	c0 f8       	rjmp	8000808e <_dtoa_r+0x43a>
80008072:	fa ea 00 08 	ld.d	r10,sp[8]
80008076:	ed b4 00 00 	bld	r4,0x0
8000807a:	c0 81       	brne	8000808a <_dtoa_r+0x436>
8000807c:	ec e8 00 00 	ld.d	r8,r6[0]
80008080:	2f f5       	sub	r5,-1
80008082:	f0 1f 00 20 	mcall	80008100 <_dtoa_r+0x4ac>
80008086:	fa eb 00 08 	st.d	sp[8],r10
8000808a:	a1 54       	asr	r4,0x1
8000808c:	2f 86       	sub	r6,-8
8000808e:	58 04       	cp.w	r4,0
80008090:	cf 11       	brne	80008072 <_dtoa_r+0x41e>
80008092:	06 96       	mov	r6,r3
80008094:	40 63       	lddsp	r3,sp[0x18]
80008096:	41 4a       	lddsp	r10,sp[0x50]
80008098:	58 0a       	cp.w	r10,0
8000809a:	c3 70       	breq	80008108 <_dtoa_r+0x4b4>
8000809c:	fa e8 00 08 	ld.d	r8,sp[8]
800080a0:	58 01       	cp.w	r1,0
800080a2:	5f 94       	srgt	r4
800080a4:	fa e9 00 18 	st.d	sp[24],r8
800080a8:	30 08       	mov	r8,0
800080aa:	fc 19 3f f0 	movh	r9,0x3ff0
800080ae:	fa ea 00 18 	ld.d	r10,sp[24]
800080b2:	f0 1f 00 15 	mcall	80008104 <_dtoa_r+0x4b0>
800080b6:	f9 bc 00 00 	moveq	r12,0
800080ba:	f9 bc 01 01 	movne	r12,1
800080be:	e9 ec 00 0c 	and	r12,r4,r12
800080c2:	c2 30       	breq	80008108 <_dtoa_r+0x4b4>
800080c4:	40 98       	lddsp	r8,sp[0x24]
800080c6:	58 08       	cp.w	r8,0
800080c8:	e0 8a 01 0c 	brle	800082e0 <_dtoa_r+0x68c>
800080cc:	30 08       	mov	r8,0
800080ce:	fc 19 40 24 	movh	r9,0x4024
800080d2:	ec c4 00 01 	sub	r4,r6,1
800080d6:	fa ea 00 18 	ld.d	r10,sp[24]
800080da:	2f f5       	sub	r5,-1
800080dc:	50 64       	stdsp	sp[0x18],r4
800080de:	f0 1f 00 09 	mcall	80008100 <_dtoa_r+0x4ac>
800080e2:	40 94       	lddsp	r4,sp[0x24]
800080e4:	14 98       	mov	r8,r10
800080e6:	16 99       	mov	r9,r11
800080e8:	fa e9 00 08 	st.d	sp[8],r8
800080ec:	c1 08       	rjmp	8000810c <_dtoa_r+0x4b8>
800080ee:	00 00       	add	r0,r0
800080f0:	80 00       	ld.sh	r0,r0[0x0]
800080f2:	93 5c       	st.w	r9[0x14],r12
800080f4:	80 00       	ld.sh	r0,r0[0x0]
800080f6:	b1 b4       	sbr	r4,0x11
800080f8:	80 00       	ld.sh	r0,r0[0x0]
800080fa:	b2 7c       	st.h	r9[0xe],r12
800080fc:	80 00       	ld.sh	r0,r0[0x0]
800080fe:	a1 e8       	*unknown*
80008100:	80 00       	ld.sh	r0,r0[0x0]
80008102:	9b 5c       	st.w	sp[0x14],r12
80008104:	80 00       	ld.sh	r0,r0[0x0]
80008106:	a1 80       	lsr	r0,0x0
80008108:	50 66       	stdsp	sp[0x18],r6
8000810a:	02 94       	mov	r4,r1
8000810c:	0a 9c       	mov	r12,r5
8000810e:	f0 1f 00 69 	mcall	800082b0 <_dtoa_r+0x65c>
80008112:	fa e8 00 08 	ld.d	r8,sp[8]
80008116:	f0 1f 00 68 	mcall	800082b4 <_dtoa_r+0x660>
8000811a:	30 08       	mov	r8,0
8000811c:	fc 19 40 1c 	movh	r9,0x401c
80008120:	f0 1f 00 66 	mcall	800082b8 <_dtoa_r+0x664>
80008124:	14 98       	mov	r8,r10
80008126:	16 99       	mov	r9,r11
80008128:	fa e9 00 28 	st.d	sp[40],r8
8000812c:	fc 18 fc c0 	movh	r8,0xfcc0
80008130:	40 a5       	lddsp	r5,sp[0x28]
80008132:	10 05       	add	r5,r8
80008134:	50 a5       	stdsp	sp[0x28],r5
80008136:	58 04       	cp.w	r4,0
80008138:	c2 11       	brne	8000817a <_dtoa_r+0x526>
8000813a:	fa ea 00 08 	ld.d	r10,sp[8]
8000813e:	30 08       	mov	r8,0
80008140:	fc 19 40 14 	movh	r9,0x4014
80008144:	f0 1f 00 5e 	mcall	800082bc <_dtoa_r+0x668>
80008148:	40 bc       	lddsp	r12,sp[0x2c]
8000814a:	fa eb 00 08 	st.d	sp[8],r10
8000814e:	14 98       	mov	r8,r10
80008150:	16 99       	mov	r9,r11
80008152:	18 9a       	mov	r10,r12
80008154:	0a 9b       	mov	r11,r5
80008156:	f0 1f 00 5b 	mcall	800082c0 <_dtoa_r+0x66c>
8000815a:	e0 81 02 74 	brne	80008642 <_dtoa_r+0x9ee>
8000815e:	0a 98       	mov	r8,r5
80008160:	40 b9       	lddsp	r9,sp[0x2c]
80008162:	ee 18 80 00 	eorh	r8,0x8000
80008166:	fa ea 00 08 	ld.d	r10,sp[8]
8000816a:	10 95       	mov	r5,r8
8000816c:	12 98       	mov	r8,r9
8000816e:	0a 99       	mov	r9,r5
80008170:	f0 1f 00 54 	mcall	800082c0 <_dtoa_r+0x66c>
80008174:	e0 81 02 5e 	brne	80008630 <_dtoa_r+0x9dc>
80008178:	cb 48       	rjmp	800082e0 <_dtoa_r+0x68c>
8000817a:	4d 39       	lddpc	r9,800082c4 <_dtoa_r+0x670>
8000817c:	e8 c8 00 01 	sub	r8,r4,1
80008180:	40 d5       	lddsp	r5,sp[0x34]
80008182:	58 05       	cp.w	r5,0
80008184:	c4 f0       	breq	80008222 <_dtoa_r+0x5ce>
80008186:	30 0c       	mov	r12,0
80008188:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000818c:	51 3c       	stdsp	sp[0x4c],r12
8000818e:	30 0a       	mov	r10,0
80008190:	fc 1b 3f e0 	movh	r11,0x3fe0
80008194:	f0 1f 00 4d 	mcall	800082c8 <_dtoa_r+0x674>
80008198:	fa e8 00 28 	ld.d	r8,sp[40]
8000819c:	40 85       	lddsp	r5,sp[0x20]
8000819e:	f0 1f 00 48 	mcall	800082bc <_dtoa_r+0x668>
800081a2:	fa eb 00 28 	st.d	sp[40],r10
800081a6:	fa ea 00 08 	ld.d	r10,sp[8]
800081aa:	f0 1f 00 49 	mcall	800082cc <_dtoa_r+0x678>
800081ae:	51 6c       	stdsp	sp[0x58],r12
800081b0:	f0 1f 00 40 	mcall	800082b0 <_dtoa_r+0x65c>
800081b4:	14 98       	mov	r8,r10
800081b6:	16 99       	mov	r9,r11
800081b8:	fa ea 00 08 	ld.d	r10,sp[8]
800081bc:	f0 1f 00 40 	mcall	800082bc <_dtoa_r+0x668>
800081c0:	fa eb 00 08 	st.d	sp[8],r10
800081c4:	41 68       	lddsp	r8,sp[0x58]
800081c6:	2d 08       	sub	r8,-48
800081c8:	0a c8       	st.b	r5++,r8
800081ca:	41 39       	lddsp	r9,sp[0x4c]
800081cc:	2f f9       	sub	r9,-1
800081ce:	51 39       	stdsp	sp[0x4c],r9
800081d0:	fa e8 00 28 	ld.d	r8,sp[40]
800081d4:	f0 1f 00 3b 	mcall	800082c0 <_dtoa_r+0x66c>
800081d8:	e0 81 03 5a 	brne	8000888c <_dtoa_r+0xc38>
800081dc:	fa e8 00 08 	ld.d	r8,sp[8]
800081e0:	30 0a       	mov	r10,0
800081e2:	fc 1b 3f f0 	movh	r11,0x3ff0
800081e6:	f0 1f 00 36 	mcall	800082bc <_dtoa_r+0x668>
800081ea:	fa e8 00 28 	ld.d	r8,sp[40]
800081ee:	f0 1f 00 35 	mcall	800082c0 <_dtoa_r+0x66c>
800081f2:	fa ea 00 28 	ld.d	r10,sp[40]
800081f6:	30 08       	mov	r8,0
800081f8:	fc 19 40 24 	movh	r9,0x4024
800081fc:	e0 81 00 e8 	brne	800083cc <_dtoa_r+0x778>
80008200:	41 3c       	lddsp	r12,sp[0x4c]
80008202:	08 3c       	cp.w	r12,r4
80008204:	c6 e4       	brge	800082e0 <_dtoa_r+0x68c>
80008206:	f0 1f 00 2c 	mcall	800082b4 <_dtoa_r+0x660>
8000820a:	30 08       	mov	r8,0
8000820c:	fa eb 00 28 	st.d	sp[40],r10
80008210:	fc 19 40 24 	movh	r9,0x4024
80008214:	fa ea 00 08 	ld.d	r10,sp[8]
80008218:	f0 1f 00 27 	mcall	800082b4 <_dtoa_r+0x660>
8000821c:	fa eb 00 08 	st.d	sp[8],r10
80008220:	cc 3b       	rjmp	800081a6 <_dtoa_r+0x552>
80008222:	40 85       	lddsp	r5,sp[0x20]
80008224:	08 05       	add	r5,r4
80008226:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
8000822a:	51 35       	stdsp	sp[0x4c],r5
8000822c:	fa e8 00 28 	ld.d	r8,sp[40]
80008230:	40 85       	lddsp	r5,sp[0x20]
80008232:	f0 1f 00 21 	mcall	800082b4 <_dtoa_r+0x660>
80008236:	fa eb 00 28 	st.d	sp[40],r10
8000823a:	fa ea 00 08 	ld.d	r10,sp[8]
8000823e:	f0 1f 00 24 	mcall	800082cc <_dtoa_r+0x678>
80008242:	51 6c       	stdsp	sp[0x58],r12
80008244:	f0 1f 00 1b 	mcall	800082b0 <_dtoa_r+0x65c>
80008248:	14 98       	mov	r8,r10
8000824a:	16 99       	mov	r9,r11
8000824c:	fa ea 00 08 	ld.d	r10,sp[8]
80008250:	f0 1f 00 1b 	mcall	800082bc <_dtoa_r+0x668>
80008254:	fa eb 00 08 	st.d	sp[8],r10
80008258:	41 68       	lddsp	r8,sp[0x58]
8000825a:	2d 08       	sub	r8,-48
8000825c:	0a c8       	st.b	r5++,r8
8000825e:	41 3c       	lddsp	r12,sp[0x4c]
80008260:	18 35       	cp.w	r5,r12
80008262:	c3 71       	brne	800082d0 <_dtoa_r+0x67c>
80008264:	30 08       	mov	r8,0
80008266:	fc 19 3f e0 	movh	r9,0x3fe0
8000826a:	fa ea 00 28 	ld.d	r10,sp[40]
8000826e:	f0 1f 00 13 	mcall	800082b8 <_dtoa_r+0x664>
80008272:	40 85       	lddsp	r5,sp[0x20]
80008274:	fa e8 00 08 	ld.d	r8,sp[8]
80008278:	08 05       	add	r5,r4
8000827a:	f0 1f 00 12 	mcall	800082c0 <_dtoa_r+0x66c>
8000827e:	e0 81 00 a7 	brne	800083cc <_dtoa_r+0x778>
80008282:	fa e8 00 28 	ld.d	r8,sp[40]
80008286:	30 0a       	mov	r10,0
80008288:	fc 1b 3f e0 	movh	r11,0x3fe0
8000828c:	f0 1f 00 0c 	mcall	800082bc <_dtoa_r+0x668>
80008290:	14 98       	mov	r8,r10
80008292:	16 99       	mov	r9,r11
80008294:	fa ea 00 08 	ld.d	r10,sp[8]
80008298:	f0 1f 00 0a 	mcall	800082c0 <_dtoa_r+0x66c>
8000829c:	c2 20       	breq	800082e0 <_dtoa_r+0x68c>
8000829e:	33 09       	mov	r9,48
800082a0:	0a 98       	mov	r8,r5
800082a2:	11 7a       	ld.ub	r10,--r8
800082a4:	f2 0a 18 00 	cp.b	r10,r9
800082a8:	e0 81 02 f2 	brne	8000888c <_dtoa_r+0xc38>
800082ac:	10 95       	mov	r5,r8
800082ae:	cf 9b       	rjmp	800082a0 <_dtoa_r+0x64c>
800082b0:	80 00       	ld.sh	r0,r0[0x0]
800082b2:	a0 12       	st.h	r0[0x2],r2
800082b4:	80 00       	ld.sh	r0,r0[0x0]
800082b6:	9b 5c       	st.w	sp[0x14],r12
800082b8:	80 00       	ld.sh	r0,r0[0x0]
800082ba:	9e d0       	ld.uh	r0,pc[0xa]
800082bc:	80 00       	ld.sh	r0,r0[0x0]
800082be:	9d 34       	st.w	lr[0xc],r4
800082c0:	80 00       	ld.sh	r0,r0[0x0]
800082c2:	a1 80       	lsr	r0,0x0
800082c4:	80 00       	ld.sh	r0,r0[0x0]
800082c6:	b1 b4       	sbr	r4,0x11
800082c8:	80 00       	ld.sh	r0,r0[0x0]
800082ca:	a1 e8       	*unknown*
800082cc:	80 00       	ld.sh	r0,r0[0x0]
800082ce:	9f e4       	st.w	pc[0x38],r4
800082d0:	30 08       	mov	r8,0
800082d2:	fc 19 40 24 	movh	r9,0x4024
800082d6:	f0 1f 00 56 	mcall	8000842c <_dtoa_r+0x7d8>
800082da:	fa eb 00 08 	st.d	sp[8],r10
800082de:	ca eb       	rjmp	8000823a <_dtoa_r+0x5e6>
800082e0:	fa ea 00 3c 	ld.d	r10,sp[60]
800082e4:	fa eb 00 08 	st.d	sp[8],r10
800082e8:	58 e6       	cp.w	r6,14
800082ea:	5f ab       	srle	r11
800082ec:	41 8a       	lddsp	r10,sp[0x60]
800082ee:	30 08       	mov	r8,0
800082f0:	f4 09 11 ff 	rsub	r9,r10,-1
800082f4:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
800082f8:	f0 09 18 00 	cp.b	r9,r8
800082fc:	e0 80 00 81 	breq	800083fe <_dtoa_r+0x7aa>
80008300:	40 ea       	lddsp	r10,sp[0x38]
80008302:	58 01       	cp.w	r1,0
80008304:	5f a9       	srle	r9
80008306:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
8000830a:	4c aa       	lddpc	r10,80008430 <_dtoa_r+0x7dc>
8000830c:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
80008310:	fa e5 00 10 	st.d	sp[16],r4
80008314:	f0 09 18 00 	cp.b	r9,r8
80008318:	c1 40       	breq	80008340 <_dtoa_r+0x6ec>
8000831a:	58 01       	cp.w	r1,0
8000831c:	e0 81 01 8a 	brne	80008630 <_dtoa_r+0x9dc>
80008320:	30 08       	mov	r8,0
80008322:	fc 19 40 14 	movh	r9,0x4014
80008326:	08 9a       	mov	r10,r4
80008328:	0a 9b       	mov	r11,r5
8000832a:	f0 1f 00 41 	mcall	8000842c <_dtoa_r+0x7d8>
8000832e:	fa e8 00 08 	ld.d	r8,sp[8]
80008332:	f0 1f 00 41 	mcall	80008434 <_dtoa_r+0x7e0>
80008336:	e0 81 01 7d 	brne	80008630 <_dtoa_r+0x9dc>
8000833a:	02 92       	mov	r2,r1
8000833c:	e0 8f 01 85 	bral	80008646 <_dtoa_r+0x9f2>
80008340:	40 85       	lddsp	r5,sp[0x20]
80008342:	30 14       	mov	r4,1
80008344:	fa e8 00 10 	ld.d	r8,sp[16]
80008348:	fa ea 00 08 	ld.d	r10,sp[8]
8000834c:	f0 1f 00 3b 	mcall	80008438 <_dtoa_r+0x7e4>
80008350:	f0 1f 00 3b 	mcall	8000843c <_dtoa_r+0x7e8>
80008354:	18 92       	mov	r2,r12
80008356:	f0 1f 00 3b 	mcall	80008440 <_dtoa_r+0x7ec>
8000835a:	fa e8 00 10 	ld.d	r8,sp[16]
8000835e:	f0 1f 00 34 	mcall	8000842c <_dtoa_r+0x7d8>
80008362:	14 98       	mov	r8,r10
80008364:	16 99       	mov	r9,r11
80008366:	fa ea 00 08 	ld.d	r10,sp[8]
8000836a:	f0 1f 00 37 	mcall	80008444 <_dtoa_r+0x7f0>
8000836e:	fa eb 00 08 	st.d	sp[8],r10
80008372:	e4 c8 ff d0 	sub	r8,r2,-48
80008376:	0a c8       	st.b	r5++,r8
80008378:	fc 19 40 24 	movh	r9,0x4024
8000837c:	30 08       	mov	r8,0
8000837e:	02 34       	cp.w	r4,r1
80008380:	c3 31       	brne	800083e6 <_dtoa_r+0x792>
80008382:	fa e8 00 08 	ld.d	r8,sp[8]
80008386:	f0 1f 00 31 	mcall	80008448 <_dtoa_r+0x7f4>
8000838a:	16 91       	mov	r1,r11
8000838c:	14 90       	mov	r0,r10
8000838e:	14 98       	mov	r8,r10
80008390:	02 99       	mov	r9,r1
80008392:	fa ea 00 10 	ld.d	r10,sp[16]
80008396:	f0 1f 00 2e 	mcall	8000844c <_dtoa_r+0x7f8>
8000839a:	c1 a1       	brne	800083ce <_dtoa_r+0x77a>
8000839c:	fa e8 00 10 	ld.d	r8,sp[16]
800083a0:	00 9a       	mov	r10,r0
800083a2:	02 9b       	mov	r11,r1
800083a4:	f0 1f 00 2b 	mcall	80008450 <_dtoa_r+0x7fc>
800083a8:	e0 80 02 71 	breq	8000888a <_dtoa_r+0xc36>
800083ac:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
800083b0:	c0 f1       	brne	800083ce <_dtoa_r+0x77a>
800083b2:	e0 8f 02 6c 	bral	8000888a <_dtoa_r+0xc36>
800083b6:	40 8a       	lddsp	r10,sp[0x20]
800083b8:	14 38       	cp.w	r8,r10
800083ba:	c0 30       	breq	800083c0 <_dtoa_r+0x76c>
800083bc:	10 95       	mov	r5,r8
800083be:	c0 98       	rjmp	800083d0 <_dtoa_r+0x77c>
800083c0:	33 08       	mov	r8,48
800083c2:	40 89       	lddsp	r9,sp[0x20]
800083c4:	2f f6       	sub	r6,-1
800083c6:	b2 88       	st.b	r9[0x0],r8
800083c8:	40 88       	lddsp	r8,sp[0x20]
800083ca:	c0 88       	rjmp	800083da <_dtoa_r+0x786>
800083cc:	40 66       	lddsp	r6,sp[0x18]
800083ce:	33 99       	mov	r9,57
800083d0:	0a 98       	mov	r8,r5
800083d2:	11 7a       	ld.ub	r10,--r8
800083d4:	f2 0a 18 00 	cp.b	r10,r9
800083d8:	ce f0       	breq	800083b6 <_dtoa_r+0x762>
800083da:	50 66       	stdsp	sp[0x18],r6
800083dc:	11 89       	ld.ub	r9,r8[0x0]
800083de:	2f f9       	sub	r9,-1
800083e0:	b0 89       	st.b	r8[0x0],r9
800083e2:	e0 8f 02 55 	bral	8000888c <_dtoa_r+0xc38>
800083e6:	f0 1f 00 12 	mcall	8000842c <_dtoa_r+0x7d8>
800083ea:	2f f4       	sub	r4,-1
800083ec:	fa eb 00 08 	st.d	sp[8],r10
800083f0:	30 08       	mov	r8,0
800083f2:	30 09       	mov	r9,0
800083f4:	f0 1f 00 17 	mcall	80008450 <_dtoa_r+0x7fc>
800083f8:	ca 60       	breq	80008344 <_dtoa_r+0x6f0>
800083fa:	e0 8f 02 48 	bral	8000888a <_dtoa_r+0xc36>
800083fe:	40 d8       	lddsp	r8,sp[0x34]
80008400:	58 08       	cp.w	r8,0
80008402:	c0 51       	brne	8000840c <_dtoa_r+0x7b8>
80008404:	04 98       	mov	r8,r2
80008406:	00 95       	mov	r5,r0
80008408:	40 d4       	lddsp	r4,sp[0x34]
8000840a:	c4 a8       	rjmp	8000849e <_dtoa_r+0x84a>
8000840c:	40 c5       	lddsp	r5,sp[0x30]
8000840e:	58 15       	cp.w	r5,1
80008410:	e0 89 00 22 	brgt	80008454 <_dtoa_r+0x800>
80008414:	41 74       	lddsp	r4,sp[0x5c]
80008416:	58 04       	cp.w	r4,0
80008418:	c0 40       	breq	80008420 <_dtoa_r+0x7cc>
8000841a:	f4 c9 fb cd 	sub	r9,r10,-1075
8000841e:	c0 48       	rjmp	80008426 <_dtoa_r+0x7d2>
80008420:	41 99       	lddsp	r9,sp[0x64]
80008422:	f2 09 11 36 	rsub	r9,r9,54
80008426:	04 98       	mov	r8,r2
80008428:	00 95       	mov	r5,r0
8000842a:	c2 f8       	rjmp	80008488 <_dtoa_r+0x834>
8000842c:	80 00       	ld.sh	r0,r0[0x0]
8000842e:	9b 5c       	st.w	sp[0x14],r12
80008430:	80 00       	ld.sh	r0,r0[0x0]
80008432:	b1 b4       	sbr	r4,0x11
80008434:	80 00       	ld.sh	r0,r0[0x0]
80008436:	a1 18       	ld.d	r8,--r0
80008438:	80 00       	ld.sh	r0,r0[0x0]
8000843a:	a1 e8       	*unknown*
8000843c:	80 00       	ld.sh	r0,r0[0x0]
8000843e:	9f e4       	st.w	pc[0x38],r4
80008440:	80 00       	ld.sh	r0,r0[0x0]
80008442:	a0 12       	st.h	r0[0x2],r2
80008444:	80 00       	ld.sh	r0,r0[0x0]
80008446:	9d 34       	st.w	lr[0xc],r4
80008448:	80 00       	ld.sh	r0,r0[0x0]
8000844a:	9e d0       	ld.uh	r0,pc[0xa]
8000844c:	80 00       	ld.sh	r0,r0[0x0]
8000844e:	a1 80       	lsr	r0,0x0
80008450:	80 00       	ld.sh	r0,r0[0x0]
80008452:	a0 f2       	st.b	r0[0x7],r2
80008454:	e2 c8 00 01 	sub	r8,r1,1
80008458:	58 01       	cp.w	r1,0
8000845a:	e0 05 17 40 	movge	r5,r0
8000845e:	e2 09 17 40 	movge	r9,r1
80008462:	e1 d1 e5 15 	sublt	r5,r0,r1
80008466:	f9 b9 05 00 	movlt	r9,0
8000846a:	10 32       	cp.w	r2,r8
8000846c:	e5 d8 e4 18 	subge	r8,r2,r8
80008470:	f1 d2 e5 18 	sublt	r8,r8,r2
80008474:	e5 d8 e5 02 	addlt	r2,r2,r8
80008478:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
8000847c:	f9 d8 e5 0c 	addlt	r12,r12,r8
80008480:	fb fc 5a 11 	st.wlt	sp[0x44],r12
80008484:	f9 b8 05 00 	movlt	r8,0
80008488:	40 4b       	lddsp	r11,sp[0x10]
8000848a:	12 0b       	add	r11,r9
8000848c:	50 08       	stdsp	sp[0x0],r8
8000848e:	50 4b       	stdsp	sp[0x10],r11
80008490:	12 00       	add	r0,r9
80008492:	30 1b       	mov	r11,1
80008494:	0e 9c       	mov	r12,r7
80008496:	f0 1f 01 08 	mcall	800088b4 <_dtoa_r+0xc60>
8000849a:	40 08       	lddsp	r8,sp[0x0]
8000849c:	18 94       	mov	r4,r12
8000849e:	40 4a       	lddsp	r10,sp[0x10]
800084a0:	58 05       	cp.w	r5,0
800084a2:	5f 99       	srgt	r9
800084a4:	58 0a       	cp.w	r10,0
800084a6:	5f 9a       	srgt	r10
800084a8:	f5 e9 00 09 	and	r9,r10,r9
800084ac:	c0 80       	breq	800084bc <_dtoa_r+0x868>
800084ae:	40 4c       	lddsp	r12,sp[0x10]
800084b0:	f8 05 0d 49 	min	r9,r12,r5
800084b4:	12 1c       	sub	r12,r9
800084b6:	12 10       	sub	r0,r9
800084b8:	50 4c       	stdsp	sp[0x10],r12
800084ba:	12 15       	sub	r5,r9
800084bc:	58 02       	cp.w	r2,0
800084be:	e0 8a 00 27 	brle	8000850c <_dtoa_r+0x8b8>
800084c2:	40 db       	lddsp	r11,sp[0x34]
800084c4:	58 0b       	cp.w	r11,0
800084c6:	c1 d0       	breq	80008500 <_dtoa_r+0x8ac>
800084c8:	58 08       	cp.w	r8,0
800084ca:	e0 8a 00 17 	brle	800084f8 <_dtoa_r+0x8a4>
800084ce:	10 9a       	mov	r10,r8
800084d0:	50 08       	stdsp	sp[0x0],r8
800084d2:	08 9b       	mov	r11,r4
800084d4:	0e 9c       	mov	r12,r7
800084d6:	f0 1f 00 f9 	mcall	800088b8 <_dtoa_r+0xc64>
800084da:	06 9a       	mov	r10,r3
800084dc:	18 9b       	mov	r11,r12
800084de:	18 94       	mov	r4,r12
800084e0:	0e 9c       	mov	r12,r7
800084e2:	f0 1f 00 f7 	mcall	800088bc <_dtoa_r+0xc68>
800084e6:	18 99       	mov	r9,r12
800084e8:	06 9b       	mov	r11,r3
800084ea:	50 19       	stdsp	sp[0x4],r9
800084ec:	0e 9c       	mov	r12,r7
800084ee:	f0 1f 00 f5 	mcall	800088c0 <_dtoa_r+0xc6c>
800084f2:	40 19       	lddsp	r9,sp[0x4]
800084f4:	40 08       	lddsp	r8,sp[0x0]
800084f6:	12 93       	mov	r3,r9
800084f8:	e4 08 01 0a 	sub	r10,r2,r8
800084fc:	c0 80       	breq	8000850c <_dtoa_r+0x8b8>
800084fe:	c0 28       	rjmp	80008502 <_dtoa_r+0x8ae>
80008500:	04 9a       	mov	r10,r2
80008502:	06 9b       	mov	r11,r3
80008504:	0e 9c       	mov	r12,r7
80008506:	f0 1f 00 ed 	mcall	800088b8 <_dtoa_r+0xc64>
8000850a:	18 93       	mov	r3,r12
8000850c:	30 1b       	mov	r11,1
8000850e:	0e 9c       	mov	r12,r7
80008510:	f0 1f 00 e9 	mcall	800088b4 <_dtoa_r+0xc60>
80008514:	41 1a       	lddsp	r10,sp[0x44]
80008516:	18 92       	mov	r2,r12
80008518:	58 0a       	cp.w	r10,0
8000851a:	e0 8a 00 07 	brle	80008528 <_dtoa_r+0x8d4>
8000851e:	18 9b       	mov	r11,r12
80008520:	0e 9c       	mov	r12,r7
80008522:	f0 1f 00 e6 	mcall	800088b8 <_dtoa_r+0xc64>
80008526:	18 92       	mov	r2,r12
80008528:	40 c9       	lddsp	r9,sp[0x30]
8000852a:	58 19       	cp.w	r9,1
8000852c:	e0 89 00 14 	brgt	80008554 <_dtoa_r+0x900>
80008530:	40 38       	lddsp	r8,sp[0xc]
80008532:	58 08       	cp.w	r8,0
80008534:	c1 01       	brne	80008554 <_dtoa_r+0x900>
80008536:	40 29       	lddsp	r9,sp[0x8]
80008538:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
8000853c:	c0 c1       	brne	80008554 <_dtoa_r+0x900>
8000853e:	12 98       	mov	r8,r9
80008540:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80008544:	c0 80       	breq	80008554 <_dtoa_r+0x900>
80008546:	40 4c       	lddsp	r12,sp[0x10]
80008548:	30 1b       	mov	r11,1
8000854a:	2f fc       	sub	r12,-1
8000854c:	2f f0       	sub	r0,-1
8000854e:	50 4c       	stdsp	sp[0x10],r12
80008550:	50 6b       	stdsp	sp[0x18],r11
80008552:	c0 38       	rjmp	80008558 <_dtoa_r+0x904>
80008554:	30 0a       	mov	r10,0
80008556:	50 6a       	stdsp	sp[0x18],r10
80008558:	41 19       	lddsp	r9,sp[0x44]
8000855a:	58 09       	cp.w	r9,0
8000855c:	c0 31       	brne	80008562 <_dtoa_r+0x90e>
8000855e:	30 1c       	mov	r12,1
80008560:	c0 98       	rjmp	80008572 <_dtoa_r+0x91e>
80008562:	64 48       	ld.w	r8,r2[0x10]
80008564:	2f c8       	sub	r8,-4
80008566:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
8000856a:	f0 1f 00 d7 	mcall	800088c4 <_dtoa_r+0xc70>
8000856e:	f8 0c 11 20 	rsub	r12,r12,32
80008572:	40 4b       	lddsp	r11,sp[0x10]
80008574:	f8 0b 00 08 	add	r8,r12,r11
80008578:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000857c:	c0 c0       	breq	80008594 <_dtoa_r+0x940>
8000857e:	f0 08 11 20 	rsub	r8,r8,32
80008582:	58 48       	cp.w	r8,4
80008584:	e0 8a 00 06 	brle	80008590 <_dtoa_r+0x93c>
80008588:	20 48       	sub	r8,4
8000858a:	10 0b       	add	r11,r8
8000858c:	50 4b       	stdsp	sp[0x10],r11
8000858e:	c0 78       	rjmp	8000859c <_dtoa_r+0x948>
80008590:	58 48       	cp.w	r8,4
80008592:	c0 70       	breq	800085a0 <_dtoa_r+0x94c>
80008594:	40 4a       	lddsp	r10,sp[0x10]
80008596:	2e 48       	sub	r8,-28
80008598:	10 0a       	add	r10,r8
8000859a:	50 4a       	stdsp	sp[0x10],r10
8000859c:	10 00       	add	r0,r8
8000859e:	10 05       	add	r5,r8
800085a0:	58 00       	cp.w	r0,0
800085a2:	e0 8a 00 08 	brle	800085b2 <_dtoa_r+0x95e>
800085a6:	06 9b       	mov	r11,r3
800085a8:	00 9a       	mov	r10,r0
800085aa:	0e 9c       	mov	r12,r7
800085ac:	f0 1f 00 c7 	mcall	800088c8 <_dtoa_r+0xc74>
800085b0:	18 93       	mov	r3,r12
800085b2:	40 49       	lddsp	r9,sp[0x10]
800085b4:	58 09       	cp.w	r9,0
800085b6:	e0 8a 00 08 	brle	800085c6 <_dtoa_r+0x972>
800085ba:	04 9b       	mov	r11,r2
800085bc:	12 9a       	mov	r10,r9
800085be:	0e 9c       	mov	r12,r7
800085c0:	f0 1f 00 c2 	mcall	800088c8 <_dtoa_r+0xc74>
800085c4:	18 92       	mov	r2,r12
800085c6:	41 48       	lddsp	r8,sp[0x50]
800085c8:	58 08       	cp.w	r8,0
800085ca:	c1 b0       	breq	80008600 <_dtoa_r+0x9ac>
800085cc:	04 9b       	mov	r11,r2
800085ce:	06 9c       	mov	r12,r3
800085d0:	f0 1f 00 bf 	mcall	800088cc <_dtoa_r+0xc78>
800085d4:	c1 64       	brge	80008600 <_dtoa_r+0x9ac>
800085d6:	06 9b       	mov	r11,r3
800085d8:	30 09       	mov	r9,0
800085da:	30 aa       	mov	r10,10
800085dc:	0e 9c       	mov	r12,r7
800085de:	f0 1f 00 bd 	mcall	800088d0 <_dtoa_r+0xc7c>
800085e2:	20 16       	sub	r6,1
800085e4:	18 93       	mov	r3,r12
800085e6:	40 dc       	lddsp	r12,sp[0x34]
800085e8:	58 0c       	cp.w	r12,0
800085ea:	c0 31       	brne	800085f0 <_dtoa_r+0x99c>
800085ec:	40 91       	lddsp	r1,sp[0x24]
800085ee:	c0 98       	rjmp	80008600 <_dtoa_r+0x9ac>
800085f0:	08 9b       	mov	r11,r4
800085f2:	40 91       	lddsp	r1,sp[0x24]
800085f4:	30 09       	mov	r9,0
800085f6:	30 aa       	mov	r10,10
800085f8:	0e 9c       	mov	r12,r7
800085fa:	f0 1f 00 b6 	mcall	800088d0 <_dtoa_r+0xc7c>
800085fe:	18 94       	mov	r4,r12
80008600:	58 01       	cp.w	r1,0
80008602:	5f a9       	srle	r9
80008604:	40 cb       	lddsp	r11,sp[0x30]
80008606:	58 2b       	cp.w	r11,2
80008608:	5f 98       	srgt	r8
8000860a:	f3 e8 00 08 	and	r8,r9,r8
8000860e:	c2 50       	breq	80008658 <_dtoa_r+0xa04>
80008610:	58 01       	cp.w	r1,0
80008612:	c1 11       	brne	80008634 <_dtoa_r+0x9e0>
80008614:	04 9b       	mov	r11,r2
80008616:	02 99       	mov	r9,r1
80008618:	30 5a       	mov	r10,5
8000861a:	0e 9c       	mov	r12,r7
8000861c:	f0 1f 00 ad 	mcall	800088d0 <_dtoa_r+0xc7c>
80008620:	18 92       	mov	r2,r12
80008622:	18 9b       	mov	r11,r12
80008624:	06 9c       	mov	r12,r3
80008626:	f0 1f 00 aa 	mcall	800088cc <_dtoa_r+0xc78>
8000862a:	e0 89 00 0f 	brgt	80008648 <_dtoa_r+0x9f4>
8000862e:	c0 38       	rjmp	80008634 <_dtoa_r+0x9e0>
80008630:	30 02       	mov	r2,0
80008632:	04 94       	mov	r4,r2
80008634:	40 ea       	lddsp	r10,sp[0x38]
80008636:	30 09       	mov	r9,0
80008638:	5c da       	com	r10
8000863a:	40 85       	lddsp	r5,sp[0x20]
8000863c:	50 6a       	stdsp	sp[0x18],r10
8000863e:	50 49       	stdsp	sp[0x10],r9
80008640:	c0 f9       	rjmp	8000885e <_dtoa_r+0xc0a>
80008642:	08 92       	mov	r2,r4
80008644:	40 66       	lddsp	r6,sp[0x18]
80008646:	04 94       	mov	r4,r2
80008648:	2f f6       	sub	r6,-1
8000864a:	50 66       	stdsp	sp[0x18],r6
8000864c:	33 18       	mov	r8,49
8000864e:	40 85       	lddsp	r5,sp[0x20]
80008650:	0a c8       	st.b	r5++,r8
80008652:	30 08       	mov	r8,0
80008654:	50 48       	stdsp	sp[0x10],r8
80008656:	c0 49       	rjmp	8000885e <_dtoa_r+0xc0a>
80008658:	40 dc       	lddsp	r12,sp[0x34]
8000865a:	58 0c       	cp.w	r12,0
8000865c:	e0 80 00 b5 	breq	800087c6 <_dtoa_r+0xb72>
80008660:	58 05       	cp.w	r5,0
80008662:	e0 8a 00 08 	brle	80008672 <_dtoa_r+0xa1e>
80008666:	08 9b       	mov	r11,r4
80008668:	0a 9a       	mov	r10,r5
8000866a:	0e 9c       	mov	r12,r7
8000866c:	f0 1f 00 97 	mcall	800088c8 <_dtoa_r+0xc74>
80008670:	18 94       	mov	r4,r12
80008672:	40 6b       	lddsp	r11,sp[0x18]
80008674:	58 0b       	cp.w	r11,0
80008676:	c0 31       	brne	8000867c <_dtoa_r+0xa28>
80008678:	08 9c       	mov	r12,r4
8000867a:	c1 38       	rjmp	800086a0 <_dtoa_r+0xa4c>
8000867c:	68 1b       	ld.w	r11,r4[0x4]
8000867e:	0e 9c       	mov	r12,r7
80008680:	f0 1f 00 95 	mcall	800088d4 <_dtoa_r+0xc80>
80008684:	68 4a       	ld.w	r10,r4[0x10]
80008686:	18 95       	mov	r5,r12
80008688:	e8 cb ff f4 	sub	r11,r4,-12
8000868c:	2f ea       	sub	r10,-2
8000868e:	2f 4c       	sub	r12,-12
80008690:	a3 6a       	lsl	r10,0x2
80008692:	f0 1f 00 92 	mcall	800088d8 <_dtoa_r+0xc84>
80008696:	0a 9b       	mov	r11,r5
80008698:	30 1a       	mov	r10,1
8000869a:	0e 9c       	mov	r12,r7
8000869c:	f0 1f 00 8b 	mcall	800088c8 <_dtoa_r+0xc74>
800086a0:	50 44       	stdsp	sp[0x10],r4
800086a2:	40 3a       	lddsp	r10,sp[0xc]
800086a4:	30 19       	mov	r9,1
800086a6:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
800086aa:	18 94       	mov	r4,r12
800086ac:	50 da       	stdsp	sp[0x34],r10
800086ae:	40 85       	lddsp	r5,sp[0x20]
800086b0:	50 99       	stdsp	sp[0x24],r9
800086b2:	50 26       	stdsp	sp[0x8],r6
800086b4:	50 e1       	stdsp	sp[0x38],r1
800086b6:	04 9b       	mov	r11,r2
800086b8:	06 9c       	mov	r12,r3
800086ba:	f0 1f 00 89 	mcall	800088dc <_dtoa_r+0xc88>
800086be:	40 4b       	lddsp	r11,sp[0x10]
800086c0:	f8 c0 ff d0 	sub	r0,r12,-48
800086c4:	06 9c       	mov	r12,r3
800086c6:	f0 1f 00 82 	mcall	800088cc <_dtoa_r+0xc78>
800086ca:	08 9a       	mov	r10,r4
800086cc:	50 6c       	stdsp	sp[0x18],r12
800086ce:	04 9b       	mov	r11,r2
800086d0:	0e 9c       	mov	r12,r7
800086d2:	f0 1f 00 84 	mcall	800088e0 <_dtoa_r+0xc8c>
800086d6:	18 91       	mov	r1,r12
800086d8:	78 38       	ld.w	r8,r12[0xc]
800086da:	58 08       	cp.w	r8,0
800086dc:	c0 30       	breq	800086e2 <_dtoa_r+0xa8e>
800086de:	30 16       	mov	r6,1
800086e0:	c0 68       	rjmp	800086ec <_dtoa_r+0xa98>
800086e2:	18 9b       	mov	r11,r12
800086e4:	06 9c       	mov	r12,r3
800086e6:	f0 1f 00 7a 	mcall	800088cc <_dtoa_r+0xc78>
800086ea:	18 96       	mov	r6,r12
800086ec:	0e 9c       	mov	r12,r7
800086ee:	02 9b       	mov	r11,r1
800086f0:	f0 1f 00 74 	mcall	800088c0 <_dtoa_r+0xc6c>
800086f4:	40 cc       	lddsp	r12,sp[0x30]
800086f6:	ed ec 10 08 	or	r8,r6,r12
800086fa:	c0 d1       	brne	80008714 <_dtoa_r+0xac0>
800086fc:	40 db       	lddsp	r11,sp[0x34]
800086fe:	58 0b       	cp.w	r11,0
80008700:	c0 a1       	brne	80008714 <_dtoa_r+0xac0>
80008702:	40 26       	lddsp	r6,sp[0x8]
80008704:	e0 40 00 39 	cp.w	r0,57
80008708:	c3 00       	breq	80008768 <_dtoa_r+0xb14>
8000870a:	40 6a       	lddsp	r10,sp[0x18]
8000870c:	58 0a       	cp.w	r10,0
8000870e:	e0 89 00 24 	brgt	80008756 <_dtoa_r+0xb02>
80008712:	c2 f8       	rjmp	80008770 <_dtoa_r+0xb1c>
80008714:	40 69       	lddsp	r9,sp[0x18]
80008716:	58 09       	cp.w	r9,0
80008718:	c0 85       	brlt	80008728 <_dtoa_r+0xad4>
8000871a:	12 98       	mov	r8,r9
8000871c:	40 cc       	lddsp	r12,sp[0x30]
8000871e:	18 48       	or	r8,r12
80008720:	c1 d1       	brne	8000875a <_dtoa_r+0xb06>
80008722:	40 db       	lddsp	r11,sp[0x34]
80008724:	58 0b       	cp.w	r11,0
80008726:	c1 a1       	brne	8000875a <_dtoa_r+0xb06>
80008728:	0c 99       	mov	r9,r6
8000872a:	40 26       	lddsp	r6,sp[0x8]
8000872c:	58 09       	cp.w	r9,0
8000872e:	e0 8a 00 21 	brle	80008770 <_dtoa_r+0xb1c>
80008732:	06 9b       	mov	r11,r3
80008734:	30 1a       	mov	r10,1
80008736:	0e 9c       	mov	r12,r7
80008738:	f0 1f 00 64 	mcall	800088c8 <_dtoa_r+0xc74>
8000873c:	04 9b       	mov	r11,r2
8000873e:	18 93       	mov	r3,r12
80008740:	f0 1f 00 63 	mcall	800088cc <_dtoa_r+0xc78>
80008744:	e0 89 00 06 	brgt	80008750 <_dtoa_r+0xafc>
80008748:	c1 41       	brne	80008770 <_dtoa_r+0xb1c>
8000874a:	ed b0 00 00 	bld	r0,0x0
8000874e:	c1 11       	brne	80008770 <_dtoa_r+0xb1c>
80008750:	e0 40 00 39 	cp.w	r0,57
80008754:	c0 a0       	breq	80008768 <_dtoa_r+0xb14>
80008756:	2f f0       	sub	r0,-1
80008758:	c0 c8       	rjmp	80008770 <_dtoa_r+0xb1c>
8000875a:	58 06       	cp.w	r6,0
8000875c:	e0 8a 00 0c 	brle	80008774 <_dtoa_r+0xb20>
80008760:	40 26       	lddsp	r6,sp[0x8]
80008762:	e0 40 00 39 	cp.w	r0,57
80008766:	c0 41       	brne	8000876e <_dtoa_r+0xb1a>
80008768:	33 98       	mov	r8,57
8000876a:	0a c8       	st.b	r5++,r8
8000876c:	c6 78       	rjmp	8000883a <_dtoa_r+0xbe6>
8000876e:	2f f0       	sub	r0,-1
80008770:	0a c0       	st.b	r5++,r0
80008772:	c7 58       	rjmp	8000885c <_dtoa_r+0xc08>
80008774:	0a c0       	st.b	r5++,r0
80008776:	40 9a       	lddsp	r10,sp[0x24]
80008778:	40 e9       	lddsp	r9,sp[0x38]
8000877a:	12 3a       	cp.w	r10,r9
8000877c:	c4 30       	breq	80008802 <_dtoa_r+0xbae>
8000877e:	06 9b       	mov	r11,r3
80008780:	30 09       	mov	r9,0
80008782:	30 aa       	mov	r10,10
80008784:	0e 9c       	mov	r12,r7
80008786:	f0 1f 00 53 	mcall	800088d0 <_dtoa_r+0xc7c>
8000878a:	40 48       	lddsp	r8,sp[0x10]
8000878c:	18 93       	mov	r3,r12
8000878e:	08 38       	cp.w	r8,r4
80008790:	c0 91       	brne	800087a2 <_dtoa_r+0xb4e>
80008792:	10 9b       	mov	r11,r8
80008794:	30 09       	mov	r9,0
80008796:	30 aa       	mov	r10,10
80008798:	0e 9c       	mov	r12,r7
8000879a:	f0 1f 00 4e 	mcall	800088d0 <_dtoa_r+0xc7c>
8000879e:	50 4c       	stdsp	sp[0x10],r12
800087a0:	c0 e8       	rjmp	800087bc <_dtoa_r+0xb68>
800087a2:	40 4b       	lddsp	r11,sp[0x10]
800087a4:	30 09       	mov	r9,0
800087a6:	30 aa       	mov	r10,10
800087a8:	0e 9c       	mov	r12,r7
800087aa:	f0 1f 00 4a 	mcall	800088d0 <_dtoa_r+0xc7c>
800087ae:	08 9b       	mov	r11,r4
800087b0:	50 4c       	stdsp	sp[0x10],r12
800087b2:	30 09       	mov	r9,0
800087b4:	30 aa       	mov	r10,10
800087b6:	0e 9c       	mov	r12,r7
800087b8:	f0 1f 00 46 	mcall	800088d0 <_dtoa_r+0xc7c>
800087bc:	18 94       	mov	r4,r12
800087be:	40 9c       	lddsp	r12,sp[0x24]
800087c0:	2f fc       	sub	r12,-1
800087c2:	50 9c       	stdsp	sp[0x24],r12
800087c4:	c7 9b       	rjmp	800086b6 <_dtoa_r+0xa62>
800087c6:	30 18       	mov	r8,1
800087c8:	06 90       	mov	r0,r3
800087ca:	40 85       	lddsp	r5,sp[0x20]
800087cc:	08 93       	mov	r3,r4
800087ce:	0c 94       	mov	r4,r6
800087d0:	10 96       	mov	r6,r8
800087d2:	04 9b       	mov	r11,r2
800087d4:	00 9c       	mov	r12,r0
800087d6:	f0 1f 00 42 	mcall	800088dc <_dtoa_r+0xc88>
800087da:	2d 0c       	sub	r12,-48
800087dc:	0a cc       	st.b	r5++,r12
800087de:	02 36       	cp.w	r6,r1
800087e0:	c0 a4       	brge	800087f4 <_dtoa_r+0xba0>
800087e2:	00 9b       	mov	r11,r0
800087e4:	30 09       	mov	r9,0
800087e6:	30 aa       	mov	r10,10
800087e8:	0e 9c       	mov	r12,r7
800087ea:	2f f6       	sub	r6,-1
800087ec:	f0 1f 00 39 	mcall	800088d0 <_dtoa_r+0xc7c>
800087f0:	18 90       	mov	r0,r12
800087f2:	cf 0b       	rjmp	800087d2 <_dtoa_r+0xb7e>
800087f4:	08 96       	mov	r6,r4
800087f6:	30 0b       	mov	r11,0
800087f8:	06 94       	mov	r4,r3
800087fa:	50 4b       	stdsp	sp[0x10],r11
800087fc:	00 93       	mov	r3,r0
800087fe:	18 90       	mov	r0,r12
80008800:	c0 28       	rjmp	80008804 <_dtoa_r+0xbb0>
80008802:	40 26       	lddsp	r6,sp[0x8]
80008804:	06 9b       	mov	r11,r3
80008806:	30 1a       	mov	r10,1
80008808:	0e 9c       	mov	r12,r7
8000880a:	f0 1f 00 30 	mcall	800088c8 <_dtoa_r+0xc74>
8000880e:	04 9b       	mov	r11,r2
80008810:	18 93       	mov	r3,r12
80008812:	f0 1f 00 2f 	mcall	800088cc <_dtoa_r+0xc78>
80008816:	e0 89 00 12 	brgt	8000883a <_dtoa_r+0xbe6>
8000881a:	c1 b1       	brne	80008850 <_dtoa_r+0xbfc>
8000881c:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
80008820:	c0 d1       	brne	8000883a <_dtoa_r+0xbe6>
80008822:	c1 78       	rjmp	80008850 <_dtoa_r+0xbfc>
80008824:	40 89       	lddsp	r9,sp[0x20]
80008826:	12 38       	cp.w	r8,r9
80008828:	c0 30       	breq	8000882e <_dtoa_r+0xbda>
8000882a:	10 95       	mov	r5,r8
8000882c:	c0 88       	rjmp	8000883c <_dtoa_r+0xbe8>
8000882e:	2f f6       	sub	r6,-1
80008830:	50 66       	stdsp	sp[0x18],r6
80008832:	33 18       	mov	r8,49
80008834:	40 8c       	lddsp	r12,sp[0x20]
80008836:	b8 88       	st.b	r12[0x0],r8
80008838:	c1 38       	rjmp	8000885e <_dtoa_r+0xc0a>
8000883a:	33 9a       	mov	r10,57
8000883c:	0a 98       	mov	r8,r5
8000883e:	11 79       	ld.ub	r9,--r8
80008840:	f4 09 18 00 	cp.b	r9,r10
80008844:	cf 00       	breq	80008824 <_dtoa_r+0xbd0>
80008846:	2f f9       	sub	r9,-1
80008848:	b0 89       	st.b	r8[0x0],r9
8000884a:	c0 98       	rjmp	8000885c <_dtoa_r+0xc08>
8000884c:	10 95       	mov	r5,r8
8000884e:	c0 28       	rjmp	80008852 <_dtoa_r+0xbfe>
80008850:	33 09       	mov	r9,48
80008852:	0a 98       	mov	r8,r5
80008854:	11 7a       	ld.ub	r10,--r8
80008856:	f2 0a 18 00 	cp.b	r10,r9
8000885a:	cf 90       	breq	8000884c <_dtoa_r+0xbf8>
8000885c:	50 66       	stdsp	sp[0x18],r6
8000885e:	04 9b       	mov	r11,r2
80008860:	0e 9c       	mov	r12,r7
80008862:	f0 1f 00 18 	mcall	800088c0 <_dtoa_r+0xc6c>
80008866:	58 04       	cp.w	r4,0
80008868:	c1 20       	breq	8000888c <_dtoa_r+0xc38>
8000886a:	40 4b       	lddsp	r11,sp[0x10]
8000886c:	08 3b       	cp.w	r11,r4
8000886e:	5f 19       	srne	r9
80008870:	58 0b       	cp.w	r11,0
80008872:	5f 18       	srne	r8
80008874:	f3 e8 00 08 	and	r8,r9,r8
80008878:	c0 40       	breq	80008880 <_dtoa_r+0xc2c>
8000887a:	0e 9c       	mov	r12,r7
8000887c:	f0 1f 00 11 	mcall	800088c0 <_dtoa_r+0xc6c>
80008880:	08 9b       	mov	r11,r4
80008882:	0e 9c       	mov	r12,r7
80008884:	f0 1f 00 0f 	mcall	800088c0 <_dtoa_r+0xc6c>
80008888:	c0 28       	rjmp	8000888c <_dtoa_r+0xc38>
8000888a:	50 66       	stdsp	sp[0x18],r6
8000888c:	0e 9c       	mov	r12,r7
8000888e:	06 9b       	mov	r11,r3
80008890:	f0 1f 00 0c 	mcall	800088c0 <_dtoa_r+0xc6c>
80008894:	30 08       	mov	r8,0
80008896:	aa 88       	st.b	r5[0x0],r8
80008898:	40 68       	lddsp	r8,sp[0x18]
8000889a:	41 5a       	lddsp	r10,sp[0x54]
8000889c:	2f f8       	sub	r8,-1
8000889e:	41 29       	lddsp	r9,sp[0x48]
800088a0:	95 08       	st.w	r10[0x0],r8
800088a2:	40 8c       	lddsp	r12,sp[0x20]
800088a4:	58 09       	cp.w	r9,0
800088a6:	fb f8 10 12 	ld.wne	r8,sp[0x48]
800088aa:	f1 f5 1a 00 	st.wne	r8[0x0],r5
800088ae:	2e 6d       	sub	sp,-104
800088b0:	d8 32       	popm	r0-r7,pc
800088b2:	00 00       	add	r0,r0
800088b4:	80 00       	ld.sh	r0,r0[0x0]
800088b6:	96 fc       	ld.uh	r12,r11[0xe]
800088b8:	80 00       	ld.sh	r0,r0[0x0]
800088ba:	97 9c       	st.w	r11[0x24],r12
800088bc:	80 00       	ld.sh	r0,r0[0x0]
800088be:	95 f4       	st.w	r10[0x3c],r4
800088c0:	80 00       	ld.sh	r0,r0[0x0]
800088c2:	93 24       	st.w	r9[0x8],r4
800088c4:	80 00       	ld.sh	r0,r0[0x0]
800088c6:	92 04       	ld.sh	r4,r9[0x0]
800088c8:	80 00       	ld.sh	r0,r0[0x0]
800088ca:	95 60       	st.w	r10[0x18],r0
800088cc:	80 00       	ld.sh	r0,r0[0x0]
800088ce:	92 f2       	ld.uh	r2,r9[0xe]
800088d0:	80 00       	ld.sh	r0,r0[0x0]
800088d2:	97 14       	st.w	r11[0x4],r4
800088d4:	80 00       	ld.sh	r0,r0[0x0]
800088d6:	93 5c       	st.w	r9[0x14],r12
800088d8:	80 00       	ld.sh	r0,r0[0x0]
800088da:	4e f0       	lddpc	r0,80008a94 <__sfp+0x44>
800088dc:	80 00       	ld.sh	r0,r0[0x0]
800088de:	7b 30       	ld.w	r0,sp[0x4c]
800088e0:	80 00       	ld.sh	r0,r0[0x0]
800088e2:	94 88       	ld.uh	r8,r10[0x0]

800088e4 <__errno>:
800088e4:	48 28       	lddpc	r8,800088ec <__errno+0x8>
800088e6:	70 0c       	ld.w	r12,r8[0x0]
800088e8:	2f 4c       	sub	r12,-12
800088ea:	5e fc       	retal	r12
800088ec:	00 00       	add	r0,r0
800088ee:	01 ec       	ld.ub	r12,r0[0x6]

800088f0 <_fflush_r>:
800088f0:	d4 21       	pushm	r4-r7,lr
800088f2:	16 97       	mov	r7,r11
800088f4:	18 96       	mov	r6,r12
800088f6:	76 48       	ld.w	r8,r11[0x10]
800088f8:	58 08       	cp.w	r8,0
800088fa:	c7 d0       	breq	800089f4 <_fflush_r+0x104>
800088fc:	58 0c       	cp.w	r12,0
800088fe:	c0 60       	breq	8000890a <_fflush_r+0x1a>
80008900:	78 68       	ld.w	r8,r12[0x18]
80008902:	58 08       	cp.w	r8,0
80008904:	c0 31       	brne	8000890a <_fflush_r+0x1a>
80008906:	f0 1f 00 3d 	mcall	800089f8 <_fflush_r+0x108>
8000890a:	4b d8       	lddpc	r8,800089fc <_fflush_r+0x10c>
8000890c:	10 37       	cp.w	r7,r8
8000890e:	c0 31       	brne	80008914 <_fflush_r+0x24>
80008910:	6c 07       	ld.w	r7,r6[0x0]
80008912:	c0 a8       	rjmp	80008926 <_fflush_r+0x36>
80008914:	4b b8       	lddpc	r8,80008a00 <_fflush_r+0x110>
80008916:	10 37       	cp.w	r7,r8
80008918:	c0 31       	brne	8000891e <_fflush_r+0x2e>
8000891a:	6c 17       	ld.w	r7,r6[0x4]
8000891c:	c0 58       	rjmp	80008926 <_fflush_r+0x36>
8000891e:	4b a8       	lddpc	r8,80008a04 <_fflush_r+0x114>
80008920:	10 37       	cp.w	r7,r8
80008922:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80008926:	8e 6a       	ld.sh	r10,r7[0xc]
80008928:	14 98       	mov	r8,r10
8000892a:	ed ba 00 03 	bld	r10,0x3
8000892e:	c4 20       	breq	800089b2 <_fflush_r+0xc2>
80008930:	ab ba       	sbr	r10,0xb
80008932:	ae 6a       	st.h	r7[0xc],r10
80008934:	6e 18       	ld.w	r8,r7[0x4]
80008936:	58 08       	cp.w	r8,0
80008938:	e0 89 00 06 	brgt	80008944 <_fflush_r+0x54>
8000893c:	6f 08       	ld.w	r8,r7[0x40]
8000893e:	58 08       	cp.w	r8,0
80008940:	e0 8a 00 5a 	brle	800089f4 <_fflush_r+0x104>
80008944:	6e b8       	ld.w	r8,r7[0x2c]
80008946:	58 08       	cp.w	r8,0
80008948:	c5 60       	breq	800089f4 <_fflush_r+0x104>
8000894a:	e2 1a 10 00 	andl	r10,0x1000,COH
8000894e:	c0 30       	breq	80008954 <_fflush_r+0x64>
80008950:	6f 55       	ld.w	r5,r7[0x54]
80008952:	c0 f8       	rjmp	80008970 <_fflush_r+0x80>
80008954:	30 19       	mov	r9,1
80008956:	6e 8b       	ld.w	r11,r7[0x20]
80008958:	0c 9c       	mov	r12,r6
8000895a:	5d 18       	icall	r8
8000895c:	18 95       	mov	r5,r12
8000895e:	5b fc       	cp.w	r12,-1
80008960:	c0 81       	brne	80008970 <_fflush_r+0x80>
80008962:	6c 38       	ld.w	r8,r6[0xc]
80008964:	59 d8       	cp.w	r8,29
80008966:	c4 70       	breq	800089f4 <_fflush_r+0x104>
80008968:	8e 68       	ld.sh	r8,r7[0xc]
8000896a:	a7 a8       	sbr	r8,0x6
8000896c:	ae 68       	st.h	r7[0xc],r8
8000896e:	d8 22       	popm	r4-r7,pc
80008970:	8e 68       	ld.sh	r8,r7[0xc]
80008972:	ed b8 00 02 	bld	r8,0x2
80008976:	c0 91       	brne	80008988 <_fflush_r+0x98>
80008978:	6e 18       	ld.w	r8,r7[0x4]
8000897a:	10 15       	sub	r5,r8
8000897c:	6e d8       	ld.w	r8,r7[0x34]
8000897e:	58 08       	cp.w	r8,0
80008980:	ef f8 10 10 	ld.wne	r8,r7[0x40]
80008984:	eb d8 e1 15 	subne	r5,r5,r8
80008988:	6e b8       	ld.w	r8,r7[0x2c]
8000898a:	0c 9c       	mov	r12,r6
8000898c:	30 09       	mov	r9,0
8000898e:	0a 9a       	mov	r10,r5
80008990:	6e 8b       	ld.w	r11,r7[0x20]
80008992:	5d 18       	icall	r8
80008994:	8e 68       	ld.sh	r8,r7[0xc]
80008996:	0a 3c       	cp.w	r12,r5
80008998:	c2 61       	brne	800089e4 <_fflush_r+0xf4>
8000899a:	ab d8       	cbr	r8,0xb
8000899c:	30 0c       	mov	r12,0
8000899e:	6e 49       	ld.w	r9,r7[0x10]
800089a0:	ae 68       	st.h	r7[0xc],r8
800089a2:	8f 1c       	st.w	r7[0x4],r12
800089a4:	8f 09       	st.w	r7[0x0],r9
800089a6:	ed b8 00 0c 	bld	r8,0xc
800089aa:	c2 51       	brne	800089f4 <_fflush_r+0x104>
800089ac:	ef 45 00 54 	st.w	r7[84],r5
800089b0:	d8 22       	popm	r4-r7,pc
800089b2:	6e 45       	ld.w	r5,r7[0x10]
800089b4:	58 05       	cp.w	r5,0
800089b6:	c1 f0       	breq	800089f4 <_fflush_r+0x104>
800089b8:	6e 04       	ld.w	r4,r7[0x0]
800089ba:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
800089be:	8f 05       	st.w	r7[0x0],r5
800089c0:	f9 b8 01 00 	movne	r8,0
800089c4:	ef f8 00 05 	ld.weq	r8,r7[0x14]
800089c8:	0a 14       	sub	r4,r5
800089ca:	8f 28       	st.w	r7[0x8],r8
800089cc:	c1 18       	rjmp	800089ee <_fflush_r+0xfe>
800089ce:	08 99       	mov	r9,r4
800089d0:	0a 9a       	mov	r10,r5
800089d2:	6e a8       	ld.w	r8,r7[0x28]
800089d4:	6e 8b       	ld.w	r11,r7[0x20]
800089d6:	0c 9c       	mov	r12,r6
800089d8:	5d 18       	icall	r8
800089da:	18 14       	sub	r4,r12
800089dc:	58 0c       	cp.w	r12,0
800089de:	e0 89 00 07 	brgt	800089ec <_fflush_r+0xfc>
800089e2:	8e 68       	ld.sh	r8,r7[0xc]
800089e4:	a7 a8       	sbr	r8,0x6
800089e6:	3f fc       	mov	r12,-1
800089e8:	ae 68       	st.h	r7[0xc],r8
800089ea:	d8 22       	popm	r4-r7,pc
800089ec:	18 05       	add	r5,r12
800089ee:	58 04       	cp.w	r4,0
800089f0:	fe 99 ff ef 	brgt	800089ce <_fflush_r+0xde>
800089f4:	d8 2a       	popm	r4-r7,pc,r12=0
800089f6:	00 00       	add	r0,r0
800089f8:	80 00       	ld.sh	r0,r0[0x0]
800089fa:	8a cc       	ld.uh	r12,r5[0x8]
800089fc:	80 00       	ld.sh	r0,r0[0x0]
800089fe:	b1 08       	ld.d	r8,r8
80008a00:	80 00       	ld.sh	r0,r0[0x0]
80008a02:	b1 28       	st.d	r8++,r8
80008a04:	80 00       	ld.sh	r0,r0[0x0]
80008a06:	b1 48       	asr	r8,0x10

80008a08 <__sfp_lock_acquire>:
80008a08:	5e fc       	retal	r12

80008a0a <__sfp_lock_release>:
80008a0a:	5e fc       	retal	r12

80008a0c <_cleanup_r>:
80008a0c:	d4 01       	pushm	lr
80008a0e:	48 3b       	lddpc	r11,80008a18 <_cleanup_r+0xc>
80008a10:	f0 1f 00 03 	mcall	80008a1c <_cleanup_r+0x10>
80008a14:	d8 02       	popm	pc
80008a16:	00 00       	add	r0,r0
80008a18:	80 00       	ld.sh	r0,r0[0x0]
80008a1a:	9a c0       	ld.uh	r0,sp[0x8]
80008a1c:	80 00       	ld.sh	r0,r0[0x0]
80008a1e:	90 88       	ld.uh	r8,r8[0x0]

80008a20 <__sfmoreglue>:
80008a20:	d4 21       	pushm	r4-r7,lr
80008a22:	16 95       	mov	r5,r11
80008a24:	f6 06 10 5c 	mul	r6,r11,92
80008a28:	ec cb ff f4 	sub	r11,r6,-12
80008a2c:	f0 1f 00 07 	mcall	80008a48 <__sfmoreglue+0x28>
80008a30:	18 97       	mov	r7,r12
80008a32:	c0 90       	breq	80008a44 <__sfmoreglue+0x24>
80008a34:	99 15       	st.w	r12[0x4],r5
80008a36:	30 0b       	mov	r11,0
80008a38:	2f 4c       	sub	r12,-12
80008a3a:	0c 9a       	mov	r10,r6
80008a3c:	8f 2c       	st.w	r7[0x8],r12
80008a3e:	8f 0b       	st.w	r7[0x0],r11
80008a40:	f0 1f 00 03 	mcall	80008a4c <__sfmoreglue+0x2c>
80008a44:	0e 9c       	mov	r12,r7
80008a46:	d8 22       	popm	r4-r7,pc
80008a48:	80 00       	ld.sh	r0,r0[0x0]
80008a4a:	4a a0       	lddpc	r0,80008af0 <__sinit+0x24>
80008a4c:	80 00       	ld.sh	r0,r0[0x0]
80008a4e:	50 38       	stdsp	sp[0xc],r8

80008a50 <__sfp>:
80008a50:	d4 21       	pushm	r4-r7,lr
80008a52:	49 c8       	lddpc	r8,80008ac0 <__sfp+0x70>
80008a54:	18 96       	mov	r6,r12
80008a56:	70 07       	ld.w	r7,r8[0x0]
80008a58:	6e 68       	ld.w	r8,r7[0x18]
80008a5a:	58 08       	cp.w	r8,0
80008a5c:	c0 41       	brne	80008a64 <__sfp+0x14>
80008a5e:	0e 9c       	mov	r12,r7
80008a60:	f0 1f 00 19 	mcall	80008ac4 <__sfp+0x74>
80008a64:	ee c7 ff 28 	sub	r7,r7,-216
80008a68:	30 05       	mov	r5,0
80008a6a:	6e 2c       	ld.w	r12,r7[0x8]
80008a6c:	6e 18       	ld.w	r8,r7[0x4]
80008a6e:	c0 68       	rjmp	80008a7a <__sfp+0x2a>
80008a70:	98 69       	ld.sh	r9,r12[0xc]
80008a72:	ea 09 19 00 	cp.h	r9,r5
80008a76:	c1 20       	breq	80008a9a <__sfp+0x4a>
80008a78:	2a 4c       	sub	r12,-92
80008a7a:	20 18       	sub	r8,1
80008a7c:	cf a7       	brpl	80008a70 <__sfp+0x20>
80008a7e:	6e 08       	ld.w	r8,r7[0x0]
80008a80:	58 08       	cp.w	r8,0
80008a82:	c0 71       	brne	80008a90 <__sfp+0x40>
80008a84:	30 4b       	mov	r11,4
80008a86:	0c 9c       	mov	r12,r6
80008a88:	f0 1f 00 10 	mcall	80008ac8 <__sfp+0x78>
80008a8c:	8f 0c       	st.w	r7[0x0],r12
80008a8e:	c0 30       	breq	80008a94 <__sfp+0x44>
80008a90:	6e 07       	ld.w	r7,r7[0x0]
80008a92:	ce cb       	rjmp	80008a6a <__sfp+0x1a>
80008a94:	30 c8       	mov	r8,12
80008a96:	8d 38       	st.w	r6[0xc],r8
80008a98:	d8 22       	popm	r4-r7,pc
80008a9a:	30 08       	mov	r8,0
80008a9c:	f9 48 00 4c 	st.w	r12[76],r8
80008aa0:	99 08       	st.w	r12[0x0],r8
80008aa2:	99 28       	st.w	r12[0x8],r8
80008aa4:	99 18       	st.w	r12[0x4],r8
80008aa6:	99 48       	st.w	r12[0x10],r8
80008aa8:	99 58       	st.w	r12[0x14],r8
80008aaa:	99 68       	st.w	r12[0x18],r8
80008aac:	99 d8       	st.w	r12[0x34],r8
80008aae:	99 e8       	st.w	r12[0x38],r8
80008ab0:	f9 48 00 48 	st.w	r12[72],r8
80008ab4:	3f f8       	mov	r8,-1
80008ab6:	b8 78       	st.h	r12[0xe],r8
80008ab8:	30 18       	mov	r8,1
80008aba:	b8 68       	st.h	r12[0xc],r8
80008abc:	d8 22       	popm	r4-r7,pc
80008abe:	00 00       	add	r0,r0
80008ac0:	80 00       	ld.sh	r0,r0[0x0]
80008ac2:	ad 20       	st.d	r6++,r0
80008ac4:	80 00       	ld.sh	r0,r0[0x0]
80008ac6:	8a cc       	ld.uh	r12,r5[0x8]
80008ac8:	80 00       	ld.sh	r0,r0[0x0]
80008aca:	8a 20       	ld.sh	r0,r5[0x4]

80008acc <__sinit>:
80008acc:	d4 21       	pushm	r4-r7,lr
80008ace:	18 96       	mov	r6,r12
80008ad0:	78 67       	ld.w	r7,r12[0x18]
80008ad2:	58 07       	cp.w	r7,0
80008ad4:	c4 71       	brne	80008b62 <__sinit+0x96>
80008ad6:	4a 48       	lddpc	r8,80008b64 <__sinit+0x98>
80008ad8:	30 15       	mov	r5,1
80008ada:	99 a8       	st.w	r12[0x28],r8
80008adc:	f9 47 00 d8 	st.w	r12[216],r7
80008ae0:	f9 47 00 dc 	st.w	r12[220],r7
80008ae4:	f9 47 00 e0 	st.w	r12[224],r7
80008ae8:	99 65       	st.w	r12[0x18],r5
80008aea:	f0 1f 00 20 	mcall	80008b68 <__sinit+0x9c>
80008aee:	8d 0c       	st.w	r6[0x0],r12
80008af0:	0c 9c       	mov	r12,r6
80008af2:	f0 1f 00 1e 	mcall	80008b68 <__sinit+0x9c>
80008af6:	8d 1c       	st.w	r6[0x4],r12
80008af8:	0c 9c       	mov	r12,r6
80008afa:	f0 1f 00 1c 	mcall	80008b68 <__sinit+0x9c>
80008afe:	6c 09       	ld.w	r9,r6[0x0]
80008b00:	30 48       	mov	r8,4
80008b02:	93 07       	st.w	r9[0x0],r7
80008b04:	b2 68       	st.h	r9[0xc],r8
80008b06:	93 17       	st.w	r9[0x4],r7
80008b08:	93 27       	st.w	r9[0x8],r7
80008b0a:	6c 18       	ld.w	r8,r6[0x4]
80008b0c:	b2 77       	st.h	r9[0xe],r7
80008b0e:	93 47       	st.w	r9[0x10],r7
80008b10:	93 57       	st.w	r9[0x14],r7
80008b12:	93 67       	st.w	r9[0x18],r7
80008b14:	93 89       	st.w	r9[0x20],r9
80008b16:	91 07       	st.w	r8[0x0],r7
80008b18:	91 17       	st.w	r8[0x4],r7
80008b1a:	91 27       	st.w	r8[0x8],r7
80008b1c:	49 4e       	lddpc	lr,80008b6c <__sinit+0xa0>
80008b1e:	49 5b       	lddpc	r11,80008b70 <__sinit+0xa4>
80008b20:	93 9e       	st.w	r9[0x24],lr
80008b22:	93 ab       	st.w	r9[0x28],r11
80008b24:	49 4a       	lddpc	r10,80008b74 <__sinit+0xa8>
80008b26:	49 54       	lddpc	r4,80008b78 <__sinit+0xac>
80008b28:	93 ba       	st.w	r9[0x2c],r10
80008b2a:	93 c4       	st.w	r9[0x30],r4
80008b2c:	30 99       	mov	r9,9
80008b2e:	b0 69       	st.h	r8[0xc],r9
80008b30:	b0 75       	st.h	r8[0xe],r5
80008b32:	91 c4       	st.w	r8[0x30],r4
80008b34:	91 47       	st.w	r8[0x10],r7
80008b36:	91 57       	st.w	r8[0x14],r7
80008b38:	91 67       	st.w	r8[0x18],r7
80008b3a:	91 88       	st.w	r8[0x20],r8
80008b3c:	91 9e       	st.w	r8[0x24],lr
80008b3e:	91 ab       	st.w	r8[0x28],r11
80008b40:	91 ba       	st.w	r8[0x2c],r10
80008b42:	8d 2c       	st.w	r6[0x8],r12
80008b44:	31 28       	mov	r8,18
80008b46:	99 07       	st.w	r12[0x0],r7
80008b48:	b8 68       	st.h	r12[0xc],r8
80008b4a:	99 17       	st.w	r12[0x4],r7
80008b4c:	99 27       	st.w	r12[0x8],r7
80008b4e:	30 28       	mov	r8,2
80008b50:	b8 78       	st.h	r12[0xe],r8
80008b52:	99 c4       	st.w	r12[0x30],r4
80008b54:	99 67       	st.w	r12[0x18],r7
80008b56:	99 9e       	st.w	r12[0x24],lr
80008b58:	99 ab       	st.w	r12[0x28],r11
80008b5a:	99 ba       	st.w	r12[0x2c],r10
80008b5c:	99 47       	st.w	r12[0x10],r7
80008b5e:	99 57       	st.w	r12[0x14],r7
80008b60:	99 8c       	st.w	r12[0x20],r12
80008b62:	d8 22       	popm	r4-r7,pc
80008b64:	80 00       	ld.sh	r0,r0[0x0]
80008b66:	8a 0c       	ld.sh	r12,r5[0x0]
80008b68:	80 00       	ld.sh	r0,r0[0x0]
80008b6a:	8a 50       	ld.sh	r0,r5[0xa]
80008b6c:	80 00       	ld.sh	r0,r0[0x0]
80008b6e:	99 00       	st.w	r12[0x0],r0
80008b70:	80 00       	ld.sh	r0,r0[0x0]
80008b72:	98 c8       	ld.uh	r8,r12[0x8]
80008b74:	80 00       	ld.sh	r0,r0[0x0]
80008b76:	98 a0       	ld.uh	r0,r12[0x4]
80008b78:	80 00       	ld.sh	r0,r0[0x0]
80008b7a:	98 90       	ld.uh	r0,r12[0x2]

80008b7c <_malloc_trim_r>:
80008b7c:	d4 21       	pushm	r4-r7,lr
80008b7e:	16 95       	mov	r5,r11
80008b80:	18 97       	mov	r7,r12
80008b82:	f0 1f 00 23 	mcall	80008c0c <_malloc_trim_r+0x90>
80008b86:	4a 34       	lddpc	r4,80008c10 <_malloc_trim_r+0x94>
80008b88:	68 28       	ld.w	r8,r4[0x8]
80008b8a:	70 16       	ld.w	r6,r8[0x4]
80008b8c:	e0 16 ff fc 	andl	r6,0xfffc
80008b90:	ec c8 ff 91 	sub	r8,r6,-111
80008b94:	f0 05 01 05 	sub	r5,r8,r5
80008b98:	e0 15 ff 80 	andl	r5,0xff80
80008b9c:	ea c5 00 80 	sub	r5,r5,128
80008ba0:	e0 45 00 7f 	cp.w	r5,127
80008ba4:	e0 8a 00 23 	brle	80008bea <_malloc_trim_r+0x6e>
80008ba8:	30 0b       	mov	r11,0
80008baa:	0e 9c       	mov	r12,r7
80008bac:	f0 1f 00 1a 	mcall	80008c14 <_malloc_trim_r+0x98>
80008bb0:	68 28       	ld.w	r8,r4[0x8]
80008bb2:	0c 08       	add	r8,r6
80008bb4:	10 3c       	cp.w	r12,r8
80008bb6:	c1 a1       	brne	80008bea <_malloc_trim_r+0x6e>
80008bb8:	ea 0b 11 00 	rsub	r11,r5,0
80008bbc:	0e 9c       	mov	r12,r7
80008bbe:	f0 1f 00 16 	mcall	80008c14 <_malloc_trim_r+0x98>
80008bc2:	5b fc       	cp.w	r12,-1
80008bc4:	c1 71       	brne	80008bf2 <_malloc_trim_r+0x76>
80008bc6:	30 0b       	mov	r11,0
80008bc8:	0e 9c       	mov	r12,r7
80008bca:	f0 1f 00 13 	mcall	80008c14 <_malloc_trim_r+0x98>
80008bce:	68 28       	ld.w	r8,r4[0x8]
80008bd0:	f8 08 01 09 	sub	r9,r12,r8
80008bd4:	58 f9       	cp.w	r9,15
80008bd6:	e0 8a 00 0a 	brle	80008bea <_malloc_trim_r+0x6e>
80008bda:	a1 a9       	sbr	r9,0x0
80008bdc:	91 19       	st.w	r8[0x4],r9
80008bde:	48 f8       	lddpc	r8,80008c18 <_malloc_trim_r+0x9c>
80008be0:	70 09       	ld.w	r9,r8[0x0]
80008be2:	48 f8       	lddpc	r8,80008c1c <_malloc_trim_r+0xa0>
80008be4:	f8 09 01 09 	sub	r9,r12,r9
80008be8:	91 09       	st.w	r8[0x0],r9
80008bea:	0e 9c       	mov	r12,r7
80008bec:	f0 1f 00 0d 	mcall	80008c20 <_malloc_trim_r+0xa4>
80008bf0:	d8 2a       	popm	r4-r7,pc,r12=0
80008bf2:	68 28       	ld.w	r8,r4[0x8]
80008bf4:	0a 16       	sub	r6,r5
80008bf6:	a1 a6       	sbr	r6,0x0
80008bf8:	91 16       	st.w	r8[0x4],r6
80008bfa:	48 98       	lddpc	r8,80008c1c <_malloc_trim_r+0xa0>
80008bfc:	70 09       	ld.w	r9,r8[0x0]
80008bfe:	0a 19       	sub	r9,r5
80008c00:	0e 9c       	mov	r12,r7
80008c02:	91 09       	st.w	r8[0x0],r9
80008c04:	f0 1f 00 07 	mcall	80008c20 <_malloc_trim_r+0xa4>
80008c08:	da 2a       	popm	r4-r7,pc,r12=1
80008c0a:	00 00       	add	r0,r0
80008c0c:	80 00       	ld.sh	r0,r0[0x0]
80008c0e:	42 d8       	lddsp	r8,sp[0xb4]
80008c10:	00 00       	add	r0,r0
80008c12:	01 f0       	ld.ub	r0,r0[0x7]
80008c14:	80 00       	ld.sh	r0,r0[0x0]
80008c16:	53 60       	stdsp	sp[0xd8],r0
80008c18:	00 00       	add	r0,r0
80008c1a:	05 fc       	ld.ub	r12,r2[0x7]
80008c1c:	00 00       	add	r0,r0
80008c1e:	09 d4       	ld.ub	r4,r4[0x5]
80008c20:	80 00       	ld.sh	r0,r0[0x0]
80008c22:	42 e4       	lddsp	r4,sp[0xb8]

80008c24 <_free_r>:
80008c24:	d4 21       	pushm	r4-r7,lr
80008c26:	16 96       	mov	r6,r11
80008c28:	18 97       	mov	r7,r12
80008c2a:	58 0b       	cp.w	r11,0
80008c2c:	e0 80 00 c8 	breq	80008dbc <_free_r+0x198>
80008c30:	f0 1f 00 4c 	mcall	80008d60 <_free_r+0x13c>
80008c34:	20 86       	sub	r6,8
80008c36:	4c ca       	lddpc	r10,80008d64 <_free_r+0x140>
80008c38:	6c 18       	ld.w	r8,r6[0x4]
80008c3a:	74 2e       	ld.w	lr,r10[0x8]
80008c3c:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80008c40:	a1 c8       	cbr	r8,0x0
80008c42:	ec 08 00 09 	add	r9,r6,r8
80008c46:	72 1b       	ld.w	r11,r9[0x4]
80008c48:	e0 1b ff fc 	andl	r11,0xfffc
80008c4c:	1c 39       	cp.w	r9,lr
80008c4e:	c1 d1       	brne	80008c88 <_free_r+0x64>
80008c50:	f6 08 00 08 	add	r8,r11,r8
80008c54:	58 0c       	cp.w	r12,0
80008c56:	c0 81       	brne	80008c66 <_free_r+0x42>
80008c58:	6c 09       	ld.w	r9,r6[0x0]
80008c5a:	12 16       	sub	r6,r9
80008c5c:	12 08       	add	r8,r9
80008c5e:	6c 3b       	ld.w	r11,r6[0xc]
80008c60:	6c 29       	ld.w	r9,r6[0x8]
80008c62:	97 29       	st.w	r11[0x8],r9
80008c64:	93 3b       	st.w	r9[0xc],r11
80008c66:	10 99       	mov	r9,r8
80008c68:	95 26       	st.w	r10[0x8],r6
80008c6a:	a1 a9       	sbr	r9,0x0
80008c6c:	8d 19       	st.w	r6[0x4],r9
80008c6e:	4b f9       	lddpc	r9,80008d68 <_free_r+0x144>
80008c70:	72 09       	ld.w	r9,r9[0x0]
80008c72:	12 38       	cp.w	r8,r9
80008c74:	c0 63       	brcs	80008c80 <_free_r+0x5c>
80008c76:	4b e8       	lddpc	r8,80008d6c <_free_r+0x148>
80008c78:	0e 9c       	mov	r12,r7
80008c7a:	70 0b       	ld.w	r11,r8[0x0]
80008c7c:	f0 1f 00 3d 	mcall	80008d70 <_free_r+0x14c>
80008c80:	0e 9c       	mov	r12,r7
80008c82:	f0 1f 00 3d 	mcall	80008d74 <_free_r+0x150>
80008c86:	d8 22       	popm	r4-r7,pc
80008c88:	93 1b       	st.w	r9[0x4],r11
80008c8a:	58 0c       	cp.w	r12,0
80008c8c:	c0 30       	breq	80008c92 <_free_r+0x6e>
80008c8e:	30 0c       	mov	r12,0
80008c90:	c1 08       	rjmp	80008cb0 <_free_r+0x8c>
80008c92:	6c 0e       	ld.w	lr,r6[0x0]
80008c94:	f4 c5 ff f8 	sub	r5,r10,-8
80008c98:	1c 16       	sub	r6,lr
80008c9a:	1c 08       	add	r8,lr
80008c9c:	6c 2e       	ld.w	lr,r6[0x8]
80008c9e:	0a 3e       	cp.w	lr,r5
80008ca0:	f9 bc 00 01 	moveq	r12,1
80008ca4:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80008ca8:	eb fe 1a 02 	st.wne	r5[0x8],lr
80008cac:	fd f5 1a 03 	st.wne	lr[0xc],r5
80008cb0:	f2 0b 00 0e 	add	lr,r9,r11
80008cb4:	7c 1e       	ld.w	lr,lr[0x4]
80008cb6:	ed be 00 00 	bld	lr,0x0
80008cba:	c1 30       	breq	80008ce0 <_free_r+0xbc>
80008cbc:	16 08       	add	r8,r11
80008cbe:	58 0c       	cp.w	r12,0
80008cc0:	c0 c1       	brne	80008cd8 <_free_r+0xb4>
80008cc2:	4a 9e       	lddpc	lr,80008d64 <_free_r+0x140>
80008cc4:	72 2b       	ld.w	r11,r9[0x8]
80008cc6:	2f 8e       	sub	lr,-8
80008cc8:	1c 3b       	cp.w	r11,lr
80008cca:	c0 71       	brne	80008cd8 <_free_r+0xb4>
80008ccc:	97 36       	st.w	r11[0xc],r6
80008cce:	97 26       	st.w	r11[0x8],r6
80008cd0:	8d 2b       	st.w	r6[0x8],r11
80008cd2:	8d 3b       	st.w	r6[0xc],r11
80008cd4:	30 1c       	mov	r12,1
80008cd6:	c0 58       	rjmp	80008ce0 <_free_r+0xbc>
80008cd8:	72 2b       	ld.w	r11,r9[0x8]
80008cda:	72 39       	ld.w	r9,r9[0xc]
80008cdc:	93 2b       	st.w	r9[0x8],r11
80008cde:	97 39       	st.w	r11[0xc],r9
80008ce0:	10 99       	mov	r9,r8
80008ce2:	ec 08 09 08 	st.w	r6[r8],r8
80008ce6:	a1 a9       	sbr	r9,0x0
80008ce8:	8d 19       	st.w	r6[0x4],r9
80008cea:	58 0c       	cp.w	r12,0
80008cec:	c6 51       	brne	80008db6 <_free_r+0x192>
80008cee:	e0 48 01 ff 	cp.w	r8,511
80008cf2:	e0 8b 00 13 	brhi	80008d18 <_free_r+0xf4>
80008cf6:	a3 98       	lsr	r8,0x3
80008cf8:	f4 08 00 39 	add	r9,r10,r8<<0x3
80008cfc:	72 2b       	ld.w	r11,r9[0x8]
80008cfe:	8d 39       	st.w	r6[0xc],r9
80008d00:	8d 2b       	st.w	r6[0x8],r11
80008d02:	97 36       	st.w	r11[0xc],r6
80008d04:	93 26       	st.w	r9[0x8],r6
80008d06:	a3 48       	asr	r8,0x2
80008d08:	74 19       	ld.w	r9,r10[0x4]
80008d0a:	30 1b       	mov	r11,1
80008d0c:	f6 08 09 48 	lsl	r8,r11,r8
80008d10:	f3 e8 10 08 	or	r8,r9,r8
80008d14:	95 18       	st.w	r10[0x4],r8
80008d16:	c5 08       	rjmp	80008db6 <_free_r+0x192>
80008d18:	f0 0b 16 09 	lsr	r11,r8,0x9
80008d1c:	58 4b       	cp.w	r11,4
80008d1e:	e0 8b 00 06 	brhi	80008d2a <_free_r+0x106>
80008d22:	f0 0b 16 06 	lsr	r11,r8,0x6
80008d26:	2c 8b       	sub	r11,-56
80008d28:	c2 b8       	rjmp	80008d7e <_free_r+0x15a>
80008d2a:	59 4b       	cp.w	r11,20
80008d2c:	e0 8b 00 04 	brhi	80008d34 <_free_r+0x110>
80008d30:	2a 5b       	sub	r11,-91
80008d32:	c2 68       	rjmp	80008d7e <_free_r+0x15a>
80008d34:	e0 4b 00 54 	cp.w	r11,84
80008d38:	e0 8b 00 06 	brhi	80008d44 <_free_r+0x120>
80008d3c:	f0 0b 16 0c 	lsr	r11,r8,0xc
80008d40:	29 2b       	sub	r11,-110
80008d42:	c1 e8       	rjmp	80008d7e <_free_r+0x15a>
80008d44:	e0 4b 01 54 	cp.w	r11,340
80008d48:	e0 8b 00 06 	brhi	80008d54 <_free_r+0x130>
80008d4c:	f0 0b 16 0f 	lsr	r11,r8,0xf
80008d50:	28 9b       	sub	r11,-119
80008d52:	c1 68       	rjmp	80008d7e <_free_r+0x15a>
80008d54:	e0 4b 05 54 	cp.w	r11,1364
80008d58:	e0 88 00 10 	brls	80008d78 <_free_r+0x154>
80008d5c:	37 eb       	mov	r11,126
80008d5e:	c1 08       	rjmp	80008d7e <_free_r+0x15a>
80008d60:	80 00       	ld.sh	r0,r0[0x0]
80008d62:	42 d8       	lddsp	r8,sp[0xb4]
80008d64:	00 00       	add	r0,r0
80008d66:	01 f0       	ld.ub	r0,r0[0x7]
80008d68:	00 00       	add	r0,r0
80008d6a:	05 f8       	ld.ub	r8,r2[0x7]
80008d6c:	00 00       	add	r0,r0
80008d6e:	09 d0       	ld.ub	r0,r4[0x5]
80008d70:	80 00       	ld.sh	r0,r0[0x0]
80008d72:	8b 7c       	st.w	r5[0x1c],r12
80008d74:	80 00       	ld.sh	r0,r0[0x0]
80008d76:	42 e4       	lddsp	r4,sp[0xb8]
80008d78:	f0 0b 16 12 	lsr	r11,r8,0x12
80008d7c:	28 4b       	sub	r11,-124
80008d7e:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80008d82:	78 29       	ld.w	r9,r12[0x8]
80008d84:	18 39       	cp.w	r9,r12
80008d86:	c0 e1       	brne	80008da2 <_free_r+0x17e>
80008d88:	74 18       	ld.w	r8,r10[0x4]
80008d8a:	a3 4b       	asr	r11,0x2
80008d8c:	30 1c       	mov	r12,1
80008d8e:	f8 0b 09 4b 	lsl	r11,r12,r11
80008d92:	f1 eb 10 0b 	or	r11,r8,r11
80008d96:	12 98       	mov	r8,r9
80008d98:	95 1b       	st.w	r10[0x4],r11
80008d9a:	c0 a8       	rjmp	80008dae <_free_r+0x18a>
80008d9c:	72 29       	ld.w	r9,r9[0x8]
80008d9e:	18 39       	cp.w	r9,r12
80008da0:	c0 60       	breq	80008dac <_free_r+0x188>
80008da2:	72 1a       	ld.w	r10,r9[0x4]
80008da4:	e0 1a ff fc 	andl	r10,0xfffc
80008da8:	14 38       	cp.w	r8,r10
80008daa:	cf 93       	brcs	80008d9c <_free_r+0x178>
80008dac:	72 38       	ld.w	r8,r9[0xc]
80008dae:	8d 38       	st.w	r6[0xc],r8
80008db0:	8d 29       	st.w	r6[0x8],r9
80008db2:	93 36       	st.w	r9[0xc],r6
80008db4:	91 26       	st.w	r8[0x8],r6
80008db6:	0e 9c       	mov	r12,r7
80008db8:	f0 1f 00 02 	mcall	80008dc0 <_free_r+0x19c>
80008dbc:	d8 22       	popm	r4-r7,pc
80008dbe:	00 00       	add	r0,r0
80008dc0:	80 00       	ld.sh	r0,r0[0x0]
80008dc2:	42 e4       	lddsp	r4,sp[0xb8]

80008dc4 <__sfvwrite_r>:
80008dc4:	d4 31       	pushm	r0-r7,lr
80008dc6:	20 3d       	sub	sp,12
80008dc8:	14 94       	mov	r4,r10
80008dca:	18 95       	mov	r5,r12
80008dcc:	16 97       	mov	r7,r11
80008dce:	74 28       	ld.w	r8,r10[0x8]
80008dd0:	58 08       	cp.w	r8,0
80008dd2:	e0 80 01 47 	breq	80009060 <__sfvwrite_r+0x29c>
80008dd6:	96 68       	ld.sh	r8,r11[0xc]
80008dd8:	ed b8 00 03 	bld	r8,0x3
80008ddc:	c0 41       	brne	80008de4 <__sfvwrite_r+0x20>
80008dde:	76 48       	ld.w	r8,r11[0x10]
80008de0:	58 08       	cp.w	r8,0
80008de2:	c0 c1       	brne	80008dfa <__sfvwrite_r+0x36>
80008de4:	0e 9b       	mov	r11,r7
80008de6:	0a 9c       	mov	r12,r5
80008de8:	f0 1f 00 a0 	mcall	80009068 <__sfvwrite_r+0x2a4>
80008dec:	c0 70       	breq	80008dfa <__sfvwrite_r+0x36>
80008dee:	8e 68       	ld.sh	r8,r7[0xc]
80008df0:	a7 a8       	sbr	r8,0x6
80008df2:	ae 68       	st.h	r7[0xc],r8
80008df4:	30 98       	mov	r8,9
80008df6:	8b 38       	st.w	r5[0xc],r8
80008df8:	c3 29       	rjmp	8000905c <__sfvwrite_r+0x298>
80008dfa:	8e 63       	ld.sh	r3,r7[0xc]
80008dfc:	68 00       	ld.w	r0,r4[0x0]
80008dfe:	06 96       	mov	r6,r3
80008e00:	e2 16 00 02 	andl	r6,0x2,COH
80008e04:	c2 10       	breq	80008e46 <__sfvwrite_r+0x82>
80008e06:	30 03       	mov	r3,0
80008e08:	e0 62 04 00 	mov	r2,1024
80008e0c:	06 96       	mov	r6,r3
80008e0e:	c0 48       	rjmp	80008e16 <__sfvwrite_r+0x52>
80008e10:	60 03       	ld.w	r3,r0[0x0]
80008e12:	60 16       	ld.w	r6,r0[0x4]
80008e14:	2f 80       	sub	r0,-8
80008e16:	58 06       	cp.w	r6,0
80008e18:	cf c0       	breq	80008e10 <__sfvwrite_r+0x4c>
80008e1a:	e0 46 04 00 	cp.w	r6,1024
80008e1e:	ec 09 17 80 	movls	r9,r6
80008e22:	e4 09 17 b0 	movhi	r9,r2
80008e26:	06 9a       	mov	r10,r3
80008e28:	6e a8       	ld.w	r8,r7[0x28]
80008e2a:	6e 8b       	ld.w	r11,r7[0x20]
80008e2c:	0a 9c       	mov	r12,r5
80008e2e:	5d 18       	icall	r8
80008e30:	18 16       	sub	r6,r12
80008e32:	58 0c       	cp.w	r12,0
80008e34:	e0 8a 01 11 	brle	80009056 <__sfvwrite_r+0x292>
80008e38:	68 28       	ld.w	r8,r4[0x8]
80008e3a:	18 18       	sub	r8,r12
80008e3c:	89 28       	st.w	r4[0x8],r8
80008e3e:	e0 80 01 11 	breq	80009060 <__sfvwrite_r+0x29c>
80008e42:	18 03       	add	r3,r12
80008e44:	ce 9b       	rjmp	80008e16 <__sfvwrite_r+0x52>
80008e46:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
80008e4a:	c0 70       	breq	80008e58 <__sfvwrite_r+0x94>
80008e4c:	50 06       	stdsp	sp[0x0],r6
80008e4e:	0c 93       	mov	r3,r6
80008e50:	0c 91       	mov	r1,r6
80008e52:	50 15       	stdsp	sp[0x4],r5
80008e54:	08 92       	mov	r2,r4
80008e56:	ca 08       	rjmp	80008f96 <__sfvwrite_r+0x1d2>
80008e58:	06 96       	mov	r6,r3
80008e5a:	08 91       	mov	r1,r4
80008e5c:	c0 48       	rjmp	80008e64 <__sfvwrite_r+0xa0>
80008e5e:	60 03       	ld.w	r3,r0[0x0]
80008e60:	60 16       	ld.w	r6,r0[0x4]
80008e62:	2f 80       	sub	r0,-8
80008e64:	58 06       	cp.w	r6,0
80008e66:	cf c0       	breq	80008e5e <__sfvwrite_r+0x9a>
80008e68:	8e 68       	ld.sh	r8,r7[0xc]
80008e6a:	6e 24       	ld.w	r4,r7[0x8]
80008e6c:	10 99       	mov	r9,r8
80008e6e:	e2 19 02 00 	andl	r9,0x200,COH
80008e72:	c5 70       	breq	80008f20 <__sfvwrite_r+0x15c>
80008e74:	08 36       	cp.w	r6,r4
80008e76:	c4 53       	brcs	80008f00 <__sfvwrite_r+0x13c>
80008e78:	10 99       	mov	r9,r8
80008e7a:	e2 19 04 80 	andl	r9,0x480,COH
80008e7e:	c4 10       	breq	80008f00 <__sfvwrite_r+0x13c>
80008e80:	6e 4b       	ld.w	r11,r7[0x10]
80008e82:	6e 09       	ld.w	r9,r7[0x0]
80008e84:	16 19       	sub	r9,r11
80008e86:	50 09       	stdsp	sp[0x0],r9
80008e88:	6e 59       	ld.w	r9,r7[0x14]
80008e8a:	10 9c       	mov	r12,r8
80008e8c:	f2 09 00 1a 	add	r10,r9,r9<<0x1
80008e90:	30 28       	mov	r8,2
80008e92:	f4 08 0c 08 	divs	r8,r10,r8
80008e96:	fa e9 00 04 	st.d	sp[4],r8
80008e9a:	10 94       	mov	r4,r8
80008e9c:	40 09       	lddsp	r9,sp[0x0]
80008e9e:	e2 1c 04 00 	andl	r12,0x400,COH
80008ea2:	2f f9       	sub	r9,-1
80008ea4:	0c 09       	add	r9,r6
80008ea6:	12 38       	cp.w	r8,r9
80008ea8:	f2 04 17 30 	movlo	r4,r9
80008eac:	58 0c       	cp.w	r12,0
80008eae:	c1 10       	breq	80008ed0 <__sfvwrite_r+0x10c>
80008eb0:	08 9b       	mov	r11,r4
80008eb2:	0a 9c       	mov	r12,r5
80008eb4:	f0 1f 00 6e 	mcall	8000906c <__sfvwrite_r+0x2a8>
80008eb8:	18 92       	mov	r2,r12
80008eba:	c1 50       	breq	80008ee4 <__sfvwrite_r+0x120>
80008ebc:	40 0a       	lddsp	r10,sp[0x0]
80008ebe:	6e 4b       	ld.w	r11,r7[0x10]
80008ec0:	f0 1f 00 6c 	mcall	80009070 <__sfvwrite_r+0x2ac>
80008ec4:	8e 68       	ld.sh	r8,r7[0xc]
80008ec6:	e0 18 fb 7f 	andl	r8,0xfb7f
80008eca:	a7 b8       	sbr	r8,0x7
80008ecc:	ae 68       	st.h	r7[0xc],r8
80008ece:	c0 e8       	rjmp	80008eea <__sfvwrite_r+0x126>
80008ed0:	08 9a       	mov	r10,r4
80008ed2:	0a 9c       	mov	r12,r5
80008ed4:	f0 1f 00 68 	mcall	80009074 <__sfvwrite_r+0x2b0>
80008ed8:	18 92       	mov	r2,r12
80008eda:	c0 81       	brne	80008eea <__sfvwrite_r+0x126>
80008edc:	6e 4b       	ld.w	r11,r7[0x10]
80008ede:	0a 9c       	mov	r12,r5
80008ee0:	f0 1f 00 66 	mcall	80009078 <__sfvwrite_r+0x2b4>
80008ee4:	30 c8       	mov	r8,12
80008ee6:	8b 38       	st.w	r5[0xc],r8
80008ee8:	cb 78       	rjmp	80009056 <__sfvwrite_r+0x292>
80008eea:	40 0a       	lddsp	r10,sp[0x0]
80008eec:	40 09       	lddsp	r9,sp[0x0]
80008eee:	e8 0a 01 0a 	sub	r10,r4,r10
80008ef2:	e4 09 00 08 	add	r8,r2,r9
80008ef6:	8f 54       	st.w	r7[0x14],r4
80008ef8:	8f 2a       	st.w	r7[0x8],r10
80008efa:	8f 08       	st.w	r7[0x0],r8
80008efc:	8f 42       	st.w	r7[0x10],r2
80008efe:	0c 94       	mov	r4,r6
80008f00:	08 36       	cp.w	r6,r4
80008f02:	ec 04 17 30 	movlo	r4,r6
80008f06:	06 9b       	mov	r11,r3
80008f08:	08 9a       	mov	r10,r4
80008f0a:	6e 0c       	ld.w	r12,r7[0x0]
80008f0c:	f0 1f 00 5c 	mcall	8000907c <__sfvwrite_r+0x2b8>
80008f10:	6e 08       	ld.w	r8,r7[0x0]
80008f12:	08 08       	add	r8,r4
80008f14:	8f 08       	st.w	r7[0x0],r8
80008f16:	6e 28       	ld.w	r8,r7[0x8]
80008f18:	08 18       	sub	r8,r4
80008f1a:	0c 94       	mov	r4,r6
80008f1c:	8f 28       	st.w	r7[0x8],r8
80008f1e:	c3 08       	rjmp	80008f7e <__sfvwrite_r+0x1ba>
80008f20:	08 36       	cp.w	r6,r4
80008f22:	5f ba       	srhi	r10
80008f24:	6e 0c       	ld.w	r12,r7[0x0]
80008f26:	6e 48       	ld.w	r8,r7[0x10]
80008f28:	10 3c       	cp.w	r12,r8
80008f2a:	5f b8       	srhi	r8
80008f2c:	f5 e8 00 08 	and	r8,r10,r8
80008f30:	f2 08 18 00 	cp.b	r8,r9
80008f34:	c0 e0       	breq	80008f50 <__sfvwrite_r+0x18c>
80008f36:	06 9b       	mov	r11,r3
80008f38:	08 9a       	mov	r10,r4
80008f3a:	f0 1f 00 51 	mcall	8000907c <__sfvwrite_r+0x2b8>
80008f3e:	6e 08       	ld.w	r8,r7[0x0]
80008f40:	08 08       	add	r8,r4
80008f42:	0e 9b       	mov	r11,r7
80008f44:	8f 08       	st.w	r7[0x0],r8
80008f46:	0a 9c       	mov	r12,r5
80008f48:	f0 1f 00 4e 	mcall	80009080 <__sfvwrite_r+0x2bc>
80008f4c:	c1 90       	breq	80008f7e <__sfvwrite_r+0x1ba>
80008f4e:	c8 48       	rjmp	80009056 <__sfvwrite_r+0x292>
80008f50:	6e 59       	ld.w	r9,r7[0x14]
80008f52:	12 36       	cp.w	r6,r9
80008f54:	c0 a3       	brcs	80008f68 <__sfvwrite_r+0x1a4>
80008f56:	6e a8       	ld.w	r8,r7[0x28]
80008f58:	06 9a       	mov	r10,r3
80008f5a:	6e 8b       	ld.w	r11,r7[0x20]
80008f5c:	0a 9c       	mov	r12,r5
80008f5e:	5d 18       	icall	r8
80008f60:	18 94       	mov	r4,r12
80008f62:	e0 89 00 0e 	brgt	80008f7e <__sfvwrite_r+0x1ba>
80008f66:	c7 88       	rjmp	80009056 <__sfvwrite_r+0x292>
80008f68:	0c 9a       	mov	r10,r6
80008f6a:	06 9b       	mov	r11,r3
80008f6c:	f0 1f 00 44 	mcall	8000907c <__sfvwrite_r+0x2b8>
80008f70:	6e 08       	ld.w	r8,r7[0x0]
80008f72:	0c 08       	add	r8,r6
80008f74:	0c 94       	mov	r4,r6
80008f76:	8f 08       	st.w	r7[0x0],r8
80008f78:	6e 28       	ld.w	r8,r7[0x8]
80008f7a:	0c 18       	sub	r8,r6
80008f7c:	8f 28       	st.w	r7[0x8],r8
80008f7e:	62 28       	ld.w	r8,r1[0x8]
80008f80:	08 18       	sub	r8,r4
80008f82:	83 28       	st.w	r1[0x8],r8
80008f84:	c6 e0       	breq	80009060 <__sfvwrite_r+0x29c>
80008f86:	08 16       	sub	r6,r4
80008f88:	08 03       	add	r3,r4
80008f8a:	c6 db       	rjmp	80008e64 <__sfvwrite_r+0xa0>
80008f8c:	60 03       	ld.w	r3,r0[0x0]
80008f8e:	60 11       	ld.w	r1,r0[0x4]
80008f90:	30 08       	mov	r8,0
80008f92:	2f 80       	sub	r0,-8
80008f94:	50 08       	stdsp	sp[0x0],r8
80008f96:	58 01       	cp.w	r1,0
80008f98:	cf a0       	breq	80008f8c <__sfvwrite_r+0x1c8>
80008f9a:	40 0a       	lddsp	r10,sp[0x0]
80008f9c:	58 0a       	cp.w	r10,0
80008f9e:	c1 51       	brne	80008fc8 <__sfvwrite_r+0x204>
80008fa0:	e2 c6 ff ff 	sub	r6,r1,-1
80008fa4:	02 9a       	mov	r10,r1
80008fa6:	30 ab       	mov	r11,10
80008fa8:	06 9c       	mov	r12,r3
80008faa:	f0 1f 00 37 	mcall	80009084 <__sfvwrite_r+0x2c0>
80008fae:	f8 c8 ff ff 	sub	r8,r12,-1
80008fb2:	58 0c       	cp.w	r12,0
80008fb4:	f1 d3 e1 16 	subne	r6,r8,r3
80008fb8:	f9 b9 01 01 	movne	r9,1
80008fbc:	fb f9 1a 00 	st.wne	sp[0x0],r9
80008fc0:	f9 b8 00 01 	moveq	r8,1
80008fc4:	fb f8 0a 00 	st.weq	sp[0x0],r8
80008fc8:	02 36       	cp.w	r6,r1
80008fca:	ec 04 17 80 	movls	r4,r6
80008fce:	e2 04 17 b0 	movhi	r4,r1
80008fd2:	6e 59       	ld.w	r9,r7[0x14]
80008fd4:	6e 25       	ld.w	r5,r7[0x8]
80008fd6:	f2 05 00 05 	add	r5,r9,r5
80008fda:	0a 34       	cp.w	r4,r5
80008fdc:	5f 9a       	srgt	r10
80008fde:	6e 0c       	ld.w	r12,r7[0x0]
80008fe0:	6e 48       	ld.w	r8,r7[0x10]
80008fe2:	10 3c       	cp.w	r12,r8
80008fe4:	5f b8       	srhi	r8
80008fe6:	f5 e8 00 08 	and	r8,r10,r8
80008fea:	30 0a       	mov	r10,0
80008fec:	f4 08 18 00 	cp.b	r8,r10
80008ff0:	c0 e0       	breq	8000900c <__sfvwrite_r+0x248>
80008ff2:	06 9b       	mov	r11,r3
80008ff4:	0a 9a       	mov	r10,r5
80008ff6:	f0 1f 00 22 	mcall	8000907c <__sfvwrite_r+0x2b8>
80008ffa:	6e 08       	ld.w	r8,r7[0x0]
80008ffc:	0a 08       	add	r8,r5
80008ffe:	0e 9b       	mov	r11,r7
80009000:	8f 08       	st.w	r7[0x0],r8
80009002:	40 1c       	lddsp	r12,sp[0x4]
80009004:	f0 1f 00 1f 	mcall	80009080 <__sfvwrite_r+0x2bc>
80009008:	c1 80       	breq	80009038 <__sfvwrite_r+0x274>
8000900a:	c2 68       	rjmp	80009056 <__sfvwrite_r+0x292>
8000900c:	12 34       	cp.w	r4,r9
8000900e:	c0 a5       	brlt	80009022 <__sfvwrite_r+0x25e>
80009010:	6e a8       	ld.w	r8,r7[0x28]
80009012:	06 9a       	mov	r10,r3
80009014:	6e 8b       	ld.w	r11,r7[0x20]
80009016:	40 1c       	lddsp	r12,sp[0x4]
80009018:	5d 18       	icall	r8
8000901a:	18 95       	mov	r5,r12
8000901c:	e0 89 00 0e 	brgt	80009038 <__sfvwrite_r+0x274>
80009020:	c1 b8       	rjmp	80009056 <__sfvwrite_r+0x292>
80009022:	08 9a       	mov	r10,r4
80009024:	06 9b       	mov	r11,r3
80009026:	f0 1f 00 16 	mcall	8000907c <__sfvwrite_r+0x2b8>
8000902a:	6e 08       	ld.w	r8,r7[0x0]
8000902c:	08 08       	add	r8,r4
8000902e:	08 95       	mov	r5,r4
80009030:	8f 08       	st.w	r7[0x0],r8
80009032:	6e 28       	ld.w	r8,r7[0x8]
80009034:	08 18       	sub	r8,r4
80009036:	8f 28       	st.w	r7[0x8],r8
80009038:	0a 16       	sub	r6,r5
8000903a:	c0 71       	brne	80009048 <__sfvwrite_r+0x284>
8000903c:	0e 9b       	mov	r11,r7
8000903e:	40 1c       	lddsp	r12,sp[0x4]
80009040:	f0 1f 00 10 	mcall	80009080 <__sfvwrite_r+0x2bc>
80009044:	c0 91       	brne	80009056 <__sfvwrite_r+0x292>
80009046:	50 06       	stdsp	sp[0x0],r6
80009048:	64 28       	ld.w	r8,r2[0x8]
8000904a:	0a 18       	sub	r8,r5
8000904c:	85 28       	st.w	r2[0x8],r8
8000904e:	c0 90       	breq	80009060 <__sfvwrite_r+0x29c>
80009050:	0a 11       	sub	r1,r5
80009052:	0a 03       	add	r3,r5
80009054:	ca 1b       	rjmp	80008f96 <__sfvwrite_r+0x1d2>
80009056:	8e 68       	ld.sh	r8,r7[0xc]
80009058:	a7 a8       	sbr	r8,0x6
8000905a:	ae 68       	st.h	r7[0xc],r8
8000905c:	3f fc       	mov	r12,-1
8000905e:	c0 28       	rjmp	80009062 <__sfvwrite_r+0x29e>
80009060:	30 0c       	mov	r12,0
80009062:	2f dd       	sub	sp,-12
80009064:	d8 32       	popm	r0-r7,pc
80009066:	00 00       	add	r0,r0
80009068:	80 00       	ld.sh	r0,r0[0x0]
8000906a:	78 c8       	ld.w	r8,r12[0x30]
8000906c:	80 00       	ld.sh	r0,r0[0x0]
8000906e:	4a a0       	lddpc	r0,80009114 <__smakebuf_r+0x30>
80009070:	80 00       	ld.sh	r0,r0[0x0]
80009072:	4e f0       	lddpc	r0,8000922c <__hi0bits+0x28>
80009074:	80 00       	ld.sh	r0,r0[0x0]
80009076:	50 80       	stdsp	sp[0x20],r0
80009078:	80 00       	ld.sh	r0,r0[0x0]
8000907a:	8c 24       	ld.sh	r4,r6[0x4]
8000907c:	80 00       	ld.sh	r0,r0[0x0]
8000907e:	91 c6       	st.w	r8[0x30],r6
80009080:	80 00       	ld.sh	r0,r0[0x0]
80009082:	88 f0       	ld.uh	r0,r4[0xe]
80009084:	80 00       	ld.sh	r0,r0[0x0]
80009086:	91 b0       	st.w	r8[0x2c],r0

80009088 <_fwalk>:
80009088:	d4 31       	pushm	r0-r7,lr
8000908a:	30 05       	mov	r5,0
8000908c:	16 91       	mov	r1,r11
8000908e:	f8 c7 ff 28 	sub	r7,r12,-216
80009092:	0a 92       	mov	r2,r5
80009094:	f0 1f 00 10 	mcall	800090d4 <_fwalk+0x4c>
80009098:	3f f3       	mov	r3,-1
8000909a:	c1 68       	rjmp	800090c6 <_fwalk+0x3e>
8000909c:	6e 26       	ld.w	r6,r7[0x8]
8000909e:	6e 14       	ld.w	r4,r7[0x4]
800090a0:	2f 46       	sub	r6,-12
800090a2:	c0 c8       	rjmp	800090ba <_fwalk+0x32>
800090a4:	8c 08       	ld.sh	r8,r6[0x0]
800090a6:	e4 08 19 00 	cp.h	r8,r2
800090aa:	c0 70       	breq	800090b8 <_fwalk+0x30>
800090ac:	8c 18       	ld.sh	r8,r6[0x2]
800090ae:	e6 08 19 00 	cp.h	r8,r3
800090b2:	c0 30       	breq	800090b8 <_fwalk+0x30>
800090b4:	5d 11       	icall	r1
800090b6:	18 45       	or	r5,r12
800090b8:	2a 46       	sub	r6,-92
800090ba:	20 14       	sub	r4,1
800090bc:	ec cc 00 0c 	sub	r12,r6,12
800090c0:	58 04       	cp.w	r4,0
800090c2:	cf 14       	brge	800090a4 <_fwalk+0x1c>
800090c4:	6e 07       	ld.w	r7,r7[0x0]
800090c6:	58 07       	cp.w	r7,0
800090c8:	ce a1       	brne	8000909c <_fwalk+0x14>
800090ca:	f0 1f 00 04 	mcall	800090d8 <_fwalk+0x50>
800090ce:	0a 9c       	mov	r12,r5
800090d0:	d8 32       	popm	r0-r7,pc
800090d2:	00 00       	add	r0,r0
800090d4:	80 00       	ld.sh	r0,r0[0x0]
800090d6:	8a 08       	ld.sh	r8,r5[0x0]
800090d8:	80 00       	ld.sh	r0,r0[0x0]
800090da:	8a 0a       	ld.sh	r10,r5[0x0]

800090dc <_localeconv_r>:
800090dc:	48 1c       	lddpc	r12,800090e0 <_localeconv_r+0x4>
800090de:	5e fc       	retal	r12
800090e0:	80 00       	ld.sh	r0,r0[0x0]
800090e2:	b1 68       	lsl	r8,0x10

800090e4 <__smakebuf_r>:
800090e4:	d4 21       	pushm	r4-r7,lr
800090e6:	20 fd       	sub	sp,60
800090e8:	96 68       	ld.sh	r8,r11[0xc]
800090ea:	16 97       	mov	r7,r11
800090ec:	18 96       	mov	r6,r12
800090ee:	e2 18 00 02 	andl	r8,0x2,COH
800090f2:	c3 c1       	brne	8000916a <__smakebuf_r+0x86>
800090f4:	96 7b       	ld.sh	r11,r11[0xe]
800090f6:	f0 0b 19 00 	cp.h	r11,r8
800090fa:	c0 55       	brlt	80009104 <__smakebuf_r+0x20>
800090fc:	1a 9a       	mov	r10,sp
800090fe:	f0 1f 00 28 	mcall	8000919c <__smakebuf_r+0xb8>
80009102:	c0 f4       	brge	80009120 <__smakebuf_r+0x3c>
80009104:	8e 65       	ld.sh	r5,r7[0xc]
80009106:	0a 98       	mov	r8,r5
80009108:	ab b8       	sbr	r8,0xb
8000910a:	e2 15 00 80 	andl	r5,0x80,COH
8000910e:	ae 68       	st.h	r7[0xc],r8
80009110:	30 04       	mov	r4,0
80009112:	e0 68 04 00 	mov	r8,1024
80009116:	f9 b5 01 40 	movne	r5,64
8000911a:	f0 05 17 00 	moveq	r5,r8
8000911e:	c1 b8       	rjmp	80009154 <__smakebuf_r+0x70>
80009120:	40 18       	lddsp	r8,sp[0x4]
80009122:	e2 18 f0 00 	andl	r8,0xf000,COH
80009126:	e0 48 20 00 	cp.w	r8,8192
8000912a:	5f 04       	sreq	r4
8000912c:	e0 48 80 00 	cp.w	r8,32768
80009130:	c0 d1       	brne	8000914a <__smakebuf_r+0x66>
80009132:	6e b9       	ld.w	r9,r7[0x2c]
80009134:	49 b8       	lddpc	r8,800091a0 <__smakebuf_r+0xbc>
80009136:	10 39       	cp.w	r9,r8
80009138:	c0 91       	brne	8000914a <__smakebuf_r+0x66>
8000913a:	8e 68       	ld.sh	r8,r7[0xc]
8000913c:	e0 65 04 00 	mov	r5,1024
80009140:	ab a8       	sbr	r8,0xa
80009142:	ef 45 00 50 	st.w	r7[80],r5
80009146:	ae 68       	st.h	r7[0xc],r8
80009148:	c0 68       	rjmp	80009154 <__smakebuf_r+0x70>
8000914a:	8e 68       	ld.sh	r8,r7[0xc]
8000914c:	e0 65 04 00 	mov	r5,1024
80009150:	ab b8       	sbr	r8,0xb
80009152:	ae 68       	st.h	r7[0xc],r8
80009154:	0a 9b       	mov	r11,r5
80009156:	0c 9c       	mov	r12,r6
80009158:	f0 1f 00 13 	mcall	800091a4 <__smakebuf_r+0xc0>
8000915c:	8e 68       	ld.sh	r8,r7[0xc]
8000915e:	c0 d1       	brne	80009178 <__smakebuf_r+0x94>
80009160:	ed b8 00 09 	bld	r8,0x9
80009164:	c1 a0       	breq	80009198 <__smakebuf_r+0xb4>
80009166:	a1 b8       	sbr	r8,0x1
80009168:	ae 68       	st.h	r7[0xc],r8
8000916a:	ee c8 ff b9 	sub	r8,r7,-71
8000916e:	8f 48       	st.w	r7[0x10],r8
80009170:	8f 08       	st.w	r7[0x0],r8
80009172:	30 18       	mov	r8,1
80009174:	8f 58       	st.w	r7[0x14],r8
80009176:	c1 18       	rjmp	80009198 <__smakebuf_r+0xb4>
80009178:	a7 b8       	sbr	r8,0x7
8000917a:	8f 4c       	st.w	r7[0x10],r12
8000917c:	ae 68       	st.h	r7[0xc],r8
8000917e:	8f 55       	st.w	r7[0x14],r5
80009180:	48 a8       	lddpc	r8,800091a8 <__smakebuf_r+0xc4>
80009182:	8f 0c       	st.w	r7[0x0],r12
80009184:	8d a8       	st.w	r6[0x28],r8
80009186:	58 04       	cp.w	r4,0
80009188:	c0 80       	breq	80009198 <__smakebuf_r+0xb4>
8000918a:	8e 7c       	ld.sh	r12,r7[0xe]
8000918c:	f0 1f 00 08 	mcall	800091ac <__smakebuf_r+0xc8>
80009190:	c0 40       	breq	80009198 <__smakebuf_r+0xb4>
80009192:	8e 68       	ld.sh	r8,r7[0xc]
80009194:	a1 a8       	sbr	r8,0x0
80009196:	ae 68       	st.h	r7[0xc],r8
80009198:	2f 1d       	sub	sp,-60
8000919a:	d8 22       	popm	r4-r7,pc
8000919c:	80 00       	ld.sh	r0,r0[0x0]
8000919e:	9a d8       	ld.uh	r8,sp[0xa]
800091a0:	80 00       	ld.sh	r0,r0[0x0]
800091a2:	98 a0       	ld.uh	r0,r12[0x4]
800091a4:	80 00       	ld.sh	r0,r0[0x0]
800091a6:	4a a0       	lddpc	r0,8000924c <__hi0bits+0x48>
800091a8:	80 00       	ld.sh	r0,r0[0x0]
800091aa:	8a 0c       	ld.sh	r12,r5[0x0]
800091ac:	80 00       	ld.sh	r0,r0[0x0]
800091ae:	55 28       	stdsp	sp[0x148],r8

800091b0 <memchr>:
800091b0:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
800091b4:	c0 68       	rjmp	800091c0 <memchr+0x10>
800091b6:	20 1a       	sub	r10,1
800091b8:	19 88       	ld.ub	r8,r12[0x0]
800091ba:	16 38       	cp.w	r8,r11
800091bc:	5e 0c       	reteq	r12
800091be:	2f fc       	sub	r12,-1
800091c0:	58 0a       	cp.w	r10,0
800091c2:	cf a1       	brne	800091b6 <memchr+0x6>
800091c4:	5e fa       	retal	r10

800091c6 <memmove>:
800091c6:	d4 01       	pushm	lr
800091c8:	18 3b       	cp.w	r11,r12
800091ca:	c1 92       	brcc	800091fc <memmove+0x36>
800091cc:	f6 0a 00 09 	add	r9,r11,r10
800091d0:	12 3c       	cp.w	r12,r9
800091d2:	c1 52       	brcc	800091fc <memmove+0x36>
800091d4:	f8 0a 00 0b 	add	r11,r12,r10
800091d8:	30 08       	mov	r8,0
800091da:	c0 68       	rjmp	800091e6 <memmove+0x20>
800091dc:	f2 08 07 0e 	ld.ub	lr,r9[r8]
800091e0:	20 1a       	sub	r10,1
800091e2:	f6 08 0b 0e 	st.b	r11[r8],lr
800091e6:	20 18       	sub	r8,1
800091e8:	58 0a       	cp.w	r10,0
800091ea:	cf 91       	brne	800091dc <memmove+0x16>
800091ec:	d8 02       	popm	pc
800091ee:	f6 08 07 09 	ld.ub	r9,r11[r8]
800091f2:	20 1a       	sub	r10,1
800091f4:	f8 08 0b 09 	st.b	r12[r8],r9
800091f8:	2f f8       	sub	r8,-1
800091fa:	c0 28       	rjmp	800091fe <memmove+0x38>
800091fc:	30 08       	mov	r8,0
800091fe:	58 0a       	cp.w	r10,0
80009200:	cf 71       	brne	800091ee <memmove+0x28>
80009202:	d8 02       	popm	pc

80009204 <__hi0bits>:
80009204:	18 98       	mov	r8,r12
80009206:	e0 1c 00 00 	andl	r12,0x0
8000920a:	f0 09 15 10 	lsl	r9,r8,0x10
8000920e:	58 0c       	cp.w	r12,0
80009210:	f2 08 17 00 	moveq	r8,r9
80009214:	f9 bc 00 10 	moveq	r12,16
80009218:	f9 bc 01 00 	movne	r12,0
8000921c:	10 9a       	mov	r10,r8
8000921e:	f0 09 15 08 	lsl	r9,r8,0x8
80009222:	e6 1a ff 00 	andh	r10,0xff00,COH
80009226:	f7 bc 00 f8 	subeq	r12,-8
8000922a:	f2 08 17 00 	moveq	r8,r9
8000922e:	10 9a       	mov	r10,r8
80009230:	f0 09 15 04 	lsl	r9,r8,0x4
80009234:	e6 1a f0 00 	andh	r10,0xf000,COH
80009238:	f7 bc 00 fc 	subeq	r12,-4
8000923c:	f2 08 17 00 	moveq	r8,r9
80009240:	10 9a       	mov	r10,r8
80009242:	f0 09 15 02 	lsl	r9,r8,0x2
80009246:	e6 1a c0 00 	andh	r10,0xc000,COH
8000924a:	f7 bc 00 fe 	subeq	r12,-2
8000924e:	f2 08 17 00 	moveq	r8,r9
80009252:	58 08       	cp.w	r8,0
80009254:	5e 5c       	retlt	r12
80009256:	ed b8 00 1e 	bld	r8,0x1e
8000925a:	f9 bc 01 20 	movne	r12,32
8000925e:	f7 bc 00 ff 	subeq	r12,-1
80009262:	5e fc       	retal	r12

80009264 <__lo0bits>:
80009264:	18 99       	mov	r9,r12
80009266:	78 08       	ld.w	r8,r12[0x0]
80009268:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
8000926c:	c1 50       	breq	80009296 <__lo0bits+0x32>
8000926e:	ed b8 00 00 	bld	r8,0x0
80009272:	c0 21       	brne	80009276 <__lo0bits+0x12>
80009274:	5e fd       	retal	0
80009276:	10 9b       	mov	r11,r8
80009278:	f0 0a 16 01 	lsr	r10,r8,0x1
8000927c:	e2 1b 00 02 	andl	r11,0x2,COH
80009280:	a3 88       	lsr	r8,0x2
80009282:	58 0b       	cp.w	r11,0
80009284:	f3 fa 1a 00 	st.wne	r9[0x0],r10
80009288:	f9 bc 01 01 	movne	r12,1
8000928c:	f3 f8 0a 00 	st.weq	r9[0x0],r8
80009290:	f9 bc 00 02 	moveq	r12,2
80009294:	5e fc       	retal	r12
80009296:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000929a:	f0 0b 16 10 	lsr	r11,r8,0x10
8000929e:	58 0a       	cp.w	r10,0
800092a0:	f6 08 17 00 	moveq	r8,r11
800092a4:	f9 bc 00 10 	moveq	r12,16
800092a8:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
800092ac:	f0 0a 16 08 	lsr	r10,r8,0x8
800092b0:	58 0b       	cp.w	r11,0
800092b2:	f7 bc 00 f8 	subeq	r12,-8
800092b6:	f4 08 17 00 	moveq	r8,r10
800092ba:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
800092be:	f0 0a 16 04 	lsr	r10,r8,0x4
800092c2:	58 0b       	cp.w	r11,0
800092c4:	f7 bc 00 fc 	subeq	r12,-4
800092c8:	f4 08 17 00 	moveq	r8,r10
800092cc:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
800092d0:	f0 0a 16 02 	lsr	r10,r8,0x2
800092d4:	58 0b       	cp.w	r11,0
800092d6:	f7 bc 00 fe 	subeq	r12,-2
800092da:	f4 08 17 00 	moveq	r8,r10
800092de:	ed b8 00 00 	bld	r8,0x0
800092e2:	c0 60       	breq	800092ee <__lo0bits+0x8a>
800092e4:	a1 98       	lsr	r8,0x1
800092e6:	c0 31       	brne	800092ec <__lo0bits+0x88>
800092e8:	32 0c       	mov	r12,32
800092ea:	5e fc       	retal	r12
800092ec:	2f fc       	sub	r12,-1
800092ee:	93 08       	st.w	r9[0x0],r8
800092f0:	5e fc       	retal	r12

800092f2 <__mcmp>:
800092f2:	d4 01       	pushm	lr
800092f4:	18 98       	mov	r8,r12
800092f6:	76 49       	ld.w	r9,r11[0x10]
800092f8:	78 4c       	ld.w	r12,r12[0x10]
800092fa:	12 1c       	sub	r12,r9
800092fc:	c1 31       	brne	80009322 <__mcmp+0x30>
800092fe:	2f b9       	sub	r9,-5
80009300:	a3 69       	lsl	r9,0x2
80009302:	12 0b       	add	r11,r9
80009304:	f0 09 00 09 	add	r9,r8,r9
80009308:	2e c8       	sub	r8,-20
8000930a:	13 4e       	ld.w	lr,--r9
8000930c:	17 4a       	ld.w	r10,--r11
8000930e:	14 3e       	cp.w	lr,r10
80009310:	c0 60       	breq	8000931c <__mcmp+0x2a>
80009312:	f9 bc 03 ff 	movlo	r12,-1
80009316:	f9 bc 02 01 	movhs	r12,1
8000931a:	d8 02       	popm	pc
8000931c:	10 39       	cp.w	r9,r8
8000931e:	fe 9b ff f6 	brhi	8000930a <__mcmp+0x18>
80009322:	d8 02       	popm	pc

80009324 <_Bfree>:
80009324:	d4 21       	pushm	r4-r7,lr
80009326:	18 97       	mov	r7,r12
80009328:	16 95       	mov	r5,r11
8000932a:	78 96       	ld.w	r6,r12[0x24]
8000932c:	58 06       	cp.w	r6,0
8000932e:	c0 91       	brne	80009340 <_Bfree+0x1c>
80009330:	31 0c       	mov	r12,16
80009332:	f0 1f 00 0a 	mcall	80009358 <_Bfree+0x34>
80009336:	99 36       	st.w	r12[0xc],r6
80009338:	8f 9c       	st.w	r7[0x24],r12
8000933a:	99 16       	st.w	r12[0x4],r6
8000933c:	99 26       	st.w	r12[0x8],r6
8000933e:	99 06       	st.w	r12[0x0],r6
80009340:	58 05       	cp.w	r5,0
80009342:	c0 90       	breq	80009354 <_Bfree+0x30>
80009344:	6a 19       	ld.w	r9,r5[0x4]
80009346:	6e 98       	ld.w	r8,r7[0x24]
80009348:	70 38       	ld.w	r8,r8[0xc]
8000934a:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
8000934e:	8b 0a       	st.w	r5[0x0],r10
80009350:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
80009354:	d8 22       	popm	r4-r7,pc
80009356:	00 00       	add	r0,r0
80009358:	80 00       	ld.sh	r0,r0[0x0]
8000935a:	4a 88       	lddpc	r8,800093f8 <__d2b+0x24>

8000935c <_Balloc>:
8000935c:	d4 21       	pushm	r4-r7,lr
8000935e:	18 97       	mov	r7,r12
80009360:	16 96       	mov	r6,r11
80009362:	78 95       	ld.w	r5,r12[0x24]
80009364:	58 05       	cp.w	r5,0
80009366:	c0 91       	brne	80009378 <_Balloc+0x1c>
80009368:	31 0c       	mov	r12,16
8000936a:	f0 1f 00 19 	mcall	800093cc <_Balloc+0x70>
8000936e:	99 35       	st.w	r12[0xc],r5
80009370:	8f 9c       	st.w	r7[0x24],r12
80009372:	99 15       	st.w	r12[0x4],r5
80009374:	99 25       	st.w	r12[0x8],r5
80009376:	99 05       	st.w	r12[0x0],r5
80009378:	6e 95       	ld.w	r5,r7[0x24]
8000937a:	6a 38       	ld.w	r8,r5[0xc]
8000937c:	58 08       	cp.w	r8,0
8000937e:	c0 b1       	brne	80009394 <_Balloc+0x38>
80009380:	31 0a       	mov	r10,16
80009382:	30 4b       	mov	r11,4
80009384:	0e 9c       	mov	r12,r7
80009386:	f0 1f 00 13 	mcall	800093d0 <_Balloc+0x74>
8000938a:	8b 3c       	st.w	r5[0xc],r12
8000938c:	6e 98       	ld.w	r8,r7[0x24]
8000938e:	70 3c       	ld.w	r12,r8[0xc]
80009390:	58 0c       	cp.w	r12,0
80009392:	c1 b0       	breq	800093c8 <_Balloc+0x6c>
80009394:	6e 98       	ld.w	r8,r7[0x24]
80009396:	70 38       	ld.w	r8,r8[0xc]
80009398:	f0 06 00 28 	add	r8,r8,r6<<0x2
8000939c:	70 0c       	ld.w	r12,r8[0x0]
8000939e:	58 0c       	cp.w	r12,0
800093a0:	c0 40       	breq	800093a8 <_Balloc+0x4c>
800093a2:	78 09       	ld.w	r9,r12[0x0]
800093a4:	91 09       	st.w	r8[0x0],r9
800093a6:	c0 e8       	rjmp	800093c2 <_Balloc+0x66>
800093a8:	0e 9c       	mov	r12,r7
800093aa:	30 17       	mov	r7,1
800093ac:	0e 9b       	mov	r11,r7
800093ae:	ee 06 09 47 	lsl	r7,r7,r6
800093b2:	ee ca ff fb 	sub	r10,r7,-5
800093b6:	a3 6a       	lsl	r10,0x2
800093b8:	f0 1f 00 06 	mcall	800093d0 <_Balloc+0x74>
800093bc:	c0 60       	breq	800093c8 <_Balloc+0x6c>
800093be:	99 16       	st.w	r12[0x4],r6
800093c0:	99 27       	st.w	r12[0x8],r7
800093c2:	30 08       	mov	r8,0
800093c4:	99 38       	st.w	r12[0xc],r8
800093c6:	99 48       	st.w	r12[0x10],r8
800093c8:	d8 22       	popm	r4-r7,pc
800093ca:	00 00       	add	r0,r0
800093cc:	80 00       	ld.sh	r0,r0[0x0]
800093ce:	4a 88       	lddpc	r8,8000946c <__d2b+0x98>
800093d0:	80 00       	ld.sh	r0,r0[0x0]
800093d2:	99 68       	st.w	r12[0x18],r8

800093d4 <__d2b>:
800093d4:	d4 31       	pushm	r0-r7,lr
800093d6:	20 2d       	sub	sp,8
800093d8:	16 93       	mov	r3,r11
800093da:	12 96       	mov	r6,r9
800093dc:	10 95       	mov	r5,r8
800093de:	14 92       	mov	r2,r10
800093e0:	30 1b       	mov	r11,1
800093e2:	f0 1f 00 27 	mcall	8000947c <__d2b+0xa8>
800093e6:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
800093ea:	50 09       	stdsp	sp[0x0],r9
800093ec:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
800093f0:	b5 a9       	sbr	r9,0x14
800093f2:	f0 01 16 14 	lsr	r1,r8,0x14
800093f6:	fb f9 1a 00 	st.wne	sp[0x0],r9
800093fa:	18 94       	mov	r4,r12
800093fc:	58 02       	cp.w	r2,0
800093fe:	c1 e0       	breq	8000943a <__d2b+0x66>
80009400:	fa cc ff f8 	sub	r12,sp,-8
80009404:	18 d2       	st.w	--r12,r2
80009406:	f0 1f 00 1f 	mcall	80009480 <__d2b+0xac>
8000940a:	40 18       	lddsp	r8,sp[0x4]
8000940c:	c0 d0       	breq	80009426 <__d2b+0x52>
8000940e:	40 09       	lddsp	r9,sp[0x0]
80009410:	f8 0a 11 20 	rsub	r10,r12,32
80009414:	f2 0a 09 4a 	lsl	r10,r9,r10
80009418:	f5 e8 10 08 	or	r8,r10,r8
8000941c:	89 58       	st.w	r4[0x14],r8
8000941e:	f2 0c 0a 49 	lsr	r9,r9,r12
80009422:	50 09       	stdsp	sp[0x0],r9
80009424:	c0 28       	rjmp	80009428 <__d2b+0x54>
80009426:	89 58       	st.w	r4[0x14],r8
80009428:	40 08       	lddsp	r8,sp[0x0]
8000942a:	58 08       	cp.w	r8,0
8000942c:	f9 b3 01 02 	movne	r3,2
80009430:	f9 b3 00 01 	moveq	r3,1
80009434:	89 68       	st.w	r4[0x18],r8
80009436:	89 43       	st.w	r4[0x10],r3
80009438:	c0 98       	rjmp	8000944a <__d2b+0x76>
8000943a:	1a 9c       	mov	r12,sp
8000943c:	f0 1f 00 11 	mcall	80009480 <__d2b+0xac>
80009440:	30 13       	mov	r3,1
80009442:	40 08       	lddsp	r8,sp[0x0]
80009444:	2e 0c       	sub	r12,-32
80009446:	89 43       	st.w	r4[0x10],r3
80009448:	89 58       	st.w	r4[0x14],r8
8000944a:	58 01       	cp.w	r1,0
8000944c:	c0 90       	breq	8000945e <__d2b+0x8a>
8000944e:	e2 c1 04 33 	sub	r1,r1,1075
80009452:	18 01       	add	r1,r12
80009454:	8d 01       	st.w	r6[0x0],r1
80009456:	f8 0c 11 35 	rsub	r12,r12,53
8000945a:	8b 0c       	st.w	r5[0x0],r12
8000945c:	c0 d8       	rjmp	80009476 <__d2b+0xa2>
8000945e:	e6 c8 ff fc 	sub	r8,r3,-4
80009462:	f8 cc 04 32 	sub	r12,r12,1074
80009466:	a5 73       	lsl	r3,0x5
80009468:	8d 0c       	st.w	r6[0x0],r12
8000946a:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
8000946e:	f0 1f 00 06 	mcall	80009484 <__d2b+0xb0>
80009472:	18 13       	sub	r3,r12
80009474:	8b 03       	st.w	r5[0x0],r3
80009476:	08 9c       	mov	r12,r4
80009478:	2f ed       	sub	sp,-8
8000947a:	d8 32       	popm	r0-r7,pc
8000947c:	80 00       	ld.sh	r0,r0[0x0]
8000947e:	93 5c       	st.w	r9[0x14],r12
80009480:	80 00       	ld.sh	r0,r0[0x0]
80009482:	92 64       	ld.sh	r4,r9[0xc]
80009484:	80 00       	ld.sh	r0,r0[0x0]
80009486:	92 04       	ld.sh	r4,r9[0x0]

80009488 <__mdiff>:
80009488:	d4 31       	pushm	r0-r7,lr
8000948a:	74 48       	ld.w	r8,r10[0x10]
8000948c:	76 45       	ld.w	r5,r11[0x10]
8000948e:	16 97       	mov	r7,r11
80009490:	14 96       	mov	r6,r10
80009492:	10 15       	sub	r5,r8
80009494:	c1 31       	brne	800094ba <__mdiff+0x32>
80009496:	2f b8       	sub	r8,-5
80009498:	ee ce ff ec 	sub	lr,r7,-20
8000949c:	a3 68       	lsl	r8,0x2
8000949e:	f4 08 00 0b 	add	r11,r10,r8
800094a2:	ee 08 00 08 	add	r8,r7,r8
800094a6:	11 4a       	ld.w	r10,--r8
800094a8:	17 49       	ld.w	r9,--r11
800094aa:	12 3a       	cp.w	r10,r9
800094ac:	c0 30       	breq	800094b2 <__mdiff+0x2a>
800094ae:	c0 e2       	brcc	800094ca <__mdiff+0x42>
800094b0:	c0 78       	rjmp	800094be <__mdiff+0x36>
800094b2:	1c 38       	cp.w	r8,lr
800094b4:	fe 9b ff f9 	brhi	800094a6 <__mdiff+0x1e>
800094b8:	c4 a8       	rjmp	8000954c <__mdiff+0xc4>
800094ba:	58 05       	cp.w	r5,0
800094bc:	c0 64       	brge	800094c8 <__mdiff+0x40>
800094be:	0e 98       	mov	r8,r7
800094c0:	30 15       	mov	r5,1
800094c2:	0c 97       	mov	r7,r6
800094c4:	10 96       	mov	r6,r8
800094c6:	c0 28       	rjmp	800094ca <__mdiff+0x42>
800094c8:	30 05       	mov	r5,0
800094ca:	6e 1b       	ld.w	r11,r7[0x4]
800094cc:	f0 1f 00 24 	mcall	8000955c <__mdiff+0xd4>
800094d0:	6e 49       	ld.w	r9,r7[0x10]
800094d2:	6c 44       	ld.w	r4,r6[0x10]
800094d4:	99 35       	st.w	r12[0xc],r5
800094d6:	2f b4       	sub	r4,-5
800094d8:	f2 c5 ff fb 	sub	r5,r9,-5
800094dc:	ec 04 00 24 	add	r4,r6,r4<<0x2
800094e0:	ee 05 00 25 	add	r5,r7,r5<<0x2
800094e4:	2e c6       	sub	r6,-20
800094e6:	2e c7       	sub	r7,-20
800094e8:	f8 c8 ff ec 	sub	r8,r12,-20
800094ec:	30 0a       	mov	r10,0
800094ee:	0f 0e       	ld.w	lr,r7++
800094f0:	0d 0b       	ld.w	r11,r6++
800094f2:	fc 02 16 10 	lsr	r2,lr,0x10
800094f6:	f6 03 16 10 	lsr	r3,r11,0x10
800094fa:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
800094fe:	e4 03 01 03 	sub	r3,r2,r3
80009502:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80009506:	fc 0b 01 0b 	sub	r11,lr,r11
8000950a:	f6 0a 00 0a 	add	r10,r11,r10
8000950e:	b0 1a       	st.h	r8[0x2],r10
80009510:	b1 4a       	asr	r10,0x10
80009512:	e6 0a 00 0a 	add	r10,r3,r10
80009516:	b0 0a       	st.h	r8[0x0],r10
80009518:	2f c8       	sub	r8,-4
8000951a:	b1 4a       	asr	r10,0x10
8000951c:	08 36       	cp.w	r6,r4
8000951e:	ce 83       	brcs	800094ee <__mdiff+0x66>
80009520:	c0 d8       	rjmp	8000953a <__mdiff+0xb2>
80009522:	0f 0b       	ld.w	r11,r7++
80009524:	f6 0e 16 10 	lsr	lr,r11,0x10
80009528:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000952c:	16 0a       	add	r10,r11
8000952e:	b0 1a       	st.h	r8[0x2],r10
80009530:	b1 4a       	asr	r10,0x10
80009532:	1c 0a       	add	r10,lr
80009534:	b0 0a       	st.h	r8[0x0],r10
80009536:	2f c8       	sub	r8,-4
80009538:	b1 4a       	asr	r10,0x10
8000953a:	0a 37       	cp.w	r7,r5
8000953c:	cf 33       	brcs	80009522 <__mdiff+0x9a>
8000953e:	c0 28       	rjmp	80009542 <__mdiff+0xba>
80009540:	20 19       	sub	r9,1
80009542:	11 4a       	ld.w	r10,--r8
80009544:	58 0a       	cp.w	r10,0
80009546:	cf d0       	breq	80009540 <__mdiff+0xb8>
80009548:	99 49       	st.w	r12[0x10],r9
8000954a:	d8 32       	popm	r0-r7,pc
8000954c:	30 0b       	mov	r11,0
8000954e:	f0 1f 00 04 	mcall	8000955c <__mdiff+0xd4>
80009552:	30 18       	mov	r8,1
80009554:	99 48       	st.w	r12[0x10],r8
80009556:	30 08       	mov	r8,0
80009558:	99 58       	st.w	r12[0x14],r8
8000955a:	d8 32       	popm	r0-r7,pc
8000955c:	80 00       	ld.sh	r0,r0[0x0]
8000955e:	93 5c       	st.w	r9[0x14],r12

80009560 <__lshift>:
80009560:	d4 31       	pushm	r0-r7,lr
80009562:	16 97       	mov	r7,r11
80009564:	76 46       	ld.w	r6,r11[0x10]
80009566:	f4 02 14 05 	asr	r2,r10,0x5
8000956a:	2f f6       	sub	r6,-1
8000956c:	14 93       	mov	r3,r10
8000956e:	18 94       	mov	r4,r12
80009570:	04 06       	add	r6,r2
80009572:	76 1b       	ld.w	r11,r11[0x4]
80009574:	6e 28       	ld.w	r8,r7[0x8]
80009576:	c0 38       	rjmp	8000957c <__lshift+0x1c>
80009578:	2f fb       	sub	r11,-1
8000957a:	a1 78       	lsl	r8,0x1
8000957c:	10 36       	cp.w	r6,r8
8000957e:	fe 99 ff fd 	brgt	80009578 <__lshift+0x18>
80009582:	08 9c       	mov	r12,r4
80009584:	f0 1f 00 1a 	mcall	800095ec <__lshift+0x8c>
80009588:	30 09       	mov	r9,0
8000958a:	18 95       	mov	r5,r12
8000958c:	f8 c8 ff ec 	sub	r8,r12,-20
80009590:	12 9a       	mov	r10,r9
80009592:	c0 38       	rjmp	80009598 <__lshift+0x38>
80009594:	10 aa       	st.w	r8++,r10
80009596:	2f f9       	sub	r9,-1
80009598:	04 39       	cp.w	r9,r2
8000959a:	cf d5       	brlt	80009594 <__lshift+0x34>
8000959c:	6e 4b       	ld.w	r11,r7[0x10]
8000959e:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
800095a2:	2f bb       	sub	r11,-5
800095a4:	ee c9 ff ec 	sub	r9,r7,-20
800095a8:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
800095ac:	58 03       	cp.w	r3,0
800095ae:	c1 30       	breq	800095d4 <__lshift+0x74>
800095b0:	e6 0c 11 20 	rsub	r12,r3,32
800095b4:	30 0a       	mov	r10,0
800095b6:	72 02       	ld.w	r2,r9[0x0]
800095b8:	e4 03 09 42 	lsl	r2,r2,r3
800095bc:	04 4a       	or	r10,r2
800095be:	10 aa       	st.w	r8++,r10
800095c0:	13 0a       	ld.w	r10,r9++
800095c2:	f4 0c 0a 4a 	lsr	r10,r10,r12
800095c6:	16 39       	cp.w	r9,r11
800095c8:	cf 73       	brcs	800095b6 <__lshift+0x56>
800095ca:	91 0a       	st.w	r8[0x0],r10
800095cc:	58 0a       	cp.w	r10,0
800095ce:	c0 70       	breq	800095dc <__lshift+0x7c>
800095d0:	2f f6       	sub	r6,-1
800095d2:	c0 58       	rjmp	800095dc <__lshift+0x7c>
800095d4:	13 0a       	ld.w	r10,r9++
800095d6:	10 aa       	st.w	r8++,r10
800095d8:	16 39       	cp.w	r9,r11
800095da:	cf d3       	brcs	800095d4 <__lshift+0x74>
800095dc:	08 9c       	mov	r12,r4
800095de:	20 16       	sub	r6,1
800095e0:	0e 9b       	mov	r11,r7
800095e2:	8b 46       	st.w	r5[0x10],r6
800095e4:	f0 1f 00 03 	mcall	800095f0 <__lshift+0x90>
800095e8:	0a 9c       	mov	r12,r5
800095ea:	d8 32       	popm	r0-r7,pc
800095ec:	80 00       	ld.sh	r0,r0[0x0]
800095ee:	93 5c       	st.w	r9[0x14],r12
800095f0:	80 00       	ld.sh	r0,r0[0x0]
800095f2:	93 24       	st.w	r9[0x8],r4

800095f4 <__multiply>:
800095f4:	d4 31       	pushm	r0-r7,lr
800095f6:	20 2d       	sub	sp,8
800095f8:	76 49       	ld.w	r9,r11[0x10]
800095fa:	74 48       	ld.w	r8,r10[0x10]
800095fc:	16 96       	mov	r6,r11
800095fe:	14 95       	mov	r5,r10
80009600:	10 39       	cp.w	r9,r8
80009602:	ec 08 17 50 	movlt	r8,r6
80009606:	ea 06 17 50 	movlt	r6,r5
8000960a:	f0 05 17 50 	movlt	r5,r8
8000960e:	6c 28       	ld.w	r8,r6[0x8]
80009610:	76 43       	ld.w	r3,r11[0x10]
80009612:	74 42       	ld.w	r2,r10[0x10]
80009614:	76 1b       	ld.w	r11,r11[0x4]
80009616:	e4 03 00 07 	add	r7,r2,r3
8000961a:	10 37       	cp.w	r7,r8
8000961c:	f7 bb 09 ff 	subgt	r11,-1
80009620:	f0 1f 00 36 	mcall	800096f8 <__multiply+0x104>
80009624:	ee c4 ff fb 	sub	r4,r7,-5
80009628:	f8 c9 ff ec 	sub	r9,r12,-20
8000962c:	f8 04 00 24 	add	r4,r12,r4<<0x2
80009630:	30 0a       	mov	r10,0
80009632:	12 98       	mov	r8,r9
80009634:	c0 28       	rjmp	80009638 <__multiply+0x44>
80009636:	10 aa       	st.w	r8++,r10
80009638:	08 38       	cp.w	r8,r4
8000963a:	cf e3       	brcs	80009636 <__multiply+0x42>
8000963c:	2f b3       	sub	r3,-5
8000963e:	2f b2       	sub	r2,-5
80009640:	ec 03 00 23 	add	r3,r6,r3<<0x2
80009644:	ea 02 00 22 	add	r2,r5,r2<<0x2
80009648:	ec cb ff ec 	sub	r11,r6,-20
8000964c:	50 12       	stdsp	sp[0x4],r2
8000964e:	ea ca ff ec 	sub	r10,r5,-20
80009652:	c4 48       	rjmp	800096da <__multiply+0xe6>
80009654:	94 95       	ld.uh	r5,r10[0x2]
80009656:	58 05       	cp.w	r5,0
80009658:	c2 00       	breq	80009698 <__multiply+0xa4>
8000965a:	12 98       	mov	r8,r9
8000965c:	16 96       	mov	r6,r11
8000965e:	30 0e       	mov	lr,0
80009660:	50 09       	stdsp	sp[0x0],r9
80009662:	0d 02       	ld.w	r2,r6++
80009664:	e4 00 16 10 	lsr	r0,r2,0x10
80009668:	70 01       	ld.w	r1,r8[0x0]
8000966a:	70 09       	ld.w	r9,r8[0x0]
8000966c:	b1 81       	lsr	r1,0x10
8000966e:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
80009672:	e0 05 03 41 	mac	r1,r0,r5
80009676:	ab 32       	mul	r2,r5
80009678:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
8000967c:	00 02       	add	r2,r0
8000967e:	e4 0e 00 0e 	add	lr,r2,lr
80009682:	b0 1e       	st.h	r8[0x2],lr
80009684:	b1 8e       	lsr	lr,0x10
80009686:	1c 01       	add	r1,lr
80009688:	b0 01       	st.h	r8[0x0],r1
8000968a:	e2 0e 16 10 	lsr	lr,r1,0x10
8000968e:	2f c8       	sub	r8,-4
80009690:	06 36       	cp.w	r6,r3
80009692:	ce 83       	brcs	80009662 <__multiply+0x6e>
80009694:	40 09       	lddsp	r9,sp[0x0]
80009696:	91 0e       	st.w	r8[0x0],lr
80009698:	94 86       	ld.uh	r6,r10[0x0]
8000969a:	58 06       	cp.w	r6,0
8000969c:	c1 d0       	breq	800096d6 <__multiply+0xe2>
8000969e:	72 02       	ld.w	r2,r9[0x0]
800096a0:	12 98       	mov	r8,r9
800096a2:	16 9e       	mov	lr,r11
800096a4:	30 05       	mov	r5,0
800096a6:	b0 12       	st.h	r8[0x2],r2
800096a8:	1d 01       	ld.w	r1,lr++
800096aa:	90 82       	ld.uh	r2,r8[0x0]
800096ac:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
800096b0:	ad 30       	mul	r0,r6
800096b2:	e0 02 00 02 	add	r2,r0,r2
800096b6:	e4 05 00 05 	add	r5,r2,r5
800096ba:	b0 05       	st.h	r8[0x0],r5
800096bc:	b1 85       	lsr	r5,0x10
800096be:	b1 81       	lsr	r1,0x10
800096c0:	2f c8       	sub	r8,-4
800096c2:	ad 31       	mul	r1,r6
800096c4:	90 92       	ld.uh	r2,r8[0x2]
800096c6:	e2 02 00 02 	add	r2,r1,r2
800096ca:	0a 02       	add	r2,r5
800096cc:	e4 05 16 10 	lsr	r5,r2,0x10
800096d0:	06 3e       	cp.w	lr,r3
800096d2:	ce a3       	brcs	800096a6 <__multiply+0xb2>
800096d4:	91 02       	st.w	r8[0x0],r2
800096d6:	2f ca       	sub	r10,-4
800096d8:	2f c9       	sub	r9,-4
800096da:	40 18       	lddsp	r8,sp[0x4]
800096dc:	10 3a       	cp.w	r10,r8
800096de:	cb b3       	brcs	80009654 <__multiply+0x60>
800096e0:	c0 28       	rjmp	800096e4 <__multiply+0xf0>
800096e2:	20 17       	sub	r7,1
800096e4:	58 07       	cp.w	r7,0
800096e6:	e0 8a 00 05 	brle	800096f0 <__multiply+0xfc>
800096ea:	09 48       	ld.w	r8,--r4
800096ec:	58 08       	cp.w	r8,0
800096ee:	cf a0       	breq	800096e2 <__multiply+0xee>
800096f0:	99 47       	st.w	r12[0x10],r7
800096f2:	2f ed       	sub	sp,-8
800096f4:	d8 32       	popm	r0-r7,pc
800096f6:	00 00       	add	r0,r0
800096f8:	80 00       	ld.sh	r0,r0[0x0]
800096fa:	93 5c       	st.w	r9[0x14],r12

800096fc <__i2b>:
800096fc:	d4 21       	pushm	r4-r7,lr
800096fe:	16 97       	mov	r7,r11
80009700:	30 1b       	mov	r11,1
80009702:	f0 1f 00 04 	mcall	80009710 <__i2b+0x14>
80009706:	30 19       	mov	r9,1
80009708:	99 57       	st.w	r12[0x14],r7
8000970a:	99 49       	st.w	r12[0x10],r9
8000970c:	d8 22       	popm	r4-r7,pc
8000970e:	00 00       	add	r0,r0
80009710:	80 00       	ld.sh	r0,r0[0x0]
80009712:	93 5c       	st.w	r9[0x14],r12

80009714 <__multadd>:
80009714:	d4 31       	pushm	r0-r7,lr
80009716:	30 08       	mov	r8,0
80009718:	12 95       	mov	r5,r9
8000971a:	16 97       	mov	r7,r11
8000971c:	18 96       	mov	r6,r12
8000971e:	76 44       	ld.w	r4,r11[0x10]
80009720:	f6 c9 ff ec 	sub	r9,r11,-20
80009724:	72 0b       	ld.w	r11,r9[0x0]
80009726:	f6 0c 16 10 	lsr	r12,r11,0x10
8000972a:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000972e:	f4 0c 02 4c 	mul	r12,r10,r12
80009732:	f4 0b 03 45 	mac	r5,r10,r11
80009736:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
8000973a:	b1 85       	lsr	r5,0x10
8000973c:	18 05       	add	r5,r12
8000973e:	ea 0c 15 10 	lsl	r12,r5,0x10
80009742:	f8 0b 00 0b 	add	r11,r12,r11
80009746:	12 ab       	st.w	r9++,r11
80009748:	2f f8       	sub	r8,-1
8000974a:	b1 85       	lsr	r5,0x10
8000974c:	08 38       	cp.w	r8,r4
8000974e:	ce b5       	brlt	80009724 <__multadd+0x10>
80009750:	58 05       	cp.w	r5,0
80009752:	c1 d0       	breq	8000978c <__multadd+0x78>
80009754:	6e 28       	ld.w	r8,r7[0x8]
80009756:	10 34       	cp.w	r4,r8
80009758:	c1 45       	brlt	80009780 <__multadd+0x6c>
8000975a:	6e 1b       	ld.w	r11,r7[0x4]
8000975c:	0c 9c       	mov	r12,r6
8000975e:	2f fb       	sub	r11,-1
80009760:	f0 1f 00 0c 	mcall	80009790 <__multadd+0x7c>
80009764:	6e 4a       	ld.w	r10,r7[0x10]
80009766:	ee cb ff f4 	sub	r11,r7,-12
8000976a:	18 93       	mov	r3,r12
8000976c:	2f ea       	sub	r10,-2
8000976e:	2f 4c       	sub	r12,-12
80009770:	a3 6a       	lsl	r10,0x2
80009772:	f0 1f 00 09 	mcall	80009794 <__multadd+0x80>
80009776:	0e 9b       	mov	r11,r7
80009778:	0c 9c       	mov	r12,r6
8000977a:	f0 1f 00 08 	mcall	80009798 <__multadd+0x84>
8000977e:	06 97       	mov	r7,r3
80009780:	e8 c8 ff ff 	sub	r8,r4,-1
80009784:	2f b4       	sub	r4,-5
80009786:	8f 48       	st.w	r7[0x10],r8
80009788:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
8000978c:	0e 9c       	mov	r12,r7
8000978e:	d8 32       	popm	r0-r7,pc
80009790:	80 00       	ld.sh	r0,r0[0x0]
80009792:	93 5c       	st.w	r9[0x14],r12
80009794:	80 00       	ld.sh	r0,r0[0x0]
80009796:	4e f0       	lddpc	r0,80009950 <_write_r+0x14>
80009798:	80 00       	ld.sh	r0,r0[0x0]
8000979a:	93 24       	st.w	r9[0x8],r4

8000979c <__pow5mult>:
8000979c:	d4 31       	pushm	r0-r7,lr
8000979e:	14 96       	mov	r6,r10
800097a0:	18 97       	mov	r7,r12
800097a2:	16 94       	mov	r4,r11
800097a4:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
800097a8:	c0 90       	breq	800097ba <__pow5mult+0x1e>
800097aa:	20 18       	sub	r8,1
800097ac:	4a 19       	lddpc	r9,80009830 <__pow5mult+0x94>
800097ae:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
800097b2:	30 09       	mov	r9,0
800097b4:	f0 1f 00 20 	mcall	80009834 <__pow5mult+0x98>
800097b8:	18 94       	mov	r4,r12
800097ba:	a3 46       	asr	r6,0x2
800097bc:	c3 70       	breq	8000982a <__pow5mult+0x8e>
800097be:	6e 95       	ld.w	r5,r7[0x24]
800097c0:	58 05       	cp.w	r5,0
800097c2:	c0 91       	brne	800097d4 <__pow5mult+0x38>
800097c4:	31 0c       	mov	r12,16
800097c6:	f0 1f 00 1d 	mcall	80009838 <__pow5mult+0x9c>
800097ca:	99 35       	st.w	r12[0xc],r5
800097cc:	8f 9c       	st.w	r7[0x24],r12
800097ce:	99 15       	st.w	r12[0x4],r5
800097d0:	99 25       	st.w	r12[0x8],r5
800097d2:	99 05       	st.w	r12[0x0],r5
800097d4:	6e 93       	ld.w	r3,r7[0x24]
800097d6:	66 25       	ld.w	r5,r3[0x8]
800097d8:	58 05       	cp.w	r5,0
800097da:	c0 d1       	brne	800097f4 <__pow5mult+0x58>
800097dc:	e0 6b 02 71 	mov	r11,625
800097e0:	0e 9c       	mov	r12,r7
800097e2:	f0 1f 00 17 	mcall	8000983c <__pow5mult+0xa0>
800097e6:	87 2c       	st.w	r3[0x8],r12
800097e8:	30 08       	mov	r8,0
800097ea:	18 95       	mov	r5,r12
800097ec:	99 08       	st.w	r12[0x0],r8
800097ee:	c0 38       	rjmp	800097f4 <__pow5mult+0x58>
800097f0:	06 9c       	mov	r12,r3
800097f2:	18 95       	mov	r5,r12
800097f4:	ed b6 00 00 	bld	r6,0x0
800097f8:	c0 c1       	brne	80009810 <__pow5mult+0x74>
800097fa:	08 9b       	mov	r11,r4
800097fc:	0a 9a       	mov	r10,r5
800097fe:	0e 9c       	mov	r12,r7
80009800:	f0 1f 00 10 	mcall	80009840 <__pow5mult+0xa4>
80009804:	08 9b       	mov	r11,r4
80009806:	18 93       	mov	r3,r12
80009808:	0e 9c       	mov	r12,r7
8000980a:	06 94       	mov	r4,r3
8000980c:	f0 1f 00 0e 	mcall	80009844 <__pow5mult+0xa8>
80009810:	a1 56       	asr	r6,0x1
80009812:	c0 c0       	breq	8000982a <__pow5mult+0x8e>
80009814:	6a 03       	ld.w	r3,r5[0x0]
80009816:	58 03       	cp.w	r3,0
80009818:	ce c1       	brne	800097f0 <__pow5mult+0x54>
8000981a:	0a 9a       	mov	r10,r5
8000981c:	0a 9b       	mov	r11,r5
8000981e:	0e 9c       	mov	r12,r7
80009820:	f0 1f 00 08 	mcall	80009840 <__pow5mult+0xa4>
80009824:	8b 0c       	st.w	r5[0x0],r12
80009826:	99 03       	st.w	r12[0x0],r3
80009828:	ce 5b       	rjmp	800097f2 <__pow5mult+0x56>
8000982a:	08 9c       	mov	r12,r4
8000982c:	d8 32       	popm	r0-r7,pc
8000982e:	00 00       	add	r0,r0
80009830:	80 00       	ld.sh	r0,r0[0x0]
80009832:	b1 a8       	sbr	r8,0x10
80009834:	80 00       	ld.sh	r0,r0[0x0]
80009836:	97 14       	st.w	r11[0x4],r4
80009838:	80 00       	ld.sh	r0,r0[0x0]
8000983a:	4a 88       	lddpc	r8,800098d8 <__swrite+0x10>
8000983c:	80 00       	ld.sh	r0,r0[0x0]
8000983e:	96 fc       	ld.uh	r12,r11[0xe]
80009840:	80 00       	ld.sh	r0,r0[0x0]
80009842:	95 f4       	st.w	r10[0x3c],r4
80009844:	80 00       	ld.sh	r0,r0[0x0]
80009846:	93 24       	st.w	r9[0x8],r4

80009848 <__isinfd>:
80009848:	14 98       	mov	r8,r10
8000984a:	fc 19 7f f0 	movh	r9,0x7ff0
8000984e:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80009852:	f0 0b 11 00 	rsub	r11,r8,0
80009856:	f7 e8 10 08 	or	r8,r11,r8
8000985a:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
8000985e:	f2 08 01 08 	sub	r8,r9,r8
80009862:	f0 0c 11 00 	rsub	r12,r8,0
80009866:	f9 e8 10 08 	or	r8,r12,r8
8000986a:	f0 0c 14 1f 	asr	r12,r8,0x1f
8000986e:	2f fc       	sub	r12,-1
80009870:	5e fc       	retal	r12

80009872 <__isnand>:
80009872:	14 98       	mov	r8,r10
80009874:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80009878:	f0 0c 11 00 	rsub	r12,r8,0
8000987c:	10 4c       	or	r12,r8
8000987e:	fc 18 7f f0 	movh	r8,0x7ff0
80009882:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
80009886:	f0 0c 01 0c 	sub	r12,r8,r12
8000988a:	bf 9c       	lsr	r12,0x1f
8000988c:	5e fc       	retal	r12
8000988e:	d7 03       	nop

80009890 <__sclose>:
80009890:	d4 01       	pushm	lr
80009892:	96 7b       	ld.sh	r11,r11[0xe]
80009894:	f0 1f 00 02 	mcall	8000989c <__sclose+0xc>
80009898:	d8 02       	popm	pc
8000989a:	00 00       	add	r0,r0
8000989c:	80 00       	ld.sh	r0,r0[0x0]
8000989e:	99 c8       	st.w	r12[0x30],r8

800098a0 <__sseek>:
800098a0:	d4 21       	pushm	r4-r7,lr
800098a2:	16 97       	mov	r7,r11
800098a4:	96 7b       	ld.sh	r11,r11[0xe]
800098a6:	f0 1f 00 08 	mcall	800098c4 <__sseek+0x24>
800098aa:	8e 68       	ld.sh	r8,r7[0xc]
800098ac:	10 99       	mov	r9,r8
800098ae:	ad c8       	cbr	r8,0xc
800098b0:	ad a9       	sbr	r9,0xc
800098b2:	5b fc       	cp.w	r12,-1
800098b4:	ef f8 0c 06 	st.heq	r7[0xc],r8
800098b8:	ef f9 1c 06 	st.hne	r7[0xc],r9
800098bc:	ef fc 1a 15 	st.wne	r7[0x54],r12
800098c0:	d8 22       	popm	r4-r7,pc
800098c2:	00 00       	add	r0,r0
800098c4:	80 00       	ld.sh	r0,r0[0x0]
800098c6:	9b 04       	st.w	sp[0x0],r4

800098c8 <__swrite>:
800098c8:	d4 21       	pushm	r4-r7,lr
800098ca:	96 68       	ld.sh	r8,r11[0xc]
800098cc:	16 97       	mov	r7,r11
800098ce:	14 95       	mov	r5,r10
800098d0:	12 94       	mov	r4,r9
800098d2:	e2 18 01 00 	andl	r8,0x100,COH
800098d6:	18 96       	mov	r6,r12
800098d8:	c0 60       	breq	800098e4 <__swrite+0x1c>
800098da:	30 29       	mov	r9,2
800098dc:	30 0a       	mov	r10,0
800098de:	96 7b       	ld.sh	r11,r11[0xe]
800098e0:	f0 1f 00 06 	mcall	800098f8 <__swrite+0x30>
800098e4:	8e 68       	ld.sh	r8,r7[0xc]
800098e6:	ad c8       	cbr	r8,0xc
800098e8:	08 99       	mov	r9,r4
800098ea:	0a 9a       	mov	r10,r5
800098ec:	8e 7b       	ld.sh	r11,r7[0xe]
800098ee:	0c 9c       	mov	r12,r6
800098f0:	ae 68       	st.h	r7[0xc],r8
800098f2:	f0 1f 00 03 	mcall	800098fc <__swrite+0x34>
800098f6:	d8 22       	popm	r4-r7,pc
800098f8:	80 00       	ld.sh	r0,r0[0x0]
800098fa:	9b 04       	st.w	sp[0x0],r4
800098fc:	80 00       	ld.sh	r0,r0[0x0]
800098fe:	99 3c       	st.w	r12[0xc],r12

80009900 <__sread>:
80009900:	d4 21       	pushm	r4-r7,lr
80009902:	16 97       	mov	r7,r11
80009904:	96 7b       	ld.sh	r11,r11[0xe]
80009906:	f0 1f 00 07 	mcall	80009920 <__sread+0x20>
8000990a:	c0 65       	brlt	80009916 <__sread+0x16>
8000990c:	6f 58       	ld.w	r8,r7[0x54]
8000990e:	18 08       	add	r8,r12
80009910:	ef 48 00 54 	st.w	r7[84],r8
80009914:	d8 22       	popm	r4-r7,pc
80009916:	8e 68       	ld.sh	r8,r7[0xc]
80009918:	ad c8       	cbr	r8,0xc
8000991a:	ae 68       	st.h	r7[0xc],r8
8000991c:	d8 22       	popm	r4-r7,pc
8000991e:	00 00       	add	r0,r0
80009920:	80 00       	ld.sh	r0,r0[0x0]
80009922:	9b 30       	st.w	sp[0xc],r0

80009924 <strlen>:
80009924:	30 09       	mov	r9,0
80009926:	18 98       	mov	r8,r12
80009928:	c0 28       	rjmp	8000992c <strlen+0x8>
8000992a:	2f f8       	sub	r8,-1
8000992c:	11 8a       	ld.ub	r10,r8[0x0]
8000992e:	f2 0a 18 00 	cp.b	r10,r9
80009932:	cf c1       	brne	8000992a <strlen+0x6>
80009934:	f0 0c 01 0c 	sub	r12,r8,r12
80009938:	5e fc       	retal	r12
8000993a:	d7 03       	nop

8000993c <_write_r>:
8000993c:	d4 21       	pushm	r4-r7,lr
8000993e:	16 98       	mov	r8,r11
80009940:	18 97       	mov	r7,r12
80009942:	10 9c       	mov	r12,r8
80009944:	30 08       	mov	r8,0
80009946:	14 9b       	mov	r11,r10
80009948:	48 66       	lddpc	r6,80009960 <_write_r+0x24>
8000994a:	12 9a       	mov	r10,r9
8000994c:	8d 08       	st.w	r6[0x0],r8
8000994e:	f0 1f 00 06 	mcall	80009964 <_write_r+0x28>
80009952:	5b fc       	cp.w	r12,-1
80009954:	c0 51       	brne	8000995e <_write_r+0x22>
80009956:	6c 08       	ld.w	r8,r6[0x0]
80009958:	58 08       	cp.w	r8,0
8000995a:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000995e:	d8 22       	popm	r4-r7,pc
80009960:	00 00       	add	r0,r0
80009962:	0a 2c       	rsub	r12,r5
80009964:	80 00       	ld.sh	r0,r0[0x0]
80009966:	3f c0       	mov	r0,-4

80009968 <_calloc_r>:
80009968:	d4 21       	pushm	r4-r7,lr
8000996a:	f4 0b 02 4b 	mul	r11,r10,r11
8000996e:	f0 1f 00 15 	mcall	800099c0 <_calloc_r+0x58>
80009972:	18 97       	mov	r7,r12
80009974:	c2 30       	breq	800099ba <_calloc_r+0x52>
80009976:	f8 fa ff fc 	ld.w	r10,r12[-4]
8000997a:	e0 1a ff fc 	andl	r10,0xfffc
8000997e:	20 4a       	sub	r10,4
80009980:	e0 4a 00 24 	cp.w	r10,36
80009984:	e0 8b 00 18 	brhi	800099b4 <_calloc_r+0x4c>
80009988:	18 98       	mov	r8,r12
8000998a:	59 3a       	cp.w	r10,19
8000998c:	e0 88 00 0f 	brls	800099aa <_calloc_r+0x42>
80009990:	30 09       	mov	r9,0
80009992:	10 a9       	st.w	r8++,r9
80009994:	10 a9       	st.w	r8++,r9
80009996:	59 ba       	cp.w	r10,27
80009998:	e0 88 00 09 	brls	800099aa <_calloc_r+0x42>
8000999c:	10 a9       	st.w	r8++,r9
8000999e:	10 a9       	st.w	r8++,r9
800099a0:	e0 4a 00 24 	cp.w	r10,36
800099a4:	c0 31       	brne	800099aa <_calloc_r+0x42>
800099a6:	10 a9       	st.w	r8++,r9
800099a8:	10 a9       	st.w	r8++,r9
800099aa:	30 09       	mov	r9,0
800099ac:	10 a9       	st.w	r8++,r9
800099ae:	91 19       	st.w	r8[0x4],r9
800099b0:	91 09       	st.w	r8[0x0],r9
800099b2:	c0 48       	rjmp	800099ba <_calloc_r+0x52>
800099b4:	30 0b       	mov	r11,0
800099b6:	f0 1f 00 04 	mcall	800099c4 <_calloc_r+0x5c>
800099ba:	0e 9c       	mov	r12,r7
800099bc:	d8 22       	popm	r4-r7,pc
800099be:	00 00       	add	r0,r0
800099c0:	80 00       	ld.sh	r0,r0[0x0]
800099c2:	4a a0       	lddpc	r0,80009a68 <_fclose_r+0x78>
800099c4:	80 00       	ld.sh	r0,r0[0x0]
800099c6:	50 38       	stdsp	sp[0xc],r8

800099c8 <_close_r>:
800099c8:	d4 21       	pushm	r4-r7,lr
800099ca:	30 08       	mov	r8,0
800099cc:	18 97       	mov	r7,r12
800099ce:	48 76       	lddpc	r6,800099e8 <_close_r+0x20>
800099d0:	16 9c       	mov	r12,r11
800099d2:	8d 08       	st.w	r6[0x0],r8
800099d4:	f0 1f 00 06 	mcall	800099ec <_close_r+0x24>
800099d8:	5b fc       	cp.w	r12,-1
800099da:	c0 51       	brne	800099e4 <_close_r+0x1c>
800099dc:	6c 08       	ld.w	r8,r6[0x0]
800099de:	58 08       	cp.w	r8,0
800099e0:	ef f8 1a 03 	st.wne	r7[0xc],r8
800099e4:	d8 22       	popm	r4-r7,pc
800099e6:	00 00       	add	r0,r0
800099e8:	00 00       	add	r0,r0
800099ea:	0a 2c       	rsub	r12,r5
800099ec:	80 00       	ld.sh	r0,r0[0x0]
800099ee:	54 f8       	stdsp	sp[0x13c],r8

800099f0 <_fclose_r>:
800099f0:	d4 21       	pushm	r4-r7,lr
800099f2:	18 96       	mov	r6,r12
800099f4:	16 97       	mov	r7,r11
800099f6:	58 0b       	cp.w	r11,0
800099f8:	c0 31       	brne	800099fe <_fclose_r+0xe>
800099fa:	16 95       	mov	r5,r11
800099fc:	c5 08       	rjmp	80009a9c <_fclose_r+0xac>
800099fe:	f0 1f 00 29 	mcall	80009aa0 <_fclose_r+0xb0>
80009a02:	58 06       	cp.w	r6,0
80009a04:	c0 70       	breq	80009a12 <_fclose_r+0x22>
80009a06:	6c 68       	ld.w	r8,r6[0x18]
80009a08:	58 08       	cp.w	r8,0
80009a0a:	c0 41       	brne	80009a12 <_fclose_r+0x22>
80009a0c:	0c 9c       	mov	r12,r6
80009a0e:	f0 1f 00 26 	mcall	80009aa4 <_fclose_r+0xb4>
80009a12:	4a 68       	lddpc	r8,80009aa8 <_fclose_r+0xb8>
80009a14:	10 37       	cp.w	r7,r8
80009a16:	c0 31       	brne	80009a1c <_fclose_r+0x2c>
80009a18:	6c 07       	ld.w	r7,r6[0x0]
80009a1a:	c0 a8       	rjmp	80009a2e <_fclose_r+0x3e>
80009a1c:	4a 48       	lddpc	r8,80009aac <_fclose_r+0xbc>
80009a1e:	10 37       	cp.w	r7,r8
80009a20:	c0 31       	brne	80009a26 <_fclose_r+0x36>
80009a22:	6c 17       	ld.w	r7,r6[0x4]
80009a24:	c0 58       	rjmp	80009a2e <_fclose_r+0x3e>
80009a26:	4a 38       	lddpc	r8,80009ab0 <_fclose_r+0xc0>
80009a28:	10 37       	cp.w	r7,r8
80009a2a:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80009a2e:	8e 69       	ld.sh	r9,r7[0xc]
80009a30:	30 08       	mov	r8,0
80009a32:	f0 09 19 00 	cp.h	r9,r8
80009a36:	c0 51       	brne	80009a40 <_fclose_r+0x50>
80009a38:	f0 1f 00 1f 	mcall	80009ab4 <_fclose_r+0xc4>
80009a3c:	30 05       	mov	r5,0
80009a3e:	c2 f8       	rjmp	80009a9c <_fclose_r+0xac>
80009a40:	0e 9b       	mov	r11,r7
80009a42:	0c 9c       	mov	r12,r6
80009a44:	f0 1f 00 1d 	mcall	80009ab8 <_fclose_r+0xc8>
80009a48:	6e c8       	ld.w	r8,r7[0x30]
80009a4a:	18 95       	mov	r5,r12
80009a4c:	58 08       	cp.w	r8,0
80009a4e:	c0 60       	breq	80009a5a <_fclose_r+0x6a>
80009a50:	6e 8b       	ld.w	r11,r7[0x20]
80009a52:	0c 9c       	mov	r12,r6
80009a54:	5d 18       	icall	r8
80009a56:	f9 b5 05 ff 	movlt	r5,-1
80009a5a:	8e 68       	ld.sh	r8,r7[0xc]
80009a5c:	ed b8 00 07 	bld	r8,0x7
80009a60:	c0 51       	brne	80009a6a <_fclose_r+0x7a>
80009a62:	6e 4b       	ld.w	r11,r7[0x10]
80009a64:	0c 9c       	mov	r12,r6
80009a66:	f0 1f 00 16 	mcall	80009abc <_fclose_r+0xcc>
80009a6a:	6e db       	ld.w	r11,r7[0x34]
80009a6c:	58 0b       	cp.w	r11,0
80009a6e:	c0 a0       	breq	80009a82 <_fclose_r+0x92>
80009a70:	ee c8 ff bc 	sub	r8,r7,-68
80009a74:	10 3b       	cp.w	r11,r8
80009a76:	c0 40       	breq	80009a7e <_fclose_r+0x8e>
80009a78:	0c 9c       	mov	r12,r6
80009a7a:	f0 1f 00 11 	mcall	80009abc <_fclose_r+0xcc>
80009a7e:	30 08       	mov	r8,0
80009a80:	8f d8       	st.w	r7[0x34],r8
80009a82:	6f 2b       	ld.w	r11,r7[0x48]
80009a84:	58 0b       	cp.w	r11,0
80009a86:	c0 70       	breq	80009a94 <_fclose_r+0xa4>
80009a88:	0c 9c       	mov	r12,r6
80009a8a:	f0 1f 00 0d 	mcall	80009abc <_fclose_r+0xcc>
80009a8e:	30 08       	mov	r8,0
80009a90:	ef 48 00 48 	st.w	r7[72],r8
80009a94:	30 08       	mov	r8,0
80009a96:	ae 68       	st.h	r7[0xc],r8
80009a98:	f0 1f 00 07 	mcall	80009ab4 <_fclose_r+0xc4>
80009a9c:	0a 9c       	mov	r12,r5
80009a9e:	d8 22       	popm	r4-r7,pc
80009aa0:	80 00       	ld.sh	r0,r0[0x0]
80009aa2:	8a 08       	ld.sh	r8,r5[0x0]
80009aa4:	80 00       	ld.sh	r0,r0[0x0]
80009aa6:	8a cc       	ld.uh	r12,r5[0x8]
80009aa8:	80 00       	ld.sh	r0,r0[0x0]
80009aaa:	b1 08       	ld.d	r8,r8
80009aac:	80 00       	ld.sh	r0,r0[0x0]
80009aae:	b1 28       	st.d	r8++,r8
80009ab0:	80 00       	ld.sh	r0,r0[0x0]
80009ab2:	b1 48       	asr	r8,0x10
80009ab4:	80 00       	ld.sh	r0,r0[0x0]
80009ab6:	8a 0a       	ld.sh	r10,r5[0x0]
80009ab8:	80 00       	ld.sh	r0,r0[0x0]
80009aba:	88 f0       	ld.uh	r0,r4[0xe]
80009abc:	80 00       	ld.sh	r0,r0[0x0]
80009abe:	8c 24       	ld.sh	r4,r6[0x4]

80009ac0 <fclose>:
80009ac0:	d4 01       	pushm	lr
80009ac2:	48 48       	lddpc	r8,80009ad0 <fclose+0x10>
80009ac4:	18 9b       	mov	r11,r12
80009ac6:	70 0c       	ld.w	r12,r8[0x0]
80009ac8:	f0 1f 00 03 	mcall	80009ad4 <fclose+0x14>
80009acc:	d8 02       	popm	pc
80009ace:	00 00       	add	r0,r0
80009ad0:	00 00       	add	r0,r0
80009ad2:	01 ec       	ld.ub	r12,r0[0x6]
80009ad4:	80 00       	ld.sh	r0,r0[0x0]
80009ad6:	99 f0       	st.w	r12[0x3c],r0

80009ad8 <_fstat_r>:
80009ad8:	d4 21       	pushm	r4-r7,lr
80009ada:	16 98       	mov	r8,r11
80009adc:	18 97       	mov	r7,r12
80009ade:	10 9c       	mov	r12,r8
80009ae0:	30 08       	mov	r8,0
80009ae2:	48 76       	lddpc	r6,80009afc <_fstat_r+0x24>
80009ae4:	14 9b       	mov	r11,r10
80009ae6:	8d 08       	st.w	r6[0x0],r8
80009ae8:	f0 1f 00 06 	mcall	80009b00 <_fstat_r+0x28>
80009aec:	5b fc       	cp.w	r12,-1
80009aee:	c0 51       	brne	80009af8 <_fstat_r+0x20>
80009af0:	6c 08       	ld.w	r8,r6[0x0]
80009af2:	58 08       	cp.w	r8,0
80009af4:	ef f8 1a 03 	st.wne	r7[0xc],r8
80009af8:	d8 22       	popm	r4-r7,pc
80009afa:	00 00       	add	r0,r0
80009afc:	00 00       	add	r0,r0
80009afe:	0a 2c       	rsub	r12,r5
80009b00:	80 00       	ld.sh	r0,r0[0x0]
80009b02:	55 58       	stdsp	sp[0x154],r8

80009b04 <_lseek_r>:
80009b04:	d4 21       	pushm	r4-r7,lr
80009b06:	16 98       	mov	r8,r11
80009b08:	18 97       	mov	r7,r12
80009b0a:	10 9c       	mov	r12,r8
80009b0c:	30 08       	mov	r8,0
80009b0e:	14 9b       	mov	r11,r10
80009b10:	48 66       	lddpc	r6,80009b28 <_lseek_r+0x24>
80009b12:	12 9a       	mov	r10,r9
80009b14:	8d 08       	st.w	r6[0x0],r8
80009b16:	f0 1f 00 06 	mcall	80009b2c <_lseek_r+0x28>
80009b1a:	5b fc       	cp.w	r12,-1
80009b1c:	c0 51       	brne	80009b26 <_lseek_r+0x22>
80009b1e:	6c 08       	ld.w	r8,r6[0x0]
80009b20:	58 08       	cp.w	r8,0
80009b22:	ef f8 1a 03 	st.wne	r7[0xc],r8
80009b26:	d8 22       	popm	r4-r7,pc
80009b28:	00 00       	add	r0,r0
80009b2a:	0a 2c       	rsub	r12,r5
80009b2c:	80 00       	ld.sh	r0,r0[0x0]
80009b2e:	55 10       	stdsp	sp[0x144],r0

80009b30 <_read_r>:
80009b30:	d4 21       	pushm	r4-r7,lr
80009b32:	16 98       	mov	r8,r11
80009b34:	18 97       	mov	r7,r12
80009b36:	10 9c       	mov	r12,r8
80009b38:	30 08       	mov	r8,0
80009b3a:	14 9b       	mov	r11,r10
80009b3c:	48 66       	lddpc	r6,80009b54 <_read_r+0x24>
80009b3e:	12 9a       	mov	r10,r9
80009b40:	8d 08       	st.w	r6[0x0],r8
80009b42:	f0 1f 00 06 	mcall	80009b58 <_read_r+0x28>
80009b46:	5b fc       	cp.w	r12,-1
80009b48:	c0 51       	brne	80009b52 <_read_r+0x22>
80009b4a:	6c 08       	ld.w	r8,r6[0x0]
80009b4c:	58 08       	cp.w	r8,0
80009b4e:	ef f8 1a 03 	st.wne	r7[0xc],r8
80009b52:	d8 22       	popm	r4-r7,pc
80009b54:	00 00       	add	r0,r0
80009b56:	0a 2c       	rsub	r12,r5
80009b58:	80 00       	ld.sh	r0,r0[0x0]
80009b5a:	3e a4       	mov	r4,-22

80009b5c <__avr32_f64_mul>:
80009b5c:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
80009b60:	e0 80 00 dc 	breq	80009d18 <__avr32_f64_mul_op1_zero>
80009b64:	d4 21       	pushm	r4-r7,lr
80009b66:	f7 e9 20 0e 	eor	lr,r11,r9
80009b6a:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80009b6e:	30 15       	mov	r5,1
80009b70:	c4 30       	breq	80009bf6 <__avr32_f64_mul_op1_subnormal>
80009b72:	ab 6b       	lsl	r11,0xa
80009b74:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80009b78:	ab 6a       	lsl	r10,0xa
80009b7a:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
80009b7e:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80009b82:	c5 c0       	breq	80009c3a <__avr32_f64_mul_op2_subnormal>
80009b84:	a1 78       	lsl	r8,0x1
80009b86:	5c f9       	rol	r9
80009b88:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80009b8c:	e0 47 07 ff 	cp.w	r7,2047
80009b90:	c7 70       	breq	80009c7e <__avr32_f64_mul_op_nan_or_inf>
80009b92:	e0 46 07 ff 	cp.w	r6,2047
80009b96:	c7 40       	breq	80009c7e <__avr32_f64_mul_op_nan_or_inf>
80009b98:	ee 06 00 0c 	add	r12,r7,r6
80009b9c:	e0 2c 03 fe 	sub	r12,1022
80009ba0:	f6 08 06 44 	mulu.d	r4,r11,r8
80009ba4:	f4 09 07 44 	macu.d	r4,r10,r9
80009ba8:	f4 08 06 46 	mulu.d	r6,r10,r8
80009bac:	f6 09 06 4a 	mulu.d	r10,r11,r9
80009bb0:	08 07       	add	r7,r4
80009bb2:	f4 05 00 4a 	adc	r10,r10,r5
80009bb6:	5c 0b       	acr	r11
80009bb8:	ed bb 00 14 	bld	r11,0x14
80009bbc:	c0 50       	breq	80009bc6 <__avr32_f64_mul+0x6a>
80009bbe:	a1 77       	lsl	r7,0x1
80009bc0:	5c fa       	rol	r10
80009bc2:	5c fb       	rol	r11
80009bc4:	20 1c       	sub	r12,1
80009bc6:	58 0c       	cp.w	r12,0
80009bc8:	e0 8a 00 6f 	brle	80009ca6 <__avr32_f64_mul_res_subnormal>
80009bcc:	e0 4c 07 ff 	cp.w	r12,2047
80009bd0:	e0 84 00 9c 	brge	80009d08 <__avr32_f64_mul_res_inf>
80009bd4:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80009bd8:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
80009bdc:	ef e6 12 17 	or	r7,r7,r6>>0x1
80009be0:	ee 17 80 00 	eorh	r7,0x8000
80009be4:	f1 b7 04 20 	satu	r7,0x1
80009be8:	0e 0a       	add	r10,r7
80009bea:	5c 0b       	acr	r11
80009bec:	ed be 00 1f 	bld	lr,0x1f
80009bf0:	ef bb 00 1f 	bst	r11,0x1f
80009bf4:	d8 22       	popm	r4-r7,pc

80009bf6 <__avr32_f64_mul_op1_subnormal>:
80009bf6:	e4 1b 00 0f 	andh	r11,0xf
80009bfa:	f4 0c 12 00 	clz	r12,r10
80009bfe:	f6 06 12 00 	clz	r6,r11
80009c02:	f7 bc 03 e1 	sublo	r12,-31
80009c06:	f8 06 17 30 	movlo	r6,r12
80009c0a:	f7 b6 02 01 	subhs	r6,1
80009c0e:	e0 46 00 20 	cp.w	r6,32
80009c12:	c0 d4       	brge	80009c2c <__avr32_f64_mul_op1_subnormal+0x36>
80009c14:	ec 0c 11 20 	rsub	r12,r6,32
80009c18:	f6 06 09 4b 	lsl	r11,r11,r6
80009c1c:	f4 0c 0a 4c 	lsr	r12,r10,r12
80009c20:	18 4b       	or	r11,r12
80009c22:	f4 06 09 4a 	lsl	r10,r10,r6
80009c26:	20 b6       	sub	r6,11
80009c28:	0c 17       	sub	r7,r6
80009c2a:	ca ab       	rjmp	80009b7e <__avr32_f64_mul+0x22>
80009c2c:	f4 06 09 4b 	lsl	r11,r10,r6
80009c30:	c6 40       	breq	80009cf8 <__avr32_f64_mul_res_zero>
80009c32:	30 0a       	mov	r10,0
80009c34:	20 b6       	sub	r6,11
80009c36:	0c 17       	sub	r7,r6
80009c38:	ca 3b       	rjmp	80009b7e <__avr32_f64_mul+0x22>

80009c3a <__avr32_f64_mul_op2_subnormal>:
80009c3a:	e4 19 00 0f 	andh	r9,0xf
80009c3e:	f0 0c 12 00 	clz	r12,r8
80009c42:	f2 05 12 00 	clz	r5,r9
80009c46:	f7 bc 03 ea 	sublo	r12,-22
80009c4a:	f8 05 17 30 	movlo	r5,r12
80009c4e:	f7 b5 02 0a 	subhs	r5,10
80009c52:	e0 45 00 20 	cp.w	r5,32
80009c56:	c0 d4       	brge	80009c70 <__avr32_f64_mul_op2_subnormal+0x36>
80009c58:	ea 0c 11 20 	rsub	r12,r5,32
80009c5c:	f2 05 09 49 	lsl	r9,r9,r5
80009c60:	f0 0c 0a 4c 	lsr	r12,r8,r12
80009c64:	18 49       	or	r9,r12
80009c66:	f0 05 09 48 	lsl	r8,r8,r5
80009c6a:	20 25       	sub	r5,2
80009c6c:	0a 16       	sub	r6,r5
80009c6e:	c8 fb       	rjmp	80009b8c <__avr32_f64_mul+0x30>
80009c70:	f0 05 09 49 	lsl	r9,r8,r5
80009c74:	c4 20       	breq	80009cf8 <__avr32_f64_mul_res_zero>
80009c76:	30 08       	mov	r8,0
80009c78:	20 25       	sub	r5,2
80009c7a:	0a 16       	sub	r6,r5
80009c7c:	c8 8b       	rjmp	80009b8c <__avr32_f64_mul+0x30>

80009c7e <__avr32_f64_mul_op_nan_or_inf>:
80009c7e:	e4 19 00 0f 	andh	r9,0xf
80009c82:	e4 1b 00 0f 	andh	r11,0xf
80009c86:	14 4b       	or	r11,r10
80009c88:	10 49       	or	r9,r8
80009c8a:	e0 47 07 ff 	cp.w	r7,2047
80009c8e:	c0 91       	brne	80009ca0 <__avr32_f64_mul_op1_not_naninf>
80009c90:	58 0b       	cp.w	r11,0
80009c92:	c3 81       	brne	80009d02 <__avr32_f64_mul_res_nan>
80009c94:	e0 46 07 ff 	cp.w	r6,2047
80009c98:	c3 81       	brne	80009d08 <__avr32_f64_mul_res_inf>
80009c9a:	58 09       	cp.w	r9,0
80009c9c:	c3 60       	breq	80009d08 <__avr32_f64_mul_res_inf>
80009c9e:	c3 28       	rjmp	80009d02 <__avr32_f64_mul_res_nan>

80009ca0 <__avr32_f64_mul_op1_not_naninf>:
80009ca0:	58 09       	cp.w	r9,0
80009ca2:	c3 30       	breq	80009d08 <__avr32_f64_mul_res_inf>
80009ca4:	c2 f8       	rjmp	80009d02 <__avr32_f64_mul_res_nan>

80009ca6 <__avr32_f64_mul_res_subnormal>:
80009ca6:	5c 3c       	neg	r12
80009ca8:	2f fc       	sub	r12,-1
80009caa:	f1 bc 04 c0 	satu	r12,0x6
80009cae:	e0 4c 00 20 	cp.w	r12,32
80009cb2:	c1 14       	brge	80009cd4 <__avr32_f64_mul_res_subnormal+0x2e>
80009cb4:	f8 08 11 20 	rsub	r8,r12,32
80009cb8:	0e 46       	or	r6,r7
80009cba:	ee 0c 0a 47 	lsr	r7,r7,r12
80009cbe:	f4 08 09 49 	lsl	r9,r10,r8
80009cc2:	12 47       	or	r7,r9
80009cc4:	f4 0c 0a 4a 	lsr	r10,r10,r12
80009cc8:	f6 08 09 49 	lsl	r9,r11,r8
80009ccc:	12 4a       	or	r10,r9
80009cce:	f6 0c 0a 4b 	lsr	r11,r11,r12
80009cd2:	c8 3b       	rjmp	80009bd8 <__avr32_f64_mul+0x7c>
80009cd4:	f8 08 11 20 	rsub	r8,r12,32
80009cd8:	f9 b9 00 00 	moveq	r9,0
80009cdc:	c0 30       	breq	80009ce2 <__avr32_f64_mul_res_subnormal+0x3c>
80009cde:	f6 08 09 49 	lsl	r9,r11,r8
80009ce2:	0e 46       	or	r6,r7
80009ce4:	ed ea 10 16 	or	r6,r6,r10<<0x1
80009ce8:	f4 0c 0a 4a 	lsr	r10,r10,r12
80009cec:	f3 ea 10 07 	or	r7,r9,r10
80009cf0:	f6 0c 0a 4a 	lsr	r10,r11,r12
80009cf4:	30 0b       	mov	r11,0
80009cf6:	c7 1b       	rjmp	80009bd8 <__avr32_f64_mul+0x7c>

80009cf8 <__avr32_f64_mul_res_zero>:
80009cf8:	1c 9b       	mov	r11,lr
80009cfa:	e6 1b 80 00 	andh	r11,0x8000,COH
80009cfe:	30 0a       	mov	r10,0
80009d00:	d8 22       	popm	r4-r7,pc

80009d02 <__avr32_f64_mul_res_nan>:
80009d02:	3f fb       	mov	r11,-1
80009d04:	3f fa       	mov	r10,-1
80009d06:	d8 22       	popm	r4-r7,pc

80009d08 <__avr32_f64_mul_res_inf>:
80009d08:	f0 6b 00 00 	mov	r11,-1048576
80009d0c:	ed be 00 1f 	bld	lr,0x1f
80009d10:	ef bb 00 1f 	bst	r11,0x1f
80009d14:	30 0a       	mov	r10,0
80009d16:	d8 22       	popm	r4-r7,pc

80009d18 <__avr32_f64_mul_op1_zero>:
80009d18:	f7 e9 20 0b 	eor	r11,r11,r9
80009d1c:	e6 1b 80 00 	andh	r11,0x8000,COH
80009d20:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
80009d24:	e0 4c 07 ff 	cp.w	r12,2047
80009d28:	5e 1c       	retne	r12
80009d2a:	3f fa       	mov	r10,-1
80009d2c:	3f fb       	mov	r11,-1
80009d2e:	5e fc       	retal	r12

80009d30 <__avr32_f64_sub_from_add>:
80009d30:	ee 19 80 00 	eorh	r9,0x8000

80009d34 <__avr32_f64_sub>:
80009d34:	f7 e9 20 0c 	eor	r12,r11,r9
80009d38:	e0 86 00 ca 	brmi	80009ecc <__avr32_f64_add_from_sub>
80009d3c:	eb cd 40 e0 	pushm	r5-r7,lr
80009d40:	16 9c       	mov	r12,r11
80009d42:	e6 1c 80 00 	andh	r12,0x8000,COH
80009d46:	bf db       	cbr	r11,0x1f
80009d48:	bf d9       	cbr	r9,0x1f
80009d4a:	10 3a       	cp.w	r10,r8
80009d4c:	f2 0b 13 00 	cpc	r11,r9
80009d50:	c0 92       	brcc	80009d62 <__avr32_f64_sub+0x2e>
80009d52:	16 97       	mov	r7,r11
80009d54:	12 9b       	mov	r11,r9
80009d56:	0e 99       	mov	r9,r7
80009d58:	14 97       	mov	r7,r10
80009d5a:	10 9a       	mov	r10,r8
80009d5c:	0e 98       	mov	r8,r7
80009d5e:	ee 1c 80 00 	eorh	r12,0x8000
80009d62:	f6 07 16 14 	lsr	r7,r11,0x14
80009d66:	ab 7b       	lsl	r11,0xb
80009d68:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80009d6c:	ab 7a       	lsl	r10,0xb
80009d6e:	bf bb       	sbr	r11,0x1f
80009d70:	f2 06 16 14 	lsr	r6,r9,0x14
80009d74:	c4 40       	breq	80009dfc <__avr32_f64_sub_opL_subnormal>
80009d76:	ab 79       	lsl	r9,0xb
80009d78:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80009d7c:	ab 78       	lsl	r8,0xb
80009d7e:	bf b9       	sbr	r9,0x1f

80009d80 <__avr32_f64_sub_opL_subnormal_done>:
80009d80:	e0 47 07 ff 	cp.w	r7,2047
80009d84:	c4 f0       	breq	80009e22 <__avr32_f64_sub_opH_nan_or_inf>
80009d86:	0e 26       	rsub	r6,r7
80009d88:	c1 20       	breq	80009dac <__avr32_f64_sub_shift_done>
80009d8a:	ec 05 11 20 	rsub	r5,r6,32
80009d8e:	e0 46 00 20 	cp.w	r6,32
80009d92:	c7 c2       	brcc	80009e8a <__avr32_f64_sub_longshift>
80009d94:	f0 05 09 4e 	lsl	lr,r8,r5
80009d98:	f2 05 09 45 	lsl	r5,r9,r5
80009d9c:	f0 06 0a 48 	lsr	r8,r8,r6
80009da0:	f2 06 0a 49 	lsr	r9,r9,r6
80009da4:	0a 48       	or	r8,r5
80009da6:	58 0e       	cp.w	lr,0
80009da8:	5f 1e       	srne	lr
80009daa:	1c 48       	or	r8,lr

80009dac <__avr32_f64_sub_shift_done>:
80009dac:	10 1a       	sub	r10,r8
80009dae:	f6 09 01 4b 	sbc	r11,r11,r9
80009db2:	f6 06 12 00 	clz	r6,r11
80009db6:	c0 e0       	breq	80009dd2 <__avr32_f64_sub_longnormalize_done>
80009db8:	c7 83       	brcs	80009ea8 <__avr32_f64_sub_longnormalize>
80009dba:	ec 0e 11 20 	rsub	lr,r6,32
80009dbe:	f6 06 09 4b 	lsl	r11,r11,r6
80009dc2:	f4 0e 0a 4e 	lsr	lr,r10,lr
80009dc6:	1c 4b       	or	r11,lr
80009dc8:	f4 06 09 4a 	lsl	r10,r10,r6
80009dcc:	0c 17       	sub	r7,r6
80009dce:	e0 8a 00 39 	brle	80009e40 <__avr32_f64_sub_subnormal_result>

80009dd2 <__avr32_f64_sub_longnormalize_done>:
80009dd2:	f4 09 15 15 	lsl	r9,r10,0x15
80009dd6:	ab 9a       	lsr	r10,0xb
80009dd8:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80009ddc:	ab 9b       	lsr	r11,0xb
80009dde:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80009de2:	18 4b       	or	r11,r12

80009de4 <__avr32_f64_sub_round>:
80009de4:	fc 17 80 00 	movh	r7,0x8000
80009de8:	ed ba 00 00 	bld	r10,0x0
80009dec:	f7 b7 01 ff 	subne	r7,-1
80009df0:	0e 39       	cp.w	r9,r7
80009df2:	5f 29       	srhs	r9
80009df4:	12 0a       	add	r10,r9
80009df6:	5c 0b       	acr	r11
80009df8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009dfc <__avr32_f64_sub_opL_subnormal>:
80009dfc:	ab 79       	lsl	r9,0xb
80009dfe:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80009e02:	ab 78       	lsl	r8,0xb
80009e04:	f3 e8 10 0e 	or	lr,r9,r8
80009e08:	f9 b6 01 01 	movne	r6,1
80009e0c:	ee 0e 11 00 	rsub	lr,r7,0
80009e10:	f9 b7 00 01 	moveq	r7,1
80009e14:	ef bb 00 1f 	bst	r11,0x1f
80009e18:	f7 ea 10 0e 	or	lr,r11,r10
80009e1c:	f9 b7 00 00 	moveq	r7,0
80009e20:	cb 0b       	rjmp	80009d80 <__avr32_f64_sub_opL_subnormal_done>

80009e22 <__avr32_f64_sub_opH_nan_or_inf>:
80009e22:	bf db       	cbr	r11,0x1f
80009e24:	f7 ea 10 0e 	or	lr,r11,r10
80009e28:	c0 81       	brne	80009e38 <__avr32_f64_sub_return_nan>
80009e2a:	e0 46 07 ff 	cp.w	r6,2047
80009e2e:	c0 50       	breq	80009e38 <__avr32_f64_sub_return_nan>
80009e30:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
80009e34:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009e38 <__avr32_f64_sub_return_nan>:
80009e38:	3f fa       	mov	r10,-1
80009e3a:	3f fb       	mov	r11,-1
80009e3c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009e40 <__avr32_f64_sub_subnormal_result>:
80009e40:	5c 37       	neg	r7
80009e42:	2f f7       	sub	r7,-1
80009e44:	f1 b7 04 c0 	satu	r7,0x6
80009e48:	e0 47 00 20 	cp.w	r7,32
80009e4c:	c1 14       	brge	80009e6e <__avr32_f64_sub_subnormal_result+0x2e>
80009e4e:	ee 08 11 20 	rsub	r8,r7,32
80009e52:	f4 08 09 49 	lsl	r9,r10,r8
80009e56:	5f 16       	srne	r6
80009e58:	f4 07 0a 4a 	lsr	r10,r10,r7
80009e5c:	0c 4a       	or	r10,r6
80009e5e:	f6 08 09 49 	lsl	r9,r11,r8
80009e62:	f5 e9 10 0a 	or	r10,r10,r9
80009e66:	f4 07 0a 4b 	lsr	r11,r10,r7
80009e6a:	30 07       	mov	r7,0
80009e6c:	cb 3b       	rjmp	80009dd2 <__avr32_f64_sub_longnormalize_done>
80009e6e:	ee 08 11 40 	rsub	r8,r7,64
80009e72:	f6 08 09 49 	lsl	r9,r11,r8
80009e76:	14 49       	or	r9,r10
80009e78:	5f 16       	srne	r6
80009e7a:	f6 07 0a 4a 	lsr	r10,r11,r7
80009e7e:	0c 4a       	or	r10,r6
80009e80:	30 0b       	mov	r11,0
80009e82:	30 07       	mov	r7,0
80009e84:	ca 7b       	rjmp	80009dd2 <__avr32_f64_sub_longnormalize_done>
80009e86:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009e8a <__avr32_f64_sub_longshift>:
80009e8a:	f1 b6 04 c0 	satu	r6,0x6
80009e8e:	f0 0e 17 00 	moveq	lr,r8
80009e92:	c0 40       	breq	80009e9a <__avr32_f64_sub_longshift+0x10>
80009e94:	f2 05 09 4e 	lsl	lr,r9,r5
80009e98:	10 4e       	or	lr,r8
80009e9a:	f2 06 0a 48 	lsr	r8,r9,r6
80009e9e:	30 09       	mov	r9,0
80009ea0:	58 0e       	cp.w	lr,0
80009ea2:	5f 1e       	srne	lr
80009ea4:	1c 48       	or	r8,lr
80009ea6:	c8 3b       	rjmp	80009dac <__avr32_f64_sub_shift_done>

80009ea8 <__avr32_f64_sub_longnormalize>:
80009ea8:	f4 06 12 00 	clz	r6,r10
80009eac:	f9 b7 03 00 	movlo	r7,0
80009eb0:	f9 b6 03 00 	movlo	r6,0
80009eb4:	f9 bc 03 00 	movlo	r12,0
80009eb8:	f7 b6 02 e0 	subhs	r6,-32
80009ebc:	f4 06 09 4b 	lsl	r11,r10,r6
80009ec0:	30 0a       	mov	r10,0
80009ec2:	0c 17       	sub	r7,r6
80009ec4:	fe 9a ff be 	brle	80009e40 <__avr32_f64_sub_subnormal_result>
80009ec8:	c8 5b       	rjmp	80009dd2 <__avr32_f64_sub_longnormalize_done>
	...

80009ecc <__avr32_f64_add_from_sub>:
80009ecc:	ee 19 80 00 	eorh	r9,0x8000

80009ed0 <__avr32_f64_add>:
80009ed0:	f7 e9 20 0c 	eor	r12,r11,r9
80009ed4:	fe 96 ff 2e 	brmi	80009d30 <__avr32_f64_sub_from_add>
80009ed8:	eb cd 40 e0 	pushm	r5-r7,lr
80009edc:	16 9c       	mov	r12,r11
80009ede:	e6 1c 80 00 	andh	r12,0x8000,COH
80009ee2:	bf db       	cbr	r11,0x1f
80009ee4:	bf d9       	cbr	r9,0x1f
80009ee6:	12 3b       	cp.w	r11,r9
80009ee8:	c0 72       	brcc	80009ef6 <__avr32_f64_add+0x26>
80009eea:	16 97       	mov	r7,r11
80009eec:	12 9b       	mov	r11,r9
80009eee:	0e 99       	mov	r9,r7
80009ef0:	14 97       	mov	r7,r10
80009ef2:	10 9a       	mov	r10,r8
80009ef4:	0e 98       	mov	r8,r7
80009ef6:	30 0e       	mov	lr,0
80009ef8:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80009efc:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
80009f00:	b5 ab       	sbr	r11,0x14
80009f02:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80009f06:	c6 20       	breq	80009fca <__avr32_f64_add_op2_subnormal>
80009f08:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
80009f0c:	b5 a9       	sbr	r9,0x14
80009f0e:	e0 47 07 ff 	cp.w	r7,2047
80009f12:	c2 80       	breq	80009f62 <__avr32_f64_add_opH_nan_or_inf>
80009f14:	0e 26       	rsub	r6,r7
80009f16:	c1 20       	breq	80009f3a <__avr32_f64_add_shift_done>
80009f18:	e0 46 00 36 	cp.w	r6,54
80009f1c:	c1 52       	brcc	80009f46 <__avr32_f64_add_res_of_done>
80009f1e:	ec 05 11 20 	rsub	r5,r6,32
80009f22:	e0 46 00 20 	cp.w	r6,32
80009f26:	c3 52       	brcc	80009f90 <__avr32_f64_add_longshift>
80009f28:	f0 05 09 4e 	lsl	lr,r8,r5
80009f2c:	f2 05 09 45 	lsl	r5,r9,r5
80009f30:	f0 06 0a 48 	lsr	r8,r8,r6
80009f34:	f2 06 0a 49 	lsr	r9,r9,r6
80009f38:	0a 48       	or	r8,r5

80009f3a <__avr32_f64_add_shift_done>:
80009f3a:	10 0a       	add	r10,r8
80009f3c:	f6 09 00 4b 	adc	r11,r11,r9
80009f40:	ed bb 00 15 	bld	r11,0x15
80009f44:	c3 40       	breq	80009fac <__avr32_f64_add_res_of>

80009f46 <__avr32_f64_add_res_of_done>:
80009f46:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80009f4a:	18 4b       	or	r11,r12

80009f4c <__avr32_f64_add_round>:
80009f4c:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
80009f50:	18 4e       	or	lr,r12
80009f52:	ee 1e 80 00 	eorh	lr,0x8000
80009f56:	f1 be 04 20 	satu	lr,0x1
80009f5a:	1c 0a       	add	r10,lr
80009f5c:	5c 0b       	acr	r11
80009f5e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009f62 <__avr32_f64_add_opH_nan_or_inf>:
80009f62:	b5 cb       	cbr	r11,0x14
80009f64:	f7 ea 10 0e 	or	lr,r11,r10
80009f68:	c1 01       	brne	80009f88 <__avr32_f64_add_return_nan>
80009f6a:	e0 46 07 ff 	cp.w	r6,2047
80009f6e:	c0 30       	breq	80009f74 <__avr32_f64_add_opL_nan_or_inf>
80009f70:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009f74 <__avr32_f64_add_opL_nan_or_inf>:
80009f74:	b5 c9       	cbr	r9,0x14
80009f76:	f3 e8 10 0e 	or	lr,r9,r8
80009f7a:	c0 71       	brne	80009f88 <__avr32_f64_add_return_nan>
80009f7c:	30 0a       	mov	r10,0
80009f7e:	fc 1b 7f f0 	movh	r11,0x7ff0
80009f82:	18 4b       	or	r11,r12
80009f84:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009f88 <__avr32_f64_add_return_nan>:
80009f88:	3f fa       	mov	r10,-1
80009f8a:	3f fb       	mov	r11,-1
80009f8c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009f90 <__avr32_f64_add_longshift>:
80009f90:	f1 b6 04 c0 	satu	r6,0x6
80009f94:	f0 0e 17 00 	moveq	lr,r8
80009f98:	c0 60       	breq	80009fa4 <__avr32_f64_add_longshift+0x14>
80009f9a:	f2 05 09 4e 	lsl	lr,r9,r5
80009f9e:	58 08       	cp.w	r8,0
80009fa0:	5f 18       	srne	r8
80009fa2:	10 4e       	or	lr,r8
80009fa4:	f2 06 0a 48 	lsr	r8,r9,r6
80009fa8:	30 09       	mov	r9,0
80009faa:	cc 8b       	rjmp	80009f3a <__avr32_f64_add_shift_done>

80009fac <__avr32_f64_add_res_of>:
80009fac:	fd ee 10 1e 	or	lr,lr,lr<<0x1
80009fb0:	a1 9b       	lsr	r11,0x1
80009fb2:	5d 0a       	ror	r10
80009fb4:	5d 0e       	ror	lr
80009fb6:	2f f7       	sub	r7,-1
80009fb8:	e0 47 07 ff 	cp.w	r7,2047
80009fbc:	f9 ba 00 00 	moveq	r10,0
80009fc0:	f9 bb 00 00 	moveq	r11,0
80009fc4:	f9 be 00 00 	moveq	lr,0
80009fc8:	cb fb       	rjmp	80009f46 <__avr32_f64_add_res_of_done>

80009fca <__avr32_f64_add_op2_subnormal>:
80009fca:	30 16       	mov	r6,1
80009fcc:	58 07       	cp.w	r7,0
80009fce:	ca 01       	brne	80009f0e <__avr32_f64_add+0x3e>
80009fd0:	b5 cb       	cbr	r11,0x14
80009fd2:	10 0a       	add	r10,r8
80009fd4:	f6 09 00 4b 	adc	r11,r11,r9
80009fd8:	18 4b       	or	r11,r12
80009fda:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
	...

80009fe0 <__avr32_f64_to_u32>:
80009fe0:	58 0b       	cp.w	r11,0
80009fe2:	5e 6d       	retmi	0

80009fe4 <__avr32_f64_to_s32>:
80009fe4:	f6 0c 15 01 	lsl	r12,r11,0x1
80009fe8:	b5 9c       	lsr	r12,0x15
80009fea:	e0 2c 03 ff 	sub	r12,1023
80009fee:	5e 3d       	retlo	0
80009ff0:	f8 0c 11 1f 	rsub	r12,r12,31
80009ff4:	16 99       	mov	r9,r11
80009ff6:	ab 7b       	lsl	r11,0xb
80009ff8:	bf bb       	sbr	r11,0x1f
80009ffa:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80009ffe:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000a002:	a1 79       	lsl	r9,0x1
8000a004:	5e 2b       	reths	r11
8000a006:	5c 3b       	neg	r11
8000a008:	5e fb       	retal	r11

8000a00a <__avr32_u32_to_f64>:
8000a00a:	f8 cb 00 00 	sub	r11,r12,0
8000a00e:	30 0c       	mov	r12,0
8000a010:	c0 38       	rjmp	8000a016 <__avr32_s32_to_f64+0x4>

8000a012 <__avr32_s32_to_f64>:
8000a012:	18 9b       	mov	r11,r12
8000a014:	5c 4b       	abs	r11
8000a016:	30 0a       	mov	r10,0
8000a018:	5e 0b       	reteq	r11
8000a01a:	d4 01       	pushm	lr
8000a01c:	e0 69 04 1e 	mov	r9,1054
8000a020:	f6 08 12 00 	clz	r8,r11
8000a024:	c1 70       	breq	8000a052 <__avr32_s32_to_f64+0x40>
8000a026:	c0 c3       	brcs	8000a03e <__avr32_s32_to_f64+0x2c>
8000a028:	f0 0e 11 20 	rsub	lr,r8,32
8000a02c:	f6 08 09 4b 	lsl	r11,r11,r8
8000a030:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000a034:	1c 4b       	or	r11,lr
8000a036:	f4 08 09 4a 	lsl	r10,r10,r8
8000a03a:	10 19       	sub	r9,r8
8000a03c:	c0 b8       	rjmp	8000a052 <__avr32_s32_to_f64+0x40>
8000a03e:	f4 08 12 00 	clz	r8,r10
8000a042:	f9 b8 03 00 	movlo	r8,0
8000a046:	f7 b8 02 e0 	subhs	r8,-32
8000a04a:	f4 08 09 4b 	lsl	r11,r10,r8
8000a04e:	30 0a       	mov	r10,0
8000a050:	10 19       	sub	r9,r8
8000a052:	58 09       	cp.w	r9,0
8000a054:	e0 89 00 30 	brgt	8000a0b4 <__avr32_s32_to_f64+0xa2>
8000a058:	5c 39       	neg	r9
8000a05a:	2f f9       	sub	r9,-1
8000a05c:	e0 49 00 36 	cp.w	r9,54
8000a060:	c0 43       	brcs	8000a068 <__avr32_s32_to_f64+0x56>
8000a062:	30 0b       	mov	r11,0
8000a064:	30 0a       	mov	r10,0
8000a066:	c2 68       	rjmp	8000a0b2 <__avr32_s32_to_f64+0xa0>
8000a068:	2f 69       	sub	r9,-10
8000a06a:	f2 08 11 20 	rsub	r8,r9,32
8000a06e:	e0 49 00 20 	cp.w	r9,32
8000a072:	c0 b2       	brcc	8000a088 <__avr32_s32_to_f64+0x76>
8000a074:	f4 08 09 4e 	lsl	lr,r10,r8
8000a078:	f6 08 09 48 	lsl	r8,r11,r8
8000a07c:	f4 09 0a 4a 	lsr	r10,r10,r9
8000a080:	f6 09 0a 4b 	lsr	r11,r11,r9
8000a084:	10 4b       	or	r11,r8
8000a086:	c0 88       	rjmp	8000a096 <__avr32_s32_to_f64+0x84>
8000a088:	f6 08 09 4e 	lsl	lr,r11,r8
8000a08c:	14 4e       	or	lr,r10
8000a08e:	16 9a       	mov	r10,r11
8000a090:	30 0b       	mov	r11,0
8000a092:	f4 09 0a 4a 	lsr	r10,r10,r9
8000a096:	ed ba 00 00 	bld	r10,0x0
8000a09a:	c0 92       	brcc	8000a0ac <__avr32_s32_to_f64+0x9a>
8000a09c:	1c 7e       	tst	lr,lr
8000a09e:	c0 41       	brne	8000a0a6 <__avr32_s32_to_f64+0x94>
8000a0a0:	ed ba 00 01 	bld	r10,0x1
8000a0a4:	c0 42       	brcc	8000a0ac <__avr32_s32_to_f64+0x9a>
8000a0a6:	2f fa       	sub	r10,-1
8000a0a8:	f7 bb 02 ff 	subhs	r11,-1
8000a0ac:	5c fc       	rol	r12
8000a0ae:	5d 0b       	ror	r11
8000a0b0:	5d 0a       	ror	r10
8000a0b2:	d8 02       	popm	pc
8000a0b4:	e0 68 03 ff 	mov	r8,1023
8000a0b8:	ed ba 00 0b 	bld	r10,0xb
8000a0bc:	f7 b8 00 ff 	subeq	r8,-1
8000a0c0:	10 0a       	add	r10,r8
8000a0c2:	5c 0b       	acr	r11
8000a0c4:	f7 b9 03 fe 	sublo	r9,-2
8000a0c8:	e0 49 07 ff 	cp.w	r9,2047
8000a0cc:	c0 55       	brlt	8000a0d6 <__avr32_s32_to_f64+0xc4>
8000a0ce:	30 0a       	mov	r10,0
8000a0d0:	fc 1b ff e0 	movh	r11,0xffe0
8000a0d4:	c0 c8       	rjmp	8000a0ec <__floatsidf_return_op1>
8000a0d6:	ed bb 00 1f 	bld	r11,0x1f
8000a0da:	f7 b9 01 01 	subne	r9,1
8000a0de:	ab 9a       	lsr	r10,0xb
8000a0e0:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000a0e4:	a1 7b       	lsl	r11,0x1
8000a0e6:	ab 9b       	lsr	r11,0xb
8000a0e8:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

8000a0ec <__floatsidf_return_op1>:
8000a0ec:	a1 7c       	lsl	r12,0x1
8000a0ee:	5d 0b       	ror	r11
8000a0f0:	d8 02       	popm	pc

8000a0f2 <__avr32_f64_cmp_eq>:
8000a0f2:	10 3a       	cp.w	r10,r8
8000a0f4:	f2 0b 13 00 	cpc	r11,r9
8000a0f8:	c0 80       	breq	8000a108 <__avr32_f64_cmp_eq+0x16>
8000a0fa:	a1 7b       	lsl	r11,0x1
8000a0fc:	a1 79       	lsl	r9,0x1
8000a0fe:	14 4b       	or	r11,r10
8000a100:	12 4b       	or	r11,r9
8000a102:	10 4b       	or	r11,r8
8000a104:	5e 0f       	reteq	1
8000a106:	5e fd       	retal	0
8000a108:	a1 7b       	lsl	r11,0x1
8000a10a:	fc 1c ff e0 	movh	r12,0xffe0
8000a10e:	58 0a       	cp.w	r10,0
8000a110:	f8 0b 13 00 	cpc	r11,r12
8000a114:	5e 8f       	retls	1
8000a116:	5e fd       	retal	0

8000a118 <__avr32_f64_cmp_ge>:
8000a118:	1a de       	st.w	--sp,lr
8000a11a:	1a d7       	st.w	--sp,r7
8000a11c:	a1 7b       	lsl	r11,0x1
8000a11e:	5f 3c       	srlo	r12
8000a120:	a1 79       	lsl	r9,0x1
8000a122:	5f 37       	srlo	r7
8000a124:	5c fc       	rol	r12
8000a126:	fc 1e ff e0 	movh	lr,0xffe0
8000a12a:	58 0a       	cp.w	r10,0
8000a12c:	fc 0b 13 00 	cpc	r11,lr
8000a130:	e0 8b 00 1d 	brhi	8000a16a <__avr32_f64_cmp_ge+0x52>
8000a134:	58 08       	cp.w	r8,0
8000a136:	fc 09 13 00 	cpc	r9,lr
8000a13a:	e0 8b 00 18 	brhi	8000a16a <__avr32_f64_cmp_ge+0x52>
8000a13e:	58 0b       	cp.w	r11,0
8000a140:	f5 ba 00 00 	subfeq	r10,0
8000a144:	c1 50       	breq	8000a16e <__avr32_f64_cmp_ge+0x56>
8000a146:	1b 07       	ld.w	r7,sp++
8000a148:	1b 0e       	ld.w	lr,sp++
8000a14a:	58 3c       	cp.w	r12,3
8000a14c:	c0 a0       	breq	8000a160 <__avr32_f64_cmp_ge+0x48>
8000a14e:	58 1c       	cp.w	r12,1
8000a150:	c0 33       	brcs	8000a156 <__avr32_f64_cmp_ge+0x3e>
8000a152:	5e 0f       	reteq	1
8000a154:	5e 1d       	retne	0
8000a156:	10 3a       	cp.w	r10,r8
8000a158:	f2 0b 13 00 	cpc	r11,r9
8000a15c:	5e 2f       	reths	1
8000a15e:	5e 3d       	retlo	0
8000a160:	14 38       	cp.w	r8,r10
8000a162:	f6 09 13 00 	cpc	r9,r11
8000a166:	5e 2f       	reths	1
8000a168:	5e 3d       	retlo	0
8000a16a:	1b 07       	ld.w	r7,sp++
8000a16c:	d8 0a       	popm	pc,r12=0
8000a16e:	58 17       	cp.w	r7,1
8000a170:	5f 0c       	sreq	r12
8000a172:	58 09       	cp.w	r9,0
8000a174:	f5 b8 00 00 	subfeq	r8,0
8000a178:	1b 07       	ld.w	r7,sp++
8000a17a:	1b 0e       	ld.w	lr,sp++
8000a17c:	5e 0f       	reteq	1
8000a17e:	5e fc       	retal	r12

8000a180 <__avr32_f64_cmp_lt>:
8000a180:	1a de       	st.w	--sp,lr
8000a182:	1a d7       	st.w	--sp,r7
8000a184:	a1 7b       	lsl	r11,0x1
8000a186:	5f 3c       	srlo	r12
8000a188:	a1 79       	lsl	r9,0x1
8000a18a:	5f 37       	srlo	r7
8000a18c:	5c fc       	rol	r12
8000a18e:	fc 1e ff e0 	movh	lr,0xffe0
8000a192:	58 0a       	cp.w	r10,0
8000a194:	fc 0b 13 00 	cpc	r11,lr
8000a198:	e0 8b 00 1d 	brhi	8000a1d2 <__avr32_f64_cmp_lt+0x52>
8000a19c:	58 08       	cp.w	r8,0
8000a19e:	fc 09 13 00 	cpc	r9,lr
8000a1a2:	e0 8b 00 18 	brhi	8000a1d2 <__avr32_f64_cmp_lt+0x52>
8000a1a6:	58 0b       	cp.w	r11,0
8000a1a8:	f5 ba 00 00 	subfeq	r10,0
8000a1ac:	c1 50       	breq	8000a1d6 <__avr32_f64_cmp_lt+0x56>
8000a1ae:	1b 07       	ld.w	r7,sp++
8000a1b0:	1b 0e       	ld.w	lr,sp++
8000a1b2:	58 3c       	cp.w	r12,3
8000a1b4:	c0 a0       	breq	8000a1c8 <__avr32_f64_cmp_lt+0x48>
8000a1b6:	58 1c       	cp.w	r12,1
8000a1b8:	c0 33       	brcs	8000a1be <__avr32_f64_cmp_lt+0x3e>
8000a1ba:	5e 0d       	reteq	0
8000a1bc:	5e 1f       	retne	1
8000a1be:	10 3a       	cp.w	r10,r8
8000a1c0:	f2 0b 13 00 	cpc	r11,r9
8000a1c4:	5e 2d       	reths	0
8000a1c6:	5e 3f       	retlo	1
8000a1c8:	14 38       	cp.w	r8,r10
8000a1ca:	f6 09 13 00 	cpc	r9,r11
8000a1ce:	5e 2d       	reths	0
8000a1d0:	5e 3f       	retlo	1
8000a1d2:	1b 07       	ld.w	r7,sp++
8000a1d4:	d8 0a       	popm	pc,r12=0
8000a1d6:	58 17       	cp.w	r7,1
8000a1d8:	5f 1c       	srne	r12
8000a1da:	58 09       	cp.w	r9,0
8000a1dc:	f5 b8 00 00 	subfeq	r8,0
8000a1e0:	1b 07       	ld.w	r7,sp++
8000a1e2:	1b 0e       	ld.w	lr,sp++
8000a1e4:	5e 0d       	reteq	0
8000a1e6:	5e fc       	retal	r12

8000a1e8 <__avr32_f64_div>:
8000a1e8:	eb cd 40 ff 	pushm	r0-r7,lr
8000a1ec:	f7 e9 20 0e 	eor	lr,r11,r9
8000a1f0:	f6 07 16 14 	lsr	r7,r11,0x14
8000a1f4:	a9 7b       	lsl	r11,0x9
8000a1f6:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
8000a1fa:	a9 7a       	lsl	r10,0x9
8000a1fc:	bd bb       	sbr	r11,0x1d
8000a1fe:	e4 1b 3f ff 	andh	r11,0x3fff
8000a202:	ab d7       	cbr	r7,0xb
8000a204:	e0 80 00 cc 	breq	8000a39c <__avr32_f64_div_round_subnormal+0x54>
8000a208:	e0 47 07 ff 	cp.w	r7,2047
8000a20c:	e0 84 00 b5 	brge	8000a376 <__avr32_f64_div_round_subnormal+0x2e>
8000a210:	f2 06 16 14 	lsr	r6,r9,0x14
8000a214:	a9 79       	lsl	r9,0x9
8000a216:	f3 e8 13 79 	or	r9,r9,r8>>0x17
8000a21a:	a9 78       	lsl	r8,0x9
8000a21c:	bd b9       	sbr	r9,0x1d
8000a21e:	e4 19 3f ff 	andh	r9,0x3fff
8000a222:	ab d6       	cbr	r6,0xb
8000a224:	e0 80 00 e2 	breq	8000a3e8 <__avr32_f64_div_round_subnormal+0xa0>
8000a228:	e0 46 07 ff 	cp.w	r6,2047
8000a22c:	e0 84 00 b2 	brge	8000a390 <__avr32_f64_div_round_subnormal+0x48>
8000a230:	0c 17       	sub	r7,r6
8000a232:	fe 37 fc 01 	sub	r7,-1023
8000a236:	fc 1c 80 00 	movh	r12,0x8000
8000a23a:	f8 03 16 01 	lsr	r3,r12,0x1
8000a23e:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
8000a242:	5c d4       	com	r4
8000a244:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
8000a248:	e6 09 06 44 	mulu.d	r4,r3,r9
8000a24c:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000a250:	e6 05 06 44 	mulu.d	r4,r3,r5
8000a254:	ea 03 15 02 	lsl	r3,r5,0x2
8000a258:	e6 09 06 44 	mulu.d	r4,r3,r9
8000a25c:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000a260:	e6 05 06 44 	mulu.d	r4,r3,r5
8000a264:	ea 03 15 02 	lsl	r3,r5,0x2
8000a268:	e6 09 06 44 	mulu.d	r4,r3,r9
8000a26c:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000a270:	e6 05 06 44 	mulu.d	r4,r3,r5
8000a274:	ea 03 15 02 	lsl	r3,r5,0x2
8000a278:	e6 08 06 40 	mulu.d	r0,r3,r8
8000a27c:	e4 09 07 40 	macu.d	r0,r2,r9
8000a280:	e6 09 06 44 	mulu.d	r4,r3,r9
8000a284:	02 04       	add	r4,r1
8000a286:	5c 05       	acr	r5
8000a288:	a3 65       	lsl	r5,0x2
8000a28a:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000a28e:	a3 64       	lsl	r4,0x2
8000a290:	5c 34       	neg	r4
8000a292:	f8 05 01 45 	sbc	r5,r12,r5
8000a296:	e6 04 06 40 	mulu.d	r0,r3,r4
8000a29a:	e4 05 07 40 	macu.d	r0,r2,r5
8000a29e:	e6 05 06 44 	mulu.d	r4,r3,r5
8000a2a2:	02 04       	add	r4,r1
8000a2a4:	5c 05       	acr	r5
8000a2a6:	ea 03 15 02 	lsl	r3,r5,0x2
8000a2aa:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000a2ae:	e8 02 15 02 	lsl	r2,r4,0x2
8000a2b2:	e6 08 06 40 	mulu.d	r0,r3,r8
8000a2b6:	e4 09 07 40 	macu.d	r0,r2,r9
8000a2ba:	e6 09 06 44 	mulu.d	r4,r3,r9
8000a2be:	02 04       	add	r4,r1
8000a2c0:	5c 05       	acr	r5
8000a2c2:	a3 65       	lsl	r5,0x2
8000a2c4:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000a2c8:	a3 64       	lsl	r4,0x2
8000a2ca:	5c 34       	neg	r4
8000a2cc:	f8 05 01 45 	sbc	r5,r12,r5
8000a2d0:	e6 04 06 40 	mulu.d	r0,r3,r4
8000a2d4:	e4 05 07 40 	macu.d	r0,r2,r5
8000a2d8:	e6 05 06 44 	mulu.d	r4,r3,r5
8000a2dc:	02 04       	add	r4,r1
8000a2de:	5c 05       	acr	r5
8000a2e0:	ea 03 15 02 	lsl	r3,r5,0x2
8000a2e4:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000a2e8:	e8 02 15 02 	lsl	r2,r4,0x2
8000a2ec:	e6 0a 06 40 	mulu.d	r0,r3,r10
8000a2f0:	e4 0b 07 40 	macu.d	r0,r2,r11
8000a2f4:	e6 0b 06 42 	mulu.d	r2,r3,r11
8000a2f8:	02 02       	add	r2,r1
8000a2fa:	5c 03       	acr	r3
8000a2fc:	ed b3 00 1c 	bld	r3,0x1c
8000a300:	c0 90       	breq	8000a312 <__avr32_f64_div+0x12a>
8000a302:	a1 72       	lsl	r2,0x1
8000a304:	5c f3       	rol	r3
8000a306:	20 17       	sub	r7,1
8000a308:	a3 9a       	lsr	r10,0x3
8000a30a:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
8000a30e:	a3 9b       	lsr	r11,0x3
8000a310:	c0 58       	rjmp	8000a31a <__avr32_f64_div+0x132>
8000a312:	a5 8a       	lsr	r10,0x4
8000a314:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
8000a318:	a5 8b       	lsr	r11,0x4
8000a31a:	58 07       	cp.w	r7,0
8000a31c:	e0 8a 00 8b 	brle	8000a432 <__avr32_f64_div_res_subnormal>
8000a320:	e0 12 ff 00 	andl	r2,0xff00
8000a324:	e8 12 00 80 	orl	r2,0x80
8000a328:	e6 08 06 40 	mulu.d	r0,r3,r8
8000a32c:	e4 09 07 40 	macu.d	r0,r2,r9
8000a330:	e4 08 06 44 	mulu.d	r4,r2,r8
8000a334:	e6 09 06 48 	mulu.d	r8,r3,r9
8000a338:	00 05       	add	r5,r0
8000a33a:	f0 01 00 48 	adc	r8,r8,r1
8000a33e:	5c 09       	acr	r9
8000a340:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000a344:	58 04       	cp.w	r4,0
8000a346:	5c 25       	cpc	r5

8000a348 <__avr32_f64_div_round_subnormal>:
8000a348:	f4 08 13 00 	cpc	r8,r10
8000a34c:	f6 09 13 00 	cpc	r9,r11
8000a350:	5f 36       	srlo	r6
8000a352:	f8 06 17 00 	moveq	r6,r12
8000a356:	e4 0a 16 08 	lsr	r10,r2,0x8
8000a35a:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
8000a35e:	e6 0b 16 08 	lsr	r11,r3,0x8
8000a362:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000a366:	ed be 00 1f 	bld	lr,0x1f
8000a36a:	ef bb 00 1f 	bst	r11,0x1f
8000a36e:	0c 0a       	add	r10,r6
8000a370:	5c 0b       	acr	r11
8000a372:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000a376:	e4 1b 00 0f 	andh	r11,0xf
8000a37a:	14 4b       	or	r11,r10
8000a37c:	e0 81 00 a7 	brne	8000a4ca <__avr32_f64_div_res_subnormal+0x98>
8000a380:	f2 06 16 14 	lsr	r6,r9,0x14
8000a384:	ab d6       	cbr	r6,0xb
8000a386:	e0 46 07 ff 	cp.w	r6,2047
8000a38a:	e0 81 00 a4 	brne	8000a4d2 <__avr32_f64_div_res_subnormal+0xa0>
8000a38e:	c9 e8       	rjmp	8000a4ca <__avr32_f64_div_res_subnormal+0x98>
8000a390:	e4 19 00 0f 	andh	r9,0xf
8000a394:	10 49       	or	r9,r8
8000a396:	e0 81 00 9a 	brne	8000a4ca <__avr32_f64_div_res_subnormal+0x98>
8000a39a:	c9 28       	rjmp	8000a4be <__avr32_f64_div_res_subnormal+0x8c>
8000a39c:	a3 7b       	lsl	r11,0x3
8000a39e:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
8000a3a2:	a3 7a       	lsl	r10,0x3
8000a3a4:	f5 eb 10 04 	or	r4,r10,r11
8000a3a8:	e0 80 00 a0 	breq	8000a4e8 <__avr32_f64_div_op1_zero>
8000a3ac:	f6 04 12 00 	clz	r4,r11
8000a3b0:	c1 70       	breq	8000a3de <__avr32_f64_div_round_subnormal+0x96>
8000a3b2:	c0 c3       	brcs	8000a3ca <__avr32_f64_div_round_subnormal+0x82>
8000a3b4:	e8 05 11 20 	rsub	r5,r4,32
8000a3b8:	f6 04 09 4b 	lsl	r11,r11,r4
8000a3bc:	f4 05 0a 45 	lsr	r5,r10,r5
8000a3c0:	0a 4b       	or	r11,r5
8000a3c2:	f4 04 09 4a 	lsl	r10,r10,r4
8000a3c6:	08 17       	sub	r7,r4
8000a3c8:	c0 b8       	rjmp	8000a3de <__avr32_f64_div_round_subnormal+0x96>
8000a3ca:	f4 04 12 00 	clz	r4,r10
8000a3ce:	f9 b4 03 00 	movlo	r4,0
8000a3d2:	f7 b4 02 e0 	subhs	r4,-32
8000a3d6:	f4 04 09 4b 	lsl	r11,r10,r4
8000a3da:	30 0a       	mov	r10,0
8000a3dc:	08 17       	sub	r7,r4
8000a3de:	a3 8a       	lsr	r10,0x2
8000a3e0:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
8000a3e4:	a3 8b       	lsr	r11,0x2
8000a3e6:	c1 1b       	rjmp	8000a208 <__avr32_f64_div+0x20>
8000a3e8:	a3 79       	lsl	r9,0x3
8000a3ea:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
8000a3ee:	a3 78       	lsl	r8,0x3
8000a3f0:	f3 e8 10 04 	or	r4,r9,r8
8000a3f4:	c6 f0       	breq	8000a4d2 <__avr32_f64_div_res_subnormal+0xa0>
8000a3f6:	f2 04 12 00 	clz	r4,r9
8000a3fa:	c1 70       	breq	8000a428 <__avr32_f64_div_round_subnormal+0xe0>
8000a3fc:	c0 c3       	brcs	8000a414 <__avr32_f64_div_round_subnormal+0xcc>
8000a3fe:	e8 05 11 20 	rsub	r5,r4,32
8000a402:	f2 04 09 49 	lsl	r9,r9,r4
8000a406:	f0 05 0a 45 	lsr	r5,r8,r5
8000a40a:	0a 49       	or	r9,r5
8000a40c:	f0 04 09 48 	lsl	r8,r8,r4
8000a410:	08 16       	sub	r6,r4
8000a412:	c0 b8       	rjmp	8000a428 <__avr32_f64_div_round_subnormal+0xe0>
8000a414:	f0 04 12 00 	clz	r4,r8
8000a418:	f9 b4 03 00 	movlo	r4,0
8000a41c:	f7 b4 02 e0 	subhs	r4,-32
8000a420:	f0 04 09 49 	lsl	r9,r8,r4
8000a424:	30 08       	mov	r8,0
8000a426:	08 16       	sub	r6,r4
8000a428:	a3 88       	lsr	r8,0x2
8000a42a:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
8000a42e:	a3 89       	lsr	r9,0x2
8000a430:	cf ca       	rjmp	8000a228 <__avr32_f64_div+0x40>

8000a432 <__avr32_f64_div_res_subnormal>:
8000a432:	5c 37       	neg	r7
8000a434:	2f f7       	sub	r7,-1
8000a436:	f1 b7 04 c0 	satu	r7,0x6
8000a43a:	e0 47 00 20 	cp.w	r7,32
8000a43e:	c1 54       	brge	8000a468 <__avr32_f64_div_res_subnormal+0x36>
8000a440:	ee 06 11 20 	rsub	r6,r7,32
8000a444:	e4 07 0a 42 	lsr	r2,r2,r7
8000a448:	e6 06 09 4c 	lsl	r12,r3,r6
8000a44c:	18 42       	or	r2,r12
8000a44e:	e6 07 0a 43 	lsr	r3,r3,r7
8000a452:	f4 06 09 41 	lsl	r1,r10,r6
8000a456:	f4 07 0a 4a 	lsr	r10,r10,r7
8000a45a:	f6 06 09 4c 	lsl	r12,r11,r6
8000a45e:	18 4a       	or	r10,r12
8000a460:	f6 07 0a 4b 	lsr	r11,r11,r7
8000a464:	30 00       	mov	r0,0
8000a466:	c1 58       	rjmp	8000a490 <__avr32_f64_div_res_subnormal+0x5e>
8000a468:	ee 06 11 20 	rsub	r6,r7,32
8000a46c:	f9 b0 00 00 	moveq	r0,0
8000a470:	f9 bc 00 00 	moveq	r12,0
8000a474:	c0 50       	breq	8000a47e <__avr32_f64_div_res_subnormal+0x4c>
8000a476:	f4 06 09 40 	lsl	r0,r10,r6
8000a47a:	f6 06 09 4c 	lsl	r12,r11,r6
8000a47e:	e6 07 0a 42 	lsr	r2,r3,r7
8000a482:	30 03       	mov	r3,0
8000a484:	f4 07 0a 41 	lsr	r1,r10,r7
8000a488:	18 41       	or	r1,r12
8000a48a:	f6 07 0a 4a 	lsr	r10,r11,r7
8000a48e:	30 0b       	mov	r11,0
8000a490:	e0 12 ff 00 	andl	r2,0xff00
8000a494:	e8 12 00 80 	orl	r2,0x80
8000a498:	e6 08 06 46 	mulu.d	r6,r3,r8
8000a49c:	e4 09 07 46 	macu.d	r6,r2,r9
8000a4a0:	e4 08 06 44 	mulu.d	r4,r2,r8
8000a4a4:	e6 09 06 48 	mulu.d	r8,r3,r9
8000a4a8:	0c 05       	add	r5,r6
8000a4aa:	f0 07 00 48 	adc	r8,r8,r7
8000a4ae:	5c 09       	acr	r9
8000a4b0:	30 07       	mov	r7,0
8000a4b2:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000a4b6:	00 34       	cp.w	r4,r0
8000a4b8:	e2 05 13 00 	cpc	r5,r1
8000a4bc:	c4 6b       	rjmp	8000a348 <__avr32_f64_div_round_subnormal>
8000a4be:	1c 9b       	mov	r11,lr
8000a4c0:	e6 1b 80 00 	andh	r11,0x8000,COH
8000a4c4:	30 0a       	mov	r10,0
8000a4c6:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000a4ca:	3f fb       	mov	r11,-1
8000a4cc:	30 0a       	mov	r10,0
8000a4ce:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000a4d2:	f5 eb 10 04 	or	r4,r10,r11
8000a4d6:	c0 90       	breq	8000a4e8 <__avr32_f64_div_op1_zero>
8000a4d8:	1c 9b       	mov	r11,lr
8000a4da:	e6 1b 80 00 	andh	r11,0x8000,COH
8000a4de:	ea 1b 7f f0 	orh	r11,0x7ff0
8000a4e2:	30 0a       	mov	r10,0
8000a4e4:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

8000a4e8 <__avr32_f64_div_op1_zero>:
8000a4e8:	f1 e9 10 15 	or	r5,r8,r9<<0x1
8000a4ec:	ce f0       	breq	8000a4ca <__avr32_f64_div_res_subnormal+0x98>
8000a4ee:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
8000a4f2:	e0 44 07 ff 	cp.w	r4,2047
8000a4f6:	ce 41       	brne	8000a4be <__avr32_f64_div_res_subnormal+0x8c>
8000a4f8:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
8000a4fc:	ce 10       	breq	8000a4be <__avr32_f64_div_res_subnormal+0x8c>
8000a4fe:	ce 6b       	rjmp	8000a4ca <__avr32_f64_div_res_subnormal+0x98>

8000a500 <__avr32_udiv64>:
8000a500:	d4 31       	pushm	r0-r7,lr
8000a502:	1a 97       	mov	r7,sp
8000a504:	20 3d       	sub	sp,12
8000a506:	10 9c       	mov	r12,r8
8000a508:	12 9e       	mov	lr,r9
8000a50a:	14 93       	mov	r3,r10
8000a50c:	58 09       	cp.w	r9,0
8000a50e:	e0 81 00 bd 	brne	8000a688 <__avr32_udiv64+0x188>
8000a512:	16 38       	cp.w	r8,r11
8000a514:	e0 88 00 40 	brls	8000a594 <__avr32_udiv64+0x94>
8000a518:	f0 08 12 00 	clz	r8,r8
8000a51c:	c0 d0       	breq	8000a536 <__avr32_udiv64+0x36>
8000a51e:	f6 08 09 4b 	lsl	r11,r11,r8
8000a522:	f0 09 11 20 	rsub	r9,r8,32
8000a526:	f8 08 09 4c 	lsl	r12,r12,r8
8000a52a:	f4 09 0a 49 	lsr	r9,r10,r9
8000a52e:	f4 08 09 43 	lsl	r3,r10,r8
8000a532:	f3 eb 10 0b 	or	r11,r9,r11
8000a536:	f8 0e 16 10 	lsr	lr,r12,0x10
8000a53a:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000a53e:	f6 0e 0d 00 	divu	r0,r11,lr
8000a542:	e6 0b 16 10 	lsr	r11,r3,0x10
8000a546:	00 99       	mov	r9,r0
8000a548:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000a54c:	e0 0a 02 48 	mul	r8,r0,r10
8000a550:	10 3b       	cp.w	r11,r8
8000a552:	c0 a2       	brcc	8000a566 <__avr32_udiv64+0x66>
8000a554:	20 19       	sub	r9,1
8000a556:	18 0b       	add	r11,r12
8000a558:	18 3b       	cp.w	r11,r12
8000a55a:	c0 63       	brcs	8000a566 <__avr32_udiv64+0x66>
8000a55c:	10 3b       	cp.w	r11,r8
8000a55e:	f7 b9 03 01 	sublo	r9,1
8000a562:	f7 dc e3 0b 	addcs	r11,r11,r12
8000a566:	f6 08 01 01 	sub	r1,r11,r8
8000a56a:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000a56e:	e2 0e 0d 00 	divu	r0,r1,lr
8000a572:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000a576:	00 98       	mov	r8,r0
8000a578:	e0 0a 02 4a 	mul	r10,r0,r10
8000a57c:	14 33       	cp.w	r3,r10
8000a57e:	c0 82       	brcc	8000a58e <__avr32_udiv64+0x8e>
8000a580:	20 18       	sub	r8,1
8000a582:	18 03       	add	r3,r12
8000a584:	18 33       	cp.w	r3,r12
8000a586:	c0 43       	brcs	8000a58e <__avr32_udiv64+0x8e>
8000a588:	14 33       	cp.w	r3,r10
8000a58a:	f7 b8 03 01 	sublo	r8,1
8000a58e:	f1 e9 11 08 	or	r8,r8,r9<<0x10
8000a592:	cd f8       	rjmp	8000a750 <__avr32_udiv64+0x250>
8000a594:	58 08       	cp.w	r8,0
8000a596:	c0 51       	brne	8000a5a0 <__avr32_udiv64+0xa0>
8000a598:	30 19       	mov	r9,1
8000a59a:	f2 08 0d 08 	divu	r8,r9,r8
8000a59e:	10 9c       	mov	r12,r8
8000a5a0:	f8 06 12 00 	clz	r6,r12
8000a5a4:	c0 41       	brne	8000a5ac <__avr32_udiv64+0xac>
8000a5a6:	18 1b       	sub	r11,r12
8000a5a8:	30 19       	mov	r9,1
8000a5aa:	c4 08       	rjmp	8000a62a <__avr32_udiv64+0x12a>
8000a5ac:	ec 01 11 20 	rsub	r1,r6,32
8000a5b0:	f4 01 0a 49 	lsr	r9,r10,r1
8000a5b4:	f8 06 09 4c 	lsl	r12,r12,r6
8000a5b8:	f6 06 09 48 	lsl	r8,r11,r6
8000a5bc:	f6 01 0a 41 	lsr	r1,r11,r1
8000a5c0:	f3 e8 10 08 	or	r8,r9,r8
8000a5c4:	f8 03 16 10 	lsr	r3,r12,0x10
8000a5c8:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000a5cc:	e2 03 0d 00 	divu	r0,r1,r3
8000a5d0:	f0 0b 16 10 	lsr	r11,r8,0x10
8000a5d4:	00 9e       	mov	lr,r0
8000a5d6:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000a5da:	e0 05 02 49 	mul	r9,r0,r5
8000a5de:	12 3b       	cp.w	r11,r9
8000a5e0:	c0 a2       	brcc	8000a5f4 <__avr32_udiv64+0xf4>
8000a5e2:	20 1e       	sub	lr,1
8000a5e4:	18 0b       	add	r11,r12
8000a5e6:	18 3b       	cp.w	r11,r12
8000a5e8:	c0 63       	brcs	8000a5f4 <__avr32_udiv64+0xf4>
8000a5ea:	12 3b       	cp.w	r11,r9
8000a5ec:	f7 be 03 01 	sublo	lr,1
8000a5f0:	f7 dc e3 0b 	addcs	r11,r11,r12
8000a5f4:	12 1b       	sub	r11,r9
8000a5f6:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
8000a5fa:	f6 03 0d 02 	divu	r2,r11,r3
8000a5fe:	f1 e3 11 08 	or	r8,r8,r3<<0x10
8000a602:	04 99       	mov	r9,r2
8000a604:	e4 05 02 4b 	mul	r11,r2,r5
8000a608:	16 38       	cp.w	r8,r11
8000a60a:	c0 a2       	brcc	8000a61e <__avr32_udiv64+0x11e>
8000a60c:	20 19       	sub	r9,1
8000a60e:	18 08       	add	r8,r12
8000a610:	18 38       	cp.w	r8,r12
8000a612:	c0 63       	brcs	8000a61e <__avr32_udiv64+0x11e>
8000a614:	16 38       	cp.w	r8,r11
8000a616:	f7 b9 03 01 	sublo	r9,1
8000a61a:	f1 dc e3 08 	addcs	r8,r8,r12
8000a61e:	f4 06 09 43 	lsl	r3,r10,r6
8000a622:	f0 0b 01 0b 	sub	r11,r8,r11
8000a626:	f3 ee 11 09 	or	r9,r9,lr<<0x10
8000a62a:	f8 06 16 10 	lsr	r6,r12,0x10
8000a62e:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
8000a632:	f6 06 0d 00 	divu	r0,r11,r6
8000a636:	e6 0b 16 10 	lsr	r11,r3,0x10
8000a63a:	00 9a       	mov	r10,r0
8000a63c:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000a640:	e0 0e 02 48 	mul	r8,r0,lr
8000a644:	10 3b       	cp.w	r11,r8
8000a646:	c0 a2       	brcc	8000a65a <__avr32_udiv64+0x15a>
8000a648:	20 1a       	sub	r10,1
8000a64a:	18 0b       	add	r11,r12
8000a64c:	18 3b       	cp.w	r11,r12
8000a64e:	c0 63       	brcs	8000a65a <__avr32_udiv64+0x15a>
8000a650:	10 3b       	cp.w	r11,r8
8000a652:	f7 ba 03 01 	sublo	r10,1
8000a656:	f7 dc e3 0b 	addcs	r11,r11,r12
8000a65a:	f6 08 01 01 	sub	r1,r11,r8
8000a65e:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000a662:	e2 06 0d 00 	divu	r0,r1,r6
8000a666:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000a66a:	00 98       	mov	r8,r0
8000a66c:	e0 0e 02 4b 	mul	r11,r0,lr
8000a670:	16 33       	cp.w	r3,r11
8000a672:	c0 82       	brcc	8000a682 <__avr32_udiv64+0x182>
8000a674:	20 18       	sub	r8,1
8000a676:	18 03       	add	r3,r12
8000a678:	18 33       	cp.w	r3,r12
8000a67a:	c0 43       	brcs	8000a682 <__avr32_udiv64+0x182>
8000a67c:	16 33       	cp.w	r3,r11
8000a67e:	f7 b8 03 01 	sublo	r8,1
8000a682:	f1 ea 11 08 	or	r8,r8,r10<<0x10
8000a686:	c6 98       	rjmp	8000a758 <__avr32_udiv64+0x258>
8000a688:	16 39       	cp.w	r9,r11
8000a68a:	e0 8b 00 65 	brhi	8000a754 <__avr32_udiv64+0x254>
8000a68e:	f2 09 12 00 	clz	r9,r9
8000a692:	c0 b1       	brne	8000a6a8 <__avr32_udiv64+0x1a8>
8000a694:	10 3a       	cp.w	r10,r8
8000a696:	5f 2a       	srhs	r10
8000a698:	1c 3b       	cp.w	r11,lr
8000a69a:	5f b8       	srhi	r8
8000a69c:	10 4a       	or	r10,r8
8000a69e:	f2 0a 18 00 	cp.b	r10,r9
8000a6a2:	c5 90       	breq	8000a754 <__avr32_udiv64+0x254>
8000a6a4:	30 18       	mov	r8,1
8000a6a6:	c5 98       	rjmp	8000a758 <__avr32_udiv64+0x258>
8000a6a8:	f0 09 09 46 	lsl	r6,r8,r9
8000a6ac:	f2 03 11 20 	rsub	r3,r9,32
8000a6b0:	fc 09 09 4e 	lsl	lr,lr,r9
8000a6b4:	f0 03 0a 48 	lsr	r8,r8,r3
8000a6b8:	f6 09 09 4c 	lsl	r12,r11,r9
8000a6bc:	f4 03 0a 42 	lsr	r2,r10,r3
8000a6c0:	ef 46 ff f4 	st.w	r7[-12],r6
8000a6c4:	f6 03 0a 43 	lsr	r3,r11,r3
8000a6c8:	18 42       	or	r2,r12
8000a6ca:	f1 ee 10 0c 	or	r12,r8,lr
8000a6ce:	f8 01 16 10 	lsr	r1,r12,0x10
8000a6d2:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000a6d6:	e6 01 0d 04 	divu	r4,r3,r1
8000a6da:	e4 03 16 10 	lsr	r3,r2,0x10
8000a6de:	08 9e       	mov	lr,r4
8000a6e0:	e7 e5 11 03 	or	r3,r3,r5<<0x10
8000a6e4:	e8 06 02 48 	mul	r8,r4,r6
8000a6e8:	10 33       	cp.w	r3,r8
8000a6ea:	c0 a2       	brcc	8000a6fe <__avr32_udiv64+0x1fe>
8000a6ec:	20 1e       	sub	lr,1
8000a6ee:	18 03       	add	r3,r12
8000a6f0:	18 33       	cp.w	r3,r12
8000a6f2:	c0 63       	brcs	8000a6fe <__avr32_udiv64+0x1fe>
8000a6f4:	10 33       	cp.w	r3,r8
8000a6f6:	f7 be 03 01 	sublo	lr,1
8000a6fa:	e7 dc e3 03 	addcs	r3,r3,r12
8000a6fe:	10 13       	sub	r3,r8
8000a700:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
8000a704:	e6 01 0d 00 	divu	r0,r3,r1
8000a708:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000a70c:	00 98       	mov	r8,r0
8000a70e:	e0 06 02 46 	mul	r6,r0,r6
8000a712:	0c 3b       	cp.w	r11,r6
8000a714:	c0 a2       	brcc	8000a728 <__avr32_udiv64+0x228>
8000a716:	20 18       	sub	r8,1
8000a718:	18 0b       	add	r11,r12
8000a71a:	18 3b       	cp.w	r11,r12
8000a71c:	c0 63       	brcs	8000a728 <__avr32_udiv64+0x228>
8000a71e:	0c 3b       	cp.w	r11,r6
8000a720:	f7 dc e3 0b 	addcs	r11,r11,r12
8000a724:	f7 b8 03 01 	sublo	r8,1
8000a728:	f1 ee 11 08 	or	r8,r8,lr<<0x10
8000a72c:	ee f4 ff f4 	ld.w	r4,r7[-12]
8000a730:	0c 1b       	sub	r11,r6
8000a732:	f0 04 06 42 	mulu.d	r2,r8,r4
8000a736:	06 95       	mov	r5,r3
8000a738:	16 35       	cp.w	r5,r11
8000a73a:	e0 8b 00 0a 	brhi	8000a74e <__avr32_udiv64+0x24e>
8000a73e:	5f 0b       	sreq	r11
8000a740:	f4 09 09 49 	lsl	r9,r10,r9
8000a744:	12 32       	cp.w	r2,r9
8000a746:	5f b9       	srhi	r9
8000a748:	f7 e9 00 09 	and	r9,r11,r9
8000a74c:	c0 60       	breq	8000a758 <__avr32_udiv64+0x258>
8000a74e:	20 18       	sub	r8,1
8000a750:	30 09       	mov	r9,0
8000a752:	c0 38       	rjmp	8000a758 <__avr32_udiv64+0x258>
8000a754:	30 09       	mov	r9,0
8000a756:	12 98       	mov	r8,r9
8000a758:	10 9a       	mov	r10,r8
8000a75a:	12 93       	mov	r3,r9
8000a75c:	10 92       	mov	r2,r8
8000a75e:	12 9b       	mov	r11,r9
8000a760:	2f dd       	sub	sp,-12
8000a762:	d8 32       	popm	r0-r7,pc

8000a764 <__avr32_umod64>:
8000a764:	d4 31       	pushm	r0-r7,lr
8000a766:	1a 97       	mov	r7,sp
8000a768:	20 3d       	sub	sp,12
8000a76a:	10 9c       	mov	r12,r8
8000a76c:	12 95       	mov	r5,r9
8000a76e:	14 9e       	mov	lr,r10
8000a770:	16 91       	mov	r1,r11
8000a772:	16 96       	mov	r6,r11
8000a774:	58 09       	cp.w	r9,0
8000a776:	e0 81 00 81 	brne	8000a878 <__avr32_umod64+0x114>
8000a77a:	16 38       	cp.w	r8,r11
8000a77c:	e0 88 00 12 	brls	8000a7a0 <__avr32_umod64+0x3c>
8000a780:	f0 08 12 00 	clz	r8,r8
8000a784:	c4 e0       	breq	8000a820 <__avr32_umod64+0xbc>
8000a786:	f6 08 09 46 	lsl	r6,r11,r8
8000a78a:	f8 08 09 4c 	lsl	r12,r12,r8
8000a78e:	f0 0b 11 20 	rsub	r11,r8,32
8000a792:	f4 08 09 4e 	lsl	lr,r10,r8
8000a796:	f4 0b 0a 4b 	lsr	r11,r10,r11
8000a79a:	f7 e6 10 06 	or	r6,r11,r6
8000a79e:	c4 18       	rjmp	8000a820 <__avr32_umod64+0xbc>
8000a7a0:	58 08       	cp.w	r8,0
8000a7a2:	c0 51       	brne	8000a7ac <__avr32_umod64+0x48>
8000a7a4:	30 19       	mov	r9,1
8000a7a6:	f2 08 0d 08 	divu	r8,r9,r8
8000a7aa:	10 9c       	mov	r12,r8
8000a7ac:	f8 08 12 00 	clz	r8,r12
8000a7b0:	c0 31       	brne	8000a7b6 <__avr32_umod64+0x52>
8000a7b2:	18 16       	sub	r6,r12
8000a7b4:	c3 68       	rjmp	8000a820 <__avr32_umod64+0xbc>
8000a7b6:	f0 03 11 20 	rsub	r3,r8,32
8000a7ba:	f4 03 0a 4b 	lsr	r11,r10,r3
8000a7be:	f8 08 09 4c 	lsl	r12,r12,r8
8000a7c2:	ec 08 09 49 	lsl	r9,r6,r8
8000a7c6:	ec 03 0a 43 	lsr	r3,r6,r3
8000a7ca:	f7 e9 10 09 	or	r9,r11,r9
8000a7ce:	f8 05 16 10 	lsr	r5,r12,0x10
8000a7d2:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000a7d6:	e6 05 0d 02 	divu	r2,r3,r5
8000a7da:	f2 0e 16 10 	lsr	lr,r9,0x10
8000a7de:	ec 02 02 4b 	mul	r11,r6,r2
8000a7e2:	fd e3 11 0e 	or	lr,lr,r3<<0x10
8000a7e6:	16 3e       	cp.w	lr,r11
8000a7e8:	c0 72       	brcc	8000a7f6 <__avr32_umod64+0x92>
8000a7ea:	18 0e       	add	lr,r12
8000a7ec:	18 3e       	cp.w	lr,r12
8000a7ee:	c0 43       	brcs	8000a7f6 <__avr32_umod64+0x92>
8000a7f0:	16 3e       	cp.w	lr,r11
8000a7f2:	fd dc e3 0e 	addcs	lr,lr,r12
8000a7f6:	fc 0b 01 03 	sub	r3,lr,r11
8000a7fa:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000a7fe:	e6 05 0d 02 	divu	r2,r3,r5
8000a802:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000a806:	a5 36       	mul	r6,r2
8000a808:	0c 39       	cp.w	r9,r6
8000a80a:	c0 72       	brcc	8000a818 <__avr32_umod64+0xb4>
8000a80c:	18 09       	add	r9,r12
8000a80e:	18 39       	cp.w	r9,r12
8000a810:	c0 43       	brcs	8000a818 <__avr32_umod64+0xb4>
8000a812:	0c 39       	cp.w	r9,r6
8000a814:	f3 dc e3 09 	addcs	r9,r9,r12
8000a818:	f2 06 01 06 	sub	r6,r9,r6
8000a81c:	f4 08 09 4e 	lsl	lr,r10,r8
8000a820:	f8 0a 16 10 	lsr	r10,r12,0x10
8000a824:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000a828:	ec 0a 0d 02 	divu	r2,r6,r10
8000a82c:	fc 09 16 10 	lsr	r9,lr,0x10
8000a830:	ea 02 02 4b 	mul	r11,r5,r2
8000a834:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000a838:	16 39       	cp.w	r9,r11
8000a83a:	c0 72       	brcc	8000a848 <__avr32_umod64+0xe4>
8000a83c:	18 09       	add	r9,r12
8000a83e:	18 39       	cp.w	r9,r12
8000a840:	c0 43       	brcs	8000a848 <__avr32_umod64+0xe4>
8000a842:	16 39       	cp.w	r9,r11
8000a844:	f3 dc e3 09 	addcs	r9,r9,r12
8000a848:	f2 0b 01 0b 	sub	r11,r9,r11
8000a84c:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000a850:	f6 0a 0d 0a 	divu	r10,r11,r10
8000a854:	fd eb 11 0e 	or	lr,lr,r11<<0x10
8000a858:	ea 0a 02 4a 	mul	r10,r5,r10
8000a85c:	14 3e       	cp.w	lr,r10
8000a85e:	c0 72       	brcc	8000a86c <__avr32_umod64+0x108>
8000a860:	18 0e       	add	lr,r12
8000a862:	18 3e       	cp.w	lr,r12
8000a864:	c0 43       	brcs	8000a86c <__avr32_umod64+0x108>
8000a866:	14 3e       	cp.w	lr,r10
8000a868:	fd dc e3 0e 	addcs	lr,lr,r12
8000a86c:	fc 0a 01 0a 	sub	r10,lr,r10
8000a870:	30 0b       	mov	r11,0
8000a872:	f4 08 0a 4a 	lsr	r10,r10,r8
8000a876:	c7 b8       	rjmp	8000a96c <__avr32_umod64+0x208>
8000a878:	16 39       	cp.w	r9,r11
8000a87a:	e0 8b 00 79 	brhi	8000a96c <__avr32_umod64+0x208>
8000a87e:	f2 09 12 00 	clz	r9,r9
8000a882:	c1 21       	brne	8000a8a6 <__avr32_umod64+0x142>
8000a884:	10 3a       	cp.w	r10,r8
8000a886:	5f 2b       	srhs	r11
8000a888:	0a 31       	cp.w	r1,r5
8000a88a:	5f ba       	srhi	r10
8000a88c:	f7 ea 10 0a 	or	r10,r11,r10
8000a890:	f2 0a 18 00 	cp.b	r10,r9
8000a894:	c0 60       	breq	8000a8a0 <__avr32_umod64+0x13c>
8000a896:	fc 08 01 0c 	sub	r12,lr,r8
8000a89a:	e2 05 01 46 	sbc	r6,r1,r5
8000a89e:	18 9e       	mov	lr,r12
8000a8a0:	0c 9b       	mov	r11,r6
8000a8a2:	1c 9a       	mov	r10,lr
8000a8a4:	c6 48       	rjmp	8000a96c <__avr32_umod64+0x208>
8000a8a6:	ea 09 09 4c 	lsl	r12,r5,r9
8000a8aa:	f2 06 11 20 	rsub	r6,r9,32
8000a8ae:	f6 09 09 4b 	lsl	r11,r11,r9
8000a8b2:	f0 09 09 42 	lsl	r2,r8,r9
8000a8b6:	ef 46 ff f4 	st.w	r7[-12],r6
8000a8ba:	f0 06 0a 48 	lsr	r8,r8,r6
8000a8be:	18 48       	or	r8,r12
8000a8c0:	e2 06 0a 4c 	lsr	r12,r1,r6
8000a8c4:	f4 09 09 43 	lsl	r3,r10,r9
8000a8c8:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
8000a8cc:	f4 06 0a 4a 	lsr	r10,r10,r6
8000a8d0:	16 4a       	or	r10,r11
8000a8d2:	f0 0b 16 10 	lsr	r11,r8,0x10
8000a8d6:	f8 0b 0d 04 	divu	r4,r12,r11
8000a8da:	f4 0c 16 10 	lsr	r12,r10,0x10
8000a8de:	08 91       	mov	r1,r4
8000a8e0:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
8000a8e4:	e8 0e 02 46 	mul	r6,r4,lr
8000a8e8:	0c 3c       	cp.w	r12,r6
8000a8ea:	c0 a2       	brcc	8000a8fe <__avr32_umod64+0x19a>
8000a8ec:	20 11       	sub	r1,1
8000a8ee:	10 0c       	add	r12,r8
8000a8f0:	10 3c       	cp.w	r12,r8
8000a8f2:	c0 63       	brcs	8000a8fe <__avr32_umod64+0x19a>
8000a8f4:	0c 3c       	cp.w	r12,r6
8000a8f6:	f7 b1 03 01 	sublo	r1,1
8000a8fa:	f9 d8 e3 0c 	addcs	r12,r12,r8
8000a8fe:	0c 1c       	sub	r12,r6
8000a900:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
8000a904:	f8 0b 0d 04 	divu	r4,r12,r11
8000a908:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
8000a90c:	08 96       	mov	r6,r4
8000a90e:	e8 0e 02 4e 	mul	lr,r4,lr
8000a912:	1c 3b       	cp.w	r11,lr
8000a914:	c0 a2       	brcc	8000a928 <__avr32_umod64+0x1c4>
8000a916:	20 16       	sub	r6,1
8000a918:	10 0b       	add	r11,r8
8000a91a:	10 3b       	cp.w	r11,r8
8000a91c:	c0 63       	brcs	8000a928 <__avr32_umod64+0x1c4>
8000a91e:	1c 3b       	cp.w	r11,lr
8000a920:	f7 b6 03 01 	sublo	r6,1
8000a924:	f7 d8 e3 0b 	addcs	r11,r11,r8
8000a928:	ed e1 11 01 	or	r1,r6,r1<<0x10
8000a92c:	1c 1b       	sub	r11,lr
8000a92e:	e2 02 06 40 	mulu.d	r0,r1,r2
8000a932:	00 9e       	mov	lr,r0
8000a934:	02 9c       	mov	r12,r1
8000a936:	16 3c       	cp.w	r12,r11
8000a938:	e0 8b 00 08 	brhi	8000a948 <__avr32_umod64+0x1e4>
8000a93c:	5f 06       	sreq	r6
8000a93e:	06 30       	cp.w	r0,r3
8000a940:	5f ba       	srhi	r10
8000a942:	ed ea 00 0a 	and	r10,r6,r10
8000a946:	c0 60       	breq	8000a952 <__avr32_umod64+0x1ee>
8000a948:	fc 02 01 04 	sub	r4,lr,r2
8000a94c:	f8 08 01 4c 	sbc	r12,r12,r8
8000a950:	08 9e       	mov	lr,r4
8000a952:	e6 0e 01 0a 	sub	r10,r3,lr
8000a956:	f6 0c 01 4c 	sbc	r12,r11,r12
8000a95a:	ee f1 ff f4 	ld.w	r1,r7[-12]
8000a95e:	f8 09 0a 4b 	lsr	r11,r12,r9
8000a962:	f4 09 0a 4a 	lsr	r10,r10,r9
8000a966:	f8 01 09 4c 	lsl	r12,r12,r1
8000a96a:	18 4a       	or	r10,r12
8000a96c:	2f dd       	sub	sp,-12
8000a96e:	d8 32       	popm	r0-r7,pc

8000a970 <__do_global_ctors_aux>:
8000a970:	d4 21       	pushm	r4-r7,lr
8000a972:	48 57       	lddpc	r7,8000a984 <__do_global_ctors_aux+0x14>
8000a974:	c0 28       	rjmp	8000a978 <__do_global_ctors_aux+0x8>
8000a976:	5d 18       	icall	r8
8000a978:	20 47       	sub	r7,4
8000a97a:	6e 08       	ld.w	r8,r7[0x0]
8000a97c:	5b f8       	cp.w	r8,-1
8000a97e:	cf c1       	brne	8000a976 <__do_global_ctors_aux+0x6>
8000a980:	d8 22       	popm	r4-r7,pc
8000a982:	00 00       	add	r0,r0
8000a984:	00 00       	add	r0,r0
8000a986:	00 0c       	add	r12,r0

Disassembly of section .exception:

8000aa00 <_evba>:
8000aa00:	c0 08       	rjmp	8000aa00 <_evba>
	...

8000aa04 <_handle_TLB_Multiple_Hit>:
8000aa04:	c0 08       	rjmp	8000aa04 <_handle_TLB_Multiple_Hit>
	...

8000aa08 <_handle_Bus_Error_Data_Fetch>:
8000aa08:	c0 08       	rjmp	8000aa08 <_handle_Bus_Error_Data_Fetch>
	...

8000aa0c <_handle_Bus_Error_Instruction_Fetch>:
8000aa0c:	c0 08       	rjmp	8000aa0c <_handle_Bus_Error_Instruction_Fetch>
	...

8000aa10 <_handle_NMI>:
8000aa10:	c0 08       	rjmp	8000aa10 <_handle_NMI>
	...

8000aa14 <_handle_Instruction_Address>:
8000aa14:	c0 08       	rjmp	8000aa14 <_handle_Instruction_Address>
	...

8000aa18 <_handle_ITLB_Protection>:
8000aa18:	c0 08       	rjmp	8000aa18 <_handle_ITLB_Protection>
	...

8000aa1c <_handle_Breakpoint>:
8000aa1c:	c0 08       	rjmp	8000aa1c <_handle_Breakpoint>
	...

8000aa20 <_handle_Illegal_Opcode>:
8000aa20:	c0 08       	rjmp	8000aa20 <_handle_Illegal_Opcode>
	...

8000aa24 <_handle_Unimplemented_Instruction>:
8000aa24:	c0 08       	rjmp	8000aa24 <_handle_Unimplemented_Instruction>
	...

8000aa28 <_handle_Privilege_Violation>:
8000aa28:	c0 08       	rjmp	8000aa28 <_handle_Privilege_Violation>
	...

8000aa2c <_handle_Floating_Point>:
8000aa2c:	c0 08       	rjmp	8000aa2c <_handle_Floating_Point>
	...

8000aa30 <_handle_Coprocessor_Absent>:
8000aa30:	c0 08       	rjmp	8000aa30 <_handle_Coprocessor_Absent>
	...

8000aa34 <_handle_Data_Address_Read>:
8000aa34:	c0 08       	rjmp	8000aa34 <_handle_Data_Address_Read>
	...

8000aa38 <_handle_Data_Address_Write>:
8000aa38:	c0 08       	rjmp	8000aa38 <_handle_Data_Address_Write>
	...

8000aa3c <_handle_DTLB_Protection_Read>:
8000aa3c:	c0 08       	rjmp	8000aa3c <_handle_DTLB_Protection_Read>
	...

8000aa40 <_handle_DTLB_Protection_Write>:
8000aa40:	c0 08       	rjmp	8000aa40 <_handle_DTLB_Protection_Write>
	...

8000aa44 <_handle_DTLB_Modified>:
8000aa44:	c0 08       	rjmp	8000aa44 <_handle_DTLB_Modified>
	...

8000aa50 <_handle_ITLB_Miss>:
8000aa50:	c0 08       	rjmp	8000aa50 <_handle_ITLB_Miss>
	...

8000aa60 <_handle_DTLB_Miss_Read>:
8000aa60:	c0 08       	rjmp	8000aa60 <_handle_DTLB_Miss_Read>
	...

8000aa70 <_handle_DTLB_Miss_Write>:
8000aa70:	c0 08       	rjmp	8000aa70 <_handle_DTLB_Miss_Write>
	...

8000ab00 <_handle_Supervisor_Call>:
8000ab00:	49 3f       	lddpc	pc,8000ab4c <ipr_val+0x10>
	...

8000ab04 <_int0>:
8000ab04:	30 0c       	mov	r12,0
8000ab06:	f0 1f 00 13 	mcall	8000ab50 <ipr_val+0x14>
8000ab0a:	58 0c       	cp.w	r12,0
8000ab0c:	f8 0f 17 10 	movne	pc,r12
8000ab10:	d6 03       	rete

8000ab12 <_int1>:
8000ab12:	30 1c       	mov	r12,1
8000ab14:	f0 1f 00 0f 	mcall	8000ab50 <ipr_val+0x14>
8000ab18:	58 0c       	cp.w	r12,0
8000ab1a:	f8 0f 17 10 	movne	pc,r12
8000ab1e:	d6 03       	rete

8000ab20 <_int2>:
8000ab20:	30 2c       	mov	r12,2
8000ab22:	f0 1f 00 0c 	mcall	8000ab50 <ipr_val+0x14>
8000ab26:	58 0c       	cp.w	r12,0
8000ab28:	f8 0f 17 10 	movne	pc,r12
8000ab2c:	d6 03       	rete

8000ab2e <_int3>:
8000ab2e:	30 3c       	mov	r12,3
8000ab30:	f0 1f 00 08 	mcall	8000ab50 <ipr_val+0x14>
8000ab34:	58 0c       	cp.w	r12,0
8000ab36:	f8 0f 17 10 	movne	pc,r12
8000ab3a:	d6 03       	rete

8000ab3c <ipr_val>:
8000ab3c:	00 00 01 04 40 00 01 12 80 00 01 20 c0 00 01 2e     ....@...... ....
8000ab4c:	80 00 41 90 80 00 22 90 00 00 00 00 00 00 00 00     ..A...".........
	...

Disassembly of section .fini:

8000ac00 <_fini>:
8000ac00:	eb cd 40 40 	pushm	r6,lr
8000ac04:	48 26       	lddpc	r6,8000ac0c <_fini+0xc>
8000ac06:	1e 26       	rsub	r6,pc
8000ac08:	c0 48       	rjmp	8000ac10 <_fini+0x10>
8000ac0a:	00 00       	add	r0,r0
8000ac0c:	80 00       	ld.sh	r0,r0[0x0]
8000ac0e:	ab ea       	*unknown*
8000ac10:	f0 16 00 02 	mcall	r6[8]
8000ac14:	e3 cd 80 40 	ldm	sp++,r6,pc
